<apex:component Controller="CustomerOrderCtrl">
    <style>
        .modal-dialog {
            width: 1100px;
            -moz-box-shadow: 10px 10px 5px #6F6868;
            -webkit-box-shadow: 10px 10px 5px #6F6868;
            box-shadow: 10px 10px 5px #6F6868;
        }
        
        .modal-backdrop.in {
            height: 2000px !important;
        }
        
        .form-control {
            width: 100%; 
        }
        
        .bg_container {
            min-height: 650px;
        }
        
        .popup_container {
            border: 1px solid #cccccc;
            font-family: Arial;
        }
        
        .popup_container .popupleft{
            min-height: 0 !important;
        }
        
        .popup_container .popupleft .popupleft_container {
            overflow: hidden;
            /*border-bottom: 1px solid #cccccc;*/
            padding-bottom: 40px;
            transition: all 0.5s ease;
        }
        
        .popup_container .popupleft .popupleft_container#topsection {
            min-height: 618px;
        }
        
        .popup_container .popupright {
            padding-bottom: 5px;
            border-left: 1px solid #cccccc;
        }
        
        .popup_container .popupleft h1.letpanel_heading {
            font-size: 18px;
            font-weight: bold;
            color: #00AEEF  !important;
            float: left;
            width: 85%;
            margin: 20px 0 10px 0;
        }
        
        .popup_container .popupleft h1.letpanel_heading .helptip {
            position: absolute;
            right: 49px;
            top: -5px;
            font-size: 24px;
        }
        
        .popup_container .popupleft .goldbox {
            min-height: 96px;
            border : none;
            border-top: 1px solid #F6F7F9;
            padding: 20px;
            max-width: initial;
        }
        
        .popup_container .popupleft .goldbox:hover{
            background-color: #ECF0F1;
        }
        
        .popupright .right_panel_heading {
            float: left;
            font-family: 'Open Sans', sans-serif;
            font-weight: lighter !important;
            text-transform: capitalize;
            font-size: 22px !important;
            color: #414449;
        }
        
        .popupright .right_heading_container {
            padding-left: 0;
            padding-right: 0;
            margin-bottom: 10px;
        }
        
        .popupright .tabconainer {
            clear: left;
            /*border-bottom: 1px solid #cccccc;*/
            padding-bottom: 10px;
        }
        
        .popupright .tabconainer .addmoreinfo {
            background: #f79420;
            width: 100%;
            margin-top: 10px;
        }
        
        .popupright .tabconainer.noborder {
            border-bottom: 0px solid #cccccc;
        }
        
        .popupright .tabconainer .option_field {
            clear: both;
        }
        
        /*.popupright .tabconainer .option_field.hideit {
            display: none;
        }*/
        
        .popupright .tabconainer form .form-group {
            width: 43%;
            float: left;
            margin: 2px;
            position: relative;
        }
        
        .popupright .tabconainer form .form-group.small {
            width: 10%;
        }
        
        .popupright .tabconainer form .form-group.small2 {
            width: 22%;
            color: #D2D2D2;
            font-size: 15px;
            padding-top: 8px;
        }
        
        .popupright .tabconainer form .form-group.half {
            width: 43%;
        }
        
        .popupright .tabconainer form .form-group.large {
            width: 87%;
        }
        
        .popupright .tabconainer form .form-group.medium {
            width: 53%;
        }
        
        .popupright .tabconainer form .form-group input[type="text"],.popupright .tabconainer form .form-group input[type="email"],.popupright .tabconainer form .form-group select
            {
            border-radius: 0;
        }
        
        .popupright .tabconainer form .form-group select {
            padding-left: 5px;
        }
        
        .popupright .tabconainer form .form-group .checkbox {
            display: block;
        }
        
        .popupright .tabconainer form .form-group .checkbox .chk_tick .chksqure {
            font-size: 0px;
            height: 12px;
            width: 12px;
            margin: 3px;
            border-radius: 2px;
            background: #D8D8D8;
        }
        
        .popupright .tabconainer form .form-group .checkbox .chk_tick {
            width: 20px;
            height: 20px;
            border-radius: 4px;
            margin: 6px 15px;
        }
        
        .popupright .tabconainer form .form-group .checkbox .chked .chksqure{
            font-size: 0px !important;
            height: 12px;
            width: 12px;
            margin: 3px;
            border-radius: 2px;
            background: #71BF3E;
        }
        
        .popupright .tabconainer form .form-group .checkbox .chk_tick .chksqure{
            display: block;
        }
        
        .popupright .tabconainer form .form-group .checkbox .chk_txt {
            display: block;
            float: left;
            padding-top: 5px;
            padding-left: 8px;
        }
        
        .popupright .tabconainer form .lable_fields.chkbox p {
            padding-top: 10px;
        }
        
        .popupright .tabconainer form .lable_fields {
            float: left;
            width: 34%;
            margin-top: 5px;
        }
        
        .popupright .tabconainer form .lable_fields .form_lable_icons {
            display: block;
            float: left;
            width: 30px;
            height: 30px;
            background: url("{!URLFOR($Resource.Images, 'circlefornumber.png')}") no-repeat;
        }
        
        .popupright .tabconainer form .lable_fields .form_lable_icons.text {
            font-size: 10px;
            padding-top: 9px;
        }
        
        .popupright .tabconainer form .lable_fields .form_lable_icons {
            color: #f89420;
            text-align: center;
            padding-top: 7px;
            font-size: 16px;
        }
        
        .popupright .tabconainer form .lable_fields p {
            padding: 5px 5px 5px 5px;
            font-weight: bold;
            float: left;
        }
        
        .popupright .tabconainer form .form_fields {
            float: right;
            width: 66%;
            position: relative;
        }
        
        .popupright .tabconainer form .form_fields .helplink {
            position: absolute;
            right: 13px;
            top: -2px;
            color: #f89420;
            font-size: 20px;
        }
        
        .popupright .tabconainer form .form_fields {
            position: relative;
        }
        
        .popupright .tabconainer form .form_fields a.bookmarklink {
            position: absolute;
            right: 6px;
            top: 6px;
            font-size: 19px;
            color: #f1f1f1;
        }
        
        .popupright .tabconainer form .form-group .form-control:focus {
            border-color: #f89420;
            outline: 1;
            border: 2px solid #00AEEF;
            -webkit-box-shadow: none;
            -moz-box-shadow: none;
            box-shadow: none;
        }
        
        .grayBtn,
        .grayBtn:hover,
        .grayBtn:focus,
        .grayBtn:active {
            background: #727983;
            color: #ffffff;
            border: none !important;
            font-weight: bold;
            border-radius : 1px;
            transition: box-shadow 0.2s cubic-bezier(0.4, 0, 0.2, 1);
            transition-delay: 0.2s;
            box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);
        }
        
        .greenBtn,
        .greenBtn:hover,
        .greenBtn:focus,
        .greenBtn:active {
            background: #71BF3E;
            color: #ffffff;
            border: none !important;
            font-weight: bold;
            border-radius : 1px;
            transition: box-shadow 0.2s cubic-bezier(0.4, 0, 0.2, 1);
            transition-delay: 0.2s;
            box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);
        }
        
        .popupright .savecancle_btncntnr {
            float: right;
            margin-top: 14px;
        }
        
        .popupright .tabbtn_container {
            clear: both;
            text-align: left;
            padding: 10px 0 0 10px !important;
        }
        
        .popupright .tabbtn_container .btn {
            width: 49%;
            border: none;
            color: #000;
            background-color: #fff;
            border-radius: 0px;
            padding: 10px 15px;
            margin-right: -4px;
            outline: none;
        }
        .popupright .tabbtn_container .activeType{
            background-color: #B7BEC6;
            color: #fff;
        }
        
        .popup_container .popupleft .goldbox .leftgoldbox {
            width: 32px;
            height: 32px;
            background: #FFF;
            padding: 0px;
            float: left;
        }
        
        .popup_container .popupleft .goldbox .leftgoldbox .starimg{
            height: 35px; 
            width: 35px; 
            padding: 5px; 
            border-radius: 5px; 
            background: #373C40;
            margin-left: 2px;
        }
        
        .popup_container .popupleft .goldbox .rightgoldbox {
            float: left;
            color: #000;
            position: relative;
            width: 180px;
            margin-left: 30px;
        }
        
        /* Added by richa */
        .popup_container .popupleft .goldbox .rightgoldboxML {
            margin-left: 0px;
        }
        /* Added by richa */
        
        .popup_container .popupleft .goldbox .rightgoldbox.type2 {
            width: 60%;
        }
        
        .popup_container .popupleft .goldbox .leftgoldbox .star_container {
            width: 50px;
            text-align: center;
            font-size: 25px;
            color: #fff;
            margin-left: 5px;
        }
        
        .popup_container .popupleft .goldbox .rightgoldbox p {
            padding: 0 2px;
            margin: 0;
            font-size: 11px;
            color: #939CA9;
        }
        
        .popup_container .popupleft .goldbox.exists .leftgoldbox {
            width: 44px;
            height: 44px;
            background: #FFF;
            padding: 0px;
            float: left;
        }
        
        .popup_container .popupleft .goldbox.exists .leftgoldbox .starimg{
            height: 44px; 
            width: 44px; 
            padding: 5px; 
            border-radius: 5px; 
            background: #373C40;
            margin-left: 2px;
        }
        
        .popup_container .popupleft .goldbox .rightgoldbox p.cust_name {
            font-size: 18px;
            color: #939CA9;
        }
        
        .popup_container .popupleft .goldbox .rightgoldbox p.cust_name.address {
            margin-left: 10px;
            font-family: 'Open Sans', sans-serif;
            font-weight: 600;
            text-transform: capitalize;
            font-size: 13px;
            color: #939CA9;
        }
        
        .popup_container .popupleft .goldbox .rightgoldbox p.cust_name.address .titletxt
            {
            font-size: 16px;
            text-decoration: underline;
        }
        
        .popup_container .popupleft .goldbox .rightgoldbox .boxedit {
            position: absolute;
            right: -24px;
            top: 5px;
            display: block;
            width: 21px;
        }
        
        .popup_container .popupleft .goldbox .rightgoldbox .boxedit img {
            max-width: 100%;
        }
        
        .popup_container .popupleft .goldbox .rightgoldbox .boxenum {
            position: absolute;
            right: -26px;
            top: 31px;
            display: block;
            width: 30px;
            height: 30px;
            background: url("{!URLFOR($Resource.Images, 'circlefornumber.png')}") no-repeat;
            background-size: 100%;
            color: #f79420;
            font-weight: bold;
            font-size: 12px;
            text-align: center;
            text-decoration: none;
            padding-top: 8px;
        }
        
        .popup_container .popupleft .goldbox .bottomgoldbox {
            width: 100%;
            height: 15px;
            background: #666666;
            clear: both;
            color: #fff;
            font-size: 11px;
            text-align: right;
        }
        
        .popupright .tabconainer form .controls {
            position: absolute;
            right: -146px;
            height: 33px;
            width: 200px;
            margin-top: 2px;
            font-size: 18px;
            padding: 4px 0;
            display: none;
        }
        
        .popupright .tabconainer form .controls1 {
            position: relative;
            right: -91%;
            top: -31px;
        }
        
        .popupright .tabconainer form .controls .fa-question-circle {
            color: #B7BEC6;
        }
        
        .popupright .tabconainer form .controls .fa-times {
            color: #9E9E9E;
        }
        
        .add_info_dropdown {
            top: 96%;
            right: auto;
            left: 0;
        }
        
        .add_info_dropdown li a {
            text-decoration: none;
            padding: 10px 20px;
        }
        
        .popupright .tabconainer form .form-group.onehalf {
            width: 25%;
        }
        
        .popupright .tabconainer form .form-group.threehalf {
            width: 64%;
        }
        
        .popupright .tabconainer form .form-group .chkbox_custom {
            overflow: hidden;
            border: 1px solid #cccccc;
            max-width: 100px;
        }
        
        .popupright .tabconainer form .form-group .chkbox_custom.disabled .leftchked.checked
            {
            background: url("{!URLFOR($Resource.Images, 'chkpngleft_trimmed_disabled.png')}")
                no-repeat;
            color: #FFFFFF;
            background-size: 100% 100%;
            font-size: 12px;
            font-weight: bold;
            text-align: center;
            padding-top: 9px;
            padding-right: 5px;
        }
        
        .popupright .tabconainer form .form-group .chkbox_custom.disabled .leftchked
            {
            background: none;
            color: #FFFFFF;
            background-size: 100% 100%;
            font-size: 12px;
            font-weight: bold;
            text-align: center;
            padding-top: 9px;
            padding-right: 5px;
        }
        
        .popupright .tabconainer form .form-group .chkbox_custom.disabled .rightchked.checked
            {
            background: url("{!URLFOR($Resource.Images, 'chkpngright_trimmed_disabled.png')}")
                no-repeat;
            color: #FFFFFF;
            background-size: 100% 100%;
            font-size: 12px;
            font-weight: bold;
            text-align: center;
            padding-top: 10px;
            padding-left: 5px;
        }
        
        .popupright .tabconainer form .form-group .chkbox_custom.disabled .rightchked
            {
            background: none;
            color: #FFFFFF;
            background-size: 100% 100%;
            font-size: 12px;
            font-weight: bold;
            text-align: center;
            padding-top: 10px;
            padding-left: 5px;
        }
        
        .popupright .tabconainer form .form-group .chkbox_custom .leftchked {
            width: 55%;
            float: left;
            height: 34px;
            background: url("{!URLFOR($Resource.Images, 'chkpngleft_trimmed_disabled.png')}")
                no-repeat;
            color: #FFFFFF;
            background-size: 100% 100%;
            font-size: 12px;
            font-weight: bold;
            text-align: center;
            padding-top: 9px;
            padding-right: 5px;
            cursor: pointer;
        }
        
        .popupright .tabconainer form .form-group .chkbox_custom .rightchked {
            width: 55%;
            float: left;
            height: 34px;
            background: url("{!URLFOR($Resource.Images, 'chkpngright_trimmed_disabled.png')}")
                no-repeat;
            color: #FFFFFF;
            background-size: 100% 100%;
            font-size: 12px;
            font-weight: bold;
            text-align: center;
            padding-top: 10px;
            padding-left: 5px;
            cursor: pointer;
            margin-left: -10px;
            margin-top: -1px;
        }
        
        .popupright .tabconainer form .form-group .chkbox_custom .leftchked.checked
            {
            background: url("{!URLFOR($Resource.Images, 'chkpngleft_trimmed_blue.png')}") no-repeat;
            color: #FFFFFF;
            background-size: 100% 100%;
            font-size: 12px;
            font-weight: bold;
            text-align: center;
            padding-top: 9px;
            padding-right: 5px;
        }
        
        .popupright .tabconainer form .form-group .chkbox_custom .rightchked.checked
            {
            background: url("{!URLFOR($Resource.Images, 'chkpngright_trimmed_blue.png')}") no-repeat;
            color: #FFFFFF;
            background-size: 100% 100%;
            font-size: 12px;
            font-weight: bold;
            text-align: center;
            padding-top: 10px;
            padding-left: 5px;
        }
        
        .popupright .tabconainer form .form-group .smschkbox { 
            margin-top: 0px;
        }
        
        .popupright .tabconainer form .form-group .smschkbox .chk_tick {
            width: 20px !important;
            height: 20px !important;
            border-radius: 4px;
            margin: 3px 15px;
        }
        .popupright .tabconainer form .form-group .smschkbox .chk_tick .chksqure{
            font-size: 0px;
            height: 12px;
            width: 12px;
            margin: 3px;
            border-radius: 2px;
            background: #D8D8D8;
        }
        
        .popupright .tabconainer form .form-group .smschkbox .chked .chksqure{
            font-size: 0px !important;
            height: 12px;
            width: 12px;
            margin: 3px;
            border-radius: 2px;
            background: #71BF3E;
        }
        
        .redborder {
            border: 2px solid red;
        }
        
        .orange {
            color: orange;
        }
        
        .yellow{
            color: #D7BE1C;
        }
        
        .leftBorderNone{
            border-left: none !important;
        }
        .edit_modal-dialog{
            width: 800px;
        }
        
        .right-inner-addon {
            position: relative;
        }
        .right-inner-addon input {
            padding-right: 30px;
        }
        .right-inner-addon i {
            position: absolute;
            right: 0px;
            padding: 8px 12px;
            pointer-events: none;
        }
        
        .addMoreInfoSection{
            width: 60%;
            margin-left: 34%;
            position: relative;
            margin-bottom: 30px;
        }
        
        .addmoreinfoBtn, 
        .addmoreinfoBtn:hover, 
        .addmoreinfoBtn:focus, 
        .addmoreinfoBtn:active{
            border: none;
            color: #ffffff;
            font-weight: bold;
            border-radius: 1px;
            transition: box-shadow 0.2s cubic-bezier(0.4, 0, 0.2, 1);
            transition-delay: 0.2s;
            box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);
            outline: none;
            width: 205px;
            background: #00AEEF;
                    
        }
        
        .customerTypeSection{
            background-color: #E6EBEC;
            padding: 10px 0 0 10px;
            height: 48px;
            margin-bottom: 10px;
        }
        
        .FC9{
            color: #E80000;
        }
        .FC5{
            color: #B7BEC6;
        }
        a .fa{
            margin-top: 0;
        }
        .sameBillineAddress{
            height: 0px;
            -webkit-transition: height .5s; 
            transition: height .5s;
            overflow: hidden;
        }
        .differentBillingAddress{
             height: 261px;
            -webkit-transition: height .5s; 
            transition: height .5s;
            display : block !important;
        }
        .disableHomeSmsChkBx{
        	pointer-events: none;
        }
        /* .popupright .tabconainer .option_field .MT21{
            margin-top: 21px;

        } */ 
        .popupinside .popupright .tabconainer form .MT25{
			margin-top: 25px;
		}      
		.reqForBusiness {
			width: 30%;
   			float: right;
		}
        </style>
        
    
    <script>
            $(document).ready(function () {
                $('.Customer-Suggestion-overlay').mouseover(function() {
                    $('.Customer-Suggestion-overlay').show(); 
                })
                $('.Customer-Suggestion-overlay').mouseout(function() {
                    $('.Customer-Suggestion-overlay').hide(); 
                })
            });
            
            
            
        </script>

    <script>
     
        var addEditCustomerModule= angular.module('addEditCustomerModule', [] );
         
         addEditCustomerModule.controller('addEditCustomerController', function ($scope, Notification,addEditCustomerService, $timeout, $q) {
                                // added by hitesh gupta 
                                if(angular.isDefined($scope.CustomerModal))
                                {
                                
                                }else{
                                    $scope.CustomerModal = {};
                                }
                                
                                $scope.handler = 'pop';
                                  
                                if(angular.isDefined($scope.selectedObject))
                                {
                                    // $scope.selectedObject={};   
                                }else{
                                  $scope.selectedObject = {};
                                 } 
                                             
                                $scope.selectedObject.ChangeRecords=0;
                                $scope.CustomerModal.FirstCall=0;
                              
                              
                             
                              
                              $scope.$on('AddCustomerEvent', function () {    
                                     debug('AddNewCustomer');   

                                     $scope.CustomerModal.addNewCustomer();
  
                               });
                                  
                                  
                                  
                            $scope.$on('LoadMasterData',function(){
                                 debug('Load'); 

                                 $scope.CustomerModal.initUnit = {Year:null, Make:null,Model:null, SubModel:null,VIN:'',Plate:'',Mileage:null,Color:''};
                                 $scope.CustomerModal.loadCustomerMasterData();
                            });
                            
                            
                            $scope.$on('EditCustomerEvent',function(event, customerId)
                            {
                                debug(customerId);

                                $scope.CustomerModal.editCustomer(customerId);
                            });   
                            
                             $scope.$on('EditCustomerRelatedEvent',function(event, customerId)
                            {
                                debug(customerId);

                                $scope.CustomerModal.editCustomer(customerId);
                            }); 
                            
                          
                           $scope.CustomerModal.showInfoOverlay = function(event,index) {
                                var currentPageName = '{!$CurrentPage.Name}';
                                if(currentPageName.indexOf('NewCustomerOrder') == -1 ){
                                    return;
                                }
                                
                                var targetEle = angular.element('#' + event + index);
                                var scrolledTop = -($('.modal-content').offset().top - 30);
                                //debug(targetEle);

                                var elementWidth = targetEle.width();
                                debug(targetEle);

                                debug(targetEle.offset().top);
                                /*if(targetEle.width() > targetEle.parent().width()){
                                    elementWidth = targetEle.parent().width() - 15;
                                }*/
                                //debug("width:--- "+elementWidth);
                                angular.element('.Customer-Suggestion-overlay').css('top',targetEle.offset().top + scrolledTop - 40);
                                angular.element('.Customer-Suggestion-overlay').css('left','280px');
                                angular.element('.Customer-Suggestion-overlay').show();
                                
                                $scope.CustomerModal.SimilarCustomerSelect={
                                    Value:$scope.CustomerModal.SimilarCustomers[index].Id,
                                    Name:$scope.CustomerModal.SimilarCustomers[index].CustomerName
                                }
                                
                                
                                //debug($scope.CustomerOrder.customer);
                            }
                             $scope.CustomerModal.hideCustomerInfoOverlay = function() {
                                    angular.element('.Customer-Suggestion-overlay').hide();
                                }
                                                
                            
                             
                             
                             $scope.CustomerModal.loadCustomerMasterData= function()
                             {
                             
                                      addEditCustomerService.getCustomerAllMasterData()
                                                      .then(function (CustomerMasterData) {
                                                       
                                                            //declaration
                                                            
                                                            $scope.CustomerModal.CustomerMasterData = CustomerMasterData;
                                                             debug($scope.CustomerModal.CustomerMasterData) ;
                                                            var Curryear= new Date().getFullYear();
                                                            var curr=parseInt(Curryear);
                                                            $scope.CustomerModal.BirthYears=[];
                                                            $scope.CustomerModal.BirthDays=[];
                                                            $scope.CustomerModal.ModelYears=[];

                                                            



                                                            for( i=1900 ; i < curr; i++ )
                                                            {
                                                                var year={year:i};
                                                                $scope.CustomerModal.BirthYears.push(year);
                                                
                                                            }

                                                            for(i = curr -100 ; i <  curr + 3 ; i++ )
                                                            {
                                                                var year={modelyear:i.toString()};
                                                                
                                                                $scope.CustomerModal.ModelYears.push(year);
                                                            
                                                            }

                                                            
                                                            $scope.CustomerModal.ClearAlldata();
                                                            $scope.CustomerModal.IsEditMode = false;
                                                           
                                                        
                    

                                                        
                                                            
                                                 },
                    
                    
                    
                    
                                                 function (errorSearchResult) {          
                                                     responseData = errorSearchResult;  
                                                });
                             
                             
                             }
                             
                             $scope.CustomerModal.addNewCustomer=function(){
                             
                                            $scope.CustomerModal.ClearAlldata();
                                            
                                            $scope.CustomerModal.IsEditMode = false;
                                                    angular.element('#pop').modal({
                                                      backdrop: 'static',
                                                      keyboard: false 
                                                    });
                             
                             
                             }
                             
                             
                             $scope.CustomerModal.editCustomer =function(customerId){
                                                addEditCustomerService.editCustomerDetails(customerId)
                                                      .then(function (CustomerData) {
                                                        debug(CustomerData)

                                                         $scope.CustomerModal.IsEditMode = true;
                                                        $scope.CustomerModal.CustomerInfo=CustomerData[0]
                                                         $scope.CustomerModal.SetCustomerFormDefault();
                                                        $scope.CustomerModal.CustomerValidationCOU =[];
                                                        $scope.CustomerModal.CustumerUnitModal=[];
                                                         angular.element('#pop').modal({
                                                         backdrop: 'static',
                                                         keyboard: false 
                                                            });
                                                      });
                             }
                                     

                                
                                $scope.CustomerModal.ClearAlldata =function()
                                {
                                                

                                                $scope.CustomerModal.Country=$scope.CustomerModal.CustomerMasterData.CountryList;
                                                $scope.CustomerModal.ShippingCountry=$scope.CustomerModal.CustomerMasterData.CountryList;
                                                $scope.CustomerModal.PriceLevel=$scope.CustomerModal.CustomerMasterData.PriceLevelList;
                                                $scope.CustomerModal.SalesTax=$scope.CustomerModal.CustomerMasterData.SalesTaxList;
                                                $scope.CustomerModal.UnitMakeSelected=[];
                                                $scope.CustomerModal.UnitModel=[];
                                                $scope.CustomerModal.UnitModelSelected=[];
                                                $scope.CustomerModal.UnitYearSelected=[];
                                                $scope.CustomerModal.SimilarCOU ={};
                                                $scope.CustomerModal.SimilarCustomers=[];
                                                $scope.CustomerModal.SetDafaultBillingCountry();
                                                $scope.CustomerModal.SetDafaultBillingState();
                                                $scope.CustomerModal.SetDafaultPriceLevel();
                                                $scope.CustomerModal.SetDafaultSalesTax();


                                                $scope.CustomerModal.UnitMake=$scope.CustomerModal.CustomerMasterData.UnitMakeList;
                                                $scope.CustomerModal.VendorSelectedSalesTax={};
                                                
                                                // Remove after
                                                $scope.CustomerModal.BirthyearSelected={};
                                                $scope.CustomerModal.BirthmonthSelected={};
                                                $scope.CustomerModal.BirthdaySelected={};
                                                
                                                // End remove
                                                
                                                
                                                $scope.CustomerModal.SetDefaultBirthday();

                                                 $scope.CustomerModal.tabIndexValue=500;

                                                
                                                
                                             $scope.CustomerModal.AdditionalFieldsInfo = {
                                                OtherPhone:{isPrimary: false, label:'{!JSENCODE($Label.Other_Phone)}', fieldId:'otherPhoneId', displayType: 'Both'},
                                                OtherEmail:{isPrimary: false, label:'{!JSENCODE($Label.Other_Email)}', fieldId:'otherEmail' , displayType: 'Both'},
                                                Birthdate : {isPrimary: false, label:'{!JSENCODE($Label.Label_Birthday)}', fieldId:'birthMonth', displayType: 'Individual'},
                                                FacebookLink : {isPrimary: false, label: '{!JSENCODE($Label.Label_Facebook)}', fieldId:'facebookLink', displayType: 'Both'},
                                                TwitterLink : {isPrimary: false, label: '{!JSENCODE($Label.Label_Twitter)}', fieldId:'twitterLink', displayType: 'Both'},
                                                LinkedInLink : {isPrimary: false, label: '{!JSENCODE($Label.Label_LinkedIn)}', fieldId:'LinkedinLink', displayType: 'Both'},
                                                CustomerUnit: {isPrimary: false, label: '{!JSENCODE($Label.Label_Customer_Unit)}', displayType: 'Both'},
                                                Company : {isPrimary: false, label: '{!JSENCODE($Label.Label_Company)}', fieldId:'companyName', displayType: 'Individual'},
                                                JobTitle : {isPrimary: false, label: '{!JSENCODE($Label.Job_Title)}', fieldId:'jobTitle', displayType: 'Individual'},
                                                VIPLevel : {isPrimary: false, label: '{!JSENCODE($Label.VIP_Level)}', displayType: 'Both'},
                                                PriceLevel : {isPrimary: false, label: '{!JSENCODE($Label.Label_Price_Level)}', fieldId:'priceLevelDropDown', displayType: 'Both'},
                                                
												IsVendor : {isPrimary: false, label: '{!JSENCODE($Label.Vendor_Object_Display_Label)}', fieldId:'vendorDropDown', displayType: 'Both'},
                                                Active:{isPrimary: false, label: '{!JSENCODE($Label.Label_Active)}', displayType: 'Both'}
                                            } 
                                            


                                            
                                            $scope.CustomerModal.CustomerValidation = {
                                            FirstName: {isError : false, ErrorMessage:'', Type:'firstName,required,Maxlength,Minlength', Maxlength: 80, Minlength: 2},
                                            LastName : {isError : false, ErrorMessage:'', Type:'lastName,required,Maxlength,Minlength', Maxlength: 80, Minlength: 2},
                                            BusinessName: {isError : false, ErrorMessage:'', Type:'required,Maxlength,Minlength', Maxlength: 80, Minlength: 2},
                                            HomeEmail : {isError : false, ErrorMessage:'', Type:'email'},
                                            WorkEmail : {isError : false, ErrorMessage:'', Type:'email'},
                                            OtherEmail : {isError : false, ErrorMessage:'', Type:'email'},
                                            HomeNumber : {isError : false, ErrorMessage:'',  Type:'phone,Maxlength,Minlength', Maxlength: 10, Minlength: 10},
                                            WorkNumber : {isError : false, ErrorMessage:'',  Type:'phone,Maxlength,Minlength', Maxlength: 10, Minlength: 10},
                                            OtherPhone : {isError : false, ErrorMessage:'',  Type:'phone,Maxlength,Minlength', Maxlength: 10, Minlength: 10},
                                            BillingPostalCode : {isError : false, ErrorMessage:'',  Type:'PostalCode,Maxlength', Maxlength: 10},
                                            ShippingPostalCode : {isError : false, ErrorMessage:'',  Type:'PostalCode,Maxlength', Maxlength: 10}
                                         }

                                 
                                         $scope.CustomerModal.CustomerValidationCOU = [{
                                                                                        VIN:{isError : false, ErrorMessage:'',Type:'VIN,Required'},

                                                                                        Mileage:{isError : false, ErrorMessage:'' ,Type:'Numeric'},
                                                                                        Make :{isError : false, ErrorMessage:'' ,Type:'Required'},
                                                                                        Model :{isError : false, ErrorMessage:'' ,Type:'Required'}
                                                                                       }];
                                   
                                   
                                   
                                   
                                   
                                        $scope.CustomerModal.CustomerInfo={};
                                        $scope.CustomerModal.CustomerInfo={IsBothAddressSame:true,IsCustomer:true,Active:true,WorkNumberSMS:false,MobileNumberSMS:false,HomeNumberSMS:false, IsVendor:false};
                                        /*   angular.element("#sameAsBA").addClass("chked");
                                        angular.element("#billingaddress").slideUp(); */

                                        $scope.CustomerModal.CustomerInfo.Type = 'Individual';

                                        $scope.CustomerModal.CustumerUnitModal = [
                                            {Year:null, Make:null,Model:null, SubModel:null,VIN:'',Plate:'',Mileage:null,Color:''}
                                        ];
                                           
                                        
                                        
                                        
                            
                         
                                    

                          }
                          
                          
                          
                          
                          //hitesh
                          $scope.CustomerModal.manageAdditionalFields = function(key){
                                var result = false;
                                
                                if($scope.CustomerModal.AdditionalFieldsInfo[key].isPrimary ==  false){
                                    result  = true;
                                }
                                if($scope.CustomerModal.IsEditMode == true  && key == 'CustomerUnit'){
                                    result  = false;
                                }
                                if($scope.CustomerModal.CustomerInfo.Type == 'Business' && $scope.CustomerModal.AdditionalFieldsInfo[key].displayType == 'Individual' ){
                                    result  = false;
                                }
                                return result;
                          
                          }
                        
                      

                        
                        $scope.CustomerModal.SetCustomerFormDefault = function()
                        {                   debug(' $scope.CustomerModal.SetCustomerFormDefault line : 1027');

                                            //clear Cou Data on Edit
                                            
                                            
                                            //set Address defaults
                                            if($scope.CustomerModal.CustomerInfo.BirthYear !=null && $scope.CustomerModal.CustomerInfo.BirthMonth !=null && $scope.CustomerModal.CustomerInfo.BirthDay !=null)
                                            {
                                                
                                                        $scope.CustomerModal.BirthyearSelected={year:$scope.CustomerModal.CustomerInfo.BirthYear};
                                                        $scope.CustomerModal.BirthmonthSelected=$scope.CustomerModal.CustomerInfo.BirthMonth
                                                        
                                                        $scope.CustomerModal.ChangeMonth();
                                                        $scope.CustomerModal.BirthdaySelected ={day: $scope.CustomerModal.CustomerInfo.BirthDay};
                                                                

                                                        
                                            }

                                            if($scope.CustomerModal.CustomerInfo.BillingCountry !='' )

                                            {
                                                
                                                
                                                
                                                for(i=0;i < $scope.CustomerModal.CustomerMasterData.CountryList.length ; i++)


                                                    {           
                                                            
                                                            if($scope.CustomerModal.CustomerMasterData.CountryList[i].CountryName == $scope.CustomerModal.CustomerInfo.BillingCountry )

                                                            {
                                                               $scope.CustomerModal.SelectedCountry=$scope.CustomerModal.CustomerMasterData.CountryList[i];




                                                            }

                                                    }
                                                    
                                                 $scope.CustomerModal.State= $scope.CustomerModal.CustomerMasterData.StateList[0].countryNameToStateMap[$scope.CustomerModal.SelectedCountry.CountryName];

                                                 
                                                 for(i=0;i < $scope.CustomerModal.State.length ; i++)

                                                    {           
                                                            if($scope.CustomerModal.State[i].StateName == $scope.CustomerModal.CustomerInfo.BillingState )
                                                            {
                                                               $scope.CustomerModal.SelectedState=$scope.CustomerModal.State[i];

                                                            }

                                                    }
                                                    // need to exprore more

                                           if($scope.CustomerModal.CustomerInfo.IsBothAddressSame)
                                            {
                                                angular.element("#sameAsBA").addClass("chked");
                                                angular.element("#billingaddress").slideUp();
                                                
                                            }
                                            else
                                            {
                                                debug('False');



                                                /* angular.element("#sameAsBA").removeClass("chked");
                                                angular.element("#billingaddress").slideDown(); */
                                         

                                                    for(i=0;i < $scope.CustomerModal.CustomerMasterData.CountryList.length ; i++)
                                                       {            

                                                            debug($scope.CustomerModal.CustomerInfo.ShippingCountry);
                                                               if($scope.CustomerModal.CustomerMasterData.CountryList[i].CountryName == $scope.CustomerModal.CustomerInfo.ShippingCountry )
                                                               {

                                                                  $scope.CustomerModal.SelectedShippingCountry = $scope.CustomerModal.CustomerMasterData.CountryList[i];
                                                               }
                                                       }
                                                       



                                                    $scope.CustomerModal.ShippingState= $scope.CustomerModal.CustomerMasterData.StateList[0].countryNameToStateMap[$scope.CustomerModal.SelectedShippingCountry.CountryName];
                                                    

                                                    for(i=0;i < $scope.CustomerModal.ShippingState.length ; i++)
                                                       {            

                                                               if($scope.CustomerModal.ShippingState[i].StateName == $scope.CustomerModal.CustomerInfo.ShippingState )
                                                               {

                                                                  $scope.CustomerModal.SelectedShippingState=$scope.CustomerModal.ShippingState[i];
                                                               }
                                                       }
                                                    }
                                            
                                            }
                                            else{
                                            
                                            
                                                $scope.CustomerModal.CustomerInfo.IsBothAddressSame=true;
                                            
                                            }
                                            


                                            if($scope.CustomerModal.CustomerInfo.PriceLevelId !=null ){
                                                    
                                                      for(i=0 ; i < $scope.CustomerModal.PriceLevel.length ; i++)
                                                         {
                                                                if( $scope.CustomerModal.PriceLevel[i].Id == $scope.CustomerModal.CustomerInfo.PriceLevelId)
                                                                {
                                                                    $scope.CustomerModal.SelectedPriceLevel=$scope.CustomerModal.PriceLevel[i];
                                                                }



                                                        }
                                                        $scope.CustomerModal.AdditionalFieldsInfo['PriceLevel'].isPrimary=true;


                                            }
                                            
                                            


                                            if($scope.CustomerModal.CustomerInfo.SalesTaxId !=null ){
                                                    
                                                      for(i=0 ; i < $scope.CustomerModal.SalesTax.length ; i++)

                                                        {
                                                            if( $scope.CustomerModal.SalesTax[i].Id == $scope.CustomerModal.CustomerInfo.SalesTaxId)

                                                                {   
                                                                    $scope.CustomerModal.SelectedSalesTax=$scope.CustomerModal.SalesTax[i];
                                                                    
                                                                }



                                                        }   
                                                        //$scope.CustomerModal.AdditionalFieldsInfo['TaxLevel'].isPrimary=true;       
                                            }

                                            //vedor


                                            
                                            if($scope.CustomerModal.CustomerInfo.IsVendor ==true)
                                            {
                                                if($scope.CustomerModal.CustomerInfo.PurchaseTaxId !=null ){
                                                        
                                                          for(i=0 ; i < $scope.CustomerModal.SalesTax.length ; i++)
                                                            {   
                                                                if( $scope.CustomerModal.SalesTax[i].Id == $scope.CustomerModal.CustomerInfo.PurchaseTaxId)
                                                                    {  
                                                                        $scope.CustomerModal.VendorSelectedSalesTax=$scope.CustomerModal.SalesTax[i];
                                                                        
                                                                    }
                                                            }   
                                                                
                                                }
                                                
                                            }
                                
                                 
                                 
                        


                                          angular.forEach( $scope.CustomerModal.AdditionalFieldsInfo, function(value, key) {

                                              if ( $scope.CustomerModal.CustomerInfo[key] !=null &&  $scope.CustomerModal.CustomerInfo[key] !=''){

                                                  
                                                    
                                                  $scope.CustomerModal.AdditionalFieldsInfo[key].isPrimary=true;
                                              
                                              }
                                              
                                          });
                                                
                                                

                                        $scope.CustomerModal.AdditionalFieldsInfo.Active.isPrimary = true;
                                            
                                            
                                                
                        
                        }
                        
                        // Functions

                        $scope.CustomerModal.isFeildDisplay = function(fieldLabel){
                            for(i=0; i<$scope.CustomerModal.PrimaryFields.length; i++){
                                if($scope.CustomerModal.PrimaryFields.label == fieldLabel){
                                    return true;
                                }
                            }
                            return false;
                        }   
                        
                        $scope.CustomerModal.AddSimilarCustomer=function()
                        {
                            
                                $scope.selectedObject.coHeaderId = "{!JSENCODE(URLENCODE($CurrentPage.parameters.id))}";

                                if($scope.selectedObject.coHeaderId == undefined){
                                    $scope.selectedObject.coHeaderId = '';
                                }
                                addEditCustomerService.addCustomer($scope.selectedObject.coHeaderId,$scope.CustomerModal.SimilarCustomerSelect.Value)
                                          .then(function (sucessCustomerResult) {
                                                $scope.CustomerModal.ReturnCustomerDetails($scope.CustomerModal.SimilarCustomerSelect.Value,$scope.CustomerModal.SimilarCustomerSelect.Name);
                                                 $scope.selectedObject.ChangeRecords=0;
                                                 angular.element('#pop').modal('hide');
                                 },
 
                                 function (errorSearchResult) {            
                                     responseData = errorSearchResult; 
                                });

                              
                            
                             
                        }
                        
                        $scope.CustomerModal.ReturnCustomerDetails=function(value,Name){
                             var Customer = { Name : Name, Value : value}
                            $scope.$emit('ReturnCustomer',Customer);
                        }
                        
                        $scope.CustomerModal.OnFocus = function(targetId){  
                                debug(targetId) ;                         



                            angular.element('.controls').hide();
                            angular.element('#'+targetId).show();
    

                        }
                        
                       $scope.CustomerModal.OnBlurVin = function(value){                            
                        
                                 $scope.CustomerModal.getSimilarCOUs(value);

    

                        }
                        

                         $scope.CustomerModal.ClearAndRemoveField = function(fieldrel, targetIdToFocus) {
                             var fieldsToClearOrRemove = $scope.CustomerModal.ManageIconCustomerDetails[0][fieldrel];
                             debug(fieldrel);

                             
                             if(fieldsToClearOrRemove.isPrimary == true) {
                                 for(i=0; i < fieldsToClearOrRemove.value.length;i++) {
                                     var key= fieldsToClearOrRemove.value[i].val ;
                                     if(fieldsToClearOrRemove.value[i].fieldType == 'text'){
                                        $scope.CustomerModal.CustomerInfo[key] = "";
                                     }else if(fieldsToClearOrRemove.value[i].fieldType == 'boolean'){
                                        $scope.CustomerModal.CustomerInfo[key] = false;
                                     }else if(fieldsToClearOrRemove.value[i].fieldType == 'lookup'){
                                        $scope.CustomerModal.CustomerInfo[key] = null;
                                     }else if(fieldsToClearOrRemove.value[i].fieldType == 'dropdown'){
                                     }
                                   
                                     
                                   // debug('******'+$scope.CustomerModal.CustomerInfo['IsVendor']);
                                    
                                    
                                     if(fieldrel == 'CountryState') {
                                        $scope.CustomerModal.SetDafaultBillingCountry();
                                        $scope.CustomerModal.SetDafaultBillingState();
                                     } else if(fieldrel == 'ShippingCountryState') {
                                        $scope.CustomerModal.SetDafaultShippingCountry();
                                        $scope.CustomerModal.SetDafaultShippingState();
                                     }
                                 }
                             } else {   
                                 for(i=0; i < fieldsToClearOrRemove.value.length;i++) {
                                     var key= fieldsToClearOrRemove.value[i].val ;
                                     if(fieldsToClearOrRemove.value[i].fieldType == 'text'){
                                        $scope.CustomerModal.CustomerInfo[key] = "";
                                     }else if(fieldsToClearOrRemove.value[i].fieldType == 'boolean'){
                                        debug('type boolean');

                                        $scope.CustomerModal.CustomerInfo[key] = false;
                                     }else if(fieldsToClearOrRemove.value[i].fieldType == 'lookup'){
                                        $scope.CustomerModal.CustomerInfo[key] = null;
                                     }else if(fieldsToClearOrRemove.value[i].fieldType == 'dropdown'){
                                     
                                     }
                                     
                                     
                                     
                                     if(fieldrel == 'PriceLevel') {
                                        
                                        $scope.CustomerModal.SetDafaultPriceLevel();
                                        
                                     }else if(fieldrel == 'TaxLevel') {
                                     
                                        $scope.CustomerModal.SetDafaultSalesTax();
                                     }
                                     else if(fieldrel == 'Birthdate')
                                     {
                                        $scope.CustomerModal.SetDefaultBirthday();
                                     }
                                    else if(fieldrel=='IsVendor')
                                      {
                                        $scope.CustomerModal.SetDafaultPurchaseTax();
                                     
                                     }
                                     
                                     $scope.CustomerModal.AdditionalFieldsInfo[key].isPrimary = false;
                                 }
                             }
                             debug('******'+$scope.CustomerModal.CustomerInfo['IsVendor']);
                             
                             angular.element('#' + targetIdToFocus).focus();                                 
                         }
                         


                          $scope.CustomerModal.ClearAndRemoveSectionField=function(index, fieldrel, fieldId)
                          {         

                                    //debug(fieldId);

                                    if(index==0){

                                        var fieldsToClearOrRemove = $scope.CustomerModal.ManageIconCustomerDetails[0][fieldrel];
                                        debug(fieldsToClearOrRemove);
                                        for(i=0; i < fieldsToClearOrRemove.value.length; i++)


                                        {   
                                            for(i=0; i < fieldsToClearOrRemove.value.length; i++) {
                                                var key = fieldsToClearOrRemove.value[i].val ;

                                                if(fieldsToClearOrRemove.value[i].fieldType == 'text'){
                                                    $scope.CustomerModal.CustumerUnitModal[0][key]= "";
                                                } else if(fieldsToClearOrRemove.value[i].fieldType == 'boolean'){
                                                    $scope.CustomerModal.CustumerUnitModal[0][key]= false;
                                                }else if(fieldsToClearOrRemove.value[i].fieldType == 'lookup'){
                                                
                                                    $scope.CustomerModal.CustumerUnitModal[0][key] = null;





                                                }else if(fieldsToClearOrRemove.value[i].fieldType == 'dropdown'){
                                                    
                                                }
                                                debug('Hello ' + key);

                                            }
                                        angular.element('#'+ fieldId).focus();
                                        }
                                    }
                                    else{


                                        $scope.CustomerModal.CustumerUnitModal.splice(index,1);
                                        $scope.CustomerModal.UnitMakeSelected.splice(index,1);
                                        $scope.CustomerModal.UnitModel.splice(index,1);
                                        $scope.CustomerModal.CustomerValidationCOU.splice(index,1);




                                    }

                          }




                         $scope.CustomerModal.getOtherSimilarCustomer= function(){
                                            
                      
                                                            var SimilarCustomerJson ={};

                                                            //SimilarCustomerJson=$scope.CustomerModal.CustomerInfo;
                                                            

                                                            angular.copy($scope.CustomerModal.CustomerInfo, SimilarCustomerJson);
                                                         
                                                            



                                                                if(SimilarCustomerJson['Type'] == 'Individual')
                                                                {   //debug('123');




                                                                    SimilarCustomerJson['BusinessName']="";
                                                                    SimilarCustomerJson['WorkEmail']="";
                                                                    SimilarCustomerJson['WorkNumber']="";
                                                                    
                                                                }
                                                                else
                                                                {




                                                                    SimilarCustomerJson['LastName']="";
                                                                    SimilarCustomerJson['HomeEmail']="";
                                                                    SimilarCustomerJson['HomeNumber']="";
                                                                
                                                                }
                                                                



                                                                debug(SimilarCustomerJson);

                                                                //debug($scope.CustomerModal.CustomerInfo);
                                                                
                                                                


                                addEditCustomerService.getOtherSimilarCustomer(JSON.stringify(SimilarCustomerJson))
                                          .then(function (SimilarCustomer) {
                                                //debug(SimilarCustomer);

                                                $scope.CustomerModal.SimilarCustomers = SimilarCustomer;
                                                  
                                 },


                                 function (errorSearchResult) {          
                                     responseData = errorSearchResult; 
                                });

                
            
                         }
                         


                             $scope.CustomerModal.getSimilarCOUs= function(Vin ){
                
                                addEditCustomerService.getSimilarCOUs(Vin)
                                          .then(function (SimilarCOU) {

                                                 //debug(SimilarCOU) ;


                                                $scope.CustomerModal.SimilarCOU = SimilarCOU;
                                                //debug($scope.CustomerModal.SimilarCOU); 
                                                 
                                 },


                                 function (errorSearchResult) {          
                                     responseData = errorSearchResult; 
                                });

                
            
                         }
                          


                      
                         
                         
                         
                         $scope.CustomerModal.validateForm = function(modelKey){
                            var validationObj = $scope.CustomerModal.CustomerValidation[modelKey];
                            var isError = false;
                            var ErrorMessage = '';
                            var phoneRegEx = /^([0-9\(\)\/\+ \-]*)$/;
                            var emailRegEx = /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/;
                            var postalCodeRegEx = /^[a-zA-Z\d\s\-]+$/;
                            var nameRegEx = /^[a-zA-Z\d\s]+$/;
                            console.log("customer info json");
                            	console.log($scope.CustomerModal.CustomerInfo);
                                    var validateType = validationObj.Type; 
                                    //debug('validateType=  '+validateType);
                                    if(validateType.indexOf('Minlength') > -1){
                                        if($scope.CustomerModal.CustomerInfo[modelKey] != undefined && $scope.CustomerModal.CustomerInfo[modelKey]!= '' && $scope.CustomerModal.CustomerInfo[modelKey].length < validationObj.Minlength){
                                            isError = true;
                                            ErrorMessage = '{!JSENCODE($Label.Min_Length_Should_Be)} '+validationObj.Minlength;
                                        }
                                    }

                                    if(validateType.indexOf('Maxlength') > -1){
                                        if($scope.CustomerModal.CustomerInfo[modelKey] != undefined && $scope.CustomerModal.CustomerInfo[modelKey]!= '' && $scope.CustomerModal.CustomerInfo[modelKey].length > validationObj.Maxlength){
                                            isError = true;
                                            ErrorMessage = '{!JSENCODE($Label.Max_Length_Should_Be)} '+validationObj.Maxlength;
                                        }
                                    }
                                    
                                    if(validateType.indexOf('firstName') > -1){
                                        if($scope.CustomerModal.CustomerInfo[modelKey] != undefined && $scope.CustomerModal.CustomerInfo[modelKey]!= '' && !nameRegEx.test($scope.CustomerModal.CustomerInfo[modelKey])){
                                            isError = true;
                                            ErrorMessage = '{!JSENCODE($Label.Label_Invalid)} {!JSENCODE($Label.Label_First)} {!JSENCODE($Label.Label_Name)}';

                                        }
                                    }
                                    
                                    if(validateType.indexOf('lastName') > -1){
                                        if($scope.CustomerModal.CustomerInfo[modelKey] != undefined && $scope.CustomerModal.CustomerInfo[modelKey]!= '' && !nameRegEx.test($scope.CustomerModal.CustomerInfo[modelKey])){
                                            isError = true;
                                            ErrorMessage = '{!JSENCODE($Label.Label_Invalid)} {!JSENCODE($Label.Label_Last)} {!JSENCODE($Label.Label_Name)}';

                                        }
                                    }
                                    
                                    if(validateType.indexOf('phone') > -1){
                                        if($scope.CustomerModal.CustomerInfo[modelKey] != undefined && $scope.CustomerModal.CustomerInfo[modelKey]!= '' && !phoneRegEx.test($scope.CustomerModal.CustomerInfo[modelKey])){
                                            isError = true;
                                            ErrorMessage = '{!JSENCODE($Label.Label_Invalid)} {!JSENCODE($Label.Label_Phone_Number)}';

                                        }
                                    }

                                    if(validateType.indexOf('email') > -1){
                                        debug('validating email');

                                        if($scope.CustomerModal.CustomerInfo[modelKey] != undefined && $scope.CustomerModal.CustomerInfo[modelKey]!= '' && !emailRegEx.test($scope.CustomerModal.CustomerInfo[modelKey])){
                                            isError = true;
                                            ErrorMessage = '{!JSENCODE($Label.Label_Invalid)} {!JSENCODE($Label.Label_Email)}';

                                        }
                                    }
                                    
                                    if(validateType.indexOf('PostalCode') > -1){
                                        debug('validating postal code');

                                        if($scope.CustomerModal.CustomerInfo[modelKey] != undefined && $scope.CustomerModal.CustomerInfo[modelKey]!= '' && !postalCodeRegEx.test($scope.CustomerModal.CustomerInfo[modelKey])){
                                            isError = true;
                                            ErrorMessage = '{!JSENCODE($Label.Label_Invalid)} {!JSENCODE($Label.Label_Postal)}';

                                        }
                                        debug(isError);
                                    }

                                    if(validateType.indexOf('required') > -1){
                                        if($scope.CustomerModal.CustomerInfo[modelKey] == undefined || $scope.CustomerModal.CustomerInfo[modelKey] == ''){
                                            isError = true;
                                            ErrorMessage = '{!JSENCODE($Label.Field_Is_Required)}';

                                        }
                                    }
                                    debug($scope.CustomerModal.CustomerInfo);
                                    debug($scope.CustomerModal.CustomerValidation[modelKey]);
                                    $scope.CustomerModal.CustomerValidation[modelKey]['isError'] = isError;
                                    $scope.CustomerModal.CustomerValidation[modelKey]['ErrorMessage'] = ErrorMessage;
                         
                         }
                         
                           
                            
                         
                         
                         
                         $scope.CustomerModal.ValidateCou = function(index, modelKey)
                         {
                                angular.element('[data-toggle="tooltip"]').tooltip({placement : 'bottom'});
                                var fieldValue = $scope.CustomerModal.CustumerUnitModal[index][modelKey];
                                var numericRegex = /^[0-9]*$/;
                                
                                 var ValidateType=$scope.CustomerModal.CustomerValidationCOU[index][modelKey].Type;
                                 
                                if(ValidateType.indexOf('VIN') > -1){

                                       if( fieldValue !='' && fieldValue != undefined)

                                       {
                                           result=$scope.CustomerModal.validateVin(fieldValue);









                                          
                                       }
                                       else
                                       {
                                           result=true;    
                                       }
                                       
                                        if(result==false)
                                           {

                                                $scope.CustomerModal.CustomerValidationCOU[index][modelKey].isError=true;
                                                $scope.CustomerModal.CustomerValidationCOU[index][modelKey].ErrorMessage='{!JSENCODE($Label.Label_Invalid)} Vin No';


                                                   
                                           } else {
                                                $scope.CustomerModal.CustomerValidationCOU[index][modelKey].isError=false;
                                                $scope.CustomerModal.CustomerValidationCOU[index][modelKey].ErrorMessage='';

                                           }



                                }
                                if(ValidateType.indexOf('Numeric') > -1){
                               
                                       if( fieldValue !='' && fieldValue != null && fieldValue != undefined && !numericRegex.test(fieldValue))

                                       {      
                                             $scope.CustomerModal.CustomerValidationCOU[index][modelKey].isError=true;
                                             if(fieldValue.indexOf(".") > -1) {
                                             	$scope.CustomerModal.CustomerValidationCOU[index][modelKey].ErrorMessage='Mileage value should not contain decimal';//'{!JSENCODE($Label.Label_Invalid)} {!JSENCODE($Label.Label_Mileage)} {!JSENCODE($Label.Label_Value)}';
                                             }
                                             else {
                                             	$scope.CustomerModal.CustomerValidationCOU[index][modelKey].ErrorMessage='Mileage value should be a number';//'{!JSENCODE($Label.Label_Invalid)} {!JSENCODE($Label.Label_Mileage)} {!JSENCODE($Label.Label_Value)}';
                                             }
                                             

                                       } else {
                                       
                                            $scope.CustomerModal.CustomerValidationCOU[index][modelKey].isError=false;
                                             $scope.CustomerModal.CustomerValidationCOU[index][modelKey].ErrorMessage='';


                                       }
                                }
                               if($scope.CustomerModal.CustumerUnitModal[index]['VIN'] != null && $scope.CustomerModal.CustumerUnitModal[index]['VIN'] != '' && $scope.CustomerModal.CustumerUnitModal[index]['VIN'] != undefined) { 
	                               if(ValidateType.indexOf('Required') > -1){
	                                       debug($scope.CustomerModal.CustumerUnitModal[index]);

	                                       debug(fieldValue);
	                                       if( fieldValue == undefined || fieldValue == '' || fieldValue == null)


	                                       {     
	                                           debug('Error true');
	                                             $scope.CustomerModal.CustomerValidationCOU[index][modelKey].isError = true;
	                                             $scope.CustomerModal.CustomerValidationCOU[index][modelKey].ErrorMessage = 'Field is Required';













	                                       } else { 




	                                            $scope.CustomerModal.CustomerValidationCOU[index][modelKey].isError = false;
	                                             $scope.CustomerModal.CustomerValidationCOU[index][modelKey].ErrorMessage = '';



	                                       }
	                                }
	                           }
	                             
























                                 debug($scope.CustomerModal.CustomerValidationCOU);




                         };



                         
                         // VIN Code validator
                         $scope.CustomerModal.validateVin = function(vin) {
                            if(vin.trim().length != 17){
                                return true;
                            }
                              // Reject based on bad pattern match
                            

                              no_ioq = '[a-hj-npr-z0-9]';  // Don't allow characters I,O or Q
                              matcher = new RegExp("^" + no_ioq + "{8}[0-9xX]" + no_ioq + "{8}$", 'i'); // Case insensitive
                              if(vin.match(matcher) == null)
                              { 
                                return false;
                              }




                              // Reject base on bad check digit
                             


                              return $scope.CustomerModal.checkDigitCalculation(vin);
                         };
                         
                         
                         
                        





                         $scope.CustomerModal.checkDigitCalculation = function(vin) {
                              var upperCaseVin = vin.toUpperCase();
                            

                              var letterMap = {A : 1, B : 2, C : 3, D : 4, E : 5, F : 6, G : 7, H : 8,
                                            J : 1, K : 2, L : 3, M : 4, N : 5,        P : 7,        R : 9,
                                                   S : 2, T : 3, U : 4, V : 5, W : 6, X : 7, Y : 8, Z : 9,


                                            1 : 1, 2 : 2, 3 : 3, 4 : 4, 5 : 5, 6 : 6, 7 : 7, 8 : 8, 9 : 9, 0 : 0
                                            };

                              var weights = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2];
                            
                              var products = 0;


                              for(var i = 0; i < upperCaseVin.length; i++) {


                                products += letterMap[upperCaseVin[i]] * weights[i];
                              }

                              var checkDigitShouldBe = products % 11;
                              if(checkDigitShouldBe == 10) {
                                    checkDigitShouldBe = 'X';
                              }
                            


                              return checkDigitShouldBe == upperCaseVin[8];
                        }
                          
                         
                         
                       //Modals  

                       
                       $scope.CustomerModal.ManageIconCustomerDetails=
                       [ 
                            {
                                FnameLname:{value:[{val:'FirstName', fieldType:'text'}],isPrimary:true},
                                NickName:{value:[{val:'Nickname', fieldType:'text' },{val:'LastName', fieldType:'text' }],isPrimary:true},
                                BusinessName:{value:[{val:'BusinessName', fieldType:'text'}],isPrimary:true},
                                CompanyName:{value:[{val:'CompanyName', fieldType:'text'}],isPrimary:false},
                                HomeEmail:{value:[{val:'HomeEmail', fieldType:'text'}],isPrimary:true },
                                WorkEmail:{value:[{val:'WorkEmail', fieldType:'text'}],isPrimary:true },
                                HomePhone:{value:[{val:'HomeNumber', fieldType:'text'}],isPrimary:true },
                                WorkPhone:{value:[{val:'WorkNumber', fieldType:'text'}],isPrimary:true },
                                BillingAddLine1:{value:[{val:'BillingStreet1', fieldType:'text'}],isPrimary:true},
                                BillingAddLine2:{value:[{val:'BillingStreet2', fieldType:'text'}],isPrimary:true},
                                CountryState:{value:[{val:'BillingCountry', fieldType:'lookup'},{val:'BillingState', fieldType:'lookup'}],isPrimary:true},
                                ShippingCountryState:{value:[{val:'ShippingCountry', fieldType:'lookup'},{val:'ShippingState', fieldType:'lookup'}],isPrimary:true},
                                CityPostal:{value:[{val:'BillingPostalCode', fieldType:'text'},{val:'BillingCity', fieldType:'text'}],isPrimary:true},
                                Birthdate : {value:[{val:'Birthdate', fieldType:'dropdown'}],isPrimary:false},
                                LinkedInLink:{value:[{val:'LinkedInLink', fieldType:'text'}],isPrimary:false},
                                TwitterLink:{value:[{val:'TwitterLink', fieldType:'text'}],isPrimary:false},
                                FacebookLink:{value:[{val:'FacebookLink', fieldType:'text'}],isPrimary:false},
                                Company:{value:[{val:'Company', fieldType:'text'}],isPrimary:false},
                                JobTitle:{value:[{val:'JobTitle', fieldType:'text'}],isPrimary:false},
                                PriceLevel :{value:[{val:'PriceLevel', fieldType:'lookup'}],isPrimary:false},
                                TaxLevel : {value:[{val:'TaxLevel', fieldType:'lookup'}],isPrimary:false},
                                OtherPhone : {value:[{val:'OtherPhone', fieldType:'text'}],isPrimary:false},
                                OtherEmail : {value:[{val:'OtherEmail', fieldType:'text'}],isPrimary:false},
                                IsVendor: {value:[{val:'IsVendor', fieldType:'boolean'}],isPrimary:false},
                                Active:{value:[{val:'Active', fieldType:'boolean'}],isPrimary:false},
                                CustomerUnitYearMake:{value:[{val:'Year', fieldType:'lookup'},{val:'Make', fieldType:'lookup'}],isPrimary:true},
                                CustomerUnitModelSubModel:{value:[{val:'Model', fieldType:'lookup'},{val:'Submodel', fieldType:'text'}],isPrimary:true},
                                CustomerUnitModelVin:{value:[{val:'VIN', fieldType:'text'}],isPrimary:false},
                                CustomerUnitLicensePlate:{value:[{val:'Plate', fieldType:'text'}],isPrimary:true},
                                CustomerUnitMilage:{value:[{val:'Mileage', fieldType:'text'}],isPrimary:true},
                                customerUnitColor:{value:[{val:'Color', fieldType:'text'}],isPrimary:true}
                            }

                       ]
                       
                        
                        

                         
                        

                           
                        
                        
                        $scope.CustomerModal.AdditionalFieldsSearch ='';
                        
                       $scope.CustomerModal.ChangeCustomerType= function(CustomerType)
                        {
                                $scope.CustomerModal.CustomerInfo.Type=CustomerType;
                                

                                /*if($scope.CustomerModal.CustomerInfo.Type=="Individual")
                                {

                                    $scope.CustomerModal.CustomerInfo={WorkNumberSMS:false,MobileNumberSMS:false,HomeNumberSMS:true};
                                }
                                else
                                {



                                    $scope.CustomerModal.CustomerInfo={WorkNumberSMS:true,MobileNumberSMS:false,HomeNumberSMS:false};
                                }*/

                        }
                        
                        $scope.FilterAdditionalFields = function(items) {
                            var result = {};
                            angular.forEach(items, function(value, key) {

                                if (value.label.toLowerCase().indexOf($scope.CustomerModal.AdditionalFieldsSearch) != -1) {
                                    result[key] = value;
                                }
                            });
                            return result;
                        }
                          
                          $scope.CustomerModal.ShowAdditionalField = function(key){
                            if(key == 'CustomerUnit'){
                                var unit = {Year:null, Make:null,Model:null, SubModel:null,VIN:'',Plate:'',Mileage:null,Color:''};
                                $scope.CustomerModal.CustumerUnitModal.push(unit);
                                var validation = {
                                                    VIN:{isError : false, ErrorMessage:'',Type:'VIN,Required'},
                                                    Mileage:{isError : false, ErrorMessage:'' ,Type:'Numeric'},
                                                    Make :{isError : false, ErrorMessage:'' ,Type:'Required'},
                                                    Model :{isError : false, ErrorMessage:'' ,Type:'Required'}
                                                   }   

                                $scope.CustomerModal.CustomerValidationCOU.push(validation);
                                 
                            }
                            else{

                                $scope.CustomerModal.AdditionalFieldsInfo[key].isPrimary = true;
                                debug($scope.CustomerModal.AdditionalFieldsInfo[key].isPrimary);
                            }
                            

                            var targetId = $scope.CustomerModal.AdditionalFieldsInfo[key].fieldId;
                            debug( 'Focused Id ' + targetId);
                            
                             if(key == 'CustomerUnit'){
                                    
                                            var Id=($scope.CustomerModal.CustumerUnitModal.length-1);
                                            var targetid='vinId'+Id;
                                            setTimeout(function() { 
                                            if(targetid != undefined) {
                                                angular.element('#'+targetid).focus() ;
                                                }
                                            }, 10);
                                             
                                             angular.element('.dropdown-menu').removeClass("keep_open");
                                              

                                }       
                             else
                             {
                                setTimeout(function() { 
                                    if(targetId != undefined) {
                                        angular.element('#'+targetId).focus() ;
                                    }
                                }, 10);
                            }   
                        
                        }
                        
                        
                        $scope.CustomerModal.ChangeMonth=function()
                        {
                                            if($scope.CustomerModal.BirthyearSelected.year != 'undefined' && $scope.CustomerModal.BirthyearSelected.year != '' && $scope.CustomerModal.BirthyearSelected.year != null)
                                                    {
                                                            
                                                            
                                                            $scope.CustomerModal.BirthDays=[];
                                                            $scope.CustomerModal.BirthDaySelected={};
                                                            
                                                            var month= parseInt($scope.CustomerModal.BirthmonthSelected) - 1;
                                                            var year = parseInt($scope.CustomerModal.BirthyearSelected.year);
                                                    
                                                            var monthStart = new Date(year , month  , 1);
                                                            var monthEnd = new Date(year , month  + 1, 1);
                                                            var monthLength = (monthEnd - monthStart) / (1000 * 60 * 60 * 24);
                                                            
                                                            for( i=1 ; i < monthLength + 1; i++ )
                                                            {
                                                                var days={day: i };
                                                                $scope.CustomerModal.BirthDays.push(days);
                                                            
                                                            }
                                            
                                                            
                                                            
                                                    }
                                            
                        }
                        
                        $scope.CustomerModal.ChangeYear=function()
                        {

                                    
                                            if(($scope.CustomerModal.BirthmothSelected != 'undefined' ) && ($scope.CustomerModal.BirthmothSelected != '-1' ) )
                                                    {
                                                            
                                                            
                                                            
                                                            $scope.CustomerModal.BirthDays=[];
                                                            $scope.CustomerModal.BirthDaySelected={};
                                                            var month= parseInt($scope.CustomerModal.BirthmonthSelected) - 1;
                                                            var year = parseInt($scope.CustomerModal.BirthyearSelected.year);
                                                    
                                                            var monthStart = new Date(year , month  , 1);
                                                            var monthEnd = new Date(year , month  + 1, 1);
                                                            var monthLength = (monthEnd - monthStart) / (1000 * 60 * 60 * 24);
                                                            
                                                            for( i=1 ; i < monthLength + 1; i++ )
                                                            {

                                                                var days={day: i };
                                                                $scope.CustomerModal.BirthDays.push(days);
                                                            
                                                            }
                                            
                                                            
                                                            
                                                    }
                                    
                                    
                        }

                        
                        
                        $scope.CustomerModal.changeUnitMake =function(index){
                        
                                $scope.CustomerModal.UnitModel[index]=  $scope.CustomerModal.CustomerMasterData.UnitModelList[0].unitMakeNameToUnitModelMap[$scope.CustomerModal.UnitMakeSelected[index].UnitMakeName];
                                $scope.CustomerModal.CustumerUnitModal[index].Make=$scope.CustomerModal.UnitMakeSelected[index].Id;

                                $scope.CustomerModal.UnitModelSelected[index] = {};
                				$scope.CustomerModal.CustumerUnitModal[index].SubModel = '';


                        }
                        
                        $scope.CustomerModal.changeUnitYear=function(index)
                        {
                                    if( typeof $scope.CustomerModal.UnitYearSelected[index].modelyear =='undefined')
                                    {
                                        $scope.CustomerModal.CustumerUnitModal[index].Year=null;
                                    }
                                    else 
                                    {
                                    
                                     $scope.CustomerModal.CustumerUnitModal[index].Year = $scope.CustomerModal.UnitYearSelected[index].modelyear;
                                    }
                                    
                                    
                        }
                        
                        $scope.CustomerModal.changeUnitmodel =function(index){
                        

                            $scope.CustomerModal.CustumerUnitModal[index].Model=$scope.CustomerModal.UnitModelSelected[index].Id;
                            $scope.CustomerModal.CustumerUnitModal[index].SubModel=$scope.CustomerModal.UnitModelSelected[index].Id;
                            

                        
                                

                        }
                                                

                       $scope.CustomerModal.SetCustomerActiveStatus= function(status)
                       {
                                
                                if(status==false){
                                        angular.element('#deactiveCustomerConfirm').show();
                                }
                                else
                                {
                                    $scope.CustomerModal.CustomerInfo.Active= true;
                                
                                
                                }
                                
                       }
                       
                       
                       
                       
                       $scope.CustomerModal.DeactiveCustomer= function(status)

                       {
                                
                                if(status==false){
                                
                                        angular.element('#deactiveCustomerConfirm').hide();
                                        
                                        
                                }
                                else
                                {
                                        $scope.CustomerModal.CustomerInfo.Active= false;
                                        angular.element('#deactiveCustomerConfirm').hide();
                                }
                                
                       }
                        
                        $scope.CustomerModal.SetVendorActive= function(status)
                       {
                               
                            
                                
                               $scope.CustomerModal.CustomerInfo['IsVendor']=status;

                                if($scope.CustomerModal.CustomerInfo['IsVendor'] ==true)
                               {
                                    $scope.CustomerModal.SetDafaultPurchaseTax();
                               }
                            
                                
                       }
                       
                       
                        
                            $scope.CustomerModal.SetDafaultBillingCountry= function ()
                               {
                                           for(i=0;i < $scope.CustomerModal.CustomerMasterData.CountryList.length ; i++)
                                                {
                                                        if($scope.CustomerModal.CustomerMasterData.CountryList[i].IsDefault)
                                                        {
                                                            $scope.CustomerModal.SelectedCountry = $scope.CustomerModal.CustomerMasterData.CountryList[i];
                                                        }
                                                }
                               }



                        
                        
                               $scope.CustomerModal.SetDafaultBillingState =function()
                               {
                                            $scope.CustomerModal.State= $scope.CustomerModal.CustomerMasterData.StateList[0].countryNameToStateMap[$scope.CustomerModal.SelectedCountry.CountryName];
                                            
                                                for(i=0;i < $scope.CustomerModal.State.length ; i++)
                                                {
                                                        if( $scope.CustomerModal.State[i].IsDefault)
                                                        {
                                                            $scope.CustomerModal.SelectedState = $scope.CustomerModal.State[i];
                                                            
                                                        }
                                                }
                               } 
                       
                   
                       
                                $scope.CustomerModal.SetDafaultShippingCountry= function()
                               {
                                        for(i=0;i < $scope.CustomerModal.CustomerMasterData.CountryList.length ; i++)
                                            {           
                                                    
                                                    if( $scope.CustomerModal.CustomerMasterData.CountryList[i].IsDefault )
                                                    {
                                                       $scope.CustomerModal.SelectedShippingCountry = $scope.CustomerModal.CustomerMasterData.CountryList[i];
                                                    }
                                            }
                               }
                               
                       
                              $scope.CustomerModal.SetDafaultShippingState =function()
                               {
                                     $scope.CustomerModal.ShippingState= $scope.CustomerModal.CustomerMasterData.StateList[0].countryNameToStateMap[$scope.CustomerModal.SelectedShippingCountry.CountryName];
                                                                 
                                     for(i=0;i < $scope.CustomerModal.ShippingState.length ; i++)
                                        {           
                                                 if( $scope.CustomerModal.State[i].IsDefault)
                                                {
                                                   $scope.CustomerModal.SelectedShippingState=$scope.CustomerModal.ShippingState[i];
                                                }
                                        }
                               }
                               
                       
                              $scope.CustomerModal.SetDafaultPriceLevel =function()
                                {
                                        for(i=0 ; i < $scope.CustomerModal.PriceLevel.length ; i++)
                                        {
                                                if( $scope.CustomerModal.PriceLevel[i].IsDefault)
                                                {
                                                    $scope.CustomerModal.SelectedPriceLevel=$scope.CustomerModal.PriceLevel[i];
                                                }
                                        }

                                }
                       
                       
                       
                              $scope.CustomerModal.SetDafaultSalesTax =function(){ 
                                        for(i=0 ; i < $scope.CustomerModal.SalesTax.length ; i++)
                                        {
                                            if( $scope.CustomerModal.SalesTax[i].IsDefault)
                                                {   
                                                    $scope.CustomerModal.SelectedSalesTax=$scope.CustomerModal.SalesTax[i];
                                                    
                                                }
                                        }                             
                              }
                              


                            $scope.CustomerModal.SetDafaultPurchaseTax =function(){ 
                                        for(i=0 ; i < $scope.CustomerModal.SalesTax.length ; i++)
                                        {
                                            if( $scope.CustomerModal.SalesTax[i].IsDefault)
                                                {   
                                                    $scope.CustomerModal.VendorSelectedSalesTax=$scope.CustomerModal.SalesTax[i];
                                                    
                                                }
                                        }                             


                             }

                            $scope.CustomerModal.SetDefaultBirthday=function()
                            {

                                    $scope.CustomerModal.BirthdaySelected={};
                                    $scope.CustomerModal.BirthyearSelected={}; 
                                    $scope.CustomerModal.BirthmonthSelected="";
                            
                            }
                       
                       

                        // Need to remove later
                        $scope.CustomerModal.LoadCustomerInfoDetail= function()
                        {
                                


                        }
                         



                        $scope.CustomerModal.changeBillingCountry = function(){

                            $scope.CustomerModal.State = $scope.CustomerModal.CustomerMasterData.StateList[0].countryNameToStateMap[$scope.CustomerModal.SelectedCountry.CountryName];
                            $scope.CustomerModal.SelectedState = $scope.CustomerModal.State[0];
                        }
                          $scope.CustomerModal.changeShippingCountry = function(){
                                

                                $scope.CustomerModal.ShippingState=$scope.CustomerModal.CustomerMasterData.StateList[0].countryNameToStateMap[$scope.CustomerModal.SelectedShippingCountry.CountryName];
                                $scope.CustomerModal.SelectedShippingState=$scope.CustomerModal.ShippingState[0];
                        }
                        
                        $scope.CustomerModal.changePriceLevel= function(){
                             

                             //debug( $scope.CustomerModal.selectedPriceLevel);
                             

                        }
                        
                        
                         $scope.CustomerModal.changeSalesTax= function()

                        {
                                 debug( $scope.CustomerModal.SelectedSalesTax);

                                 

                        }

                        $scope.CustomerModal.SetAddressData= function()
                        {
                            debug("Entered in same as billing address func");
                            //set Default Country                                   



                              $scope.CustomerModal.CustomerInfo.IsBothAddressSame=($scope.CustomerModal.CustomerInfo.IsBothAddressSame == true) ? false : true;
                              $scope.CustomerModal.CustomerInfo.ShippingStreet1=$scope.CustomerModal.CustomerInfo.BillingStreet1;
                              $scope.CustomerModal.CustomerInfo.ShippingStreet2=$scope.CustomerModal.CustomerInfo.BillingStreet2;
                              $scope.CustomerModal.CustomerInfo.ShippingCity= $scope.CustomerModal.CustomerInfo.BillingCity;
                              $scope.CustomerModal.CustomerInfo.ShippingPostalCode=$scope.CustomerModal.CustomerInfo.BillingPostalCode;
                              $scope.CustomerModal.ShippingState =  $scope.CustomerModal.State;
                              $scope.CustomerModal.SelectedShippingState=$scope.CustomerModal.SelectedState;
                              $scope.CustomerModal.SelectedShippingCountry=$scope.CustomerModal.SelectedCountry;
                              $scope.CustomerModal.ShippingState =  $scope.CustomerModal.State;
                              $scope.CustomerModal.SelectedShippingState=$scope.CustomerModal.SelectedState;
                              debug($scope.CustomerModal.CustomerInfo.IsBothAddressSame);






                        }
                        
                        $scope.CustomerModal.CancelCustomer=function()
                        {
                                $scope.selectedObject.ChangeRecords=0;
                                angular.element('#pop').modal('hide');
                        
                        }
                        //save customer Functionality
                        $scope.CustomerModal.SaveCustomer= function()
                        {
                        debug('Start');

                        debug($scope.CustomerModal.BirthdaySelected);
                           debug($scope.CustomerModal.CustomerInfo);

                            for (var key in $scope.CustomerModal.CustomerValidation) {
                                if ($scope.CustomerModal.CustomerValidation.hasOwnProperty(key)) {
                                    var validationObj = $scope.CustomerModal.CustomerValidation[key];
                                    if(validationObj.Type.indexOf('required') > -1) {
                                        if($scope.CustomerModal.CustomerInfo[key] == undefined || $scope.CustomerModal.CustomerInfo[key] == ""){
                                            $scope.CustomerModal.CustomerValidation[key]['isError'] = true;
                                            $scope.CustomerModal.CustomerValidation[key]['ErrorMessage'] = '{!JSENCODE($Label.Field_Is_Required)}';
                                        }
                                    }
                                }
                            }
                            
                            if($scope.CustomerModal.CustomerInfo.Type == 'Individual') {
                                $scope.CustomerModal.CustomerValidation['BusinessName'].isError = false;
                                
                            } else {
                                $scope.CustomerModal.CustomerValidation['FirstName'].isError = false;
                                $scope.CustomerModal.CustomerValidation['LastName'].isError = false;
                                
                            }
                            
                            
                        
                            
                            for (var key in $scope.CustomerModal.CustomerValidation) {
                                if ($scope.CustomerModal.CustomerValidation.hasOwnProperty(key)) {
                                    var validationObj = $scope.CustomerModal.CustomerValidation[key];
                                    if(validationObj.isError == true) {
                                        debug('error Present in ' + key);

                                        return;
                                    }
                                }
                            }
                            
                            for (var key in $scope.CustomerModal.CustomerInfo) {
                                if(key == 'PreferredPhone' || key == 'PreferredEmail' || key == 'PreferredSMS') {
                                    if($scope.CustomerModal.CustomerInfo[key] != null && $scope.CustomerModal.CustomerInfo[key] != undefined && $scope.CustomerModal.CustomerInfo[key] != "") {
                                        var preferredValue = $scope.CustomerModal.CustomerInfo[key];
                                        if($scope.CustomerModal.CustomerInfo[preferredValue] == null || $scope.CustomerModal.CustomerInfo[preferredValue] == undefined) {
                                            $scope.CustomerModal.CustomerValidation[preferredValue].isError = true;
                                            $scope.CustomerModal.CustomerValidation[preferredValue].ErrorMessage = '{!JSENCODE($Label.Field_Is_Required)}';
                                            return;
                                        }
                                    }
                                }
                            }
                            
                            for(var i=0; i<$scope.CustomerModal.CustumerUnitModal.length; i++){
                                debug('COU');

                                debug(angular.toJson($scope.CustomerModal.CustumerUnitModal[i]) === angular.toJson($scope.CustomerModal.initUnit));
                                if(angular.toJson($scope.CustomerModal.CustumerUnitModal[i]) != angular.toJson($scope.CustomerModal.initUnit)){
                                    var validateObj = $scope.CustomerModal.CustomerValidationCOU[i];
                                    for (var key in validateObj) {
                                        $scope.CustomerModal.ValidateCou(i, key);
                                    }
                                }
                            }
                            
                            debug('COU listtttttttt');
                            debug($scope.CustomerModal.CustumerUnitModal);
                            for (var i = 0; i < $scope.CustomerModal.CustomerValidationCOU.length; i++) {
                                var validateObj = $scope.CustomerModal.CustomerValidationCOU[i];
                                for (var key in validateObj) {
                                    if (validateObj.hasOwnProperty(key)) {
                                        var validationObj = validateObj[key];
                                        if(validationObj.isError == true) {
                                            debug('error Present in ' + key + ' Of ' + (i+1) + ' COU');
                                            return;
                                        }
                                    }
                                }
                            }
                            
                            
                            if($scope.CustomerModal.SimilarCOU.length > 0 ) {
                                Notification.error('{!JSENCODE($Label.VIN_Is_Already_Present)}');
                                return;
                            }
                            if($scope.CustomerModal.AdditionalFieldsInfo['Birthdate'].isPrimary ==true)
                            {               
                                    
                                        var Setvalue=0;
                                        
                                        if(typeof $scope.CustomerModal.BirthyearSelected['year']  == 'undefined'  )
                                        {
                                            Setvalue++
                                            
                                        }
                                         if(typeof $scope.CustomerModal.BirthdaySelected['day']  == 'undefined')
                                        {
                                                Setvalue++
                                        
                                        }
                                        if($scope.CustomerModal.BirthmonthSelected  == "")
                                        {
                                        
                                                Setvalue++
                                        }
                                        
                                        if(Setvalue == 0 )
                                        {
                                            
                                            $scope.CustomerModal.CustomerInfo['BirthDay'] = $scope.CustomerModal.BirthdaySelected.day;
                                            $scope.CustomerModal.CustomerInfo['BirthMonth'] = $scope.CustomerModal.BirthmonthSelected;
                                            $scope.CustomerModal.CustomerInfo['BirthYear'] = $scope.CustomerModal.BirthyearSelected.year;
                                            
                                        }
                                        else if(Setvalue != 3 && Setvalue !=0  ){
                                            Notification.error('{!JSENCODE($Label.Label_Invalid)} {!JSENCODE($Label.Label_Birthday)} {!JSENCODE($Label.Label_Date)}'); 
                                                return;
                                        }
                                        else{
                                            $scope.CustomerModal.CustomerInfo['BirthDay'] = null;
                                            $scope.CustomerModal.CustomerInfo['BirthMonth'] = null;
                                            $scope.CustomerModal.CustomerInfo['BirthYear'] = null;
                                            
                                        }
                                        
                                
                            }
                            else{
                                    
                                            $scope.CustomerModal.CustomerInfo['BirthDay'] = null;
                                            $scope.CustomerModal.CustomerInfo['BirthMonth'] = null;
                                            $scope.CustomerModal.CustomerInfo['BirthYear'] = null;

                            }
                            
                            /*11111111111111111
                            for (var key in $scope.CustomerModal.AdditionalFieldsInfo) {
                                if ($scope.CustomerModal.AdditionalFieldsInfo.hasOwnProperty(key)) {
                                    var validationObj = $scope.CustomerModal.AdditionalFieldsInfo[key];
                                    if(validationObj['isPrimary'] == false) {
                                        $scope.CustomerModal.CustomerInfo[key] = "";
                                    }
                                }
                            }
                            */
                            if($scope.CustomerModal.CustomerInfo.Type == 'Individual') {
                                
                                $scope.CustomerModal.CustomerInfo['WorkNumber'] = '';
                                $scope.CustomerModal.CustomerInfo['WorkEmail'] = '';
                            } else {
                                $scope.CustomerModal.CustomerInfo['HomeNumber'] = '';
                                $scope.CustomerModal.CustomerInfo['HomeEmail'] = '';
                                $scope.CustomerModal.CustomerInfo['CompanyName'] = '';
                                $scope.CustomerModal.CustomerInfo['JobTitle'] = '';
                                $scope.CustomerModal.CustomerInfo['BirthYear'] = null;
                                $scope.CustomerModal.CustomerInfo['BirthDay'] = null;
                                $scope.CustomerModal.CustomerInfo['BirthMonth'] = null;
                            }
                            
                            
                            $scope.CustomerModal.CustomerInfo.BillingCountry = $scope.CustomerModal.SelectedCountry['CountryName'];

                            $scope.CustomerModal.CustomerInfo.BillingState = $scope.CustomerModal.SelectedState['StateName'];

                            
                            if($scope.CustomerModal.CustomerInfo.IsBothAddressSame != true ) {
                                $scope.CustomerModal.CustomerInfo.ShippingCountry = $scope.CustomerModal.SelectedShippingCountry['CountryName'];
                                $scope.CustomerModal.CustomerInfo.ShippingState = $scope.CustomerModal.SelectedShippingState['StateName'];
                            } else {
                                $scope.CustomerModal.CustomerInfo.ShippingCountry =$scope.CustomerModal.SelectedCountry['CountryName'];

                                $scope.CustomerModal.CustomerInfo.ShippingState =  $scope.CustomerModal.SelectedState['StateName'];

                            }

                            if($scope.CustomerModal.AdditionalFieldsInfo['PriceLevel'].isPrimary == true) {
                                $scope.CustomerModal.CustomerInfo.PriceLevelId = $scope.CustomerModal.SelectedPriceLevel.Id;
                            }
                            else
                            { 
                                $scope.CustomerModal.CustomerInfo.PriceLevelId = null;
                            }
                            /*if($scope.CustomerModal.AdditionalFieldsInfo['TaxLevel'].isPrimary == true) {

                                $scope.CustomerModal.CustomerInfo.SalesTaxId = $scope.CustomerModal.SelectedSalesTax.Id;
                            }
                            else{
                                    $scope.CustomerModal.CustomerInfo.SalesTaxId=null;
                            }*/

                            if( $scope.CustomerModal.AdditionalFieldsInfo['IsVendor'].isPrimary == true && $scope.CustomerModal.CustomerInfo['IsVendor']==true ){
                                $scope.CustomerModal.CustomerInfo.PurchaseTaxId = $scope.CustomerModal.VendorSelectedSalesTax.Id;
                            }
                            else
                            {
                                 $scope.CustomerModal.CustomerInfo.PurchaseTaxId = null 
                            }
                            
                            for(var i=0; i<$scope.CustomerModal.CustumerUnitModal.length;i++){
								if($scope.CustomerModal.CustumerUnitModal[i].Mileage == '' || $scope.CustomerModal.CustumerUnitModal[i].Mileage == undefined ||$scope.CustomerModal.CustumerUnitModal[i].Mileage == null){
									$scope.CustomerModal.CustumerUnitModal[i].Mileage = 0;
								}
                            }
                            
                            var deferred = $q.defer();
                             deferred.promise
                            .then
                            (function(result){
                                 debug(result);
                                 debug('result');
                                return  addEditCustomerService.saveCustomer(angular.toJson($scope.CustomerModal.CustomerInfo),angular.toJson($scope.CustomerModal.CustumerUnitModal));
                            
                                 
                            })
                            .then
                            (function(result){
                                    
                                     var currentPageName = '{!$CurrentPage.Name}';
                                     if((currentPageName == 'CustomerOrder' || currentPageName == 'NewCustomerOrder')){
                                           $scope.selectedObject.coHeaderId = "{!JSENCODE(URLENCODE($CurrentPage.parameters.id))}";

                                           if( $scope.selectedObject.coHeaderId == undefined){
                                                $scope.selectedObject.coHeaderId = '';
                                                debug('---'+$scope.selectedObject.coHeaderId + '  ---- 00 ')
                                           }
                                           if( $scope.selectedObject.coHeaderId != null){    
                                               debug('---'+$scope.selectedObject.coHeaderId + '  ---- 00 ')
                                                addEditCustomerService.addCustomer($scope.selectedObject.coHeaderId,result.Id)
                                                  .then(function (sucessCustomerResult) {
                                                         $scope.CustomerModal.ReturnCustomerDetails(result.Id,result.CustomerName);
                                                         $scope.selectedObject.ChangeRecords=0;
                                                          
                                                 },
                                                 function (errorSearchResult) {                
                                                     responseData = errorSearchResult; 
                                                }); 
                                            
                                                
                                            }
                                      }
                                      else{
                                            if($scope.$parent.ViewCustomer != undefined && $scope.$parent.ViewCustomer.saveCustomer != undefined){
                                              $scope.$parent.ViewCustomer.saveCustomer(result);
                                             }
                                      
                                      }
                                     
                                    angular.element('#pop').modal('hide');
                                    Notification.success('{!JSENCODE($Label.Customer_Object_Display_Label)} {!JSENCODE($Label.Saved_Successfully)}');
                                    return 'Sucess';
                            });
                            
                            deferred.resolve('1');

                        }
                        
                        $scope.CustomerModal.markFavourite = function(key, modalName){ 
                            if($scope.CustomerModal.CustomerInfo[key] == modalName){
                                $scope.CustomerModal.CustomerInfo[key] = '';
                                //var type = $scope.CustomerModal.CustomerValidation[modalName].Type;
                                //$scope.CustomerModal.CustomerValidation[modalName].Type=type.replace(',required', '');
                                //$scope.CustomerModal.CustomerValidation[modalName].isError = false;
                                //$scope.CustomerModal.CustomerValidation[modalName].ErrorMessage = "";
                                //debug($scope.CustomerModal.CustomerValidation[modalName].Type);
                                
                                if(modalName == 'HomeNumber' && key == 'PreferredSMS'){
                                    $scope.CustomerModal.CustomerInfo.HomeNumberSMS = false;
                                }else if(modalName == 'WorkNumber' && key == 'PreferredSMS'){
                                    $scope.CustomerModal.CustomerInfo.WorkNumberSMS = false;
                                }else if(modalName == 'OtherPhone' && key == 'PreferredSMS'){
                                    $scope.CustomerModal.CustomerInfo.MobileNumberSMS = false;
                                }
                            }
                            else{
                                $scope.CustomerModal.CustomerInfo[key] = modalName;
                                //var type=$scope.CustomerModal.CustomerValidation[modalName].Type + ',required';
                                //$scope.CustomerModal.CustomerValidation[modalName].Type = type;
                                //debug($scope.CustomerModal.CustomerValidation[modalName].Type);
                                if(modalName == 'HomeNumber' && key == 'PreferredSMS'){
                                    $scope.CustomerModal.CustomerInfo.HomeNumberSMS = true;
                                }else if(modalName == 'WorkNumber' && key == 'PreferredSMS'){
                                    $scope.CustomerModal.CustomerInfo.WorkNumberSMS = true;
                                }else if(modalName == 'OtherPhone' && key == 'PreferredSMS'){
                                    $scope.CustomerModal.CustomerInfo.MobileNumberSMS = true;
                                } 
                                
                            }
                        }
                        
                        $scope.CustomerModal.markSMS  = function(key){
                            $scope.CustomerModal.CustomerInfo[key] = !$scope.CustomerModal.CustomerInfo[key];
                            if($scope.CustomerModal.CustomerInfo[key] == false){
                                debug('inside  '+$scope.CustomerModal.CustomerInfo.PreferredSMS+'  '+key);
                                if($scope.CustomerModal.CustomerInfo.PreferredSMS == 'HomeNumber' && key == 'HomeNumberSMS'){
                                    $scope.CustomerModal.CustomerInfo.PreferredSMS = '';
                                }
                                if($scope.CustomerModal.CustomerInfo.PreferredSMS == 'WorkNumber'  && key == 'WorkNumberSMS'){
                                    $scope.CustomerModal.CustomerInfo.PreferredSMS = '';
                                }
                                if($scope.CustomerModal.CustomerInfo.PreferredSMS == 'OtherPhone' && key == 'MobileNumberSMS' ){
                                    $scope.CustomerModal.CustomerInfo.PreferredSMS = '';
                                }
                            }
                        
                        } 
                        
                        $scope.CustomerModal.ShowOrHideActive = function(key) {
                            if(($scope.CustomerModal.IsEditMode == false) && (key == "Active")){
                                return false;
                            } else{
                                return true;
                            }
                        }

            });
            
            
            
            addEditCustomerModule.service("addEditCustomerService", function ($q) {
                   this.getOtherSimilarCustomer = function (customerInfoJson){
                      customerInfoJson = encodeString(customerInfoJson);
                      var deferred = $q.defer();
                    //debug('depositModel ' + depositModel);
                    // make AJAX request to the remote service
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.CustomerOrderCtrl.getOtherSimilarCustomer }',
                                    customerInfoJson,

                        function (result, event) {
                           if (event.type == 'exception') {
                                deferred.reject(event.message);

                            } else {
    


                                var SimilarCustomer = decodeString(result);

                                var find = '\'';

                                var re = new RegExp(find, 'g');
                                SimilarCustomer = SimilarCustomer.replace(re, '');
                                deferred.resolve(JSON.parse(SimilarCustomer));
                            }
                        }, {
                            escape : true

                    });




                    return deferred.promise;
                }
                


                  this.getSimilarCOUs = function (Vin){
                    Vin = encodeString(Vin);
                    var deferred = $q.defer();
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.CustomerOrderCtrl.getSimilarCOUs }',
                                    Vin,

                        function (result, event) {
                           if (event.type == 'exception') {
                                deferred.reject(event.message);

                            } else {
    


                                var SimilarCOU = decodeString(result);

                                var find = '\'';

                                var re = new RegExp(find, 'g');
                                SimilarCOU = SimilarCOU.replace(re, '');
                                deferred.resolve(JSON.parse(SimilarCOU));
                            }
                        }, {
                            escape : true

                    });




                    return deferred.promise;
                }

                this.getCustomerAllMasterData=function()
                {

                    var deferred = $q.defer();
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.CustomerOrderCtrl.getAllLookupFieldsJSON }',
                        function (result, event) {
                           if (event.type == 'exception') {
                                deferred.reject(event.message);

                            } else {
    


                                var CustomerMasterData = decodeString(result);
                                var find = '\'';

                                var re = new RegExp(find, 'g');
                                CustomerMasterData = CustomerMasterData.replace(re, '');
                                deferred.resolve(JSON.parse(CustomerMasterData));
                            }
                        }, {
                            escape : true

                    });




                    return deferred.promise;
                
                
                
                }
                





                 this.saveCustomer=function(CustomerJson,CouJson)
                {
                    CustomerJson = encodeString(CustomerJson);
                    CouJson = encodeString(CouJson);

                    var deferred = $q.defer();
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.CustomerOrderCtrl.saveCustomer }',CustomerJson,CouJson,
                        function (result, event) {
                           if (event.type == 'exception') {
                                deferred.reject(event.message);

                            } else {
    
                                var SaveResult = decodeString(result);

                               
                                deferred.resolve(JSON.parse(SaveResult));
                                
                            }
                        }, {
                            escape : true

                    });




                    return deferred.promise;
                
                
                
                }

                this.addCustomer = function(coHeaderId,CustomerId)
                {
                    coHeaderId = encodeString(coHeaderId);
                    CustomerId = encodeString(CustomerId);

                    var deferred = $q.defer();
                        debug('coHeaderId'+coHeaderId);
                        debug('CustomerId'+CustomerId);
                        Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.CustomerOrderCtrl.addCustomer }',coHeaderId,CustomerId,
                         function(result, event) {
                                if (event.type == 'exception') {
                                //showPopupNotification(event.message, "error");
                                deferred.reject(event.message);

                                } else {
                                var responseData = decodeString(result);

                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                responseData = responseData.replace(re, '');
                                
                                deferred.resolve(JSON.parse(responseData));
                                }
                            }, 
                            {
                                escape : true

                            });
                            
                            return deferred.promise;
                
                }
                
                this.editCustomerDetails= function(customerId)
                {
                        customerId = encodeString(customerId);
                        var deferred = $q.defer();
                      debug(customerId);

                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.getCustomer}',
                                         customerId,
                            function (result, event) {
                               if (event.type == 'exception') {
                                    deferred.reject(event.message);

                                } else {
                                    var customer = decodeString(result);


                                    var find = '\'';
                                    var re = new RegExp(find, 'g');
                                    customer = customer.replace(re, '');
                                    debug(customer);

                                    deferred.resolve(JSON.parse(customer));
                                }
                            }, {
                                escape : true

                        });
                        return deferred.promise;

                }



            });
            
          
        </script>



    <div id="pop" class="modal fade"
        ng-controller="addEditCustomerController">
        <div class="modal-dialog" ng-class="{'edit_modal-dialog' : CustomerModal.IsEditMode == true}">
            <div class="modal-content">
                <div class="modal-body popup_container"
                    style="width: 100% !important; left: 1% !important;">
                    <div class="popupinside">
                        <div class="Customer-Suggestion-overlay">
                            <div>
                                <div class="text">{!$Label.Insert_Customer_To_Customer_Order}</div>
                                <button class="square-btn greenBtn pull-right"
                                    ng-click="CustomerModal.AddSimilarCustomer()">{!$Label.Label_Select}</button>

                            </div>
                        </div>

                        <div class="ConfirmBox-overlay" id="deactiveCustomerConfirm">
                            <div>
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <button type="button" class="close" aria-label="Close"
                                            ng-click="CustomerModal.DeactiveCustomer(false)">
                                            <span aria-hidden="true">&times;</span>
                                        </button>
                                        <h4 class="modal-title">{!$Label.Label_Confirm} {!$Label.Label_Inactive} {!$Label.Label_Status}</h4>
                                    </div>
                                    <div class="modal-body">
                                        <p>{!$Label.Text_Deactivate_Customer}</p>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-primary"
                                            ng-click="CustomerModal.DeactiveCustomer(true)">{!$Label.Label_Yes}</button>
                                        <button type="button" class="btn btn-default"
                                            ng-click="CustomerModal.DeactiveCustomer(false)">{!$Label.Label_No}</button>
                                    </div>
                                </div>


                            </div>
                        </div>

                        <div class="popupleft col-lg-4 col-lg-4" ng-show="CustomerModal.IsEditMode != true">
                            <div class="popupleft_container" id="topsection"
                                ng-show="CustomerModal.IsEditMode == false || CustomerModal.SimilarCustomers == []">
                                <h1 class="letpanel_heading">{!$Label.Label_Existing} {!$Label.Customer_Object_Display_Label} {!$Label.Label_Like_This}</h1>
                                <i class="fa fa-question-circle helptip"
                                    style="float: left; font-weight: bold; color: #B7BEC6; margin-top: 20px; margin-bottom: 10px; font-size: 20px;"></i>
                                <div class="goldbox col-lg-12 col-md-12"
                                    ng-repeat="SimilarCustomer in CustomerModal.SimilarCustomers">
                                   <!--  <div class="leftgoldbox">
                                        <img class="starimg" src="{!URLFOR($Resource.Images, 'star.png')}" />
                                        <div class="star_container">
                                            <i class="fa fa-star" style="float: left;color: #B7BEC6;margin-top: 5px; font-size: 15px;"></i> 
                                            <i class="fa fa-star" style="float: left;color: #B7BEC6;margin-top: 5px; font-size: 15px;"></i> 
                                        </div>
                                    </div> -->
                                    <div class="rightgoldbox rightgoldboxML" id="CustomerSugesstionDiv{{$index}}" style="margin-left: 0px;"
                                        ng-mouseover="CustomerModal.showInfoOverlay('CustomerSugesstionDiv',$index)"
                                        ng-mouseleave="CustomerModal.hideCustomerInfoOverlay();">
                                        <div ng-show="SimilarCustomer.Type == 'Individual'">

                                            <p class="cust_name">{{SimilarCustomer.CustomerName }}</p>
                                            <p>{{SimilarCustomer.HomeEmail}}</p>
                                            <p>{{SimilarCustomer.HomeNumber}}</p>
                                            <p style="margin-top: 10px;">CUSTOMER ({{SimilarCustomer.Type}})</p>
                                        </div>
                                        <div ng-show="SimilarCustomer.Type == 'Business'">
                                            <p class="cust_name">{{SimilarCustomer.CustomerName }}</p>
                                            <p>{{SimilarCustomer.WorkEmail}}</p>
                                            <p>{{SimilarCustomer.WorkNumber}}</p>
                                            <p style="margin-top: 10px;">CUSTOMER ({{SimilarCustomer.Type}})</p>
                                        </div>







                                    </div>
<!--                                    <div class="bottomgoldbox"> -->
<!--                                        <i>CUSTOMER ({{SimilarCustomer.Type}})</i> -->
<!--                                    </div> -->
                                </div>
                            </div>
                        </div>
                        <div class="popupright" ng-class="{'col-lg-8 col-lg-8': CustomerModal.IsEditMode == false , 'leftBorderNone col-lg-12 col-lg-12': CustomerModal.IsEditMode == true}">
                            <div class="right_heading_container col-lg-12 col-md-12">
                                <h1 class="right_panel_heading"
                                    ng-show="CustomerModal.IsEditMode == true && CustomerModal.CustomerInfo.Type == 'Individual'">{{CustomerModal.CustomerInfo.FirstName}}
                                    {{CustomerModal.CustomerInfo.LastName}}</h1>
                                <h1 class="right_panel_heading"
                                    ng-show="CustomerModal.IsEditMode == true && CustomerModal.CustomerInfo.Type == 'Business'">{{CustomerModal.CustomerInfo.BusinessName}}</h1>
                                <h1 class="right_panel_heading"
                                    ng-show="CustomerModal.IsEditMode == false">{!$Label.New_Label} {!$Label.Customer_Object_Display_Label}</h1>
                                <div class="savecancle_btncntnr">
                                    <button type="button" id="closemodal"
                                        class="btn btn-default grayBtn"
                                        ng-click="CustomerModal.CancelCustomer()"
                                        ng-attr-tabindex="{{CustomerModal.tabIndexValue + 205}}">{!$Label.Cancel_Label}</button>
                                    <button type="button" class="btn btn-default greenBtn"
                                        ng-click="CustomerModal.SaveCustomer()"
                                        ng-attr-tabindex="{{CustomerModal.tabIndexValue + 204}}">{!$Label.Save_Label}</button>
                                </div>
                            </div>
                            <div class="tabbtn_container col-lg-12 col-md-12 customerTypeSection">
                                <button type="button" class="btn C5" style="margin-left: 2px; text-transform: uppercase;"
                                    ng-class="CustomerModal.CustomerInfo.Type == 'Business' ? 'activeType T4' : 'T7'"
                                    ng-click="CustomerModal.ChangeCustomerType('Individual') ">{!$Label.Label_Individual}</button>
                                <button type="button" class="btn T4 C5" style="text-transform: uppercase;"
                                    ng-class="CustomerModal.CustomerInfo.Type == 'Individual' ? 'activeType T4' : 'T7'"
                                    ng-click="CustomerModal.ChangeCustomerType('Business')">{!$Label.Label_Business}</button>
                            </div>
                            <div class="tabconainer" style="min-height: 524px;">
                                <form>
                                    <div class="option_field"
                                        ng-show="CustomerModal.AdditionalFieldsInfo.Active.isPrimary">
                                        <div class="lable_fields">
                                            <span class="form_lable_icons text" style="background: none;">

                                            </span>
                                            <p>{!$Label.Label_Active}</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group onehalf">
                                                <div class="chkbox_custom">
                                                    <div class="leftchked "
                                                        ng-class="{'checked' : CustomerModal.CustomerInfo.Active}"
                                                        id="ActiveCustomer"
                                                        ng-click="CustomerModal.SetCustomerActiveStatus(true)"
                                                        rel="ActiveFlagIcon">{!$Label.Label_Yes}</div>
                                                    <div class="rightchked"
                                                        ng-class="{'checked' : CustomerModal.CustomerInfo.Active !=true}"
                                                        id="DeActiveCustomer"
                                                        ng-click="CustomerModal.SetCustomerActiveStatus(false)"
                                                        rel="ActiveFlagIcon">{!$Label.Label_No}</div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class="controls1 controls" id="ActiveFlagIcon">
                                            <i class="fa fa-question-circle"></i> <i class="fa fa-times"
                                                ng-click="CustomerModal.ClearAndRemoveField('Active')"></i>
                                        </div>
                                    </div>
                                    <div class="clearfix"></div>

                                    <div class="option_field"
                                        ng-show="CustomerModal.CustomerInfo.Type == 'Individual'">
                                        <div class="lable_fields">
                                            <!-- <span class="form_lable_icons"> <i class="fa fa-star"></i>
                                            </span> -->
                                            <span class="form_lable_icons" style="background: none;">
                                            </span>
                                            <p>{!$Label.Label_Name}</p>
                                        </div>
                                        <div class="form_fields" style="margin: 4px 0 8px 0;">
                                            <div class="form-group ">
                                                <label for="labelFirstName"><span class="FC9">*</span> {!$Label.Label_First} {!$Label.Label_Name} </label> <input
                                                    type="text" class="form-control " id="txtFirstName"
                                                    ng-model="CustomerModal.CustomerInfo.FirstName"
                                                    ng-class="{'redborder' : CustomerModal.CustomerValidation['FirstName']['isError'] == true}"
                                                    ng-blur="CustomerModal.validateForm('FirstName'); CustomerModal.getOtherSimilarCustomer()"
                                                    placeholder="{!$Label.Label_First} {!$Label.Label_Name}" rel="Name"
                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 1}}"
                                                    title="{{CustomerModal.CustomerValidation['FirstName']['ErrorMessage'] }}" />
                                            </div>
                                            
                                            <div class="form-group" style="float: right;">
                                                <label for="required" class="FC9">* {!$Label.Indicates_Required_Fields}</label>
                                            </div>
                                        </div>
                                        <div class="controls MT25" id="Name">

                                            <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Provide First Name of customer"></i> <i
                                                class="fa fa-times"

                                                ng-click="CustomerModal.ClearAndRemoveField('FnameLname', 'txtFirstName')"></i>
                                        </div>

                                        <div class="clearfix"></div>
                                        <div class="form_fields" style="margin: 4px 0 8px 0;">    

	                                        <div class="form-group">
	                                            <label for="labelLastName"><span class="FC9">*</span> {!$Label.Label_Last} {!$Label.Label_Name}</label> <input
	                                                type="text" class="form-control " id="txtLastName"
	                                                ng-model="CustomerModal.CustomerInfo.LastName"
	                                                ng-class="{'redborder' : CustomerModal.CustomerValidation['LastName']['isError'] == true}"
	                                                ng-blur="CustomerModal.validateForm('LastName'); CustomerModal.getOtherSimilarCustomer()"
	                                                placeholder="{!$Label.Label_Last} {!$Label.Label_Name}" rel="Nickname"
	                                                ng-attr-tabindex="{{CustomerModal.tabIndexValue + 2}}"
	                                                title="{{CustomerModal.CustomerValidation['LastName']['ErrorMessage'] }}" />
	                                        </div>
	                                            
	
	                                        <div class="form-group">
	                                            <label for="exampleInputPassword1">{!$Label.Label_Nick} {!$Label.Label_Name}</label> <input
	                                                type="text" class="form-control " id="nickName"
	                                                ng-model="CustomerModal.CustomerInfo.Nickname"
	                                                placeholder="{!$Label.Label_Nick} {!$Label.Label_Name}" rel="Nickname"
	                                                ng-attr-tabindex="{{CustomerModal.tabIndexValue + 3}}" />

	                                        </div>
	                                    </div>
                                        <div class="controls MT25" id="Nickname">
                                            <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Add Last Name and Nick Name for your customer"></i> <i

                                                class="fa fa-times"
                                                ng-click="CustomerModal.ClearAndRemoveField('NickName','nickName')"></i>
















                                        </div>
                                    </div>
                                    
                                    <div class="clearfix"></div>
                                    <div class="option_field"
                                        ng-show="CustomerModal.CustomerInfo.Type == 'Business'">
                                        <div class="clearfix"></div>
	                                    <div class="reqForBusiness">
	                                        <label class="FC9 " for="required">* Indicates required fields</label>
	                                    </div>
	                                    <div class="clearfix"></div>
                                        <div class="lable_fields">
                                            <!-- <span class="form_lable_icons"> <i class="fa fa-star"></i>
                                            </span> -->
                                            <span class="form_lable_icons" style="background: none;">
                                            </span>
                                            <p>{!$Label.Label_Company} {!$Label.Label_Name} <span class="FC9">*</span></p>
                                        </div>
                                        <div class="form_fields" style="margin: 4px 0 8px 0;">
                                            <div class="form-group large">
                                                <input type="text" class="form-control " id="businessName"
                                                    ng-model="CustomerModal.CustomerInfo.BusinessName"
                                                    placeholder="{!$Label.Label_Company} Name" rel="BusinessName"
                                                    ng-class="{'redborder' : CustomerModal.CustomerValidation['BusinessName']['isError'] == true}"
                                                    ng-blur="CustomerModal.validateForm('BusinessName'); CustomerModal.getOtherSimilarCustomer();"
                                                    title="{{CustomerModal.CustomerValidation['BusinessName']['ErrorMessage'] }} "
                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 1}}" />
                                            </div>
                                            <div class="controls1 controls" id="BusinessName">
                                                <i class="fa fa-question-circle" data-toggle="tooltip"
                                                    title="Provide a Business Name of the customer"></i> <i
                                                    class="fa fa-times"
                                                    ng-click="CustomerModal.ClearAndRemoveField('BusinessName', 'businessName')"></i>
                                            </div>










                                        </div>
                                    </div>
                                    <div class="clearfix"></div>
                                    <div class="option_field"
                                        ng-show="CustomerModal.CustomerInfo.Type == 'Individual'">
                                        <div class="lable_fields">
                                            <!-- <span class="form_lable_icons text"> 100 </span> -->
                                            <span class="form_lable_icons text" style="background: none;">  </span>
                                            <p>{!$Label.Label_Home} {!$Label.Label_Email}</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group large">
                                                <input type="text" class="form-control "
                                                    ng-model="CustomerModal.CustomerInfo.HomeEmail"
                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 4}}"
                                                    ng-blur="CustomerModal.getOtherSimilarCustomer(); CustomerModal.validateForm('HomeEmail');"
                                                    id="homeEmail" placeholder="{!$Label.Label_Home} {!$Label.Label_Email}" rel="HomeEmail"
                                                    title="{{CustomerModal.CustomerValidation['HomeEmail']['ErrorMessage'] }}"
                                                    ng-class="{'redborder' : CustomerModal.CustomerValidation['HomeEmail']['isError'] == true}" />
                                                <a href="#" class="bookmarklink"> <i class="fa fa-star"
                                                    ng-class="CustomerModal.CustomerInfo.PreferredEmail == 'HomeEmail' ? ' yellow' : 'FC5'"
                                                    ng-click="CustomerModal.markFavourite('PreferredEmail','HomeEmail');"></i>

                                                </a>
                                            </div>

                                        </div>
                                        <div class="controls" id="HomeEmail">
                                            <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Add a personal email address"></i> <i
                                                class="fa fa-times"
                                                ng-click="CustomerModal.ClearAndRemoveField('HomeEmail','homeEmail')"></i>
                                        </div>
                                    </div>
                                    <div class="clearfix"></div>
                                    <div class="option_field"
                                        ng-show="CustomerModal.CustomerInfo.Type == 'Business'">
                                        <div class="lable_fields">
                                            <!-- <span class="form_lable_icons text"> 100 </span> -->
                                            <span class="form_lable_icons text" style="background: none;">  </span>
                                            <p>{!$Label.Label_Work} {!$Label.Label_Email}</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group large">
                                                <input type="email" class="form-control "
                                                    ng-model="CustomerModal.CustomerInfo.WorkEmail"
                                                    ng-class="{'redborder' : CustomerModal.CustomerValidation['WorkEmail']['isError'] == true}"
                                                    ng-blur="CustomerModal.getOtherSimilarCustomer(); CustomerModal.validateForm('WorkEmail');"
                                                    id="workEmail" placeholder="{!$Label.Label_Work} {!$Label.Label_Email}" rel="WorkEmail"
                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 5}}"
                                                    title="{{CustomerModal.CustomerValidation['WorkEmail']['ErrorMessage'] }}" />
                                                <a href="#" class="bookmarklink"> <i class="fa fa-star"
                                                    ng-class="CustomerModal.CustomerInfo.PreferredEmail == 'WorkEmail'?' yellow' : 'FC5'"
                                                    ng-click="CustomerModal.markFavourite('PreferredEmail','WorkEmail');"></i>
                                                </a>
                                            </div>

                                        </div>
                                        <div class="controls" id="WorkEmail">
                                            <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Add a work email address"></i> <i class="fa fa-times"
                                                ng-click="CustomerModal.ClearAndRemoveField('WorkEmail','workEmail')"></i>

                                        </div>
                                    </div>
                                    <div class="clearfix"></div>
                                    <div class="option_field"
                                        ng-show="CustomerModal.AdditionalFieldsInfo.OtherEmail.isPrimary">

                                        <div class="lable_fields">
                                            <!-- <span class="form_lable_icons text"> 100 </span> -->
                                            <span class="form_lable_icons text" style="background: none;">  </span>

                                            <p>{!$Label.Other_Email}</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group large">
                                                <input type="text" class="form-control "
                                                    ng-model="CustomerModal.CustomerInfo.OtherEmail"
                                                    ng-class="{'redborder' : CustomerModal.CustomerValidation['OtherEmail']['isError'] == true}"
                                                    ng-blur="CustomerModal.getOtherSimilarCustomer(); CustomerModal.validateForm('OtherEmail');"
                                                    id="otherEmail" placeholder="{!$Label.Other_Email}" rel="OtherEmail"
                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 6}}"
                                                    title="{{CustomerModal.CustomerValidation['OtherEmail']['ErrorMessage'] }}" />
                                                <a href="#" class="bookmarklink"> <i class="fa fa-star"
                                                    ng-class="CustomerModal.CustomerInfo.PreferredEmail == 'OtherEmail' ? ' yellow' : 'FC5'"
                                                    ng-click="CustomerModal.markFavourite('PreferredEmail','OtherEmail');"></i>
                                                </a>
                                            </div>

                                        </div>
                                        <div class="controls" id="OtherEmail">
                                            <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Add an alternate email address"></i> <i
                                                class="fa fa-times"
                                                ng-click="CustomerModal.ClearAndRemoveField('OtherEmail','otherEmail')"></i>

                                        </div>
                                    </div>
                                    <div class="clearfix"></div>
                                    <div class="option_field"
                                        ng-show="CustomerModal.CustomerInfo.Type == 'Individual'">
                                        <div class="lable_fields">
                                            <!-- <span class="form_lable_icons text"> 100 </span> -->
                                            <span class="form_lable_icons text" style="background: none;">  </span>
                                            <p>{!$Label.Label_Home} {!$Label.Label_Phone}</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group medium">
                                                <input type="text" class="form-control" id="homePhone" maxlength="10"
                                                    ng-model="CustomerModal.CustomerInfo.HomeNumber"
                                                    ng-class="{'redborder' : CustomerModal.CustomerValidation['HomeNumber']['isError'] == true}"
                                                    ng-blur="CustomerModal.getOtherSimilarCustomer(); CustomerModal.validateForm('HomeNumber');"
                                                    placeholder="{!$Label.Label_Home} {!$Label.Label_Phone}" rel="HomeNumber"
                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 7}}"
                                                    title="{{CustomerModal.CustomerValidation['HomeNumber']['ErrorMessage'] }}" />
                                                <a href="#" class="bookmarklink"> <i class="fa fa-star"
                                                    ng-class="CustomerModal.CustomerInfo.PreferredPhone == 'HomeNumber' ? ' yellow' : 'FC5'"
                                                    ng-click="CustomerModal.markFavourite('PreferredPhone','HomeNumber');"></i>
                                                </a>
                                            </div>
                                            <div class="form-group small" ng-class="{'disableHomeSmsChkBx' : CustomerModal.CustomerValidation['HomeNumber']['isError'] || CustomerModal.CustomerInfo.HomeNumber == null || CustomerModal.CustomerInfo.HomeNumber == undefined || CustomerModal.CustomerInfo.HomeNumber == ''}">

                                                <label class="checkbox smschkbox"> <span
                                                    class="chk_tick"
                                                    ng-class="{'chked' : CustomerModal.CustomerInfo.HomeNumberSMS==true}"
                                                    ng-click="CustomerModal.markSMS('HomeNumberSMS');">
                                                        <i class="fa fa-check-square chksqure"></i>
                                                </span>
                                                </label>
                                            </div>
                                            <div class="form-group small2">
                                                <label>{!$Label.Label_SMS} ?</label> <a href="#" class="bookmarklink"> <i
                                                    class="fa fa-star"
                                                    ng-class="CustomerModal.CustomerInfo.PreferredSMS == 'HomeNumber' ? ' yellow' : 'FC5'"
                                                    ng-click="CustomerModal.markFavourite('PreferredSMS','HomeNumber');"></i>
                                                </a>
                                            </div>
                                        </div>
                                        <div class="controls" id="HomeNumber">
                                            <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Add a personal phone number"></i> <i
                                                class="fa fa-times"
                                                ng-click="CustomerModal.ClearAndRemoveField('HomePhone', 'homePhone')"></i>
                                        </div>
                                    </div>

                                    <div class="clearfix"></div>
                                    <div class="option_field"
                                        ng-show="CustomerModal.CustomerInfo.Type == 'Business'">
                                        <div class="lable_fields">
                                            <!-- <span class="form_lable_icons text"> 100 </span> -->
                                            <span class="form_lable_icons text" style="background: none;">  </span>
                                            <p>{!$Label.Label_Work} {!$Label.Label_Phone}</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group medium">
                                                <input type="text" class="form-control" id="workPhone" maxlength="10"
                                                    ng-model="CustomerModal.CustomerInfo.WorkNumber"
                                                    ng-class="{'redborder' : CustomerModal.CustomerValidation['WorkNumber']['isError'] == true}"
                                                    ng-blur="CustomerModal.getOtherSimilarCustomer(); CustomerModal.validateForm('WorkNumber');"
                                                    placeholder="{!$Label.Label_Work} {!$Label.Label_Phone}" rel="WorkNumber"
                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 9}}"
                                                    title="{{CustomerModal.CustomerValidation['WorkNumber']['ErrorMessage'] }}" />
                                                <a href="#" class="bookmarklink"> <i class="fa fa-star"
                                                    ng-class="CustomerModal.CustomerInfo.PreferredPhone == 'WorkNumber'?' yellow' : 'FC5'"
                                                    ng-click="CustomerModal.markFavourite('PreferredPhone','WorkNumber');"></i>
                                                </a>
                                            </div>
                                            <div class="form-group small">
                                                <label class="checkbox smschkbox"> <span
                                                    class="chk_tick"
                                                    ng-class="{'chked' : CustomerModal.CustomerInfo.WorkNumberSMS == true}"
                                                    ng-click="CustomerModal.markSMS('WorkNumberSMS');">
                                                        <i class="fa fa-check-square chksqure"></i>
                                                </span>
                                                </label>
                                            </div>
                                            <div class="form-group small2">
                                                <label>{!$Label.Label_SMS} ?</label> <a href="#" class="bookmarklink"> <i
                                                    class="fa fa-star"
                                                    ng-class="CustomerModal.CustomerInfo.PreferredSMS == 'WorkNumber' ? ' yellow' : 'FC5'"
                                                    ng-click="CustomerModal.markFavourite('PreferredSMS','WorkNumber');"></i>
                                                </a>
                                            </div>
                                        </div>
                                        <div class="controls" id="WorkNumber">
                                            <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Add a work phone"></i> <i class="fa fa-times"
                                                ng-click="CustomerModal.ClearAndRemoveField('WorkNumber', 'workPhone')"></i>

                                        </div>
                                    </div>

                                    <div class="clearfix"></div>
                                    <div class="option_field"
                                        ng-show="CustomerModal.AdditionalFieldsInfo.OtherPhone.isPrimary">
                                        <div class="lable_fields">
                                            <!-- <span class="form_lable_icons text"> 100 </span> -->
                                            <span class="form_lable_icons text" style="background: none;"></span>
                                            <p>{!$Label.Other_Phone}</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group medium">
                                                <input type="text" class="form-control" id="otherPhoneId" maxlength="10"
                                                    ng-model="CustomerModal.CustomerInfo.OtherPhone"
                                                    ng-class="{'redborder' : CustomerModal.CustomerValidation['OtherPhone']['isError'] == true}"
                                                    ng-blur="CustomerModal.getOtherSimilarCustomer(); CustomerModal.validateForm('OtherPhone');"
                                                    placeholder="{!$Label.Other_Phone}" rel="OtherNumber"
                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 10.1}}"
                                                    title="{{CustomerModal.CustomerValidation['OtherPhone']['ErrorMessage'] }}" />
                                                <a href="#" class="bookmarklink"> <i class="fa fa-star"
                                                    ng-class="CustomerModal.CustomerInfo.PreferredPhone == 'OtherPhone' ? ' yellow' : 'FC5'"
                                                    ng-click="CustomerModal.markFavourite('PreferredPhone','OtherPhone');"></i>
                                                </a>
                                            </div>
                                            <div class="form-group small">
                                                <label class="checkbox smschkbox"> <span
                                                    class="chk_tick"
                                                    ng-class="{'chked' : CustomerModal.CustomerInfo.MobileNumberSMS == true}"
                                                    ng-click="CustomerModal.markSMS('MobileNumberSMS');">
                                                        <i class="fa fa-check-square chksqure"></i>
                                                </span>
                                                </label>
                                            </div>
                                            <div class="form-group small2">
                                                <label>{!$Label.Label_SMS} ?</label> <a href="#" class="bookmarklink"> <i
                                                    class="fa fa-star"
                                                    ng-class="CustomerModal.CustomerInfo.PreferredSMS == 'OtherPhone' ? ' yellow' : 'FC5'"
                                                    ng-click="CustomerModal.markFavourite('PreferredSMS','OtherPhone');"></i>
                                                </a>
                                            </div>
                                        </div>
                                        <div class="controls" id="OtherNumber">
                                            <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Add an alternate phone number"></i> <i
                                                class="fa fa-times"
                                                ng-click="CustomerModal.ClearAndRemoveField('OtherPhone', 'otherPhoneId')"></i>
                                        </div>
                                    </div>


                                    <div class="clearfix"></div>
                                    <div class="option_field">
                                        <div class="lable_fields">
                                            <!-- <span class="form_lable_icons text"> 100 </span> -->
                                            <span class="form_lable_icons text" style="background: none;"></span>
                                            <p>{!$Label.Label_Billing} {!$Label.Label_Address}</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group large">
                                                <label for="exampleInputEmail1">{!$Label.Label_Address} {!$Label.Label_Line}1</label> <input
                                                    type="text" class="form-control"
                                                    ng-model="CustomerModal.CustomerInfo.BillingStreet1"
                                                    ng-blur="CustomerModal.getOtherSimilarCustomer()"
                                                    id="billingAddress1"
                                                    placeholder="Apartment / Suite / Office address"
                                                    rel="BillingAddressLine1"
                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 11}}" />



                                            </div>
                                        </div>
                                        <div class="controls MT25" id="BillingAddressLine1">


                                            <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Apartment, suite, unit, building, floor, etc"></i> 
                                            <i class="fa fa-times" ng-click="CustomerModal.ClearAndRemoveField('BillingAddLine1', 'billingAddress1')"></i>

                                        </div>
                                        <div class="option_field">
											<div class="lable_fields">
												
												<p></p>
											</div>
	                                        <div class="form_fields">
	                                            <div class="form-group large">
	                                                <label for="exampleInputEmail1">{!$Label.Label_Address} {!$Label.Label_Line}2</label> <input
	                                                    type="text" class="form-control"
	                                                    ng-model="CustomerModal.CustomerInfo.BillingStreet2"
	                                                    id="billingAddress2" placeholder="Street Address"
	                                                    rel="BillingAddressLine2"
	                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 12}}" />
	
	                                            </div>
	                                        </div>
	                                        <div class="controls MT25" id="BillingAddressLine2">
	                                            <i class="fa fa-question-circle" data-toggle="tooltip"
	                                                title="Street address, P.O. box, {!$Label.Label_Company} name, c/o"></i> <i
	                                                class="fa fa-times"
	                                                ng-click="CustomerModal.ClearAndRemoveField('BillingAddLine2', 'billingAddress2')"></i>
	                                        </div>
	                                    </div>
	                                    <div class="option_field">
											<div class="lable_fields">
												
												<p></p>
											</div>
	                                        <div class="form_fields">
	                                           <div class="form-group half">
	                                                <label for="exampleInputEmail1">{!$Label.Label_City}</label> <input
	                                                    type="text" class="form-control" id="billingCity"
	                                                    ng-model="CustomerModal.CustomerInfo.BillingCity"
	                                                    placeholder="{!$Label.Label_City}" rel="CountryState"
	                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 13}}" />
	
	                                            </div>
	                                           
	                                            <div class="form-group half">
	                                                <label for="exampleInputEmail1">{!$Label.Label_State}</label> <select
	                                                    class="form-control" rel="CountryState" id="billingState"
	                                                    ng-model="CustomerModal.SelectedState"
	                                                    ng-options="state  as state.StateName for state in CustomerModal.State track by state.Id"
	                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 14}}">
	                                                </select>
	
	                                            </div>
	                                        </div>
	                                        <div class="controls MT25" id="CountryState">
	                                            <i class="fa fa-question-circle" data-toggle="tooltip"
	                                                title="Select City and State"></i> <i
	                                                class="fa fa-times"
	                                                ng-click="CustomerModal.ClearAndRemoveField('CountryState','billingCity')"></i>
	                                        </div>
	                                    </div>
	                                    <div class="option_field">
											<div class="lable_fields">
												
												<p></p>
											</div>
	                                        <div class="form_fields">
	                                             <div class="form-group half">
	                                                <label for="exampleInputEmail1">{!$Label.Label_Country}</label>
	                                                <select class="form-control" rel="CityPostal" id="billingCountry"
	                                                    ng-model="CustomerModal.SelectedCountry"
	                                                    ng-options="country as country.CountryName for country in CustomerModal.Country track by country.Id"
	                                                    ng-change="CustomerModal.changeBillingCountry()"
	                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 15}}">
	                                                </select>
	                                            </div>
	                                            
	                                            <div class="form-group half">
	                                                <label for="exampleInputEmail1">{!$Label.Label_Postal}</label> <input
	                                                    type="text" class="form-control" id="exampleInputEmail1" maxlength="10"
	                                                    ng-blur="CustomerModal.validateForm('BillingPostalCode');"
	                                                    ng-class="{'redborder' : CustomerModal.CustomerValidation['BillingPostalCode']['isError'] == true}"
	                                                    ng-model="CustomerModal.CustomerInfo.BillingPostalCode"
	                                                    placeholder="{!$Label.Label_Postal}" rel="CityPostal"
                                                    	title="{{CustomerModal.CustomerValidation['BillingPostalCode']['ErrorMessage'] }}"
	                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 16}}" />
	
	                                            </div>
	                                        </div>
	                                        <div class="controls MT25" id="CityPostal">
	                                            <i class="fa fa-question-circle" data-toggle="tooltip"
	                                                title="Add Country and Postal Code"></i> <i
	                                                class="fa fa-times"
	                                                ng-click="CustomerModal.ClearAndRemoveField('CityPostal','billingCountry')"></i>
	                                        </div>
	                                 	</div>

                                    </div>
                                    <div class="clearfix"></div>
                                    <div class="option_field">
                                        <div class="lable_fields chkbox">
                                        	<span class="form_lable_icons text" style="background: none;">  </span><!-- added by richa -->
                                            <p>{!$Label.Label_Shipping} {!$Label.Label_Address}</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group large">
                                                <label class="checkbox"><span id="sameAsBA"
                                                    ng-click="CustomerModal.SetAddressData()"
                                                    class="chk_tick" ng-class="{'chked': CustomerModal.CustomerInfo.IsBothAddressSame}">
                                                    <i class="fa fa-check-square chksqure"></i></span><span
                                                    class="chk_txt">{!$Label.Label_Same_As} {!$Label.Label_Billing} {!$Label.Label_Address}</span></label>
                                            </div>
                                        </div>

                                    </div>
                                    <div class="clearfix"></div>
                                    
                                    
                                    
                                     <div id="shippingAddress" ng-class="{'sameBillineAddress': CustomerModal.CustomerInfo.IsBothAddressSame, 'differentBillingAddress': !CustomerModal.CustomerInfo.IsBothAddressSame }">
	                                    <div class="option_field">
	                                    	<div class="lable_fields">
	                                            <!-- <span class="form_lable_icons text"> 100 </span> -->
	                                            <span class="form_lable_icons text" style="background: none;"> </span>
	                                            <p>{!$Label.Label_Shipping} {!$Label.Label_Address}</p>
	                                        </div>
	                                        
	                                        <div class="form_fields">
	                                            <div class="form-group large">
	                                                <label for="exampleInputEmail1">{!$Label.Label_Address} {!$Label.Label_Line}1</label> <input
	                                                    type="text" class="form-control"
	                                                    ng-model="CustomerModal.CustomerInfo.ShippingStreet1"
	                                                    id="shippingAddress1"
	                                                    placeholder="Apartment / Suite number"
	                                                    rel="ShippingAddressLine1"
	                                                    ng-attr-tabindex="{{CustomerModal.CustomerInfo.IsBothAddressSame ? -1 : CustomerModal.tabIndexValue + 18}}" />
	                                            </div>	
	                                        </div>
	                                        <div class="controls MT25" id="ShippingAddressLine1">
	                                            <i class="fa fa-question-circle" data-toggle="tooltip"
	                                                title="Apartment / Suite number"></i> 
	                                            <i class="fa fa-times" ng-click="CustomerModal.ClearAndRemoveField('ShippingAddLine1', 'shippingAddress1')"></i>
	                                        </div>
	                                        
	                                        <div class="option_field">
	                                        	<div class="lable_fields">
													<p></p>
												</div>
												
												<div class="form_fields">
		                                            <div class="form-group large">
		                                                <label for="exampleInputEmail1">{!$Label.Label_Address} {!$Label.Label_Line}2</label> <input
		                                                    type="text" class="form-control"
		                                                    ng-model="CustomerModal.CustomerInfo.ShippingStreet2"
		                                                    id="shippingAddress2" placeholder="Street Address"
		                                                    rel="ShippingAddressLine2"
		                                                    ng-attr-tabindex="{{CustomerModal.CustomerInfo.IsBothAddressSame ? -1 : CustomerModal.tabIndexValue + 19}}" />
		
		                                            </div>
		                                        </div>
		                                        <div class="controls MT25" id="ShippingAddressLine2">
		                                            <i class="fa fa-question-circle" data-toggle="tooltip"
		                                                title="Street"></i> <i
		                                                class="fa fa-times"
		                                                ng-click="CustomerModal.ClearAndRemoveField('ShippingAddLine2', 'shippingAddress2')"></i>
		                                        </div>
	                                        </div>
	                                        
	                                        <div class="option_field">
	                                        	<div class="lable_fields">
													<p></p>
												</div>
												
												<div class="form_fields">
		                                           <div class="form-group half">
		                                                <label for="exampleInputEmail1">{!$Label.Label_City}</label> <input
		                                                    type="text" class="form-control" ng-model="CustomerModal.CustomerInfo.ShippingCity"
		                                                    id="shippingCity" placeholder="{!$Label.Label_City}"
		                                                    rel="CountryStateShipping"
		                                                    ng-attr-tabindex="{{CustomerModal.CustomerInfo.IsBothAddressSame ? -1 : CustomerModal.tabIndexValue + 20}}" />
		
		                                            </div>
		                                           
		                                            <div class="form-group half">
		                                                <label for="exampleInputEmail1">{!$Label.Label_State}</label> <select
		                                                    class="form-control" id="shippingState"
		                                                    rel="CountryStateShipping"
		                                                    ng-model="CustomerModal.SelectedShippingState"
		                                                    ng-options="state  as state.StateName for state in CustomerModal.ShippingState track by state.Id"
		                                                    ng-attr-tabindex="{{CustomerModal.CustomerInfo.IsBothAddressSame ? -1 : CustomerModal.tabIndexValue + 21}}">
		                                                </select>
		
		                                            </div>
		                                        </div>
	                                        	<div class="controls MT25" id="CountryStateShipping">
		                                            <i class="fa fa-question-circle" data-toggle="tooltip"
		                                                title="Select City and State"></i> <i
		                                                class="fa fa-times"
		                                                ng-click="CustomerModal.ClearAndRemoveField('ShippingCountryState', 'shippingCity')"></i>
		                                        </div>
	                                        </div>
	                                        
	                                        <div class="option_field">
	                                        	<div class="lable_fields">
													<p></p>
												</div>
												
												<div class="form_fields">
		                                             <div class="form-group half">
		                                                <label for="exampleInputEmail1">{!$Label.Label_Country}</label>
		                                                <select class="form-control" rel="CityPostalShipping"
			                                                    ng-model="CustomerModal.SelectedShippingCountry"
			                                                    id="shippingCountry"
			                                                    ng-options="country as country.CountryName for country in CustomerModal.ShippingCountry track by country.Id"
			                                                    ng-change="CustomerModal.changeShippingCountry()"
			                                                    ng-attr-tabindex="{{CustomerModal.CustomerInfo.IsBothAddressSame ? -1 : CustomerModal.tabIndexValue + 22}}">
		                                                </select>
		                                            </div>
		                                            
		                                            <div class="form-group half">
		                                                <label for="exampleInputEmail1">{!$Label.Label_Postal}</label> <input
                                                    type="text" class="form-control" maxlength="10"
                                                    ng-blur="CustomerModal.validateForm('ShippingPostalCode');"
                                                    ng-class="{'redborder' : CustomerModal.CustomerValidation['ShippingPostalCode']['isError'] == true}"
                                                    ng-model="CustomerModal.CustomerInfo.ShippingPostalCode"
                                                    id="exampleInputEmail1" placeholder="{!$Label.Label_Postal}"
                                                    title="{{CustomerModal.CustomerValidation['ShippingPostalCode']['ErrorMessage'] }}"
                                                    rel="CityPostalShipping"
                                                    ng-attr-tabindex="{{CustomerModal.CustomerInfo.IsBothAddressSame ? -1 : CustomerModal.tabIndexValue + 23}}" />
													<!--  ng-attr-tabindex="{{CustomerModal.tabIndexValue + 23}}" -->
		                                            </div>
		                                        </div>
		                                        <div class="controls MT25" id="CityPostalShipping">
		                                            <i class="fa fa-question-circle" data-toggle="tooltip"
		                                                title="Add Country and Postal Code"></i> <i
		                                                class="fa fa-times"
		                                                ng-click="CustomerModal.ClearAndRemoveField('CityPostalShipping', 'shippingCountry')"></i>
		                                        </div>
	                                        </div>
                                        
	                                    </div>
	                                </div>
                                    
                                    
                                    
                                    <!-- <div class="option_field pull-left" id="billingaddress" ng-class="{'sameBillineAddress': CustomerModal.CustomerInfo.IsBothAddressSame, 'differentBillingAddress': !CustomerModal.CustomerInfo.IsBothAddressSame }">
                                        <div class="lable_fields">
                                            <span class="form_lable_icons text"> 100 </span>
                                            <p>{!$Label.Label_Shipping} {!$Label.Label_Address}</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group large">
                                                <label for="exampleInputEmail1">{!$Label.Label_Address} {!$Label.Label_Line}1</label> <input
                                                    type="text" class="form-control"
                                                    ng-model="CustomerModal.CustomerInfo.ShippingStreet1"
                                                    id="shippingAddress1"
                                                    placeholder="Apartment / Suite number"
                                                    rel="ShippingAddressLine1"
                                                    ng-attr-tabindex="{{CustomerModal.CustomerInfo.IsBothAddressSame ? -1 : CustomerModal.tabIndexValue + 18}}" />
                                            		<!-- ng-attr-tabindex="{{CustomerModal.tabIndexValue + 18}}" -->
                                            <!-- </div>
                                            <div class="controls1 controls" id="ShippingAddressLine1">
                                                <i class="fa fa-question-circle" data-toggle="tooltip"
                                                    title="Apartment / Suite number"></i> <i
                                                    class="fa fa-times"
                                                    ng-click="CustomerModal.ClearAndRemoveField('ShippingAddLine1', 'shippingAddress1')"></i>

                                            </div>
                                            <div class="form-group large">
                                                <label for="exampleInputEmail1">{!$Label.Label_Address} {!$Label.Label_Line}2</label> <input
                                                    type="text" class="form-control"
                                                    ng-model="CustomerModal.CustomerInfo.ShippingStreet2"
                                                    id="shippingAddress2" placeholder="Street Address"
                                                    rel="ShippingAddressLine2"
                                                    ng-attr-tabindex="{{CustomerModal.CustomerInfo.IsBothAddressSame ? -1 : CustomerModal.tabIndexValue + 19}}" />
                                                    
                                                    <!-- ng-attr-tabindex="{{CustomerModal.tabIndexValue + 19}}" -->

                                            <!--</div>
                                            <div class="controls1 controls" id="ShippingAddressLine2">
                                                <i class="fa fa-question-circle" data-toggle="tooltip"
                                                    title="Street"></i> <i class="fa fa-times"
                                                    ng-click="CustomerModal.ClearAndRemoveField('ShippingAddLine2', 'shippingAddress2')"></i>

                                            </div>

                                            
                                            
                                            <div class="form-group half">
                                                <label for="exampleInputEmail1">{!$Label.Label_City}</label> <input
                                                    type="text" class="form-control"
                                                    ng-model="CustomerModal.CustomerInfo.ShippingCity"
                                                    id="shippingCity" placeholder="{!$Label.Label_City}"
                                                    rel="CountryStateShipping"
                                                   ng-attr-tabindex="{{CustomerModal.CustomerInfo.IsBothAddressSame ? -1 : CustomerModal.tabIndexValue + 20}}" />
													<!--  ng-attr-tabindex="{{CustomerModal.tabIndexValue + 20}}" /> -->
                                            <!--</div>
                                            
                                            <div class="form-group half">
                                                <label for="exampleInputEmail1">{!$Label.Label_State}</label> <select
                                                    class="form-control" rel="CountryStateShipping"
                                                    ng-model="CustomerModal.SelectedShippingState"
                                                    ng-options="state  as state.StateName for state in CustomerModal.ShippingState track by state.Id"
                                                    ng-attr-tabindex="{{CustomerModal.CustomerInfo.IsBothAddressSame ? -1 : CustomerModal.tabIndexValue + 21}}">
                                                </select>

												<!-- ng-attr-tabindex="{{CustomerModal.tabIndexValue + 21}}"> -->
                                            <!--</div>
                                            <div class="controls1 controls" id="CountryStateShipping">
                                                <i class="fa fa-question-circle" data-toggle="tooltip"
                                                    title="Select City and State"></i> <i
                                                    class="fa fa-times"
                                                    ng-click="CustomerModal.ClearAndRemoveField('ShippingCountryState', 'shippingCity')"></i>

                                            </div>

                                            
                                            
                                            
                                            <div class="form-group half">

                                                <label for="exampleInputEmail1">{!$Label.Label_Country}</label> <select
                                                    class="form-control" rel="CityPostalShipping"
                                                    ng-model="CustomerModal.SelectedShippingCountry"
                                                    id="shippingCountry"
                                                    ng-options="country as country.CountryName for country in CustomerModal.ShippingCountry track by country.Id"
                                                    ng-change="CustomerModal.changeShippingCountry()"
                                                    ng-attr-tabindex="{{CustomerModal.CustomerInfo.IsBothAddressSame ? -1 : CustomerModal.tabIndexValue + 22}}">
                                                    
                                                    <!-- ng-attr-tabindex="{{CustomerModal.tabIndexValue + 22}}" -->
                                               <!-- </select>
                                            </div>
                                            <div class="form-group half">
                                                <label for="exampleInputEmail1">{!$Label.Label_Postal}</label> <input
                                                    type="text" class="form-control" maxlength="10"
                                                    ng-blur="CustomerModal.validateForm('ZipPostalCode');"
                                                    ng-class="{'redborder' : CustomerModal.CustomerValidation['ZipPostalCode']['isError'] == true}"
                                                    ng-model="CustomerModal.CustomerInfo.ShippingPostalCode"
                                                    id="exampleInputEmail1" placeholder="{!$Label.Label_Postal}"
                                                    title="{{CustomerModal.CustomerValidation['ZipPostalCode']['ErrorMessage'] }}"
                                                    rel="CityPostalShipping"
                                                    ng-attr-tabindex="{{CustomerModal.CustomerInfo.IsBothAddressSame ? -1 : CustomerModal.tabIndexValue + 23}}" />
													<!--  ng-attr-tabindex="{{CustomerModal.tabIndexValue + 23}}" -->
                                           <!-- </div>
                                            <div class="controls1 controls" id="CityPostalShipping">
                                                <i class="fa fa-question-circle" data-toggle="tooltip"
                                                    title="Add Country and Postal Code"></i> <i
                                                    class="fa fa-times"
                                                    ng-click="CustomerModal.ClearAndRemoveField('CityPostalShipping', 'shippingCountry')"></i>

                                            </div>
                                        </div>

                                    </div>-->
                                    <div class="clearfix"></div>  
                                    <div class="option_field"
                                        ng-show="CustomerModal.AdditionalFieldsInfo.Birthdate.isPrimary && CustomerModal.CustomerInfo.Type == 'Individual'">
                                        <div class="lable_fields">
                                        	<span class="form_lable_icons text" style="background: none;">  </span><!-- Added by richa -->
                                            <p>{!$Label.Label_Birthday}</p>  
                                        </div>  
                                        <div class="form_fields">
                                            <div class="form-group half" style="width: 24%">
                                                <select class="form-control" rel="BirthdayIcon"
                                                    ng-change="CustomerModal.ChangeYear()"
                                                    ng-model="CustomerModal.BirthyearSelected"
                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 24}}"
                                                    ng-options="i as i.year for i in CustomerModal.BirthYears track by i.year">
                                                </select>
                                            </div>
                                            <div class="form-group half">
                                                <select class="form-control" rel="BirthdayIcon"
                                                    id="birthMonth" ng-change="CustomerModal.ChangeMonth()"
                                                    ng-model="CustomerModal.BirthmonthSelected"
                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 25}}">
                                                    <option value="1">{!$Label.Label_January}</option>
                                                    <option value="2">{!$Label.Label_February}</option>
                                                    <option value="3">{!$Label.Label_March}</option>
                                                    <option value="4">{!$Label.Label_April}</option>
                                                    <option value="5">{!$Label.Label_May}</option>
                                                    <option value="6">{!$Label.Label_June}</option>
                                                    <option value="7">{!$Label.Label_July}</option>
                                                    <option value="8">{!$Label.Label_August}</option>
                                                    <option value="9">{!$Label.Label_September}</option>
                                                    <option value="10">{!$Label.Label_October}</option>
                                                    <option value="11">{!$Label.Label_November}</option>
                                                    <option value="12">{!$Label.Label_December}</option>
                                                </select>

                                            </div>
                                            <div class="form-group half" style="width: 18%">
                                                <select class="form-control" rel="BirthdayIcon"
                                                    ng-model="CustomerModal.BirthdaySelected"
                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 26}}"
                                                    ng-options="i as i.day for i in CustomerModal.BirthDays track by i.day">
                                                </select>
                                            </div>


                                        </div>
                                        <div class="controls" id="BirthdayIcon">
                                            <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Add customer Birth Date"></i> <i class="fa fa-times"
                                                ng-click="CustomerModal.ClearAndRemoveField('Birthdate')"></i>

                                        </div>
                                    </div>
                                    <div class="clearfix"></div>
                                    <div class="option_field"
                                        ng-show="CustomerModal.AdditionalFieldsInfo.FacebookLink.isPrimary">
                                        <div class="lable_fields">
                                        	<span class="form_lable_icons text" style="background: none;">  </span><!-- Added by richa -->
                                            <p>{!$Label.Label_Facebook}</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group large">
                                                <input type="text" class="form-control"
                                                    ng-model="CustomerModal.CustomerInfo.FacebookLink"
                                                    ng-blur="CustomerModal.getOtherSimilarCustomer()"
                                                    id="facebookLink" placeholder="{!$Label.Label_Facebook}" rel="FacebookIcon"
                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 27}}" />
                                                <a href="" class="bookmarklink"> <i
                                                    class="fa fa-facebook-square" style="color: #45619D;"></i>
                                                </a>
                                            </div>
                                        </div>
                                        <div class="controls" id="FacebookIcon">
                                            <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Add Facebook profile link"></i> <i
                                                class="fa fa-times"
                                                ng-click="CustomerModal.ClearAndRemoveField('FacebookLink')"></i>
                                        </div>
                                    </div>
                                    <div class="clearfix"></div>
                                    <div class="option_field"
                                        ng-show="CustomerModal.AdditionalFieldsInfo.TwitterLink.isPrimary">
                                        <div class="lable_fields">
                                        	<span class="form_lable_icons text" style="background: none;">  </span><!-- Added by richa -->
                                            <p>{!$Label.Label_Twitter}</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group large">
                                                <input type="text" class="form-control"
                                                    ng-model="CustomerModal.CustomerInfo.TwitterLink"
                                                    ng-blur="CustomerModal.getOtherSimilarCustomer()"
                                                    id="twitterLink" placeholder="{!$Label.Label_Twitter}" rel="TwitterIcon"
                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 28}}" />
                                                <a href="" class="bookmarklink"> <i
                                                    class="fa fa-twitter-square" style="color: #52A7E7;"></i>
                                                </a>
                                            </div>
                                        </div>
                                        <div class="controls" id="TwitterIcon">
                                            <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Add Twitter link"></i> <i class="fa fa-times"
                                                ng-click="CustomerModal.ClearAndRemoveField('TwitterLink')"></i>
                                        </div>
                                    </div>

                                    <div class="option_field"
                                        ng-show="CustomerModal.AdditionalFieldsInfo.LinkedInLink.isPrimary">
                                        <div class="lable_fields">
                                        	<span class="form_lable_icons text" style="background: none;">  </span><!-- Added by richa -->
                                            <p>{!$Label.Label_LinkedIn}</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group large">
                                                <input type="text" class="form-control"
                                                    ng-model="CustomerModal.CustomerInfo.LinkedInLink"
                                                    ng-blur="CustomerModal.getOtherSimilarCustomer()"
                                                    id="LinkedinLink" placeholder="{!$Label.Label_LinkedIn}" rel="LinkedInIcon"
                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 29}}" />
                                                <a href="" class="bookmarklink"> <i
                                                    class="fa fa-linkedin" style="color: #52A7E7;"></i>

                                                </a>
                                            </div>
                                        </div>
                                        <div class="controls" id="LinkedInIcon">
                                            <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Add LinkedIn profile link"></i> <i
                                                class="fa fa-times"
                                                ng-click="CustomerModal.ClearAndRemoveField('LinkedInLink')"></i>
                                        </div>
                                    </div>
                                    <div class="clearfix"></div>
                                    <div class="option_field"
                                        ng-show="CustomerModal.AdditionalFieldsInfo.Company.isPrimary && CustomerModal.CustomerInfo.Type == 'Individual'">
                                        <div class="lable_fields">
                                        	<span class="form_lable_icons text" style="background: none;">  </span><!-- Added by richa -->
                                            <p>{!$Label.Label_Company}</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group large">
                                                <input type="text" class="form-control"
                                                    ng-model="CustomerModal.CustomerInfo.Company"
                                                    id="companyName" placeholder="{!$Label.Label_Company}" rel="CompanyIcon"
                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 30}}" />
                                            </div>
                                        </div>
                                        <div class="controls" id="CompanyIcon">
                                            <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Add {!$Label.Label_Company}"></i> <i class="fa fa-times "
                                                ng-click="CustomerModal.ClearAndRemoveField('Company')"></i>
                                        </div>
                                    </div>

                                    <div class="clearfix"></div>
                                    <div class="option_field"
                                        ng-show="CustomerModal.AdditionalFieldsInfo.JobTitle.isPrimary && CustomerModal.CustomerInfo.Type == 'Individual'">
                                        <div class="lable_fields">
                                        	<span class="form_lable_icons text" style="background: none;">  </span><!-- Added by richa -->
                                            <p>{!$Label.Job_Title}</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group large">
                                                <input type="text" class="form-control"
                                                    ng-model="CustomerModal.CustomerInfo.JobTitle"
                                                    id="jobTitle" placeholder="{!$Label.Job_Title}" rel="JobtitleIcon"
                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 31}}" />
                                            </div>
                                        </div>
                                        <div class="controls" id="JobtitleIcon">
                                            <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="{!$Label.Label_Add} {!$Label.Job_Title}"></i> <i class="fa fa-times"
                                                ng-click="CustomerModal.ClearAndRemoveField('JobTitle')"></i>

                                        </div>
                                    </div>
                                </form>
                            </div>
                            <div class="clearfix"></div>
                            
                            
                            <div class="addMoreInfoSection">
                                    <button type="button" class="btn C11 T4 addmoreinfoBtn"
                                        data-toggle="dropdown">{!$Label.Label_Add_More_Information}</button>
                                    <ul class="add_info_dropdown dropdown-menu keep_open">
                                        <div class="right-inner-addon" style="margin: 0 10px;">
                                            <i class="glyphicon glyphicon-search"></i> <input
                                                class="form-control ng-pristine ng-untouched ng-valid"
                                                ng-model="CustomerModal.AdditionalFieldsSearch"
                                                placeholder="Search" type="search" />
        
                                        </div>
        
                                        <li
                                            ng-repeat="(key,value) in FilterAdditionalFields(CustomerModal.AdditionalFieldsInfo)"
                                            ng-if="CustomerModal.manageAdditionalFields(key) && CustomerModal.ShowOrHideActive(key);"
                                            ng-click="CustomerModal.ShowAdditionalField(key)"><a
                                            href="#">{{value.label}}</a></li>
                                    </ul>
                            </div>
                            

                        </div>
                    </div>
                    <div class="clearfix"></div>
                    <div class="popupinside">
                        <div class="popupleft col-lg-4 col-lg-4" ng-show="CustomerModal.IsEditMode != true">
                            <div class="popupleft_container"
                                style="border-top: 1px solid #cccccc;"
                                ng-show="CustomerModal.IsEditMode == false">
                                <h1 class="letpanel_heading">{!$Label.Label_Existing} {!$Label.Customer_Owned_Unit_Object_Display_Label} {!$Label.Label_Like_This}</h1>
                                <i class="fa fa-question-circle helptip"
                                    style="float: left; font-weight: bold; color: #B7BEC6; margin-top: 20px; margin-bottom: 10px; font-size: 20px;"></i>
                                <div class="goldbox exists col-lg-12 col-md-12"
                                    ng-repeat="SimilarCOU in  CustomerModal.SimilarCOU">
                                    <!-- <div class="leftgoldbox">
                                        <img class="starimg" src="{!URLFOR($Resource.Images, 'star.png')}" />
                                        <div class="star_container">
                                            <i class="fa fa-star" style="float: left;color: #B7BEC6;margin-top: 5px;"></i> 
                                            <i class="fa fa-star" style="float: left;color: #B7BEC6;margin-top: 5px;"></i> 
                                        </div>
                                    </div> -->
                                    <div class="rightgoldbox rightgoldboxML type2" style="margin-left: 0px;">
                                        <p class="cust_name address">
                                            {{SimilarCOU.ModelName}}<br />
                                            {!$Label.Label_Last} {!$Label.Label_Mileage}: {{SimilarCOU.Mileage}} {!$Label.Label_Mileage_Measure} <br />
                                            {!$Label.Label_Color}: {{SimilarCOU.Color}}<br /> 
                                            {!$Label.Label_VIN}: {{SimilarCOU.VIN}}<br />
                                            {!$Label.Label_Plate}: {{SimilarCOU.Plate}}
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="popupright"
                                ng-class="{'col-lg-8 col-lg-8': CustomerModal.IsEditMode == false , 'leftBorderNone col-lg-12 col-lg-12': CustomerModal.IsEditMode == true}">
                            <div class="tabconainer noborder"
                                style="border-top: 1px solid #cccccc; padding-top: 30px;">
                                <form>


                                    <div class="option_field"
                                        ng-repeat="unit in CustomerModal.CustumerUnitModal"
                                        ng-show="CustomerModal.IsEditMode == false">

                                        <div class="lable_fields">
                                            <!-- <span class="form_lable_icons text"> 100 </span> -->
                                            <span class="form_lable_icons text" style="background: none;"> </span>
                                            <p>{!$Label.Customer_Owned_Unit_Object_Display_Label}</p>
                                        </div>
                                        <div class="form_fields">


                                            <div class="form-group large">
                                                <label for="exampleInputEmail1">{!$Label.Label_VIN}</label> <input
                                                    type="text" class="form-control" ng-model="unit.VIN"
                                                    id="vinId{{$index}}" placeholder="{!$Label.Label_VIN}"
                                                    ng-focus="CustomerModal.OnFocus('CustomerUnitOptionalVIN'+$index)"
                                                    ng-blur="CustomerModal.OnBlurVin(unit.VIN); CustomerModal.ValidateCou($index,'VIN');"
                                                    rel="{{$index==0 ? 'customerUnitMainVin' : 'CustomerUnitOptional'+$index}}"
                                                    ng-attr-tabindex="{{($index * 8) + CustomerModal.tabIndexValue + 37}}"
                                                    ng-class="{'redborder' : CustomerModal.CustomerValidationCOU[$index]['VIN'].isError == true}"
                                                    title="{{CustomerModal.CustomerValidationCOU[$index]['VIN'].ErrorMessage}}" />
                                            </div>
                                        </div>
                                        <div class="controls MT25"
                                            id="{{'CustomerUnitOptionalVIN'+$index}}">
                                            <i class="fa fa-question-circle" 
                                                data-toggle="tooltip"
                                                title="Add Vehicle Identification Number of the Unit"></i>
                                            <i class="fa fa-times"
                                                ng-click="CustomerModal.ClearAndRemoveSectionField($index,'CustomerUnitModelVin', 'vinId')"></i>
                                        </div>
                                         <div class="option_field">
											<div class="lable_fields">
												
												<p></p>
											</div>
	                                        <div class="form_fields">
	
	                                            <div class="form-group half">
	                                                <label for="exampleInputEmail1">{!$Label.Label_Year}</label> <select
	                                                    class="form-control" placeholder="Year"
	                                                    ng-focus="CustomerModal.OnFocus('CustomerUnitOptionalYearMake'+$index)"
	                                                    ng-blur="CustomerModal.OnBlur('CustomerUnitOptionalYearMake'+$index)"
	                                                    id="customerUnitYearMakeId"
	                                                    ng-model="CustomerModal.UnitYearSelected[$index]"
	                                                    ng-change="CustomerModal.changeUnitYear($index)"
	                                                    rel="{{$index==0 ? 'customerUnitMainyearMake' : 'CustomerUnitOptional'+$index}}"
	                                                    ng-attr-tabindex="{{($index * 8) + CustomerModal.tabIndexValue + 37}}"
	                                                    ng-options="i as i.modelyear for i in CustomerModal.ModelYears track by i.modelyear">
	
	
	                                                </select>
	
	                                            </div>
	
	
	                                            <div class="form-group half">
	                                                <label for="exampleInputEmail1">{!$Label.Make_Object_Display_Label}</label> <select
	                                                    class="form-control"
	                                                    ng-model="CustomerModal.UnitMakeSelected[$index]"
	                                                    ng-focus="CustomerModal.OnFocus('CustomerUnitOptionalYearMake'+$index)"
	                                                    ng-blur="CustomerModal.OnBlur('CustomerUnitOptionalYearMake'+$index);
	                                                            CustomerModal.ValidateCou($index,'Make');"
	                                                    rel="{{$index==0 ? 'customerUnitMainyearMake' : 'CustomerUnitOptional'+$index}}"
	                                                    ng-options="make as make.UnitMakeName for make in CustomerModal.UnitMake track by make.Id"
	                                                    ng-change="CustomerModal.changeUnitMake($index)"
	                                                    ng-attr-tabindex="{{($index * 8) + CustomerModal.tabIndexValue + 39}}"
	                                                    ng-class="{'redborder' : CustomerModal.CustomerValidationCOU[$index]['Make'].isError == true}"
	                                                    title="{{CustomerModal.CustomerValidationCOU[$index]['Make'].ErrorMessage}}" >
	                                                    <option selected="selected">{!$Label.Label_Select}</option>
	
	                                                </select>
	
	                                            </div>
	                                        </div>
	                                        <div class="controls MT25" 
	                                        	id="{{'CustomerUnitOptionalYearMake'+$index}}">
	                                            <i class="fa fa-question-circle" data-toggle="tooltip"
	                                                title="Select Year and Make of the Unit"></i> 
                                                <i class="fa fa-times" ng-if="$index == 0"
	                                                ng-click="CustomerModal.ClearAndRemoveSectionField($index,'CustomerUnitYearMake', 'customerUnitYearMakeId')"></i>
	                                        </div>
	                                    </div>
	                                     <div class="option_field">
											<div class="lable_fields">
												
												<p></p>
											</div>
	                                        <div class="form_fields">
	                                            <div class="form-group half">
	                                                <label for="exampleInputEmail1">{!$Label.Model_Object_Display_Label}</label> <select
	                                                    class="form-control"
	                                                    ng-model="CustomerModal.UnitModelSelected[$index]"
	                                                    ng-focus="CustomerModal.OnFocus('CustomerUnitOptionalModelSubModel'+$index)"
	                                                    id="customerUnitModelId"
	                                                    ng-blur="CustomerModal.OnBlur('CustomerUnitOptionalModelSubModel'+$index);
	                                                            CustomerModal.ValidateCou($index,'Model');"
	                                                    rel="{{$index==0 ? 'customerUnitMainModel' : 'CustomerUnitOptional'+$index}}"
	                                                    ng-attr-tabindex="{{($index * 8) + CustomerModal.tabIndexValue + 40}}"
	                                                    ng-options="model as model.UnitModelName for model in CustomerModal.UnitModel[$index] track by model.Id"
	                                                    ng-change="CustomerModal.changeUnitmodel($index)"
	                                                    ng-class="{'redborder' : CustomerModal.CustomerValidationCOU[$index]['Model'].isError == true}"
	                                                    title="{{CustomerModal.CustomerValidationCOU[$index]['Model'].ErrorMessage}}" >
	
	                                                </select>
	
	
	                                            </div>
	                                            <div class="form-group half">
	                                                <label for="exampleInputEmail1">{!$Label.Sub_Model_Object_Display_Label}</label> <input
	                                                    type="text" class="form-control" ng-disabled="true"
	                                                    ng-model="CustomerModal.UnitModelSelected[$index].SubModelName"
	                                                    id="exampleInputEmail1" placeholder="{!$Label.Sub_Model_Object_Display_Label}"
	                                                    ng-focus="CustomerModal.OnFocus('CustomerUnitOptionalModelSubModel'+$index)"
	                                                    ng-blur="CustomerModal.OnBlur('CustomerUnitOptionalModelSubModel'+$index)"
	                                                    rel="{{$index==0 ? 'customerUnitMainModel' : 'CustomerUnitOptional'+$index}}"
	                                                    ng-attr-tabindex="{{($index * 8) + CustomerModal.tabIndexValue + 41}}" />
	
	                                            </div>
	                                        </div>
	                                        <div class="controls MT25" 
	                                            id="{{'CustomerUnitOptionalModelSubModel'+$index}}">
	                                            <i class="fa fa-question-circle" data-toggle="tooltip"
	                                                title="Select Model and Sub-Model of the Unit"></i> 
                                                <i class="fa fa-times" ng-if="$index == 0"
	                                                ng-click="CustomerModal.ClearAndRemoveSectionField($index,'CustomerUnitModelSubModel', 'customerUnitModelId')"></i>
	                                        </div>
	                                    </div>
	                                     <div class="option_field">
											<div class="lable_fields">
												
												<p></p>
											</div>
	                                        <div class="form_fields">
	                                            <div class="form-group large">
	                                                <label for="exampleInputEmail1">{!$Label.Label_License} {!$Label.Label_Plate}</label> <input
	                                                    type="text" class="form-control" ng-model="unit.Plate"
	                                                    id="plateId" placeholder="{!$Label.Label_License} {!$Label.Label_Plate}"
	                                                    ng-focus="CustomerModal.OnFocus('CustomerUnitOptionalLicense'+$index)"
	                                                    ng-blur="CustomerModal.OnBlur('CustomerUnitOptionalLicense'+$index)"
	                                                    rel="{{$index==0 ? 'customerUnitMainLisense' : 'CustomerUnitOptional'+$index}}"
	                                                    ng-attr-tabindex="{{($index * 8) + CustomerModal.tabIndexValue + 42}}" />
	
	                                            </div>
	                                        </div>
	                                        <div class="controls MT25" 
	                                            id="{{'CustomerUnitOptionalLicense'+$index}}">
	                                            <i class="fa fa-question-circle" data-toggle="tooltip"
	                                                title="Add License PLate Number of the Unit"></i> 
                                                <i class="fa fa-times" ng-if="$index == 0"
	                                                ng-click="CustomerModal.ClearAndRemoveSectionField($index,'CustomerUnitLicensePlate', 'plateId')"></i>
	                                        </div>
	                                    </div>
	                                     <div class="option_field">
											<div class="lable_fields">
												
												<p></p>
											</div>
	                                        <div class="form_fields">
	                                            <div class="form-group large">
	                                                <label for="exampleInputEmail1">{!$Label.Label_Mileage}</label> <input
	                                                    type="text" class="form-control" ng-model="unit.Mileage"
	                                                    id="mileageId" placeholder="{!$Label.Label_Mileage}"
	                                                    ng-focus="CustomerModal.OnFocus('CustomerUnitOptionalMilage'+$index)"
	                                                    ng-blur="CustomerModal.ValidateCou($index,'Mileage'); CustomerModal.OnBlur('CustomerUnitOptionalMilage'+$index);"
	                                                    rel="{{$index==0 ? 'customerUnitMainMilage' : 'CustomerUnitOptional'+$index}}"
	                                                    ng-attr-tabindex="{{($index * 8) + CustomerModal.tabIndexValue + 43}}"
	                                                    ng-class="{'redborder' : CustomerModal.CustomerValidationCOU[$index]['Mileage'].isError == true}"
	                                                    title="{{CustomerModal.CustomerValidationCOU[$index]['Mileage'].ErrorMessage}}" />
	
	                                            </div>
	                                        </div>
	                                        <div class="controls MT25" 
	                                            id="{{'CustomerUnitOptionalMilage'+$index}}">
	                                            <i class="fa fa-question-circle" data-toggle="tooltip"
	                                                title="Add Mileage of the Unit"></i> 
                                                <i class="fa fa-times" ng-if="$index == 0"
	                                                ng-click="CustomerModal.ClearAndRemoveSectionField($index,'CustomerUnitMilage', 'mileageId')"></i>
	                                        </div>
	                                    </div>
	                                     <div class="option_field">
											<div class="lable_fields">
												
												<p></p>
											</div>
	                                        <div class="form_fields">
	                                            <div class="form-group large">
	                                                <label for="exampleInputEmail1">{!$Label.Label_Color}</label> <input
	                                                    type="text" class="form-control" ng-model="unit.Color"
	                                                    id="colorId" placeholder="{!$Label.Label_Color}"
	                                                    ng-focus="CustomerModal.OnFocus('CustomerUnitOptionalColor'+$index)"
	                                                    ng-blur="CustomerModal.OnBlur('CustomerUnitOptionalColor'+$index)"
	                                                    rel="{{$index==0 ? 'customerUnitMainColor' : 'CustomerUnitOptional'+$index}}"
	                                                    ng-attr-tabindex="{{($index * 8) + CustomerModal.tabIndexValue + 44}}" />
	
	                                            </div>
	                                        </div>
	                                        <div class="controls MT25" 
	                                            id="{{'CustomerUnitOptionalColor'+$index}}">
	                                            <i class="fa fa-question-circle" data-toggle="tooltip"
	                                                title="Add Color of the Unit"></i> <i
	                                                class="fa fa-times" ng-if="$index == 0"
	                                                ng-click="CustomerModal.ClearAndRemoveSectionField($index,'customerUnitColor', 'colorId')"></i>
	                                        </div>
	                                    </div>
                                    </div>

                                    <div class="clearfix"></div>
                                    <div class="option_field"
                                        ng-show="CustomerModal.AdditionalFieldsInfo.PriceLevel.isPrimary">

                                        <div class="lable_fields">
                                        	<span class="form_lable_icons text" style="background: none;">  </span><!-- added by richa -->
                                            <p>{!$Label.Label_Price_Level}</p>




                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group half">
                                                <select class="form-control" rel="PriceLevelIcon"
                                                    id="priceLevelDropDown"
                                                    ng-model="CustomerModal.SelectedPriceLevel"
                                                    ng-options="pricelevel as pricelevel.PriceLevelName for pricelevel in CustomerModal.PriceLevel track by pricelevel.Id"
                                                    ng-change="CustomerModal.changePriceLevel()"
                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 200}}">
                                                </select>
                                            </div>



















                                            
                                        </div>

                                        <div class="controls" id="PriceLevelIcon">
                                            <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Add {!$Label.Label_Price_Level} of the Customer"></i> <i
                                                class="fa fa-times"
                                                ng-click="CustomerModal.ClearAndRemoveField('PriceLevel')"></i>
                                        </div>
                                    </div>


									<!--
                                    <div class="clearfix"></div>
                                    <div class="option_field"
                                        ng-show="CustomerModal.AdditionalFieldsInfo.TaxLevel.isPrimary">
                                        <div class="lable_fields">
                                            <p>{!$Label.Label_Tax_Level}</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group half">
                                                <select class="form-control" rel="TaxLevelIcon"
                                                    id="taxLevel" ng-model="CustomerModal.SelectedSalesTax"
                                                    ng-options="salesTax as salesTax.SalesTaxName for salesTax in CustomerModal.SalesTax track by salesTax.Id"
                                                    ng-change="CustomerModal.changeSalesTax()"
                                                    ng-attr-tabindex="{{CustomerModal.tabIndexValue + 200}}">




                                                </select>
                                            </div>
                                            
                                        </div>

                                        <div class="controls" id="TaxLevelIcon">
                                            <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Add {!$Label.Label_Tax_Level} for the Customer"></i> <i

                                                class="fa fa-times"
                                                ng-click="CustomerModal.ClearAndRemoveField('TaxLevel')"></i>







                                        </div>
                                    </div> -->




                                    <div class="option_field"
                                        ng-show="CustomerModal.AdditionalFieldsInfo.IsVendor.isPrimary">

                                        <div class="lable_fields">
                                            <span class="form_lable_icons text" style="background: none;">

                                            </span>
                                            <p>{!$Label.Vendor_Object_Display_Label}</p>

                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group onehalf">
                                                <div class="chkbox_custom" rel="VendorIcon">
                                                    <div class="leftchked "
                                                        ng-class="{'checked' : CustomerModal.CustomerInfo.IsVendor}"
                                                        id="ActiveVendor"
                                                        ng-click="CustomerModal.SetVendorActive(true)">{!$Label.Label_Yes}
                                                    </div>
                                                    <div class="rightchked "
                                                        ng-class="{'checked' : CustomerModal.CustomerInfo.IsVendor != true }"
                                                        id="DeActiveVendor"
                                                        ng-click="CustomerModal.SetVendorActive(false)">{!$Label.Label_No}
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group threehalf">
                                                <select class="form-control" rel="VendorIcon"
                                                    id="vendorDropDown"
                                                    ng-disabled="CustomerModal.CustomerInfo.IsVendor !=true"
                                                    ng-model="CustomerModal.VendorSelectedSalesTax"
                                                    ng-options="purchase as purchase.SalesTaxName for purchase in CustomerModal.SalesTax track by purchase.Id">

                                                </select>
                                            </div>
                                        </div>
                                        <div class="controls" id="VendorIcon">
                                            <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Select if this Customer is also a Vendor"></i> <i
                                                class="fa fa-times"
                                                ng-click="CustomerModal.ClearAndRemoveField('IsVendor')"></i>

                                        </div>
                                    </div>




                                    <div class="clearfix"></div>
                                    <div class="right_heading_container col-lg-12 col-md-12">
                                        <div class="savecancle_btncntnr">
                                            <button type="button" id="closemodal"
                                                class="btn btn-default grayBtn"
                                                ng-click="CustomerModal.CancelCustomer()"
                                                ng-attr-tabindex="{{CustomerModal.tabIndexValue + 203}}">{!$Label.Cancel_Label}</button>
                                            <button type="button" class="btn btn-default greenBtn"
                                                ng-click="CustomerModal.SaveCustomer()"
                                                ng-attr-tabindex="{{CustomerModal.tabIndexValue + 202}}">{!$Label.Save_Label}</button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                    <div class="clearfix"></div>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript">
    $(document).ready(function(){
        
        
        $('.addmoreinfoBtn').click(function(){
            if( $(this).hasClass('keep_open')){
            }
            else{
                $('.dropdown-menu').addClass("keep_open");
            }
        });
        
        
        
        $('[data-toggle="tooltip"]').tooltip({placement : 'bottom'}); 
        
        $(document).on('click', '.dropdown-menu', function(e) {
            
            $(this).hasClass('keep_open') && e.stopPropagation();
            // This replace if conditional.
        }); 
        /*$("#sameAsBA").click(function(){


                if($(this).hasClass("chked") == true){
                    $(this).removeClass("chked");
                    $("#billingaddress").removeClass("hideit");
                    $("#billingaddress").slideDown();
                    $("#topsection").height($("#topsection").height() + 252);
                }else{
                    $(this).addClass("chked");
                    $("#billingaddress").addClass("hideit");
                    $("#billingaddress").slideUp();
                    $("#topsection").height($("#topsection").height() - 252);
                }
        })*/

          

        $('.controls').hide();  
        $(".form-control").focus(function(){
            $('.controls').hide();  
            $('#'+ $(this).attr('rel')).css('display','block');
        })

        
        $('#closemodal').click(function() {
            $('#pop').modal('hide'); 
        });
        

        /*var getleftheight = $(".right_heading_container").height() + $(".tabbtn_container").height() + $(".tabconainer").height();
        $("#topsection").height(getleftheight - 30);*/
    })
</script>

</apex:component>