<apex:component id="CategoryComp" controller="BlackPurlContentCtrl" allowDML="true">
    
    <!-- Component Attributes -->
    <apex:attribute name="uniqueId" required="true" type="String" description="unique Id for components here."/>
    
    <body>
        <span id="{!uniqueId}Notification"></span>
        <div id="dropDownDiv">
            <span id="{!uniqueId}NumberOfFilterRecords" style="color: #1abc9c;"> </span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <span> <b> Include Inactive </b> </span>
            <input type="checkbox" id="{!uniqueId}IncludeInactiveCheckBox" onClick="{!uniqueId}BindGridData();"/> &nbsp;&nbsp;&nbsp;
            <span> <b> Records Size : </b> </span>
            <select id="{!uniqueId}dropDownList" onchange="{!uniqueId}setCustomSettingAndReloadGrid();">
                  <option value="20">20</option>
                  <option value="50">50</option>
                  <option value="100">100</option>
            </select>
        </div>
  
        <div>
             <div id="{!uniqueId}grid" style="width:100%; margin-top: 3%; border: 1px solid #1abc9c; border-bottom: none;"></div>
             <apex:outputPanel id="NavigationPanel"> 
                <span id="NavigationDiv">
                    <span> Show </span>
                    <a href="" onclick="{!uniqueId}moreLinkClickAction();" id="{!uniqueId}MoreLink" > More </a>
                    <sapn> / </sapn>
                    <a href="" onclick="{!uniqueId}fewerLinkClickAction();" id="{!uniqueId}FewerLink" class="linkDisable"> Fewer </a>
                    <span> Records </span>
                </span>
            </apex:outputPanel>
        </div>
        
        <div class="{!uniqueId}waitingSearchDiv"> 
            <img class="waitingImage" src="{!URLFOR($Resource.Images, '/loading.gif')}" title="Please Wait..." />
        </div>
        <div class="scroll-to-top">
        </div>
        
        <div class="scroll-to-add">  
        </div>
    </body>
    
    <apex:form >
        <apex:actionFunction name="{!uniqueId}setCategoryCustomSetting" action="{!setCustomerCustomSetting}" rerender="dummy">
            <apex:param name="dropDownSelectedNumber" assignTo="{!dropDownSelectedNumber}" value=""/>
        </apex:actionFunction>
    </apex:form>
    
    <style>
        .bpGridAddButton {
            float:left;
            position:relative;
        }
        .bpGridRowSelected {
            text-align:left;
        }
        .ob-center {
            text-align:center;
        }
        .scroll-to-top {
            position: fixed; 
            background : url("{!URLFOR($Resource.Images,'/scrollToTop.png')}");
            cursor: pointer; 
            width:12px; 
            height: 33px; 
            bottom: 3.5em; 
            padding-right: 1em; 
            display: none; 
            z-index: 999; 
            margin-left: 79.10%;
            border-radius: 13px !important;
        }
        .scroll-to-add {
            position: fixed; 
            background : url("{!URLFOR($Resource.Images,'/scrollAdd.png')}");
            cursor: pointer; 
            width:23px; 
            height: 30px; 
            bottom: 1em; 
            display: block;
            padding-right: 1em; 
            z-index: 999; 
            margin-left: 79.06%;
            border-radius: 13px !important;
        }
        #NavigationDiv a {
            text-decoration : none;
            color : blue;
            cursor : pointer;
        }
        .linkDisable {
            color: #a0a0a0 !important;
            pointer-events: none;
            cursor: default;
        }
        #NavigationDiv {
            margin-left:40%;
            position: absolute;
            z-index: 1;
            margin-top: -1.7%;
        }
        #dropDownDiv {
            margin-top: -2.20%;
        }
        .k-tooltip-validation {
            background-color : white !important;
        }
    </style>
    
    <script>
        
        // variable to show pop up notifications
        var {!uniqueId}popupNotification;
        
        var categoryTypeToDefaultCategoryIdMap = {};
        
        // Variable related to filters
        var FilterKeys = [];
        var FilterJsonData = '';
        var startSugest = 0;
        
        // Category Grid Instance
        var {!uniqueId}categoryGrid = $("#{!uniqueId}grid").data("kendoGrid");
        
        
        function {!uniqueId}setCustomSettingAndReloadGrid() {
            var numberOfCategoriesToBeShown = document.getElementById('{!uniqueId}dropDownList');
            {!uniqueId}setCategoryCustomSetting(numberOfCategoriesToBeShown.value); 
            {!uniqueId}BindGridData();
        }
        
        if(document.getElementById('{!uniqueId}dropDownList') != null && '{!dropDownSelectedNumber}' != "") {
            document.getElementById('{!uniqueId}dropDownList').value = '{!dropDownSelectedNumber}';
        }
        
        /**
         * Name: Document Ready Function
         * Desc: Method executes as soon as the page load
         * @param: 
         * @return: 
        **/
        $(document).ready(function () {
            
            // Notification Popup
            {!uniqueId}popupNotification = $("#{!uniqueId}Notification").kendoNotification({
                
                // hide automatically after 2 seconds
                autoHideAfter: 5000,
                
                // prevent accidental hiding for 100 mili-second
                allowHideAfter: 100,
                
                // prevent to show a hide button
                button: false,
                
                // allow hiding by clicking on the notification content
                hideOnClick: true,
                
                // Set animation to false
                animation: false
            }).data("kendoNotification");
              
            // Load Category grid here
            {!uniqueId}loadCategoryGrid();
            
            if({!uniqueId}categoryGrid == null){
                {!uniqueId}categoryGrid = $("#{!uniqueId}grid").data("kendoGrid");
            }
            
            $("#{!uniqueId}grid").data().kendoGrid.dataSource.bind('requestStart', {!uniqueId}start);
            $("#{!uniqueId}grid").data().kendoGrid.dataSource.bind('requestEnd', {!uniqueId}end );
            
            function {!uniqueId}start(){
                $(".{!uniqueId}waitingSearchDiv").show();//i.e. make your loading gif visible
            }
            
            function {!uniqueId}end(){
                $(".{!uniqueId}waitingSearchDiv").hide();//i.e. make your loading gif disappear
            }
            
             // Load document click bindings
            $(document).on('click', function (event) {
                {!uniqueId}category_DocOnClikcBindings(event);
            });
            
            $("#{!uniqueId}Category_Add_Button", {!uniqueId}categoryGrid.element).on("click", function (event) {
                {!uniqueId}categoryGridAddButtonClickEvent();
                event.stopPropagation();
            });
            
            {!uniqueId}categoryGrid.element.on("click", "tbody>tr>td", "click", function (event) {
                {!uniqueId}categoryGridCellSingleClickEvent(this);
                event.stopPropagation();
            });
            
            
            {!uniqueId}categoryGrid.element.on("click", "tbody>tr>td>span.k-dropdown", "click", function (event) {
                $(document).unbind('click');
                event.stopPropagation();
            });
            
            {!uniqueId}categoryGrid.element.on("change", "tbody>tr>td>span.k-dropdown", "change", function (event) {
                var delta = 200;
                var timeout = false;
                event.stopPropagation();
                if (timeout === false) {
                    setTimeout(callBinds, delta);
                }
            });
            
            function callBinds() {
            $(document).bind('click', function (event) {
                    {!uniqueId}category_DocOnClikcBindings(event);
                });
            }
                
            var offset = 200;
            var duration = 500;
            jQuery('#center-pane').scroll(function() {
                if (jQuery(this).scrollTop() > offset) {
                    jQuery('.scroll-to-top').fadeIn(duration);
                } else {
                    jQuery('.scroll-to-top').fadeOut(duration);
                }

            });
            
            jQuery('.scroll-to-top').click(function(event) {
                event.preventDefault();
                jQuery('#center-pane').animate({scrollTop: 0}, duration);
                return false;
            })
            
            jQuery('.scroll-to-add').click(function(event) {
                {!uniqueId}categoryGridAddButtonClickEvent();
                event.preventDefault();
                return false;
            })
        });
        
        function initializeMapValues() {
            var categoryArray = $("#{!uniqueId}grid").data("kendoGrid").dataSource.view();
            for(var i = 0 ; i < categoryArray.length ; i++) {
                if(categoryArray[i].Cat_Default && !categoryTypeToDefaultCategoryIdMap.hasOwnProperty(categoryArray[i].Cat_Type)) {
                    categoryTypeToDefaultCategoryIdMap[categoryArray[i].Cat_Type] = categoryArray[i].Cat_Name;
                }
            }
        }
        
        var {!uniqueId}currentRowIndex = -1;
        var {!uniqueId}firstClickEvent = true;
        var categoryDefaultConfirm = true;
        var categoryDefaultClickEventName = '';
        
        var FilterKeys = [];
        
        /**
         * Name: {!uniqueId}moreLinkClickAction
         * Desc: Method executes when more link is clicked and it added 20 more records to the current Grid
         * @param: 
         * @return: 
        **/
        function {!uniqueId}moreLinkClickAction() {
            Visualforce.remoting.Manager.invokeAction( 
            	'{!$RemoteAction.BlackPurlContentCtrl.increaseCategories}', 
                 {!uniqueId}categoryGrid.dataSource.view().length + 21 , 20, isInactiveIncluded, encodeString(FilterJsonData),
                function(result, event){ 
                    if (event.type == 'exception') {
                        {!uniqueId}showPopupNotification(event.message, "error");
                    } else {
                        var category = decodeString(result);
                        var find = '\'';
                        var re = new RegExp(find, 'g');
                        category = category.replace(re,'');
                        category = JSON.parse(category);
                        if(category.length < 21) {
                            $("#{!uniqueId}MoreLink").addClass("linkDisable");
                        }
                        if(category.length > 0) {
                            $("#{!uniqueId}FewerLink").removeClass("linkDisable");
                        }
                        var sorts = {!uniqueId}categoryGrid.dataSource.sort();
                        {!uniqueId}categoryGrid.dataSource.filter({});
                        {!uniqueId}categoryGrid.dataSource.sort({});

                        for(var i = 0; i < 20 ; i++){
                            if(category[i] != null) {
                                debug('Inside pushing for ' + {!uniqueId}categoryGrid.dataSource.view().length);
                                {!uniqueId}categoryGrid.dataSource.view().push(category[i]);
                            }
                        }

                        debug('1st pushing for ' + {!uniqueId}categoryGrid.dataSource.view().length);


                        {!uniqueId}categoryGrid.dataSource.filter(FilterKeys);

                        debug('Filter data pushing for ' + FilterKeys);
                        debug('2nd pushing for ' + {!uniqueId}categoryGrid.dataSource.view().length);
                        if(sorts != null) {
                             {!uniqueId}categoryGrid.dataSource.sort(sorts);
                        }
                        debug('bottom pushing for ' + {!uniqueId}categoryGrid.dataSource.view().length);
                    }
                },
                {escape: true}
            );
        }
        
        
        /**
         * Name: {!uniqueId}fewerLinkClickAction
         * Desc: Method executes when fewer link is clicked and it removes last 20 records to the current Grid
         * @param: 
         * @return: 
        **/
        function {!uniqueId}fewerLinkClickAction() {
            var gridLength = {!uniqueId}categoryGrid.dataSource.view().length;
            $("#{!uniqueId}MoreLink").removeClass("linkDisable");
            if(gridLength <= +dropDownNumber + 1) {
                $("#{!uniqueId}FewerLink").addClass("linkDisable");
                if(gridLength <= +dropDownNumber) {
                    return;
                }
            }

            {!uniqueId}categoryGrid.dataSource.filter({});
            var sorts = {!uniqueId}categoryGrid.dataSource.sort();
            {!uniqueId}categoryGrid.dataSource.sort({});

            for(var i = gridLength-1; i > gridLength - 20 - 1 ; i--){
                if(i == +dropDownNumber - 1) {
                    $("#{!uniqueId}FewerLink").addClass("linkDisable");
                    return;
                } else if(i == +dropDownNumber) {
                    $("#{!uniqueId}FewerLink").addClass("linkDisable");
                }
                {!uniqueId}categoryGrid.dataSource.view().pop(i);
            }
            if(sorts!= null) {
                {!uniqueId}categoryGrid.dataSource.sort(sorts);
            }
             {!uniqueId}categoryGrid.dataSource.filter(FilterKeys);
        }
        
        /**
         * Name: {!uniqueId}loadCategoryGrid
         * Desc: Method to load the customer Grid when the component is loaded.
         * @param: 
         * @return: 
        **/
        function {!uniqueId}loadCategoryGrid(){
            
            dropDownNumber = document.getElementById('{!uniqueId}dropDownList').value;
            isInactiveIncluded = document.getElementById('{!uniqueId}IncludeInactiveCheckBox').checked;
            
            // Grid Data Source
            var categoryGridDataSource = new kendo.data.DataSource({
                transport: {
                    read: function (options) {
                        
                        // make AJAX request to the remote service
                        Visualforce.remoting.Manager.invokeAction( '{!$RemoteAction.BlackPurlContentCtrl.getJSONForCategories}',
                                                                    +dropDownNumber , 20, isInactiveIncluded, encodeString(FilterJsonData),
                            function(result, event){
                                if (event.type == 'exception') {
                                    {!uniqueId}showPopupNotification(event.message, "error");
                                } else {
                                    var category = decodeString(result);
                                    var find = '\'';
                                    var re = new RegExp(find, 'g');
                                    category = category.replace(re,'');
                                    category = JSON.parse(category);
                                    if(category.length==0) {
                                        {!uniqueId}showPopupNotification('No records found ','info');
                                    }
                                    options.success(category);
                                }
                            },
                            {escape: true}
                        );
                    },
                    create:function(e) {
                        return false;
                    },
                    update:function(e) {
                        return false;
                    },
                },
                schema: {
                    model: {
                        Id: "Cat_Id",
                        fields: {
                            Cat_Name: {
                                type: "string",
                                validation : {
                                    categoryNameSpecialCharValidation: function (input, params) {
                                        if (input.is("[name='Cat_Name']") && input.val()) {
                                            var a = !/[^a-zA-Z0-9_ ]/.test(input.val());
                                            if(!a){
                                               input.attr("data-categoryNameSpecialCharValidation-msg", "Enter an alphanumeric value");
                                               return false;
                                            } else if(input.val().trim().length > 30) {
                                               input.attr("data-categoryNameSpecialCharValidation-msg", "Cannot exceed 30 characters");
                                               return false;
                                            } 
                                        } else if(input.is("[name='Cat_Name']")){
                                        	input.attr("data-categoryNameSpecialCharValidation-msg", "Category Name is required");
                                            return false;
                                        }    
                                        return true;
                                    }
                                } 
                            },
                            Cat_Type: { 
                                type: "string"
                            },
                            Cat_Description: { 
                                type: "string",
                                validation : {
                                    required:{message: "Category Description is required"},
                                    categoryDescriptionLengthValidation : function (input, params) {
                                        if ( input.is("[name='Cat_Description']") && input.val() ) {
                                        	debug('HI Desc   ' + input.filter("[name='Cat_Description']").length);
                                            if(input.val().trim().length > 255) {
                                                input.attr("data-categoryDescriptionLengthValidation-msg", "Description cannot exceed 255 characters");
                                                return false;
                                            }
                                        } else if(input.is("[name='Cat_Description']")){
                                        	input.attr("data-categoryDescriptionLengthValidation-msg", "Category Description is required");
                                            return false;
                                        }    
                                        return true;
                                    }
                                }  
                            },
                            Cat_Income_GL: { type: "string",
                                validation : {
                                    categoryIncomeGLLengthValidation : function (input, params) {
                                        if (input.filter("[name='Cat_Income_GL']").length && input.val()) {
                                            var a = !/[^a-zA-Z0-9 ]/.test(input.val());
                                            if(!a){
                                               input.attr("data-categoryIncomeGLLengthValidation-msg", "Enter an alphanumeric value");
                                               return false;
                                            } else if(input.val().trim().length > 30) {
                                                input.attr("data-categoryIncomeGLLengthValidation-msg", "Income GL cannot exceed 30 characters");
                                                return false;
                                            } 
                                        }    
                                        return true;
                                    }
                                } 
                            },
                            Cat_COGS_GL: { type: "string",
                                validation : {
                                    categoryCOGsGLLengthValidation : function (input, params) {
                                        if (input.filter("[name='Cat_COGS_GL']").length && input.val()) {
                                            var a = !/[^a-zA-Z0-9 ]/.test(input.val());
                                            if(!a){
                                               input.attr("data-categoryCOGsGLLengthValidation-msg", "Enter an alphanumeric value");
                                               return false;
                                            } else if(input.val().trim().length > 30) {
                                                input.attr("data-categoryCOGsGLLengthValidation-msg", "COGS GL cannot exceed 30 characters");
                                                return false;
                                            } 
                                        }    
                                        return true;
                                    } 
                                }
                            },
                            Cat_Inventory_GL: { type: "string",
                                validation : {
                                    categoryInventoryGLLengthValidation : function (input, params) {
                                        if (input.filter("[name='Cat_Inventory_GL']").length && input.val()) {
                                            var a = !/[^a-zA-Z0-9 ]/.test(input.val());
                                            if(!a){
                                               input.attr("data-categoryInventoryGLLengthValidation-msg", "Enter an alphanumeric value");
                                               return false;
                                            } else if(input.val().trim().length > 30) {
                                                input.attr("data-categoryInventoryGLLengthValidation-msg", "Inventory GL cannot exceed 30 characters");
                                                return false;
                                            } 
                                        }    
                                        return true;
                                    } 
                                }
                            },
                            Cat_Active : { type: "boolean"},
                            Cat_Default: { type: "boolean"},
                        }
                    }
                },
                sortable: {
                    mode: "single",
                    allowUnsort: false
                }
            });
            
            // Method: Load Data Grid here
            $("#{!uniqueId}grid").kendoGrid({
                toolbar: [
                    {
                        name: "Add",
                        template: '<img src="{!URLFOR($Resource.Images, '/add.jpg')}" class="bpGridAddButton" id="{!uniqueId}Category_Add_Button">',
                        text: "Add New Sales Tax Item",
                        click: function(e){return false;}
                    }
                ],
                filterable: 
                    {
                        extra: false,
                        operators: {
                            string: {
                                startswith: "Starts with",
                                eq: "Is equal to",
                                neq: "Is not equal to",
                                gte:"greater than eqaul",
                                lte:"less than eqaul"
                            }
                        }
                    },
                columns: [
                    {
                        field:"Cat_Name",title:"Name", width: "20%",
                        filterable: {
                            ui : categoryNameFilter
                        }, 
                        template: '<span title=\'${Cat_Name}\'>${Cat_Name}</span>'
                    },
                    {
                        field:"Cat_Type",title:"Type", width: "12%", editor: typeDropDownEditor,
                        filterable: {
                            ui : categoryTypeFilter
                        }, 
                        template: '<span title=\'${Cat_Type}\'>${Cat_Type}</span>'
                    },
                    {
                        field:"Cat_Description",title:"Description", width: "22%",
                        filterable: {
                            ui : categoryDescFilter
                        },  
                        template: '<span title=\'${Cat_Description}\'>${Cat_Description}</span>'
                    },
                    {
                        field: "Cat_Income_GL", title: "<span style=\'margin-left:23%\'> Income GL </sapn>", width: "20%" ,
                        filterable: {
                            ui : categoryIncomeGLFilter
                        }, 
                        template: '<div title=\'${Cat_Income_GL}\' class="ob-center">${Cat_Income_GL}</div>'
                    },
                    {
                        field:"Cat_COGS_GL",title:"<span style=\'margin-left:32%\'> COGS GL</span>", width: "20%" ,
                        filterable: {
                            ui : categoryCOGSGLFilter
                        },  
                        template: '<div title=\'${Cat_COGS_GL}\' class="ob-center">${Cat_COGS_GL}</div>'
                    },
                    {
                        field:"Cat_Inventory_GL",title:"<span style=\'margin-left:23%\'> Inventory GL</span>", width: "22%" ,
                        filterable: {
                            ui : categoryInventoryGLFilter
                        },  
                        template: '<div title=\'${Cat_Inventory_GL}\' class="ob-center">${Cat_Inventory_GL}</div>'
                    },
                    {
                        field: "Cat_Default", title: "<span style=\'margin-left:32%\'>Default </sapn>", width: "18%" , attributes:{ class:"ob-center" },
                        filterable: {
                            ui : categoryDefaultFilter
                        },
                        template: '<div class="ob-center"><img #= Cat_Default ? "src={!URLFOR($Resource.Images, '/Check_Selected.png')}" : "src=/img/checkbox_unchecked.gif"# ></div>'
                    },
                    {
                        field: "Cat_Active", title: "<span style=\'margin-left:35%\'>Active </span>", width: "17%", attributes:{ class:"ob-center" },
                        filterable: {
                            ui : categoryInventoryGLFilter
                        },
                        template: '<div class="ob-center"><img #= Cat_Active ? "src={!URLFOR($Resource.Images, '/Check_Selected.png')}" : "src=/img/checkbox_unchecked.gif"# ></div>'
                    }
                ],
                dataSource: categoryGridDataSource,
                scrollable:false,
                sortable: {
                    mode: "single",
                    allowUnsort: false
                },
                edit:function(e) {  
                    e.sender.unbind('dataBound');
                    {!uniqueId}firstClickEvent = true;
                    var input = e.container.find("input[name='Cat_Name']");      
                    input.focus();
                },
                save:function(e) {
                    this.editable.end();
                },
                reorderable: false,
                dataBound: {!uniqueId}onCategoryDataBound,
                selectable: "single",
                editable: {
                    mode: "inline",
                    confirmation: false,
                    update: false
                }
            });
            
            // Called to bind auto-complete to filter
            function categoryNameFilter(element) {
                element.kendoAutoComplete({
                    ignoreCase: true ,
                });
                autoCompleteCall(element, 'auto', 'Cat_Name'); 
            }
            
            // Called to bind auto-complete to filter
            function categoryTypeFilter(element) {
                element.kendoAutoComplete({
                    ignoreCase: true ,
                });
                autoCompleteCall(element, 'autoCatType', 'Cat_Type'); 
            }
            
            // Called to bind auto-complete to filter
            function categoryDescFilter(element) {
                element.kendoAutoComplete({
                    ignoreCase: true ,
                });
                autoCompleteCall(element, 'autoCatDesc', 'Cat_Description'); 
            }
            
            // Called to bind auto-complete to filter
            function categoryIncomeGLFilter(element) {
                element.kendoAutoComplete({
                    ignoreCase: true ,
                });
                autoCompleteCall(element, 'autoCatIncomeGL', 'Cat_Income_GL'); 
            }
            
            // Called to bind auto-complete to filter
            function categoryCOGSGLFilter(element) {
                element.kendoAutoComplete({
                    ignoreCase: true ,
                });
                autoCompleteCall(element, 'autoCatCOGSGL', 'Cat_COGS_GL'); 
            }
            
            // Called to bind auto-complete to filter
            function categoryInventoryGLFilter(element) {
                element.kendoAutoComplete({
                    ignoreCase: true ,
                });
                autoCompleteCall(element, 'autoInventoryGL', 'Cat_Inventory_GL'); 
            }
            
            function categoryDefaultFilter(element) {
                element.kendoAutoComplete({
                    ignoreCase: true         
                });
                categoryEqualFilterCall(element, 'filterDefault', 'Cat_Default');
            }
               
        }
        
        function autoCompleteCall(element, elementId, columnName) {
            $(element).attr('id', elementId);
            var delayCategoryColumnInput = (function(){
                var timer = 0;
                return function(callback, ms){
                    clearTimeout(timer);
                    timer = setTimeout(callback, ms);
                };
            })();
            
            $(element).parents("div").children("select").children('option[value!="startswith"]').remove();
            $(element).parents("div").children("select").prop('disabled', true);

            $(element).parent().closest("div").find("button[type='submit']").on('click',function() {                            
                var keyValue=$('#'+ elementId).val();
                setFilterKeys(columnName,'startswith', keyValue);
                debug(FilterJsonData);
                {!uniqueId}BindGridData();
            });

            $(element).parent().closest("div").find("button[type='reset']").on('click',function() {                         
                removeFilterKeys(columnName);
                {!uniqueId}BindGridData();
            });

            $("input[data-role='autocomplete']").keyup(function(event) {
                if($('#'+ elementId).val().length >= 3) {
                    if((event.keyCode == 13) || (event.keyCode == 40)) {
                        
                    } else {
                        delayCategoryColumnInput(function(){
                            getAutoCompleteSugestion(elementId, columnName);
                        }, 400 );
                    }
                } else {
                    startSugest = 0;
                }
            });
        } 
        
        function categoryEqualFilterCall(element, elementId, columnName) {
            debug('Tarun');
            $(element).attr('id', elementId);
            $(element).parents("div").children("select").children('option[value!="eq"]').remove();
            $(element).parents("div").children("select").prop('disabled', true);
            
            var selectList = $(element).parents("div").children("select");
            
            $(element).parent().closest("div").find("button[type='submit']").on('click',function() {                            
                debug(selectList.val());
                var keyValue = $('#' + elementId).val();
                setFilterKeys(columnName, selectList.val(), keyValue);
                debug(FilterJsonData);
                {!uniqueId}BindGridData();
            });
        
            $(element).parent().closest("div").find("button[type='reset']").on('click',function() {                         
                removeFilterKeys(columnName);
                {!uniqueId}BindGridData();
            });
        }
        
        
        function setFilterKeys(fieldValue, operatorValue, keyValue) {       
            debug('operatorValue  ' + operatorValue + '\n\nfieldValue' + fieldValue);
            var newFilter = { field: fieldValue, operator: operatorValue, value: keyValue};
            if(keyValue.trim().length == 0) {
            	FilterJsonData = '';
            	return false;
            }
            var recordNo = 0;
            if(FilterKeys.length == 0) {        
                FilterKeys.push(newFilter);
            } else {
                for (var i = 0 ; i < FilterKeys.length ; i++) {
                    if(FilterKeys[i]["field"] == fieldValue) {
                        FilterKeys.splice(i, 1, newFilter);
                        recordNo = 1;
                    }
                }
                if(recordNo == 0) {
                    FilterKeys.push(newFilter);
                }
            }
            FilterJsonData = JSON.stringify(FilterKeys);        
        }
        
        //Reset Filter Key To the Database
        function removeFilterKeys(fieldValue) {
            if(FilterKeys.length > 0) {     
                for (var i = 0 ; i < FilterKeys.length ; i++) {
                    if (FilterKeys[i]["field"] == fieldValue) {
                        FilterKeys.splice(i, 1);
                    }
                }
            }
            FilterJsonData=JSON.stringify(FilterKeys);  
        }
        
        function getAutoCompleteSugestion(elementId, columnName) {
            var inputItem = $('#'+ elementId).val();  
            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.BlackPurlContentCtrl.getJSONForFilteredCategory}',
                                                            encodeString(inputItem), encodeString(columnName),
                    function(result, event){
                        if (event.status) {
                            dataarray = $.parseJSON(decodeString(result));
                            $('#'+ elementId).data("kendoAutoComplete").setDataSource(dataarray);
                            if(startSugest == 0) {
                                var searchKey = $('#' + elementId).val();
                                $('#' + elementId).data("kendoAutoComplete").search(searchKey);
                                startSugest = 1;
                            }
                         } else if (event.type === 'exception') {
                             {!uniqueId}showPopupNotification(event.message, "error");
                         } else {
                            {!uniqueId}showPopupNotification(event.message, "error");
                         }
                    },
                    {escape: true}
            );
        }
        
        function {!uniqueId}onCategoryDataBound(e) {
            $("#{!uniqueId}grid").find(".k-grid-toolbar").insertAfter($("#{!uniqueId}grid").children()[1]);
            $(".k-grid-toolbar").css("background-color", "#ffffff");
            $(".k-grid-toolbar").css("border-bottom", " solid 1px #ccc");
            $(".k-grid-toolbar").css("border-top", "none");
            $(".k-grid-toolbar").css("height", "25px");
            $(".k-grid-toolbar").css("vertical-align", "middle");
            $(".bpGridAddButton").prop('title', 'Add');
            {!uniqueId}categoryGrid.bind('edit', {!uniqueId}gridChange);
            initializeMapValues();
        }
        
        // Price Level Price Book picklist
        var PL_PPBaseDatasource = JSON.parse(decodeString('{!categoryTypePicklistValues}'));
        var dropdownSelected = false;
        function typeDropDownEditor(container, options) {
            $('<input data-bind="value:' + options.field + '"/>')
            .appendTo(container) 
            .kendoDropDownList({      
                    dataTextField: "Name",
                    dataValueField: "Value",
                    dataSource: PL_PPBaseDatasource,
                    change: function(e){
                        dropdownSelected = true;
                        e.preventDefault();  
                    }
            });
             debug('---------------');
            debug(PL_PPBaseDatasource );
        }
        
        // Method: click bindings for document click
        function {!uniqueId}category_DocOnClikcBindings(event){
            var isSuccessfullySaved = {!uniqueId}validateAndSaveRow();
        }
        
        
        function {!uniqueId}BindGridData() {    
            isInactiveIncluded = document.getElementById('{!uniqueId}IncludeInactiveCheckBox').checked;
            dropDownNumber = document.getElementById('{!uniqueId}dropDownList').value;
            
            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.BlackPurlContentCtrl.getJSONForCategories}',
                                                          +dropDownNumber , 20, isInactiveIncluded, encodeString(FilterJsonData),
                        function(result, event){
                            if (event.status) {
                                var dataArray = decodeString(result);;
                                var find = '\'';
                                var re = new RegExp(find, 'g');

                                dataArray = dataArray.replace(re,'');
                                debug(dataArray);
                                dataArray = JSON.parse(dataArray);
                                
                                $("#{!uniqueId}grid").data("kendoGrid").dataSource.data(dataArray);
                                
                                if(dataArray.length ==  +dropDownNumber) {
                                    $("#{!uniqueId}MoreLink").removeClass("linkDisable");
                                } else if(dataArray.length <  +dropDownNumber) {
                                    $("#{!uniqueId}MoreLink").addClass("linkDisable");
                                }
                                
                                if(FilterJsonData != '[]' && FilterJsonData != '') {
                                    if(dataArray.length == 0) {
                                        $("#{!uniqueId}NumberOfFilterRecords").html('<i> No records found </i>');
                                    } else {
                                        $("#{!uniqueId}NumberOfFilterRecords").html('<b>'+ dataArray[0].TotalFilteredRecords + '</b><i> records retrieved </i>');
                                    }
                                } else {
                                    $("#{!uniqueId}NumberOfFilterRecords").html('');        
                                }
                                
                                $("#{!uniqueId}FewerLink").addClass("linkDisable");
                            } else if (event.type === 'exception') {
                                {!uniqueId}showPopupNotification(event.message, "error");
                            } else {

                                {!uniqueId}showPopupNotification(event.message, "error");
                            }
                        },

                        {escape: true}
            );


        }
        
        
        function {!uniqueId}gridChange(currElem){
            {!uniqueId}currentRowIndex = this.select().index();
        }   
        /*
        function getPPBaseName(ppBase) {
            if(ppBase == null || ppBase == '') return '';
            for (var idx = 0, length = PL_PPBaseDatasource.length; idx < length; idx++) {
                if (PL_PPBaseDatasource[idx].Value === ppBase) {
                    return PL_PPBaseDatasource[idx].Name;
                }
            }
        }
        
        // Price Level Grid Instance
        var {!uniqueId}priceLevelGrid = $("#{!uniqueId}grid").data("kendoGrid");
        
        // Method: click bindings for document click
        function {!uniqueId}PL_DocOnClikcBindings(event){
            var isSuccessfullySaved = {!uniqueId}validateAndSaveRow();
        }
        */
        function {!uniqueId}categoryGridCellSingleClickEvent(thisElem){
            
            // Check if selected row is alreadey in edited mode
            if($(thisElem).parent().hasClass('k-grid-edit-row')) {
                
            } else {
                var isSuccessfullySaved = true;
                var hasEditedRow = {!uniqueId}categoryGrid.tbody.children().hasClass("k-grid-edit-row");
                if(hasEditedRow) {
                    isSuccessfullySaved = {!uniqueId}validateAndSaveRow();
                }
                
                if(isSuccessfullySaved) {
                    {!uniqueId}toggleSelectedRowClass($(thisElem).parent());
                    //{!uniqueId}togglePLToolbarButtons(!(isSuccessfullySaved && hasEditedRow));
                    if({!uniqueId}categoryGrid.tbody.children().hasClass("k-grid-edit-row")) {
                        
                    } else {
                        $("#{!uniqueId}grid").data("kendoGrid").editRow($(thisElem).parent());
                    } 
                        
                    // Unique DEFAULT bind
                    $( "#{!uniqueId}grid input[name='Cat_Default']").on("change", function (event) {
                        checkExistingDefault(this, {!uniqueId}currentRowIndex);
                    });
                    
                    // Unique ACTIVE bind
                    $( "#{!uniqueId}grid input[name='Cat_Active']").on("change", function (event) {
                        checkExistingDefaultActive_Global(this, 
                                                          'Cat_Name', 'Cat_Default', 'Cat_Active', 
                                                          '{!uniqueId}grid', 'Category', {!uniqueId}currentRowIndex,
                                                          {!uniqueId}showPopupNotification
                                                         );
                    });
                }else{
                    if({!uniqueId}categoryGrid.tbody.children().hasClass("k-grid-edit-row")) {
                        var existingEditedCells = $("#{!uniqueId}grid .bpGridRowSelected");
                        {!uniqueId}categoryGrid.select( $(existingEditedCells[0]).parent() );
                    }
                }
            }
        }
        
        function checkExistingDefault(currElem, currentRowIndex){
            // Get current row Unique Name:
            var currRowUniqueName = $(currElem).closest("tr").find("td>input[name='Cat_Name']").val();
            
            // Get current row Default:
            var currRowDefault = $(currElem).closest("tr").find("td>input[name='Cat_Default']").is(":checked");
            
            // Get current row Active:
            var currRowActive = $(currElem).closest("tr").find("td>input[name='Cat_Active']").is(":checked");
            
            // Get Current row type
            var currRowType = $(currElem).closest("tr").find("input[data-bind='value:Cat_Type']").val();
            
            var currRowCUid = $(currElem).closest("tr").attr('data-uid');
            
            if(currRowUniqueName == "") {
                currRowUniqueName = 'New Category'; 
            }
            
            debug('currRowDefault   ' + currRowDefault + '  currRowType ' + currRowType);
            if( currRowDefault ) {
                var prevDefaultUniqueName = "";
                var prevDefaultDataRowIdx = 0;
                if(categoryTypeToDefaultCategoryIdMap.hasOwnProperty(currRowType)) {
                    prevDefaultUniqueName = categoryTypeToDefaultCategoryIdMap[currRowType];
                }
                /*var gridData = gridInstance.dataSource.data();
                for(var item = 0; item < gridData.length; item++){
                    prevDefaultDataRowIdx++;
                    if( gridData[item].get(uniqueNameColAPI) != currRowUniqueName && gridData[item].get(defaultColAPI) == true ){
                        prevDefaultUniqueName = gridData[item].get(uniqueNameColAPI);
                        break;
                    }
                }
                */
                if(prevDefaultUniqueName.length > 0){
                    var confirmMsg = '';
                    if(currRowActive){
                        confirmMsg += 'For Category Type - <b>' + currRowType + '</b>, Default will be changed from "' + prevDefaultUniqueName + '" to "' + currRowUniqueName + '".' + '\n';
                    } else {
                        confirmMsg += '<b> '+ currRowUniqueName + '</b> record will be marked as ACTIVE and set to DEFAULT.' + '\n';
                    }
                    confirmMsg += 'Do you want to proceed ?';
                    alertAndUpdateDefault_Global(currElem, confirmMsg, prevDefaultDataRowIdx,
                                                 'Cat_Name', 'Cat_Default', 'Cat_Active', 
                                                          '{!uniqueId}grid', 'Category', {!uniqueId}currentRowIndex
                                                );
                }
            } else {
                {!uniqueId}showPopupNotification('Cannot deselect a default Category record ', 'error');
                currElem.checked = true;
                var gridDataSource = {!uniqueId}categoryGrid.dataSource;
                var currentDataRow = (currRowCUid != null && currRowCUid != "") ? gridDataSource.getByUid(currRowCUid) : null;
                if(currentDataRow != null){
                    currentDataRow.set('Cat_Default', true);
                }
            }
        }
        
        function {!uniqueId}categoryGridAddButtonClickEvent(){
            if({!uniqueId}categoryGrid.tbody.children().hasClass("k-grid-edit-row")) {
                {!uniqueId}validateAndSaveRow();
            } else {
            	{!uniqueId}categoryGrid.dataSource.filter({});
                {!uniqueId}addNewDataRow(null);
            }
        }
        
        function {!uniqueId}addNewDataRow(){
            var dataSource = {!uniqueId}categoryGrid.dataSource;
            var total = dataSource.data().length;
            if(total > 0) {
                {!uniqueId}categoryGrid.dataSource.sort(null);
            }
           
            dataSource.insert(total, {
                "Cat_Id": "",
                "Cat_Type" : "Labour",
                "Cat_Name" : "" ,
                "Cat_Description" :  "" ,
                "Cat_Income_GL" : "",
                "Cat_COGS_GL" : "",
                "Cat_Inventory_GL" : "",
                "Cat_Active" : true,
                "Cat_Default" : false,
                "Cat_Order": 0
            });
            dataSource.page(dataSource.totalPages());
            
            var newRowToAdd = {!uniqueId}categoryGrid.tbody.children().last();
            
            {!uniqueId}categoryGrid.editRow(newRowToAdd);
            
            // Unique DEFAULT bind
            $( "#{!uniqueId}grid input[name='Cat_Default']").on("change", function (event) {
                checkExistingDefault(this, {!uniqueId}currentRowIndex);
            });
            
            // Unique ACTIVE bind
            $( "#{!uniqueId}grid input[name='Cat_Active']").on("change", function (event) {
                checkExistingDefaultActive_Global(this, 
                                              'Cat_Name', 'Cat_Default', 'Cat_Active', 
                                              '{!uniqueId}grid', 'Category', {!uniqueId}currentRowIndex,
                                              {!uniqueId}showPopupNotification
                                             );
            });
            
            {!uniqueId}toggleSelectedRowClass(newRowToAdd);
            //{!uniqueId}togglePLToolbarButtons("TF");
            
        }
        
        /*var confirmDeleteCategoryRecord = function(isConfirmed){
            if(!isConfirmed){
                return;
            }
            var rowData = {!uniqueId}getSelectedRowData(true);
            
            var priceLevelRecId = rowData.PL_Id;
            
            if(priceLevelRecId == null || priceLevelRecId == ''){
                {!uniqueId}refreshGridLocally(rowData);
            }else{
                Visualforce.remoting.Manager.invokeAction(  '{!$RemoteAction.BlackPurlContentCtrl.deletePriceLevel}',
                                                            encodeString(priceLevelRecId),
                                                            function(result, event){
                                                                if (event.status) {
                                                                    // Successfully deleted record
                                                                    {!uniqueId}refreshGridLocally(rowData);
                                                                    //{!uniqueId}togglePLToolbarButtons(false);
                                                                } else if (event.type === 'exception') {
                                                                    {!uniqueId}showPopupNotification(event.message, "error");
                                                                } else {
                                                                    {!uniqueId}showPopupNotification(event.message, "error");
                                                                }
                                                            },
                                                            {escape: true}
                                                        );
            }
        }
        
        function {!uniqueId}plGridDeleteButtonClickEvent(){
            var rowData = {!uniqueId}getSelectedRowData(true);
             debug({!uniqueId}priceLevelGrid.select().closest("tr"));
            if(rowData == null){
                return;
            }
            if(rowData.PL_Id != null && rowData.PL_Id.length > 0 && rowData.PL_Default == true){
                {!uniqueId}showPopupNotification('Cannot delete a default Price Level record.', 'error');
                return;
            }
            
            var delConfirmMsg = "Are you sure that you want to delete record for " + rowData.PL_Name + "?";
            confirmAction("Confirm Delete", delConfirmMsg, confirmDeletePriceLevelRecord);
        }
        
        
        function {!uniqueId}getSelectedRowData(isToDelInCase){
            var rowIndex = {!uniqueId}priceLevelGrid.select().closest("tr");
            if(rowIndex.length == 0){
                if(isToDelInCase){
                    {!uniqueId}deleteNewEditingRowInPLGrid();
                }
                return null;
            }else{
                var rowData = {!uniqueId}priceLevelGrid.dataItem(rowIndex);
                if(rowData.PL_Id != ""){
                    return rowData;
                }else if( ({!uniqueId}priceLevelGrid.editable.validatable.validate()) == false ){
                    if(isToDelInCase){
                        {!uniqueId}deleteNewEditingRowInPLGrid();
                    }
                    return null;
                }
            }
            var rowData = {!uniqueId}priceLevelGrid.dataItem(rowIndex);
            return rowData;
        }
        
        function {!uniqueId}deleteNewEditingRowInPLGrid(){
            if({!uniqueId}priceLevelGrid.tbody.children().hasClass("k-grid-edit-row")) {
                var existingEditedCells = $("#{!uniqueId}grid .bpGridRowSelected");
                {!uniqueId}refreshGridLocally( $(existingEditedCells[0]).parent() );
                //{!uniqueId}togglePLToolbarButtons(false);
                EditRowStatus=false;
            }
        }
        */
        
        // Validate and Save row
        function {!uniqueId}validateAndSaveRow(){
        	var hasEditedRow = {!uniqueId}categoryGrid.tbody.children().hasClass("k-grid-edit-row");
            var isRowIsBlank;
            if(hasEditedRow) {
                isRowIsBlank = checkIfNewRowIsBlank();
            }
        
        	if(!isRowIsBlank) {
	            if( {!uniqueId}categoryGrid.editable != null  && 
	            		({!uniqueId}categoryGrid.editable.validatable.validate())){
	                
	                {!uniqueId}saveCategory();
	                if(isCategorySuccessfullySaved == false) {
	                	return false;;
	                } else if (FilterKeys.length > 0 && isCategorySuccessfullySaved != null){
	                	{!uniqueId}categoryGrid.dataSource.filter(FilterKeys);
	                }
	                return true;
	            } else {
	                return false;
	            }
            }
        }
        
        
        function checkIfNewRowIsBlank() {
            debug('Hello ji');
            if({!uniqueId}categoryGrid == null) {
                return false;
            }
            
            var newRow = {!uniqueId}categoryGrid.tbody.find(".k-grid-edit-row");
            
            var newRowName = newRow.children().find("input[name='Cat_Name']").val();
            
            var newRowType = newRow.children().find("input[data-bind='value:Cat_Type']").val();
            
            var newRowDescription = newRow.children().find("input[name='Cat_Description']").val();
            
            var newRowIncomeGL = newRow.children().find("input[name='Cat_Income_GL']").val();
            
            var newRowCOGS_GL = newRow.children().find("input[name='Cat_COGS_GL']").val();
            
            var newRowInventoryGL = newRow.children().find("input[name='Cat_Inventory_GL']").val();
            
            var newRowActive = newRow.children().find("input[name='Cat_Active']").is(":checked");
            
            var newRowDefault = newRow.children().find("input[name='Cat_Default']").is(":checked");
            
            var currRowCUid = newRow.attr('data-uid');
            
            var rowId = {!uniqueId}categoryGrid.dataSource.getByUid(currRowCUid).Cat_Id;
            
            if(rowId != "") {
            	return false;
            }
            
            if(newRowName == "" && newRowType == "Labour" && newRowDescription == "" && 
                                    newRowIncomeGL == "" && newRowCOGS_GL == "" && newRowInventoryGL == "" && 
                                    newRowActive && !newRowDefault) {
                debug("No Change");
                {!uniqueId}categoryGrid.removeRow(newRow);
                {!uniqueId}categoryGrid.dataSource.remove(newRow);
                return true;
            }
            return false;
        }
        
        
        /*
        function doesDataSourceHaveChanges(){
            var gridDataSource = {!uniqueId}priceLevelGrid.dataSource;
            var dirty = false;
            $.each(gridDataSource._data, function () {
                if (this.dirty == true) {
                    dirty = true;
                }
            });
        
            if (gridDataSource._destroyed.length > 0) dirty = true;
        
            return dirty;
        }
        */
        var isCategorySuccessfullySaved;
        function {!uniqueId}saveCategory(){
            if({!uniqueId}categoryGrid.tbody.children().hasClass("k-grid-edit-row")) {
                if(({!uniqueId}categoryGrid.editable.validatable.validate())) {
                    var rowIndex = {!uniqueId}categoryGrid.tbody.find(".k-grid-edit-row");
                    if(rowIndex.length == 0) {
                        isCategorySuccessfullySaved = false;
                        return false;
                    }
                    var rowData = JSON.stringify({!uniqueId}categoryGrid.dataItem(rowIndex));
                    Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.BlackPurlContentCtrl.saveCategoryJSON}',
                                                                       encodeString(rowData),
                            function(result, event){
                                if (event.status) {
                                    {!uniqueId}showPopupNotification("Saved", "success");
                                    isCategorySuccessfullySaved = true;
                                    rowData.Cat_Order = 1; 
                                    {!uniqueId}refreshGrid();
                                    return true;
                                } else if (event.type === 'exception') {
                                    {!uniqueId}showPopupNotification(event.message, "error");
                                    isCategorySuccessfullySaved = false;
                                    return false;
                                } else {
                                    {!uniqueId}showPopupNotification(event.message, "error");
                                    isCategorySuccessfullySaved = false;
                                    return false;
                                }
                            },
                            {escape: true}
                     );
                }
            }
        }
        
        // Refresh the grid:
        function {!uniqueId}refreshGrid(){
            {!uniqueId}categoryGrid.dataSource.read();
            {!uniqueId}categoryGrid.refresh();
        }
       
        // Refresh grid locally
        function {!uniqueId}refreshGridLocally(rowData){
            {!uniqueId}categoryGrid.removeRow(rowData);
            {!uniqueId}categoryGrid.dataSource.remove(rowData);
            {!uniqueId}showPopupNotification("Deleted", "success");
        }
        
        function {!uniqueId}removeSelectedRowsClass(){
            var selectedRows = $("#{!uniqueId}grid .bpGridRowSelected");
            for(var rowNum = 0; rowNum < selectedRows.length; rowNum++){
                lastColumnOfSelectedRow = $(selectedRows[rowNum]);
                lastColumnOfSelectedRow.removeClass("bpGridRowSelected");
            }
        }
        
        function {!uniqueId}toggleSelectedRowClass(selectedRow){
            // If previouslySelectedRow
            var selectedCellElem = $(selectedRow.children()[0]);
            var previouslySelectedRow = (selectedCellElem.attr("class") == "bpGridRowSelected") ? true : false;
            var lastColumnOfSelectedRow;
            if(!previouslySelectedRow){
                for(var i = 0; i < selectedRow.children().length; i++){
                    lastColumnOfSelectedRow = $(selectedRow.children()[i]);
                    lastColumnOfSelectedRow.addClass("bpGridRowSelected");
                }
            }
        }
        
        // Display popup notiications:
        function {!uniqueId}showPopupNotification(message, msgType){
            {!uniqueId}popupNotification.hide();
            {!uniqueId}popupNotification.show(kendo.toString(message), msgType);
        }
        var asd;
    </script>
</apex:component>