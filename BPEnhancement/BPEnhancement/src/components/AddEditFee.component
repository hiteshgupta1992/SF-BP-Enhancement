<apex:component controller="ViewFeeCtrl">
	<!-- Import styles -->
	<c:NewPopupStyle />

	<!-- Include required directives -->
	<!-- Directive for price fields -->
	<c:dirNumberInput />

	<style>
		#AddEditFee .controls1 {
			top: -45px;
		}
		
		.modal-content .fee_popup_container .leftbordernone {
			border-left: none;
		}
		
		.modal-content .fee_popup_container .popupinside .min_overflow {
			height: 360px;
			overflow: auto;
			float: left;
		}
		
		.modal-content .fee_popup_container	.angucomplete-dropdown {
			margin: 0;
		}
		
		.modal-content .fee_popup_container  .popupright .tabconainer form .angucomplete-overide-dropdown
			{
			width: 63% !important
		}
		
		.modal-content .fee_popup_container .angucomplete-overide-dropdown .ML {
			margin-left: 6px;  
		}
	</style>

	<script>
          var addEditFeeModule= angular.module('addEditFeeModule', ['dir.priceInput', 'autocomplete', 'ui-notification'] );
        	addEditFeeModule.controller('addEditFeeController', function ($scope, Notification, AddEditFeeService) {
            /****** Modals initialization ******/
           
            if($scope.AddEditFee == undefined){
                $scope.AddEditFee = {};
            }
           $scope.AddEditFee.tabIndexValue = 4000;
           
           $scope.AddEditFee.adjustTabIndex = function(e){
            	if(e.which == 9){
            		$('#feetxtCode').focus();
            		e.preventDefault();
            	}
            }
            
          	$scope.AddEditFee.ActiveOrderPageSortAttrsJSON = {
               ChangesCount    :   0,
               CurrentPage     :   1,
               PageSize        :   10,
               Sorting :   [{
                   FieldName       :   "LastModifiedDate",
                   SortDirection   :   "DESC"
               }]
           };
          
           $scope.AddEditFee.setDefaultValidationModel = function() {
                $scope.AddEditFee.FeeFormValidationModal = {
                    Code : {
                        isError : false,
                        ErrorMessage : '',
                        Type : 'Required,Maxlength',
                        Maxlength:50
                    },
                    CategoryName : {
                        isError : false,
                        ErrorMessage : '',
                        Type : 'Required'
                    },
                    Description : { 
                        isError : false,
                        ErrorMessage : '',
                        Type : 'Required'
                    }
                };
                 $scope.AddEditFee.SimilarFee=[];
            }
            
            $scope.AddEditFee.helpText = {
                Code          : 'Fee Code',
                Description   : 'Fee Description',
                FeePrices     : 'Fee Prices',
                FeeFixedRate  : 'Fee Fixed Rate',
                Price         : 'Fee Rate, Required if Fixed Rate selected',
                CategoryName  : 'Fee Category',
                FeeTaxable    : 'Fee Taxable'
            }
            
          
             $scope.AddEditFee.FeeFieldsFilter = {
                FeeCategory : [
                    {
                        Field : "Type__c",
                        Value : "Fee",
                        FilterObject :"Category__c"
                    }
                ]
            };
          
          
            /****** Add/Edit Fee eventlisteners ******/
            $scope.AddEditFee.addNewFee = function () {
             $scope.AddEditFee.setDefaultValidationModel();
                $scope.AddEditFee.clearAllData();
                $scope.AddEditFee.loadDefaultFeeData();
                $scope.AddEditFee.openPopup();
                 setTimeout(function(){ 
                    angular.element('#feetxtCode').focus();
                }, 1000);
            }
            
            
         
            /****** Add/Edit Fee events ******/
            $scope.$on('AddFeeEvent', function () {  
                $scope.AddEditFee.addNewFee();
            });
             $scope.$on('EditFeeEvent', function(event,feeId) {  
              debug(feeId)  
                  $scope.AddEditFee.openEditFeePopup(feeId);
            });
            
            
            
             $scope.$on('autoCompleteSelectCallback', function (event, args) {
                var obejctType = args.ObejctType.toUpperCase();
                var searchResult = args.SearchResult;
                var validationKey = args.ValidationKey;
                  if($scope.AddEditFee.CategoryNameStr == $scope.AddEditFee.feeModel.CategoryName){
                	return;
                } 
                else if(searchResult == null){
                    Notification.error("No matching " + args.ObejctType + " records found!");
                    $scope.AddEditFee.CategoryNameStr = "";
                    $scope.AddEditFee.feeModel.CategoryName="";
                    $scope.AddEditFee.feeModel.CategoryId=null;
                    
                    return;
                }
                
                var objectsMapping = [{
                        CATEGORY : {
                            Id : "CategoryId",
                            Name : "CategoryName",
                            selectMethod : null
                        }
                    }
                ];
            
                if (objectsMapping[0][obejctType] != null) {
                    $scope.AddEditFee.feeModel[objectsMapping[0][obejctType]["Id"]] = searchResult.originalObject.Value;
                    $scope.AddEditFee.feeModel[objectsMapping[0][obejctType]["Name"]] = searchResult.originalObject.Name;
                }
            
                 $scope.AddEditFee.validateFieldWithKey(validationKey);
            
                if ($scope.AddEditFee.FeeFormValidationModal[validationKey] == null || $scope.AddEditFee.FeeFormValidationModal[validationKey].isError == false) {
                    if (objectsMapping[0][obejctType].selectMethod != null) {
                        objectsMapping[0][obejctType].selectMethod(searchResult);
                    }
                }
            
               
                   });
            
            
          
           $scope.AddEditFee.clearAllData = function () {
            	$scope.AddEditFee.isEditMode = false;
                $scope.AddEditFee.feeModel={};
                $scope.AddEditFee.feeModel.IsTaxable = false;
                $scope.AddEditFee.feeModel.IsActive = true;
                $scope.AddEditFee.feeModel.Price = "0.00";
                $scope.AddEditFee.SimilarFee = [];
                 $scope.AddEditFee.feeModel.CategoryId=null;
                  $scope.AddEditFee.CategoryNameStr = "";
                    $scope.AddEditFee.feeModel.CategoryName="";
               
            }
            
            $scope.AddEditFee.loadDefaultFeeData = function() {
            	AddEditFeeService.getApplicableTaxList().then(function(taxList){
                	debug(taxList);
                	$scope.AddEditFee.IsTaxIncludingPricing = taxList.IsTaxIncludingPricing;
                	$scope.AddEditFee.TaxList = taxList.SalesTaxList;
                	var defaultTaxIndex = _.findIndex(taxList.SalesTaxList, {IsDefault: true});
                	if(defaultTaxIndex > -1){
                		$scope.AddEditFee.feeModel.ApplicableTaxId = $scope.AddEditFee.TaxList[defaultTaxIndex].Id;
                		$scope.AddEditFee.Tax_Rate = $scope.AddEditFee.TaxList[defaultTaxIndex].TaxRate;
                	}
                }, function(errorSearchResult) {
                    //$scope.ViewCustomer.CustomerInfo = errorSearchResult;
                });
                
            	AddEditFeeService.getDefaultFeeData().then(function (feeInfo) {
					debug(feeInfo);
					if(feeInfo.CategoryId != null && feeInfo.CategoryId != ""){
						$scope.AddEditFee.feeModel.CategoryId = feeInfo.CategoryId;
						$scope.AddEditFee.CategoryNameStr = feeInfo.CategoryName;
						$scope.AddEditFee.feeModel.CategoryName = feeInfo.CategoryName;
					} else {
						$scope.AddEditFee.feeModel.CategoryId = null;
						$scope.AddEditFee.CategoryNameStr = "";
						$scope.AddEditFee.feeModel.CategoryName = "";
					}
				}, function (errorSearchResult) {
					responseData = errorSearchResult;
					$scope.viewFee.ShowContent = false;
					Notification.error("Some error occured while fetching the records. Please refresh the page and try again.");
				});
            }
            
            $scope.AddEditFee.changeApplicableTax = function(){
            	var selectedTaxIndex = _.findIndex($scope.AddEditFee.TaxList, {Id: $scope.AddEditFee.feeModel.ApplicableTaxId});
            	if(selectedTaxIndex > -1){
            		$scope.AddEditFee.Tax_Rate = $scope.AddEditFee.TaxList[selectedTaxIndex].TaxRate;
            	}
            }
          
			$scope.AddEditFee.openEditFeePopup = function (feeId) {
				$scope.AddEditFee.setDefaultValidationModel();
				$scope.AddEditFee.isEditMode = true;
				
				AddEditFeeService.getApplicableTaxList().then(function(taxList){
                	debug(taxList);
                	$scope.AddEditFee.IsTaxIncludingPricing = taxList.IsTaxIncludingPricing;
                	$scope.AddEditFee.TaxList = taxList.SalesTaxList;
                	
                	AddEditFeeService.getFeeInfoById(feeId, $scope.AddEditFee.ActiveOrderPageSortAttrsJSON).then(function (feeInfo) {
					// Assign Labour record:
					debug("edit services")
					debug(feeInfo);
					$scope.AddEditFee.feeModel = feeInfo.FeeRec;
			
					$scope.AddEditFee.CategoryNameStr = $scope.AddEditFee.feeModel.CategoryName;
						if($scope.AddEditFee.feeModel.ApplicableTaxId != null){
		                	var salesTaxIndex = _.findIndex(taxList.SalesTaxList, {Id: $scope.AddEditFee.feeModel.ApplicableTaxId});
		                	if(salesTaxIndex > -1){
		                		$scope.AddEditFee.Tax_Rate = taxList.SalesTaxList[salesTaxIndex].TaxRate;
		                	}
		                }
						var defaultTaxIndex = _.findIndex(taxList.SalesTaxList, {IsDefault: true});
						if(defaultTaxIndex > -1 && $scope.AddEditFee.feeModel.ApplicableTaxId == null){
	                		$scope.AddEditFee.feeModel.ApplicableTaxId = $scope.AddEditFee.TaxList[defaultTaxIndex].Id;
	                		$scope.AddEditFee.Tax_Rate = $scope.AddEditFee.TaxList[defaultTaxIndex].TaxRate;
	                	}
					$scope.viewFee.ShowContent = true;
					$scope.AddEditFee.openPopup();
					setTimeout(function () {
						angular.element('#feetxtDescription').focus();
					}, 1000);
			
				}, function (errorSearchResult) {
					responseData = errorSearchResult;
					$scope.viewFee.ShowContent = false;
					Notification.error("Some error occured while fetching the records. Please refresh the page and try again.");
				});
                }, function(errorSearchResult) {
                    //$scope.ViewCustomer.CustomerInfo = errorSearchResult;
                });
				
				
			}
           
             
           $scope.AddEditFee.onKeyUpTaxable = function(event) {
                // If space/enter, then process the checkbox click functionality
                if(event.keyCode == 13){
                    $scope.AddEditFee.onSelectTaxable();
                }
            }
            $scope.AddEditFee.onSelectTaxable = function() {
                $scope.AddEditFee.feeModel.IsTaxable = !$scope.AddEditFee.feeModel.IsTaxable;
            }
          
          
            $scope.AddEditFee.onKeyUpActive = function(event) {
                // If space/enter, then process the checkbox click functionality
                if(event.keyCode == 13){
                    $scope.AddEditFee.onSelectActive();
                }
            }
            $scope.AddEditFee.onSelectActive = function() {
                $scope.AddEditFee.feeModel.IsActive = !$scope.AddEditFee.feeModel.IsActive;
            }
          
          $scope.AddEditFee.SaveFeeForm=function(){
          
             $scope.AddEditFee.isValidForm = true;
                
                // Validate form
                $scope.AddEditFee.validateForm();
                
                if(!$scope.AddEditFee.isValidForm) {
                    Notification.error('Please Review Error(s) before saving form');
                    return;
                }
                
              debug($scope.AddEditFee);
               
                for(var i=0; i<$scope.AddEditFee.SimilarFee.length; i++){
                    if($scope.AddEditFee.SimilarFee[i].PriorityValue == 1){
                        Notification.error('Similar Fee record already present.');
                        return;
                    }
                }
          $scope.AddEditFee.saveFeeData();   
          }
          
          
           $scope.AddEditFee.saveFeeData = function() {
           
           
           AddEditFeeService.saveFeeInfo($scope.AddEditFee.feeModel, $scope.AddEditFee.ActiveOrderPageSortAttrsJSON)
                            .then(function (feeInfo) {
                               if($scope.$parent.feeRecordSaveCallback != undefined){
                               		debug(feeInfo.FeeRec);
			                        $scope.$parent.feeRecordSaveCallback(feeInfo.FeeRec);
			                        
                   				 }else{
                    				//Notification.success('Kit Saved Successfully');
                    				var child = window.open("{!$Page.viewFee}?id="+feeInfo.FeeRec.Id);
                    				if(child == undefined ){
                    					Notification.warning('Allow pop-ups from browser settings');
                    				} else {
                    					child.opener.focus(); 
                    				}
                  				  }
                  				  Notification.success('Fee Saved Successfully');
                             		  $scope.AddEditFee.closePopup();
                            }, function (errorSearchResult) {
                              
                                Notification.error("Some error occured while fetching the records. Please refresh the page and try again.");
                            });
           
           }
          
          
          
            $scope.AddEditFee.getSimilarFees = function(modelKey) {
                var fieldValue = $scope.AddEditFee.feeModel[modelKey];
                $scope.AddEditFee.SimilarFee = {};
                if((($scope.AddEditFee.feeModel['Code'] == '' || $scope.AddEditFee.feeModel['Code'] == null) 
                		&& ($scope.AddEditFee.feeModel['Description'] == null || $scope.AddEditFee.feeModel['Description'] == '')) 
                	|| $scope.AddEditFee.isEditMode) {
                    return;
                }
                AddEditFeeService.getSimilarFees($scope.AddEditFee.feeModel)
                .then(function(SimilarFee) {
                debug(SimilarFee);
                	$scope.AddEditFee.SimilarFee = SimilarFee;
                	//$scope.KitCompModal.closePopup();
                }, function(errorSearchResult) {
                });
            }
          
          
          
          
             $scope.AddEditFee.validateForm = function () {
                angular.forEach($scope.AddEditFee.FeeFormValidationModal, function(value, key) {
                    debug(key + ' : ' + value);
                    $scope.AddEditFee.validateFieldWithKey(key);
                });
            }
               
            $scope.AddEditFee.validateFieldWithKey = function (modelKey) {
            	debug('fee validation');
                var fieldValue = $scope.AddEditFee.feeModel[modelKey];
                debug(modelKey);
                var isError = false;
                var ErrorMessage = '';
                var validateType = $scope.AddEditFee.FeeFormValidationModal[modelKey].Type;
                  
                if(validateType.indexOf('Maxlength') > -1){
                     if(fieldValue != undefined && fieldValue!= '' && fieldValue.length > $scope.AddEditFee.FeeFormValidationModal[modelKey].Maxlength){
                          isError = true;
                          ErrorMessage = 'Max length should be '+ $scope.AddEditFee.FeeFormValidationModal[modelKey].Maxlength;
					 }
                }
                
                if (validateType.indexOf('Required') > -1) {
                    if(fieldValue == undefined || fieldValue == null || fieldValue == ''){
                        isError = true;
                        ErrorMessage = 'Field is Required';
                    } 
                }
                
                
                $scope.AddEditFee.FeeFormValidationModal[modelKey].isError = isError;
                $scope.AddEditFee.FeeFormValidationModal[modelKey].ErrorMessage = ErrorMessage;
                
                
                
                debug($scope.AddEditFee.FeeFormValidationModal[modelKey].isError);
                debug($scope.AddEditFee.FeeFormValidationModal[modelKey].ErrorMessage);
               	
                // Set validation flag value
                if($scope.AddEditFee.FeeFormValidationModal[modelKey].isError == true){
                debug("inside validation");
                    $scope.AddEditFee.isValidForm = false;
                }
            }
            
          
           $scope.AddEditFee.clearFields = function(key){
               		debug( $scope.AddEditFee.feeModel[key])
                    $scope.AddEditFee.feeModel[key] = '';
                    $scope.AddEditFee.getSimilarFees(key);
                             
            }
          
          
            // Method to perform SAVE action for popup
            $scope.AddEditFee.closePopup = function() {
                angular.element('#AddEditFee').modal('hide');
            }
            
            
              $scope.AddEditFee.openPopup = function () {
              	angular.element('.controls').hide(); 
                angular.element('#AddEditFee').modal({
                    backdrop : 'static',
                    keyboard : false
                });
                
            }
        });
        
       
       
       
           addEditFeeModule.service("AddEditFeeService", function ($q) {
				this.getDefaultFeeData = function () {
                    var deferred = $q.defer();
                    // make AJAX request to the remote service
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.ViewFeeCtrl.getDefaultFeeData}',
                        function (result, event) {
                        if (event.type == 'exception') {
                            deferred.reject(event.message);
                        } else {
                            var feeDetails = decodeString(result);
                            var find = '\'';
                            var re = new RegExp(find, 'g');
                            feeDetails = feeDetails.replace(re, '');
                            deferred.resolve(JSON.parse(feeDetails));
                        }
                    }, {
                        escape : true
                    });
                    return deferred.promise;
                } 
                
                this.getApplicableTaxList = function()
		            {
	                    var deferred = $q.defer();
	                    Visualforce.remoting.Manager.invokeAction(
	                        '{!$RemoteAction.ViewFeeCtrl.getApplicableTaxList}',
	                        function (result, event) {
	                           if (event.type == 'exception') {
	                                deferred.reject(event.message);
	                            } else {
	                                var categoryRecord = decodeString(result);
	                                var find = '\'';
	                                var re = new RegExp(find, 'g');
	                                categoryRecord = categoryRecord.replace(re, '');
	                                deferred.resolve(JSON.parse(categoryRecord));
	                            }
	                        }, {
	                            escape : true
	                    });
	                    return deferred.promise;
		            }
                    
                this.getFeeInfoById = function (FeeId, activeOrderPageSortAttrsJSON) {
                   	FeeId = encodeString(FeeId);
                   	activeOrderPageSortAttrsJSON = encodeString(angular.toJson(activeOrderPageSortAttrsJSON));
                       var deferred = $q.defer();
       
                       // make AJAX request to the remote service
                       Visualforce.remoting.Manager.invokeAction(
                           '{!$RemoteAction.ViewFeeCtrl.getFeeDetails}', FeeId, null,  activeOrderPageSortAttrsJSON,
                           function (result, event) {
                           if (event.type == 'exception') {
                               deferred.reject(event.message);
                           } else {
                               var feeDetails = decodeString(result);
                               var find = '\'';
                               var re = new RegExp(find, 'g');
                               feeDetails = feeDetails.replace(re, '');
                               deferred.resolve(JSON.parse(feeDetails));
                           }
                       }, {
                           escape : true
                       });
                       return deferred.promise;
                   }
                   
                   
       		  	this.getSimilarFees = function(FeeRecordJSON)
           		{
           			FeeRecordJSON = encodeString(angular.toJson(FeeRecordJSON));
                    var deferred = $q.defer();
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.ViewFeeCtrl.getSimilarFees}', FeeRecordJSON,
                        function (result, event) {
                           if (event.type == 'exception') {
                                deferred.reject(event.message);
                            } else {
                                var similarFeeRec = decodeString(result);
                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                similarKitRec = similarFeeRec.replace(re, '');
                                deferred.resolve(JSON.parse(similarFeeRec));
                            }
                        }, {
                            escape : true
                    });
                    return deferred.promise;
	            }
                   
                this.saveFeeInfo = function(FeeRecordJSON, activeOrderPageSortAttrsJSON)
           		{
           			FeeRecordJSON = encodeString(angular.toJson(FeeRecordJSON));
           			activeOrderPageSortAttrsJSON = encodeString(angular.toJson(activeOrderPageSortAttrsJSON));
                    var deferred = $q.defer();
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.ViewFeeCtrl.saveFee}', FeeRecordJSON, activeOrderPageSortAttrsJSON,
                        function (result, event) {
                           if (event.type == 'exception') {
                                deferred.reject(event.message);
                            } else {
                                var kitRecord = decodeString(result);
                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                kitRecord = kitRecord.replace(re, '');
                                deferred.resolve(JSON.parse(kitRecord));
                            }
                        }, {
                            escape : true
                    });
                    return deferred.promise;
            }
                });
       
      
    </script>

	<div id="AddEditFee" class="modal fade" role="dialog"
		ng-controller="addEditFeeController"
		ng-init=" AddEditFee.setDefaultValidationModel();">
		<div class="modal-dialog"
			ng-class="{'edit_modal-dialog' : AddEditFee.isEditMode == true}">
			<!-- Modal content-->
			<div class="modal-content col-md-12">
				<div class="modal-body popup_container fee_popup_container"
					style="height: 500px;">
					<div class="popupinside">

						<!-- popup left start here -->
						<div class="col-lg-4 col-md-4 popupleft"
							ng-show="AddEditFee.isEditMode!=true" style="height: 430px;">
							<div class="popupleft_container" id="topsection">
  
								<h1 class="letpanel_heading">Existing Fees Like This</h1>
								<i class="fa fa-question-circle helptip" data-toggle="tooltip"
									title="Similar in case of Code or Description field values"
									style="float: left; font-weight: bold; color: #B7BEC6; margin-top: 20px; margin-bottom: 10px; font-size: 20px;"></i>

								<!-- Similar record 1st record -->
								<div class="min_overflow">
									<div class="goldbox col-lg-12 col-md-12"
										ng-repeat="fee in AddEditFee.SimilarFee">
										<!-- <div class="leftgoldbox">
											<img class="starimg"
												src="{!URLFOR($Resource.Images, 'star.png')}" />
											<div class="star_container">
												<i class="fa fa-star"
													style="float: left; color: #B7BEC6; margin-top: 5px; font-size: 15px;"></i>
												<i class="fa fa-star"
													style="float: left; color: #B7BEC6; margin-top: 5px; font-size: 15px;"></i>
											</div>
										</div> -->
										<div class="rightgoldbox rightgoldboxML" id="CustomerSugesstionDiv" style="margin-left: 0px;">
											<div>
												<p class="cust_name">{{fee.Code}}</p>
												<p>Description : {{fee.Description}}</p>
												<p>Price : ${{fee.Price}}</p>
												<p>
													Taxable : <span class="ng-binding  PL20"
														ng-if="fee.IsTaxable">Yes</span> <span
														class="ng-binding  PL20" ng-if="!fee.IsTaxable">No</span>
												</p>
											</div>
										</div>
									</div>
								</div>
							</div>

						</div>


						<!-- popup left end here -->

						<!--  new Fee form start here -->
						<div style="height: 400px;" class="popupright"
							ng-class="{'col-lg-8 col-md-8': AddEditFee.isEditMode == false , 'col-lg-12 col-md-12 leftbordernone': AddEditFee.isEditMode == true}">
							<div class="right_heading_container col-md-12">
								<h1 class="right_panel_heading" ng-if="!AddEditFee.isEditMode">New
									Fee</h1>
								<h1 class="right_panel_heading" ng-if="AddEditFee.isEditMode">Edit
									Fee</h1>

								<div class="savecancle_btncntnr">
									<button type="button" id="closemodal"
										class="btn btn-default grayBtn"
										ng-click="AddEditFee.closePopup();"
										ng-attr-tabindex="{{AddEditFee.tabIndexValue + 31}}" ng-keydown = "AddEditFee.adjustTabIndex($event);">Cancel</button>
									<button type="button" class="btn btn-default greenBtn"
										ng-click="AddEditFee.SaveFeeForm();"
										ng-attr-tabindex="{{AddEditFee.tabIndexValue + 30}}">Save</button>
								</div>
							</div>

							<div class="tabconainer">
								<form>
									<!-- START: Code field -->
									<div class="clearfix"></div>
									<div class="option_field">
										<div class="lable_fields required">
											<span class="form_lable_icons text hiddenfield"> </span>
											<p class="req-label">Code</p>
										</div>
										<div class="form_fields">
											<div class="form-group large MB">
												<input type="text" class="form-control" id="feetxtCode"
													placeholder="Code" rel="feeCode" maxlength="255"
													ng-model="AddEditFee.feeModel.Code"
													ng-disabled="AddEditFee.isEditMode"
													ng-blur="AddEditFee.getSimilarFees('Code'); AddEditFee.validateFieldWithKey('Code');"
													ng-class="{'redborder' : AddEditFee.FeeFormValidationModal['Code']['isError'] == true}"
													data-toggle="tooltip"
													title="{{AddEditFee.FeeFormValidationModal['Code']['ErrorMessage']}}"
													ng-attr-tabindex="{{AddEditFee.tabIndexValue + 1}}" />
											</div>
											<div class="controls1 controls" id="feeCode">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="{{AddEditFee.helpText['Code']}}"></i> <i
													class="fa fa-times"
													ng-click="AddEditFee.clearFields('Code')"></i>
											</div>
										</div>
									</div>
									<!-- END: Code field -->

									<!-- START: Description field -->
									<div class="clearfix"></div>
									<div class="option_field">
										<div class="lable_fields">
											<!-- <span class="form_lable_icons text"> 100 </span> -->
											<span class="form_lable_icons text" style="background: none;"></span>
											<p class="req-label">Description</p>
										</div>
										<div class="form_fields">
											<div class="form-group large MB">
												<input type="text" class="form-control"
													id="feetxtDescription" placeholder="Description"
													rel="feeDescription" maxlength="255"
													ng-model="AddEditFee.feeModel.Description"
													ng-blur="AddEditFee.getSimilarFees('Description'); AddEditFee.validateFieldWithKey('Description');"
													ng-class="{'redborder' : AddEditFee.FeeFormValidationModal['Description']['isError'] == true}"
													data-toggle="tooltip"
													title="{{AddEditFee.FeeFormValidationModal['Description']['ErrorMessage']}}"
													ng-attr-tabindex="{{AddEditFee.tabIndexValue + 2}}" />
											</div>
											<div class="controls1 controls" id="feeDescription">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="{{AddEditFee.helpText['Description']}}"></i> <i
													class="fa fa-times"
													ng-click="AddEditFee.clearFields('Description')"></i>
											</div>
										</div>
									</div>
									<!-- END: Description field -->

									<!-- START: Prices field -->
									<div class="clearfix"></div>
									<div class="option_field">
										<div class="lable_fields required">
											<span class="form_lable_icons text hiddenfield"> </span>
											<p>Price</p>
										</div>
										<div class="form_fields">
											<div class="form-group medium MB">
												<price-only-input id-value="Rate"
													class-value="form-control large" place-holder-value="Price"
													max-length="15" precision-length="2"
													validationkey="FeeCategory"
													errorclass="AddEditFee.FeeFormValidationModal"
													tab-index="{{AddEditFee.tabIndexValue + 5}}"
													input-value="AddEditFee.feeModel.Price"
													validation-modal="AddEditFee.FeeFormValidationModal"
													validation-modal-key="Price" input-model="AddEditFee"
													rel-value="feePrice" />
											</div>
											<div class="form-group pricefiled" id="msrpPretax"  style="padding: 6px;"
                                            	ng-if="AddEditFee.IsTaxIncludingPricing && AddEditFee.feeModel.IsTaxable">
                                                <span class="T3">pretax =  {{AddEditFee.feeModel.Price/(1 + AddEditFee.Tax_Rate/100) | currency}} </span>          
                                            </div>
											<div class="controls1 controls" id="feePrice">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="{{AddEditFee.helpText['Price']}}"></i> <i
													class="fa fa-times"
													ng-click="AddEditFee.feeModel.Price = ''"></i>
											</div>
										</div>
									</div>
									<!-- END: Prices field -->




									<!-- START: Category field -->
									<div class="clearfix"></div>
									<div class="option_field">
										<div class="lable_fields">
											<span class="form_lable_icons text hiddenfield"> </span>
											<p class="req-label">Category</p>
										</div>
										<div class="form_fields angucomplete-overide-dropdown ">
											<div class="form-group medium MB ML">
												<autocomplete id="CategoryName"
													tab-index="{{AddEditFee.tabIndexValue + 6}}"
													rel-value="feeCategoryName"
													placeholder="{!$Label.Category_Object_Display_Label}"
													type="{!$Label.Category_Object_Display_Label}"
													titlefield="Name" validationkey="CategoryName"
													errorclass="AddEditFee.FeeFormValidationModal"
													typesearchmodal="AddEditFee.CategoryNameStr" 
													filter-param = "AddEditFee.FeeFieldsFilter.FeeCategory"/>
											</div>
											<div class="controls1 controls" id="feeCategoryName">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="{{AddEditFee.helpText['CategoryName']}}"></i> <i
													class="fa fa-times"
													ng-click="AddEditFee.CategoryNameStr = ''"></i>
											</div>
										</div>
									</div>
									<!-- END: Category field -->

									<!-- START: Taxable field -->
									<div class="clearfix"></div>
									<div class="option_field">
										<div class="lable_fields">
											<span class="form_lable_icons text hiddenfield"> </span>
											<p>Taxable</p>
										</div>
										<div class="form_fields">
											<div class="form-group large">
												<label class="checkbox smschkbox"> <span
													class="chk_tick" style="margin: 6px 0;" id="Taxable"
													rel="IsTaxable"
													ng-class="{'chked' : AddEditFee.feeModel.IsTaxable}">
														<i class="fa fa-check-square chksqure"
														ng-click="AddEditFee.onSelectTaxable();"
														ng-keyup="AddEditFee.onKeyUpTaxable($event);"
														ng-attr-tabindex="{{AddEditFee.tabIndexValue + 7}}"></i>
												</span>
												</label>
											</div>
											<div class="controls1 controls" id="IsTaxable">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="{{AddEditFee.helpText['FeeTaxable']}}"></i>
											</div>
										</div>
									</div>
									<!-- END: Taxable field -->

									<!-- START: Applicable Tax field -->
                                    <div class="clearfix"></div>
                                    <div class="option_field" ng-show="AddEditFee.feeModel.IsTaxable == true">
                                        <div class="lable_fields">
                                            <span class="form_lable_icons text hiddenfield"> </span>
                                            <p>Applicable Tax</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group large">
                                                <select class="form-control" rel="applicabletax"
                                             		ng-attr-tabindex="{{AddEditFee.tabIndexValue + 6}}"
                                             		ng-model = "AddEditFee.feeModel.ApplicableTaxId"
                                             		ng-change = "AddEditFee.changeApplicableTax()"
                                             		ng-options="taxItem.Id as taxItem.Name for taxItem in AddEditFee.TaxList"></select>
                                            </div>
                                            <div  class="controls1 controls" id="applicabletax">
                                                <i class="fa fa-question-circle" data-toggle="tooltip" title="Fee Applicable Tax"></i>
                                            </div>
                                        </div>
                                    </div>
                                    <!-- END: Applicable Tax field -->
									
									<div class="clearfix"></div>
									<div class="option_field" ng-show="AddEditFee.isEditMode==true">
										<div class="lable_fields">
											<span class="form_lable_icons text hiddenfield"> </span>
											<p>Active</p>
										</div>
										<div class="form_fields">
											<div class="form-group large">
												<label class="checkbox smschkbox"> <span
													class="chk_tick" style="margin: 6px 0;" id="Taxable"
													rel="IsActive"
													ng-class="{'chked' : AddEditFee.feeModel.IsActive}">
														<i class="fa fa-check-square chksqure"
														ng-click="AddEditFee.onSelectActive();"
														ng-keyup="AddEditFee.onKeyUpActive($event);"
														ng-attr-tabindex="{{AddEditFee.tabIndexValue + 8}}"></i>
												</span>
												</label>
											</div>
											<div class="controls1 controls" id="IsActive">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="{{AddEditFee.helpText['FeeActive']}}"></i>
											</div>
										</div>
									</div>
								</form>
							</div>

							<div class="right_heading_container col-md-12">
								<div class="savecancle_btncntnr">
									<button type="button" id="closemodal"
										class="btn btn-default grayBtn"
										ng-click="AddEditFee.closePopup();"
										ng-attr-tabindex="{{AddEditFee.tabIndexValue + 21}}">Cancel</button>
									<button type="button" class="btn btn-default greenBtn"
										ng-click="AddEditFee.SaveFeeForm();"
										ng-attr-tabindex="{{AddEditFee.tabIndexValue + 20}}">Save</button>
								</div>
							</div>
						</div>
						<!--  new Fee form ends here -->

					</div>
				</div>
			</div>
		</div>
	</div>

</apex:component>