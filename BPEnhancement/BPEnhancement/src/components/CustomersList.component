<apex:component id="CustomersComp" controller="BlackPurlContentCtrl" allowDML="true">
    <!-- Component Attributes -->
    <apex:attribute name="uniqueId" required="true" type="String" description="unique Id for components here."/>
    
    <body>
    	<span id="{!uniqueId}Notification"></span>
        
        <div id="dropDownDiv">
			<span id="{!uniqueId}NumberOfFilterRecords" style="color: #1abc9c;"> </span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		  	<span> <b> Include Inactive </b> </span>
		  	<input type="checkbox" id="{!uniqueId}IncludeInactiveCheckBox" onClick="BindGridData();"/> &nbsp;&nbsp;&nbsp;
		  	<span> <b> Records Size : </b> </span>
		  	<select id="{!uniqueId}dropDownList" onchange="{!uniqueId}setCustomSettingAndReloadGrid();">
				  <option value="20">20</option>
				  <option value="50">50</option>
				  <option value="100">100</option>
			</select>
		</div>
        <div id="customerTabPanel" style="border:0px; margin-top: 5px;">
            <ul>
                <li class="k-state-active">Customers</li>
            </ul>
            <div>
                <div id="{!uniqueId}grid" style="width:100%"></div>
                <apex:outputPanel id="NavigationPanel"> 
		         	<span id="NavigationDiv">
		          	<span> Show </span>
		          	<a href="" onclick="moreLinkClickAction();" id="{!uniqueId}MoreLink" > More </a>
		          	<sapn> / </sapn>
		          	<a href="" onclick="fewerLinkClickAction();" id="{!uniqueId}FewerLink" class="linkDisable"> Fewer </a>
		          	<span> Records </span>
		         	</span>
		         </apex:outputPanel>
            </div>
        </div>

        <div class="{!uniqueId}waitingSearchDiv"   > 
            <img class="waitingImage" src="{!URLFOR($Resource.Images, '/loading.gif')}" title="Please Wait..." />
        </div>
        
		<div class="scroll-to-top">
		</div>
		
		<div class="scroll-to-add">  
        </div>
    </body>
    <apex:form >
	    <apex:actionFunction name="createRecentCustomerRecord" action="{!createRecentCustomerRecord}" rerender="dummy">
	    	<apex:param name="selectedCustomerId" assignTo="{!selectedCustomerId}" value="" />
	    </apex:actionFunction>
	    <apex:actionFunction name="{!uniqueId}setPartCustomSetting" action="{!setCustomerCustomSetting}" rerender="dummy">
			<apex:param name="dropDownSelectedNumber" assignTo="{!dropDownSelectedNumber}" value=""/>
		</apex:actionFunction>
	</apex:form>
    
    <style>
        .bpGridAddButton {
            float:left;
         	position:relative;
        }
       .GridRowSelected {
        	background-color: #c4f7ed !important;

        }
        .ob-center {	
        	text-align:center;
        }
        .ob-right {
        	text-align:center;
        }
        #NavigationDiv a {
        	text-decoration : none;
        	color : blue;
        	cursor : pointer;
        }
        .linkDisable {
			color: #a0a0a0 !important;
		    pointer-events: none;
  			cursor: default;
        }
        #NavigationDiv {
        	margin-left:40%;
        	position: absolute;
			z-index: 1;
			margin-top: -1.7%;
        }
        .recentRows {
        	 border-left:3px solid #1abc9c !important;
        }
		.scroll-to-top {
			position: fixed; 
			background : url("{!URLFOR($Resource.Images,'/scrollToTop.png')}");
			cursor: pointer; 
			width:12px; 
			height: 33px; 
			bottom: 3.5em; 
			padding-right: 1em; 
			display: none; 
			z-index: 999; 
			margin-left: 77.7%;
			border-radius: 13px !important;
		}
		.scroll-to-add {
            position: fixed; 
            background : url("{!URLFOR($Resource.Images,'/scrollAdd.png')}");
            cursor: pointer; 
            width:23px; 
            height: 30px; 
            bottom: 1em; 
            display: block;
            padding-right: 1em; 

            z-index: 999; 
            margin-left: 77.77%;
            border-radius: 13px !important;
        }
		#dropDownDiv {
			margin-top: 5px;
		}
		.k-header .k-grid-toolbar {
            border-bottom:0px;
        }
    </style>
    
	<script>
		var asd;
		if(document.getElementById('{!uniqueId}dropDownList') != null && '{!dropDownSelectedNumber}' != "") {
   			document.getElementById('{!uniqueId}dropDownList').value = '{!dropDownSelectedNumber}';
   		} 
   		
   		
   		function {!uniqueId}setCustomSettingAndReloadGrid() {
        	var numberOfPartsToBeShown = document.getElementById('{!uniqueId}dropDownList');
    		{!uniqueId}setPartCustomSetting(numberOfPartsToBeShown.value); 
    		BindGridData();
        }
        
		/**
		 * Name: Callback Function of binWindowUnLoadEvent
		 * Desc: Method to show popup in case user tries to close the tab before saving data
		 * @param: 
		 * @return: 
		**/
		var binWindowUnLoadEvent = function(){
			$(window).bind('beforeunload', function(e) { 
				var isToProcessWindowUnloadPopup = customersGridTabPanel != null && customersGridTabPanel.tabGroup[0].children.length != 1;
				var message = "Please make sure all edited customer records have been saved.";
				if(isToProcessWindowUnloadPopup){
					e.returnValue = message;	
					return message;
				}
			});
		}
		
		// Unbind events
		$(window).unbind('beforeunload');
		
		// Boolean variable to keep track if any changes in whole customer page
    	var IsAnyChangesInCustomerPage = false;;

		// variable to show popup notification. 
    	var {!uniqueId}popupNotification;

		// Varibale to store the number selected by drop down 
		var dropDownNumber;

		// Variable related to filters
		var KeyColumn='';
    	var Keyvalue='';
    	var FilterKeys=[];
    	var FilterJsondata='';
    	var StartSugest=0;
    	var StartSugestCity=0;
    	 
		// Varibale used in opening customer. It is always a unique number.
        var tabCounter=0;
		
		// Variable to maintain new record counter
		var newCutomerRecCounter = 0;
		
		/**
		 * Name: Document Ready Function
		 * Desc: Method executes as soon as the page load
		 * @param: 
		 * @return: 
		**/
        $(document).ready(function () {
        	// Notification Popup
            {!uniqueId}popupNotification = $("#{!uniqueId}Notification").kendoNotification({
				// hide automatically after 2 seconds
				autoHideAfter: 5000,

				// prevent accidental hiding for 100 mili-second
				allowHideAfter: 100,
				
				// prevent to show a hide button
				button: false,
				
				// allow hiding by clicking on the notification content
				hideOnClick: true,

				// Set animation to false
				animation: false
            }).data("kendoNotification");
              
            // Load grid here
            {!uniqueId}loadCustomerGrid();

            if({!uniqueId}customerGrid == null){
                {!uniqueId}customerGrid = $("#{!uniqueId}grid").data("kendoGrid");
            }
            
            $("#{!uniqueId}grid").data().kendoGrid.dataSource.bind('requestStart', {!uniqueId}start);
            $("#{!uniqueId}grid").data().kendoGrid.dataSource.bind('requestEnd', {!uniqueId}end );
            
            function {!uniqueId}start(){
                $(".{!uniqueId}waitingSearchDiv").show();//i.e. make your loading gif visible
            }
            
            function {!uniqueId}end(){
                $(".{!uniqueId}waitingSearchDiv").hide();//i.e. make your loading gif visible
            }
            
            $("#{!uniqueId}Customer_Add_Button", {!uniqueId}customerGrid.element).on("click", function (event) {
                {!uniqueId}customerGridAddButtonClickEvent();
                event.stopPropagation();
            });

            // Initialize customers tab panel
			initCustomersTabPanel();
			
			// Method to show scroll to top button.
			var offset = 200;
			var duration = 500;
			jQuery('#center-pane').scroll(function() {
				if (jQuery(this).scrollTop() > offset) {
					jQuery('.scroll-to-top').fadeIn(duration);
				} else {
					jQuery('.scroll-to-top').fadeOut(duration);
				}

			});
			
			// Method to navigate bottom to top
			jQuery('.scroll-to-top').click(function(event) {
				event.preventDefault();
				jQuery('#center-pane').animate({scrollTop: 0}, duration);
				return false;
			})
			
			// invoke this function when bottom add button is clicked
			jQuery('.scroll-to-add').click(function(event) {
                {!uniqueId}customerGridAddButtonClickEvent();
                event.preventDefault();
                return false;
            })

		});
        
        /**
		 * Name: moreLinkClickAction
		 * Desc: Method executes when more link is clicked and it added 20 more records to the current Grid
		 * @param: 
		 * @return: 
		**/
        function moreLinkClickAction() {
            Visualforce.remoting.Manager.invokeAction( 
            	'{!$RemoteAction.BlackPurlContentCtrl.increaseCustomer}', 
				{!uniqueId}customerGrid.dataSource.view().length + 21 , 20, isInactiveIncluded, encodeString(FilterJsondata),
                function(result, event){ 
					if (event.type == 'exception') {
						{!uniqueId}showPopupNotification(event.message, "error");
					} else {
						var customer = decodeString(result);
						var find = '\'';
						var re = new RegExp(find, 'g');
						customer = customer.replace(re,'');
						customer = JSON.parse(customer);
						if(customer.length < 21) {
							$("#{!uniqueId}MoreLink").addClass("linkDisable");
						}
						$("#{!uniqueId}FewerLink").removeClass("linkDisable");

						var Sorts= {!uniqueId}customerGrid.dataSource.sort();
						{!uniqueId}customerGrid.dataSource.filter({});
						{!uniqueId}customerGrid.dataSource.sort({});

						for(var i = 0; i < 20 ; i++){
							if(customer[i] != null) {
								{!uniqueId}customerGrid.dataSource.view().push(customer[i]);
							}
						}

						{!uniqueId}customerGrid.dataSource.filter(FilterKeys);
						if(Sorts!= null) {
							 {!uniqueId}customerGrid.dataSource.sort(Sorts);
						}
					}
                },
                {escape: true}
            );
        }

		/**
		 * Name: fewerLinkClickAction
		 * Desc: Method executes when fewer link is clicked and it removes last 20 records to the current Grid
		 * @param: 
		 * @return: 
		**/
		function fewerLinkClickAction() {
			var gridLength = {!uniqueId}customerGrid.dataSource.view().length;
			$("#{!uniqueId}MoreLink").removeClass("linkDisable");
			if(gridLength <= +dropDownNumber + 1) {
				$("#{!uniqueId}FewerLink").addClass("linkDisable");
				if(gridLength <= +dropDownNumber) {
					return;
				}
			}
			
			{!uniqueId}customerGrid.dataSource.filter({});
			var Sorts= {!uniqueId}customerGrid.dataSource.sort();
			{!uniqueId}customerGrid.dataSource.sort({});
			
			for(var i = gridLength-1; i > gridLength - 20 - 1 ; i--){
				if(i == +dropDownNumber - 1) {
					$("#{!uniqueId}FewerLink").addClass("linkDisable");
					return;
				} else if(i == +dropDownNumber) {
					$("#{!uniqueId}FewerLink").addClass("linkDisable");
				}
				{!uniqueId}customerGrid.dataSource.view().pop(i);
			}
			if(Sorts!= null) {
				{!uniqueId}customerGrid.dataSource.sort(Sorts);
			}
			 {!uniqueId}customerGrid.dataSource.filter(FilterKeys);
		}

        /**
		 * Name: {!uniqueId}loadCustomerGrid
		 * Desc: Method to load the customer Grid when the component is loaded.
		 * @param: 
		 * @return: 
		**/
        function {!uniqueId}loadCustomerGrid(){
            // Variable to get current drop down number
            dropDownNumber = document.getElementById('{!uniqueId}dropDownList').value;
            isInactiveIncluded = document.getElementById('{!uniqueId}IncludeInactiveCheckBox').checked;
            
			// Grid Data Source
            var customerGridDataSource = new kendo.data.DataSource({
                transport: {
                    read: function (options) {
                        
						// make AJAX request to the remote service
                        Visualforce.remoting.Manager.invokeAction( '{!$RemoteAction.BlackPurlContentCtrl.getJSONForAllCustomer}', 
																		+dropDownNumber, 20, isInactiveIncluded, encodeString('[]'),
                            function(result, event){
                                if (event.type == 'exception') {
                                    {!uniqueId}showPopupNotification(event.message, "error");
                                } else {
                                    var customer = decodeString(result);
                                    var find = '\'';
                                    var re = new RegExp(find, 'g');
                                    customer = customer.replace(re,'');
                                    customer = JSON.parse(customer);
                                    if(customer.length == 0) {
										{!uniqueId}showPopupNotification('No records found ','info');
                                    }
                                    if(customer.length ==  +dropDownNumber) {
										$("#{!uniqueId}MoreLink").removeClass("linkDisable");
									} else if(customer.length <  +dropDownNumber) {
										$("#{!uniqueId}MoreLink").addClass("linkDisable");
									}
									
                                    options.success(customer);
                                }
							},
							{escape: true}
						);

                    },
                    create:function(e) {
                         return false;
                    },
                    update:function(e) {
                        return false;
                    },
                },
                schema: {
                    model: {
                        Id: "Cust_Id",
                        fields: {
                            Cust_Name: { type: "string" },
                            Cust_BillingStreet: { type: "string" },
                            Cust_BillingCity: {  type: "string" },
                            Cust_Phone: { type: "string" },
                            Cust_Email : { type: "string"},
                            Cust_LastActive: { type: "date", class:"ob-center" },
                            Is_recent: {type: "boolean"}
                        }
                    }
                },
                sortable: {
                    mode: "single",
                    allowUnsort: false
                }
            });
            
            // Method: Load Data Grid here
            $("#{!uniqueId}grid").kendoGrid({
                toolbar: [
                    {
                        name: "Add",
                        template: '<img src="{!URLFOR($Resource.Images, '/add.jpg')}" class="bpGridAddButton" id="{!uniqueId}Customer_Add_Button">',
                        text: "Add New Customer",
                        click: function(e){
							return false;
						}
                    }
                ],
				 filterable: {
                            extra: false,
                            operators: {
                                string: {
                                    startswith: "Starts with",
                                    eq: "Is equal to",
                                    neq: "Is not equal to"
                                }
                            }
                        },
                columns: [
                		{
                            field:"Cust_Name",title:"Name", width: "20%", 
                            filterable: {
	                        	ui:NameFilter
	                        },
                            template: '<div   #=Is_recent  ? "class=recentRows" : ""#  ><span  style="margin-left:3px" title=\'${Cust_Name}\'>${Cust_Name}</span><div>'
                        },
                        {
                            field:"Cust_BillingStreet",title:"Street", width: "15%", 
							filterable: false,
                            template: '<span title=\'${Cust_BillingStreet}\'>${Cust_BillingStreet}</span>'
                        },
                        {
                            field:"Cust_BillingCity",title:"City", width: "20%",
                            filterable: {
			                	ui:CityFilter
			                },
                            template: "<span title=\'${Cust_BillingCity}\'>${Cust_BillingCity}</span>"
                        },
                        {
                            field: "Cust_Phone", title: "Phone No", width: "15%" ,
                             filterable: {
			                	ui:PhoneFilter
			                },
                            template: '<span title=\'${Cust_Phone}\'>${Cust_Phone}</span>'
                        },
                        {
                            field:"Cust_Email",title:"Email", width: "15%" , 
                            filterable: {
			                	ui:EmailFilter
			                },
                            template: '<a href="mailto:#=Cust_Email#">#=Cust_Email#</a>', encoded: false
                        },
                        {
                            field: "Cust_LastActive", title: "Last Active", width: "15%",
							filterable:false,
                            template:  '#= kendo.toString(Cust_LastActive, "MM/dd/yyyy") #'
                        }
                    ],
                    dataSource: customerGridDataSource,
                    scrollable:false,
                    sortable : true,
					serverFiltering: true,
                    reorderable: false,
                    dataBound: {!uniqueId}onCustDataBound,
                    selectable: "single",
                    change: function(e) {
	                    openSelectedCustomerTab(e);
	                }
            	});

	            // Called to bind auto-complete to filter in case of Customer Name
	            function NameFilter(element) {
			    	element.kendoAutoComplete({
			        	ignoreCase: true         
			        });
	                AutocompleteCalls(element); 
			    }

				// Called in case of city filter
			    function CityFilter(element) {
			    	element.kendoAutoComplete({
			        	ignoreCase: true         
			        });
	                AutocompleteCallsBillingCity(element);
			    }

			    // Called in case of telephone Filter
			    function PhoneFilter(element) {
			     	element.kendoMaskedTextBox({
                       mask: "999-000-0000"
                    });
			    	PhoneFilterCall(element);
			    }
			    
				// Called in case of Email
			    function EmailFilter(element) {
			    	element.kendoAutoComplete({
			        	ignoreCase: true         
			        });
				    EmailFilterCall(element);
			    }
        }
        

        // variable to store the Customer Grid Instance
        var {!uniqueId}customerGrid = $("#{!uniqueId}grid").data("kendoGrid");
        
		/**
		 * Name: {!uniqueId}getSelectedRowData
		 * Desc: Method to get row data which is selected.
		 * @param: 
		 * @return: selected row data
		**/
        function {!uniqueId}getSelectedRowData(){
            var rowIndex = {!uniqueId}customerGrid.select().closest("tr");
            if(rowIndex.length == 0){
                return null;
            }else{
                var rowData = {!uniqueId}customerGrid.dataItem(rowIndex);
                if(rowData.Cust_Id != ""){
                    return rowData;
                }else if( ({!uniqueId}customerGrid.editable.validatable.validate()) == false ){
                    return null;
                }
            }
            return rowData;
        }
        
		/**
		 * Name: {!uniqueId}onCustDataBound
		 * Desc: Method to Bound customer datasource to the Grid.
		 * @param: 
		 * @return: 
		**/
        function {!uniqueId}onCustDataBound(e) {

			// Calculate current Grid length
			var gridlen={!uniqueId}customerGrid.dataSource.view().length;
           	
			// Variable to store selected row data
			var selectedRowData ;

			// Add toolbar to the bottom of the Grid
			$("#{!uniqueId}grid").find(".k-grid-toolbar").insertAfter($("#{!uniqueId}grid").children()[1]);
            $(".k-grid-toolbar").css("background-color", "#ffffff");
           	$(".k-grid-toolbar").css("border-bottom", " solid 1px #ccc");
           	$(".k-grid-toolbar").css("border-top", "none");
           	$(".k-grid-toolbar").css("height", "25px");
           	$(".k-grid-toolbar").css("vertical-align", "middle");
           	$(".bpGridAddButton").prop('title', 'Add');
			
			$(".k-grid table tr").hover(function(){
				$(this).find('td').each (function() {
					$(this).addClass("tr_hover");
				});
			}, function(){
				$(this).find('td').each (function() {
					$(this).removeClass("tr_hover");
				});
			});
			
			// Set the width of the filter input
            $("#{!uniqueId}grid").find(".k-filter-row").children().find("span>input").css('width','130px');
		    
		    if(gridlen=={!currentNoOfCustomerByCustomSetting}) {     
	            {!uniqueId}customerGrid.element.on("click", "tbody>tr", "click", function (event) {
					selectedRowData = {!uniqueId}getSelectedRowData();
					$("#{!uniqueId}grid").find('tr>td.GridRowSelected').removeClass('GridRowSelected');
					$("#{!uniqueId}grid").find('tr.k-state-selected>td').addClass('GridRowSelected');
					event.stopPropagation();
	            });
            }
        }

        /**
		 * Name: {!uniqueId}showPopupNotification
		 * Desc: Method to show popup Notification.
		 * @param: (1) message - Message that is to be displayed
		 *		   (2) msgType - Type of message - info, warning, error etc.
		 * @return: 
		**/
        function {!uniqueId}showPopupNotification(message, msgType){
        	{!uniqueId}popupNotification.hide();
        	{!uniqueId}popupNotification.show(kendo.toString(message), msgType);
        }
		
		// variables related to Customer Panel
		var customersGridTabPanel;
		var custmoerIdToTabIndexMap = {};
		
	 	/**
		 * Name: initCustomersTabPanel
		 * Desc: Method to Initialize customers tab panel
		 * @param: 
		 * @return: 
		**/
		function initCustomersTabPanel(){
			customersGridTabPanel = $("#customerTabPanel").kendoTabStrip().data("kendoTabStrip");
            customersGridTabPanel.select(0);
		}
		
		/**
		 * Name: openSelectedCustomerTab
		 * Desc: Method to open the selected customer details tab
		 * @param: 
		 * @return: 
		**/
		function openSelectedCustomerTab(e){
			var selectedRowData = {!uniqueId}getSelectedRowData();
            if(custmoerIdToTabIndexMap.hasOwnProperty(selectedRowData.Cust_Id)) {
                createRecentCustomerRecord(selectedRowData.Cust_Id);
                customersGridTabPanel.select(custmoerIdToTabIndexMap[selectedRowData.Cust_Id]);
                return;
            }

            if(customersGridTabPanel.tabGroup[0].children.length == 4){
                {!uniqueId}showPopupNotification("Please close a tab first in order to see the customer detail.", "error");
                return;
            }

			if(selectedRowData != null && !custmoerIdToTabIndexMap.hasOwnProperty(selectedRowData.Cust_Id)){
				asd = selectedRowData;
                createRecentCustomerRecord(selectedRowData.Cust_Id);
                custmoerIdToTabIndexMap[selectedRowData.Cust_Id] = customersGridTabPanel.tabGroup[0].children.length;
                openNewFormDataTab(selectedRowData.Cust_Id, selectedRowData.Cust_Name);
            }else{
                {!uniqueId}showPopupNotification("Some error occurred. Please reload the page.", "error");
            }
			binWindowUnLoadEvent();
        }
		
		/**
		 * Name: generateCountriesPicklistJSON
		 * Desc: Method to generate JSON data for Countries dropdown 
		 * @param:  (1) callbackToPopulatePicklist - Call back function to populate countries picklist
		 * @return: 
		**/
        function generateCountriesPicklistJSON( callbackToPopulatePicklist ) {
			Visualforce.remoting.Manager.invokeAction( '{!$RemoteAction.BlackPurlContentCtrl.generateJSONForAllCountries}', 
														function(result, event){
															if (event.type == 'exception') {
																{!uniqueId}showPopupNotification(event.message, "error");
															} else {
																var countriesJSON = decodeString(result);
																var find = '\'';
																var re = new RegExp(find, 'g');
																countriesJSON = countriesJSON.replace(re,'');
																countriesJSON = JSON.parse(countriesJSON);
																callbackToPopulatePicklist(countriesJSON);
															}
														},
														{escape: true}
			);
		}
		
		/**
		 * Name: generateStatesPicklistJSON
		 * Desc: Method to generate JSON data for States dropdown according to slected country
		 * @param:  (1) callbackToPopulatePicklist - Call back function to populate states picklist
		 * @return: 
		**/
        function generateStatesPicklistJSON( callbackToPopulatePicklist, selectedCountryValue ) {
			Visualforce.remoting.Manager.invokeAction( '{!$RemoteAction.BlackPurlContentCtrl.getJSONForStateByCountry}', 
														encodeString(selectedCountryValue),
														function(result, event){
															if (event.type == 'exception') {
																{!uniqueId}showPopupNotification(event.message, "error");
															} else {
																var statesJSON = decodeString(result);
																var find = '\'';
																var re = new RegExp(find, 'g');
																statesJSON = statesJSON.replace(re,'');
																statesJSON = JSON.parse(statesJSON);
																callbackToPopulatePicklist(statesJSON);
															}
														},
														{escape: true}
			);
		}
		
		/**
		 * Name: generateObjFieldPicklistJSON
		 * Desc: Method to generate JSON data for for on object picklist type field
		 * @param:	objName - Object API name
		 *			fieldName - Picklist type field name for the object
		 *			callbackToPopulatePicklist - Call back function to populate dropdown element
		 * @return: 
		**/
        function generateObjFieldPicklistJSON( objName, fieldName, callbackToPopulateDropdown ) {
			Visualforce.remoting.Manager.invokeAction( '{!$RemoteAction.BlackPurlContentCtrl.getJSONForObjectPicklistField}', 
														encodeString(objName), encodeString(fieldName),
														function(result, event){
															if (event.type == 'exception') {
																{!uniqueId}showPopupNotification(event.message, "error");
															} else {
																var fieldPicklistJSON = decodeString(result);
																var find = '\'';
																var re = new RegExp(find, 'g');
																fieldPicklistJSON = fieldPicklistJSON.replace(re,'');
																fieldPicklistJSON = JSON.parse(fieldPicklistJSON);
																callbackToPopulateDropdown(fieldPicklistJSON);
															}
														},
														{escape: true}
			);
		}
		
		/**
		 * Name: generateObjRecordsPicklistJSON
		 * Desc: Method to generate JSON data for for on object records
		 * @param:	objName - Object API name
		 *			displayFieldName - Display field name for the object
		 *			callbackToPopulatePicklist - Call back function to populate dropdown element
		 * @return: 
		**/
        function generateObjRecordsPicklistJSON( objName, displayFieldName, callbackToPopulateDropdown ) {
			Visualforce.remoting.Manager.invokeAction( '{!$RemoteAction.BlackPurlContentCtrl.getJSONForObjectRecordsPicklist}', 
														encodeString(objName), encodeString(displayFieldName),
														function(result, event){
															if (event.type == 'exception') {
																{!uniqueId}showPopupNotification(event.message, "error");
															} else {
																var objRecordsPicklistJSON = decodeString(result);
																var find = '\'';
																var re = new RegExp(find, 'g');
																objRecordsPicklistJSON = objRecordsPicklistJSON.replace(re,'');
																objRecordsPicklistJSON = JSON.parse(objRecordsPicklistJSON);
																callbackToPopulateDropdown(objRecordsPicklistJSON);
															}
														},
														{escape: true}
			);
		}
		
        /**
		 * Name: saveCustomerDetails
		 * Desc: Method to save the selected customer details 
		 * @param:  (1) customerId - Id of Customer
		 			(2) customerType - Type of Customer
		 			(3) customerDetailsJSON - JSON String of customer details
		 			(4) customerSaveCallBack - Cusmoter Save Call back function
		 * @return: 
		**/
        function saveCustomerDetails(customerId, customerType, customerDetailsJSON, currentCustomerUID, customerSaveCallBack){
        	Visualforce.remoting.Manager.invokeAction(
        		'{!$RemoteAction.BlackPurlContentCtrl.saveCustomerJSON}',
                 encodeString(customerId), encodeString(customerType), encodeString(customerDetailsJSON),
        			function(result, event){
                    	if (event.status) {
                        	// Successfully deleted record
                            var grid = $("#{!uniqueId}grid").data("kendoGrid");
                            customerSaveCallBack(decodeString(result));
                            updateMapValues(decodeString(result), currentCustomerUID);
                            {!uniqueId}showPopupNotification("Saved successfully", "success");
							grid.dataSource.read();
                        } else if (event.type === 'exception') {
                        	{!uniqueId}showPopupNotification(event.message, "error");
                        } else {
							{!uniqueId}showPopupNotification(event.message, "error");
                        }
                    },
                    {escape: true}
            );
        }
		
		/**
		 * Name: saveCustomerDetails
		 * Desc: Method to update map values after susseccful saving of new customer
		 * @param:	(1) result - Customer Id of current Customer
		 *			(2) currentCustomerUID - Customer UID in case it was a new customer
		 * @return: 
		**/
		function updateMapValues(result, currentCustomerUID) {
			var newCustomerUID = currentCustomerUID[currentCustomerUID.length - 1];
			for(var key in custmoerIdToTabIndexMap) {
				if(key == newCustomerUID) {
					var tabIndex = custmoerIdToTabIndexMap[key];
					delete custmoerIdToTabIndexMap[newCustomerUID];
					custmoerIdToTabIndexMap[result] = tabIndex;
				}
			}
		}
		
		var ImgObjG;
		var customerIdG;
		var anyChangesInCustomerClosingTab;
        
        /**
		 * Name: removeSelecedTab
		 * Desc: Method to remove the tab from view
		 * @param: 	(1) ImgObj - Id of Img Object
		 			(2) CustomerId - Id of Customer
		 			(3) IsselectedTabModified - Boolean to check if there is any update in current tab.
		 * @return: 
		**/
        function removeSelecedTab(ImgObj, customerId, IsselectedTabModified) {
        	ImgObjG = ImgObj;
        	customerIdG = customerId;
        	if(IsselectedTabModified){
	        	var actionConfirmMsg = "There are some changes not saved in the form. Do you want to continue?";
	            confirmActionCustomized("Confirm Action", actionConfirmMsg, removeSelectedTabCallBack, "{!JSENCODE($Label.Tab_Leave_Confirm_box_Yes_text)}", "{!JSENCODE($Label.Tab_Leave_Confirm_box_No_text)}");
	        }else{
	        	removeSelectedTabCallBack(true);
	        }
	        if(customersGridTabPanel.tabGroup[0].children.length == 1){
	        	$(window).unbind('beforeunload');
	        }
		}
		
		/**
		 * Name: removeSelectedTabCallBack
		 * Desc: Method to remove the tab from view
		 * @param: (1) isConfirmed - boolean variable to show if tab is closed.
		 * @return: 
		**/
		function removeSelectedTabCallBack(isConfirmed){
			if(isConfirmed == false){
				return;
			}
			customersGridTabPanel.remove($(ImgObjG).closest("li"));
            var removedTab;
            if(customerIdG == 'null'){
            	removedTab = custmoerIdToTabIndexMap['New'];
            	delete custmoerIdToTabIndexMap['New'];
            } else {
            	removedTab = custmoerIdToTabIndexMap[customerIdG];
            	delete custmoerIdToTabIndexMap[customerIdG];
            }
            for(var key in custmoerIdToTabIndexMap) {
            	if(custmoerIdToTabIndexMap[key] > removedTab) {
            		var tabIndex = custmoerIdToTabIndexMap[key];
            		custmoerIdToTabIndexMap[key] = tabIndex - 1;
            	}
            }
            customersGridTabPanel.select(0);
		}
		
		/**
		 * Name: {!uniqueId}customerGridAddButtonClickEvent
		 * Desc: Method used to create a new customer opens a tab saying "New Customer" 
		 				and display a detail form for various information
		 * @param: 
		 * @return: 
		**/
		function {!uniqueId}customerGridAddButtonClickEvent(){
            if(customersGridTabPanel.tabGroup[0].children.length >= 4){
                {!uniqueId}showPopupNotification("Please close a tab first in order to see the customer detail.", "error");
                return;
            }
            custmoerIdToTabIndexMap['' + tabCounter] = customersGridTabPanel.tabGroup[0].children.length;
            openNewFormDataTab(null, "New Customer " + (++newCutomerRecCounter) );
        }
		
		/**
		 * Name: openNewFormDataTab
		 * Desc: Method opens a tab with customer details form as parameter values
		 * @param:  (1) CustomerId - Id of Customer
		 			(2) customerName - Name of cutsomer
		 * @return: 
		**/
		function openNewFormDataTab(customerId, customerName){
			var navURL = "{!$Page.CustomerOverview}?pageno=page" + tabCounter ;
			if(customerId != null){
				navURL += "&C_ID=" + customerId;
			}
			
			//customerId = "001o0000006v6Ja";
            customersGridTabPanel.insertAfter( 
            	{
                    text: "<div id='page"+ tabCounter +"TabNameDiv' style='width:100px; overflow: hidden; white-space: nowrap; float:left' title='"+ customerName +"'> " + customerName +" </div> <div style='float:right'> <img src='" + '{!URLFOR($Resource.Images, "x-mark.png")}' + "' onclick='page"+tabCounter+"preRemoveSelecedTab(this, \""+customerId+"\");'> </dvi>",
                    encoded: false,
                    contentUrl: navURL
                },
                customersGridTabPanel.tabGroup.children("li:last")
            );
            customersGridTabPanel.select(customersGridTabPanel.tabGroup.children().length - 1);
            tabCounter = tabCounter + 1;
		}

	    /**
		 * Name: AutocompleteCalls
		 * Desc: Method to bind the data to keypress events to the autocomplete Name
		 * @param:  (1) element - Filter Element
		 * @return: 
		**/
        function AutocompleteCalls(element) {
        	$(element).attr('id','auto');
			var delayName= (function(){
				var timer = 0;
				return function(callback, ms){
					clearTimeout (timer);
					timer = setTimeout(callback, ms);
				};
			})();
			
			// To Disable startswith option in filter Drop Down
			$(element).parents("div").children("select").children('option[value!="startswith"]').remove();
			$(element).parents("div").children("select").prop('disabled', true);
			
			// Submit Click Event handle of Filter
			$(element).parent().closest("div").find("button[type='submit']").on('click',function() {							
				var Keyvlaue=$('#auto').val();
				setFilterKeys('Cust_Name','startswith',Keyvlaue)
				BindGridData();
			});
			
			// Cancel Click Event handle of Filter
			$(element).parent().closest("div").find("button[type='reset']").on('click',function() {							
				removeFilterKeys('Cust_Name');
				BindGridData();
			});
						
	        $("input[data-role='autocomplete']").keyup(function(event) {
		        if($('#auto').val().length >= 3) {
					if(((event.keyCode == 13 )|| (event.keyCode == 40) || (event.keyCode == 39))) {
						// Logic
					} else {
						delayName(function(){
							getAutoCompleteSugestion()
						}, 400 );
					}
				} else {
					StartSugest = 0;
				}
			});
        } 
        
        /**
		 * Name: removeFilterKeys
		 * Desc: Method to reset Filter Key To the Datbase
		 * @param:  (1) fieldvalue - the column name frim which filter is to be removed
		 * @return: 
		**/
        function removeFilterKeys(fieldvalue) {
        	if(FilterKeys.length > 0) {		
				for (var i=0 ; i < FilterKeys.length ; i++) {
					if (FilterKeys[i]["field"] == fieldvalue) {
						FilterKeys.splice(i,1);
					}
				}
			}
        	FilterJsondata=JSON.stringify(FilterKeys);	
        }
        
        /**
		 * Name: setFilterKeys
		 * Desc: Method to set Filter Key To the Datbase
		 * @param:  (1) fieldvalue - the column name frim which filter is to be removed
		 			(2) operatorvalue - The opertor that is selected from filter drop down
		 			(3) Keyvalue - the typed (searched) String
		 * @return: 
		**/
		function setFilterKeys(fieldvalue, operatorvalue, Keyvalue) {		
			var new_filter = { field: fieldvalue, operator: operatorvalue, value:Keyvalue};
			var Recordno=0;
			if(FilterKeys.length==0) {		
				FilterKeys.push(new_filter)
			} else {
	            for (var i=0 ; i < FilterKeys.length ; i++) {
				    if (FilterKeys[i]["field"] == fieldvalue) {
				        FilterKeys.splice(i,1,new_filter);
				      	Recordno = 1;
				    }
				}
				if(Recordno==0) {
					FilterKeys.push(new_filter);
				}
			}
			FilterJsondata=JSON.stringify(FilterKeys);		
		}
        
		/**
		 * Name: getAutoCompleteSugestion
		 * Desc: Method to bind dataSource to Autocomplete
		 * @param:  
		 * @return: 
		**/
        function getAutoCompleteSugestion() {	
		 	 var InputItem=$('#auto').val();
		 	 isInactiveIncluded = document.getElementById('{!uniqueId}IncludeInactiveCheckBox').checked;      
		     Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.BlackPurlContentCtrl.getJSONForFilteredCustomer}',
		                                                  encodeString(InputItem), encodeString('Cust_Name'), isInactiveIncluded, 
		   	 			function(result, event){
		                	if (event.status) {
		                    	dataarray = $.parseJSON(decodeString(result));
								$('#auto').data("kendoAutoComplete").setDataSource(dataarray);
								var Searchkey=$('#auto').val();
								if(StartSugest == 0) {
									$('#auto').data("kendoAutoComplete").search(Searchkey);
									StartSugest = 1;
								}
		                    } else if (event.type === 'exception') {
		                        {!uniqueId}showPopupNotification(event.message, "error");
                            } else {
		                        {!uniqueId}showPopupNotification(event.message, "error");
		                    }
		                },
		                {escape: true}
		      );
		}

		/**
		 * Name: BindGridData
		 * Desc: Method to bind dataSource to the new searched result
		 * @param: 
		 * @return: 
		**/
		function BindGridData() {	
			isInactiveIncluded = document.getElementById('{!uniqueId}IncludeInactiveCheckBox').checked;
		    dropDownNumber = document.getElementById('{!uniqueId}dropDownList').value;
		    
		    Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.BlackPurlContentCtrl.getJSONForAllCustomer}',
		                                                  +dropDownNumber , 20, isInactiveIncluded, encodeString(FilterJsondata),
		                function(result, event){
		                	if (event.status) {
								var dataArray = decodeString(result);
                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                dataArray = dataArray.replace(re,'');
                                dataArray = JSON.parse(dataArray);
								$("#{!uniqueId}grid").data("kendoGrid").dataSource.data(dataArray);
								
								if(dataArray.length ==  +dropDownNumber) {
									$("#{!uniqueId}MoreLink").removeClass("linkDisable");
								} else if(dataArray.length <  +dropDownNumber) {
									$("#{!uniqueId}MoreLink").addClass("linkDisable");
								}
								if(FilterJsondata != '[]' && FilterJsondata != '') {
									if(dataArray.length == 0) {
										$("#{!uniqueId}NumberOfFilterRecords").html('<i> No records found </i>');
									} else {
										$("#{!uniqueId}NumberOfFilterRecords").html('<b>'+ dataArray[0].TotalFilteredRecords + '</b><i> records retrieved </i>');
									}
								} else {
									$("#{!uniqueId}NumberOfFilterRecords").html('');		
								}
								$("#{!uniqueId}FewerLink").addClass("linkDisable");
		                    } else if (event.type === 'exception') {
		                        {!uniqueId}showPopupNotification(event.message, "error");
		                    } else {
		                        {!uniqueId}showPopupNotification(event.message, "error");
		                    }
		                },
		                {escape: true}
		    );
		}

		/**
		 * Name: PhoneFilterCall
		 * Desc: Method to handle filter event in case of phone column filtering
		 * @param: (1) element - phone filter element
		 * @return: 
		**/
    	function PhoneFilterCall(element) {
    		$(element).attr('id','FilterPhone');
			$(element).parents("div").children("select").children('option[value!="eq"]').remove();
			$(element).parents("div").children("select").prop('disabled', true);			
			$(element).parent().closest("div").find("button[type='submit']").on('click',function() {							
				var Keyvlaue=$('#FilterPhone').val();
				setFilterKeys('Cust_Phone','eq',Keyvlaue)
				BindGridDataPhoneFilter();
			});
		
			$(element).parent().closest("div").find("button[type='reset']").on('click',function() {							
				removeFilterKeys('Cust_Phone');
				BindGridDataPhoneFilter();
			});
        
			$(element).parent().closest("div").find("button[type='reset']").on('click',function() {                         
                removeFilterKeys('Cust_Phone');
                BindGridDataPhoneFilter();
            });
        } 
        
        /**
		 * Name: EmailFilterCall
		 * Desc: Method to handle filter event in case of email column filtering
		 * @param: (1) element - phone filter element
		 * @return: 
		**/
        function EmailFilterCall(element) {
    		$(element).attr('id','FilterEmail');
			$(element).parents("div").children("select").children('option[value!="eq"]').remove();	
			$(element).parents("div").children("select").prop('disabled', true);
			
			$(element).parent().closest("div").find("button[type='submit']").on('click',function() {							
				var Keyvlaue=$('#FilterEmail').val();
				setFilterKeys('Cust_Email','eq',Keyvlaue)
				BindGridDataEmailFilter();
			});
		
			$(element).parent().closest("div").find("button[type='reset']").on('click',function() {							
				removeFilterKeys('Cust_Email');
				BindGridDataEmailFilter();
			});
        } 
        
        /**
		 * Name: AutocompleteCallsBillingCity
		 * Desc: Method to handle filter event in case of billing city column filtering
		 * @param: (1) element - phone filter element
		 * @return: 
		**/
        function AutocompleteCallsBillingCity(element) {
    		$(element).attr('id','autoBillingCity');
        	var delayBillinCityInput= (function(){
				var timer = 0;
				return function(callback, ms){
					clearTimeout (timer);
					timer = setTimeout(callback, ms);
				};
			})();

			$(element).parents("div").children("select").children('option[value!="startswith"]').remove();
			$(element).parents("div").children("select").prop('disabled', true);

			$(element).parent().closest("div").find("button[type='submit']").on('click',function() {							
				var Keyvlaue=$('#autoBillingCity').val();
				setFilterKeys('Cust_BillingCity','startswith',Keyvlaue)
				BindGridDataBillingCity();
			});
		
			$(element).parent().closest("div").find("button[type='reset']").on('click',function() {							
				removeFilterKeys('Cust_BillingCity');
				BindGridDataBillingCity();
			});
        
         	$("input[data-role='autocomplete']").keyup(function(event) {
            	if($('#autoBillingCity').val().length >= 3) {
				    if((event.keyCode == 13) || (event.keyCode == 40)) {
				    	
				    } else {
				    	delayBillinCityInput(function(){
				    	    getAutoCompleteSugestionBillingCity();
				    	}, 400 );
				    }
				} else {
					StartSugestCity = 0;
				}
			});
        } 

        /**
		 * Name: getAutoCompleteSugestionBillingCity
		 * Desc: Method to handle autocomplete suggestion in case of billing city column filtering
		 * @param: 
		 * @return: 
		**/
        function getAutoCompleteSugestionBillingCity() {
			var InputItem=$('#autoBillingCity').val();  
		    Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.BlackPurlContentCtrl.getJSONForFilteredCustomer}',
		                                                 	encodeString(InputItem), encodeString('Cust_BillingCity'),
		    			function(result, event){
		                	if (event.status) {
                            	dataarray= $.parseJSON(decodeString(result));
				    		 	$('#autoBillingCity').data("kendoAutoComplete").setDataSource(dataarray);
				    		 	if(StartSugestCity==0) {
				      				var Searchkey=$('#autoBillingCity').val();
				     				$('#autoBillingCity').data("kendoAutoComplete").search(Searchkey);
				     				StartSugestCity=1;
				     			}
                            } else if (event.type === 'exception') {
                                {!uniqueId}showPopupNotification(event.message, "error");
                            } else {
                            	{!uniqueId}showPopupNotification(event.message, "error");
                            }
		                },
		                {escape: true}
		    );
		}
		
		/**
		 * Name: BindGridDataBillingCity
		 * Desc: Method to bind Grid to the searched result in case of billing city column filtering
		 * @param: 
		 * @return: 
		**/
		function BindGridDataBillingCity() {	
			var InputItem=$('#autoBillingCity').val();         	
			KeyColumn='0';
		    Keyvalue=InputItem;
		    isInactiveIncluded = document.getElementById('{!uniqueId}IncludeInactiveCheckBox').checked;
		    dropDownNumber = document.getElementById('{!uniqueId}dropDownList').value;
		    Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.BlackPurlContentCtrl.getJSONForAllCustomer}',
		                                                      +dropDownNumber, 20, isInactiveIncluded, encodeString(FilterJsondata),
		    			function(result, event){
		                	if (event.status) {
		        				var dataArray = decodeString(result);
                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                dataArray = dataArray.replace(re,'');
                                dataArray = JSON.parse(dataArray);
                       		   	$("#{!uniqueId}grid").data("kendoGrid").dataSource.data(dataArray);
                       		   	
                       		   	if(dataArray.length ==  +dropDownNumber) {
									$("#{!uniqueId}MoreLink").removeClass("linkDisable");
								} else if(dataArray.length <  +dropDownNumber) {
									$("#{!uniqueId}MoreLink").addClass("linkDisable");
								}
								if(FilterJsondata != '[]' && FilterJsondata != '') {
									if(dataArray.length == 0) {
										$("#{!uniqueId}NumberOfFilterRecords").html('<i> No records found </i>');
									} else {
										$("#{!uniqueId}NumberOfFilterRecords").html('<b>'+ dataArray[0].TotalFilteredRecords + '</b><i> records retrieved </i>');
									}
								} else {
									$("#{!uniqueId}NumberOfFilterRecords").html('');		
								}
								$("#{!uniqueId}FewerLink").addClass("linkDisable");
                       		   	
                           	}else if (event.type === 'exception') {
                            	{!uniqueId}showPopupNotification(event.message, "error");
                            } else {
                            	{!uniqueId}showPopupNotification(event.message, "error");
                            }
		               },
		               {escape: true}
		    );
		}
		
		/**
		 * Name: BindGridDataPhoneFilter
		 * Desc: Method to bind Grid to the searched result in case of phone column filtering
		 * @param: 
		 * @return: 
		**/
		function BindGridDataPhoneFilter() {	
			var InputItem=$('#FilterPhone').val();         	
			KeyColumn='0';
		    Keyvalue=InputItem;
		    isInactiveIncluded = document.getElementById('{!uniqueId}IncludeInactiveCheckBox').checked;
		    dropDownNumber = document.getElementById('{!uniqueId}dropDownList').value;
		    Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.BlackPurlContentCtrl.getJSONForAllCustomer}',
		                                                      +dropDownNumber, 20, isInactiveIncluded, encodeString(FilterJsondata),
		    			function(result, event){
		                	if (event.status) {
		        				var dataArray = decodeString(result);
                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                dataArray = dataArray.replace(re,'');
                                dataArray = JSON.parse(dataArray);
                       		   	$("#{!uniqueId}grid").data("kendoGrid").dataSource.data(dataArray);
                       		   	if(dataArray.length ==  +dropDownNumber) {
									$("#{!uniqueId}MoreLink").removeClass("linkDisable");
								} else if(dataArray.length <  +dropDownNumber) {
									$("#{!uniqueId}MoreLink").addClass("linkDisable");
								}
								if(FilterJsondata != '[]' && FilterJsondata != '') {
									if(dataArray.length == 0) {
										$("#{!uniqueId}NumberOfFilterRecords").html('<i> No records found </i>');
									} else {
										$("#{!uniqueId}NumberOfFilterRecords").html('<b>'+ dataArray[0].TotalFilteredRecords + '</b><i> records retrieved </i>');
									}
								} else {
									$("#{!uniqueId}NumberOfFilterRecords").html('');		
								}
								$("#{!uniqueId}FewerLink").addClass("linkDisable");
								
                           	}else if (event.type === 'exception') {
                            	{!uniqueId}showPopupNotification(event.message, "error");
                            } else {
                            	{!uniqueId}showPopupNotification(event.message, "error");
                            }
		               },
		               {escape: true}
		    );
		}

		/**
		 * Name: BindGridDataEmailFilter
		 * Desc: Method to bind Grid to the searched result in case of Email column filtering
		 * @param: 
		 * @return: 
		**/
		function BindGridDataEmailFilter() {	
			var InputItem=$('#FilterEmail').val();         	
			KeyColumn='0';
		    Keyvalue=InputItem;
		    isInactiveIncluded = document.getElementById('{!uniqueId}IncludeInactiveCheckBox').checked;
		    dropDownNumber = document.getElementById('{!uniqueId}dropDownList').value;
		    Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.BlackPurlContentCtrl.getJSONForAllCustomer}',
		                                                     +dropDownNumber, 20, isInactiveIncluded, encodeString(FilterJsondata),
		    			function(result, event){
		                	if (event.status) {
		        				var dataArray = decodeString(result);
	                            var find = '\'';
                                var re = new RegExp(find, 'g');
                                dataArray = dataArray.replace(re,'');
                                dataArray = JSON.parse(dataArray);
                      		   	$("#{!uniqueId}grid").data("kendoGrid").dataSource.data(dataArray);
                      		   	if(dataArray.length ==  +dropDownNumber) {
									$("#{!uniqueId}MoreLink").removeClass("linkDisable");
								} else if(dataArray.length <  +dropDownNumber) {
									$("#{!uniqueId}MoreLink").addClass("linkDisable");
								}
								if(FilterJsondata != '[]' && FilterJsondata != '') {
									if(dataArray.length == 0) {
										$("#{!uniqueId}NumberOfFilterRecords").html('<i> No records found </i>');
									} else {
										$("#{!uniqueId}NumberOfFilterRecords").html('<b>'+ dataArray[0].TotalFilteredRecords + '</b><i> records retrieved </i>');
									}
								} else {
									$("#{!uniqueId}NumberOfFilterRecords").html('');		
								}
								$("#{!uniqueId}FewerLink").addClass("linkDisable");
								
                           } else if (event.type === 'exception') {
                           		{!uniqueId}showPopupNotification(event.message, "error");
                           } else {
                           		{!uniqueId}showPopupNotification(event.message, "error");
                           }
		               },
		               {escape: true}
		    );
		}
			

    </script>
</apex:component>