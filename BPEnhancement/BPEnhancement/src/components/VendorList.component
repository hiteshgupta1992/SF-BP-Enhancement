<apex:component id="VendorsComp" controller="BlackPurlContentCtrl" allowDML="true">
    <!-- Component Attributes -->
    <apex:attribute name="uniqueId" required="true" type="String" description="unique Id for components here."/>
    
    <body>
        <span id="{!uniqueId}Notification"></span>

        <div id="dropDownDiv">
            <span id="{!uniqueId}NumberOfFilterRecords" style="color: #1abc9c;"> </span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <span> <b> Include Inactive </b> </span>
            <input type="checkbox" id="{!uniqueId}IncludeInactiveCheckBox" onClick="{!uniqueId}BindGridData();"/> &nbsp;&nbsp;&nbsp;
            <span> <b> Records Size : </b> </span>
            <select id="{!uniqueId}dropDownList" onchange="{!uniqueId}setCustomSettingAndReloadGrid();">
                  <option value="20">20</option>
                  <option value="50">50</option>
                  <option value="100">100</option>
            </select>
        </div>
        <div id="vendorTabPanel" style="border:0px; margin-top: 5px;">
            <ul>
                <li class="k-state-active">Vendors</li>
            </ul>
            <div>
                <div id="{!uniqueId}grid" style="width:100%"></div>
                <apex:outputPanel id="NavigationPanel"> 
                    <span id="NavigationDiv">
                    <span> Show </span>
                    <a href="" onclick="{!uniqueId}moreLinkClickAction();" id="{!uniqueId}MoreLink" > More </a>
                    <sapn> / </sapn>
                    <a href="" onclick="{!uniqueId}fewerLinkClickAction();" id="{!uniqueId}FewerLink" class="linkDisable"> Fewer </a>
                    <span> Records </span>
                    </span>
                 </apex:outputPanel>
            </div>
        </div>

        <div class="{!uniqueId}waitingSearchDiv"   > 
            <img class="waitingImage" src="{!URLFOR($Resource.Images, '/loading.gif')}" title="Please Wait..." />
        </div>
        
        <div class="scroll-to-top">
        </div>
        
        <div class="scroll-to-add">  
        </div>
    </body>
    <apex:form >
       <apex:actionFunction name="createRecentVendorRecord" action="{!createRecentVendorRecord}" rerender="dummy">
            <apex:param name="selectedVendorId" assignTo="{!selectedVendorId}" value="" />
        </apex:actionFunction>
        <apex:actionFunction name="{!uniqueId}setVendorCustomSetting" action="{!setCustomerCustomSetting}" rerender="dummy">
            <apex:param name="dropDownSelectedNumber" assignTo="{!dropDownSelectedNumber}" value=""/>
        </apex:actionFunction>
    </apex:form>
    
    <style>
        .bpGridAddButton {
            float:left;
            position:relative;
        }
       .GridRowSelected {
            background-color: #c4f7ed !important;
        }
        .ob-center {    
            text-align:center;
        }
        .ob-right {
            text-align:center;
        }
        #NavigationDiv a {
            text-decoration : none;
            color : blue;
            cursor : pointer;
        }
        .linkDisable {
            color: #a0a0a0 !important;
            pointer-events: none;
            cursor: default;
        }
        #NavigationDiv {
            margin-left:40%;
            position: absolute;
            z-index: 1;
            margin-top: -1.25%;
        }
        .recentRows {
             border-left:3px solid #1abc9c !important;
        }
        .scroll-to-top {
            position: fixed; 
            background : url("{!URLFOR($Resource.Images,'/scrollToTop.png')}");
            cursor: pointer; 
            width:12px; 
            height: 33px; 
            bottom: 3.5em; 
            padding-right: 1em; 
            display: none; 
            z-index: 999; 
            margin-left: 77.7%;
            border-radius: 13px !important;
        }
        .scroll-to-add {
            position: fixed; 
            background : url("{!URLFOR($Resource.Images,'/scrollAdd.png')}");
            cursor: pointer; 
            width:23px; 
            height: 30px; 
            bottom: 1em; 
            display: block;
            padding-right: 1em; 
            z-index: 999; 
            margin-left: 77.77%;
            border-radius: 13px !important;
        }
        #dropDownDiv {
            margin-top: 5px;
        }
        .k-header .k-grid-toolbar {
            border-bottom:0px;
        }
    </style>
    
    <script>
        
        function {!uniqueId}setCustomSettingAndReloadGrid() {
            var numberOfPartsToBeShown = document.getElementById('{!uniqueId}dropDownList');
            {!uniqueId}setVendorCustomSetting(numberOfPartsToBeShown.value); 
            {!uniqueId}BindGridData();
        }
        
        /**
         * Name: Callback Function of binWindowUnLoadEvent
         * Desc: Method to show popup in case user tries to close the tab before saving data
         * @param: 
         * @return: 
        **/
        var binWindowUnLoadEvent = function(){
            $(window).bind('beforeunload', function(e) { 
                var isToProcessWindowUnloadPopup = vendorsGridTabPanel != null && vendorsGridTabPanel.tabGroup[0].children.length != 1;
                var message = "Please make sure all edited vendor records have been saved.";
                if(isToProcessWindowUnloadPopup){
                    e.returnValue = message;    
                    return message;
                }
            });
        }
        
        // Unbind events
        $(window).unbind('beforeunload');
        
        // Boolean variable to keep track if any changes in whole vendor page
        var IsAnyChangesInVendorPage = false;;

        // variable to show popup notification. 
        var {!uniqueId}popupNotification;

        // Varibale to store the number selected by drop down 
        var dropDownNumber;

        // Variable related to filters
        var KeyColumn='';
        var Keyvalue='';
        var FilterKeys=[];
        var FilterJsonData='';
        var startSugest=0;
         
        // Varibale used in opening vendor. It is always a unique number.
        var tabCounter=0;
        
        // Variable to maintain new record counter
        var newVendorRecCounter = 0;
        
        /**
         * Name: Document Ready Function
         * Desc: Method executes as soon as the page load
         * @param: 
         * @return: 
        **/
        $(document).ready(function () {
            // Notification Popup
            {!uniqueId}popupNotification = $("#{!uniqueId}Notification").kendoNotification({
                // hide automatically after 2 seconds
                autoHideAfter: 5000,

                // prevent accidental hiding for 100 mili-second
                allowHideAfter: 100,
                
                // prevent to show a hide button
                button: false,
                
                // allow hiding by clicking on the notification content
                hideOnClick: true,

                // Set animation to false
                animation: false
            }).data("kendoNotification");
              
            // Load grid here
            {!uniqueId}loadVendorGrid();

            if({!uniqueId}vendorGrid == null){
                {!uniqueId}vendorGrid = $("#{!uniqueId}grid").data("kendoGrid");
            }
            
            $("#{!uniqueId}grid").data().kendoGrid.dataSource.bind('requestStart', {!uniqueId}start);
            $("#{!uniqueId}grid").data().kendoGrid.dataSource.bind('requestEnd', {!uniqueId}end );
            
            function {!uniqueId}start(){
                $(".{!uniqueId}waitingSearchDiv").show();//i.e. make your loading gif visible
            }
            
            function {!uniqueId}end(){
                $(".{!uniqueId}waitingSearchDiv").hide();//i.e. make your loading gif visible
            }
            
            $("#{!uniqueId}Vendor_Add_Button", {!uniqueId}vendorGrid.element).on("click", function (event) {
                {!uniqueId}vendorGridAddButtonClickEvent();
                event.stopPropagation();
            });

            // Initialize vendors tab panel
            initVendorsTabPanel();
            
            // Method to show scroll to top button.
            var offset = 200;
            var duration = 500;
            jQuery('#center-pane').scroll(function() {
                if (jQuery(this).scrollTop() > offset) {
                    jQuery('.scroll-to-top').fadeIn(duration);
                } else {
                    jQuery('.scroll-to-top').fadeOut(duration);
                }

            });
            
            // Method to navigate bottom to top
            jQuery('.scroll-to-top').click(function(event) {
                event.preventDefault();
                jQuery('#center-pane').animate({scrollTop: 0}, duration);
                return false;
            })
            
            // invoke this function when bottom add button is clicked
            jQuery('.scroll-to-add').click(function(event) {
                {!uniqueId}vendorGridAddButtonClickEvent();
                event.preventDefault();
                return false;
            })

        });
        
        /**
         * Name: {!uniqueId}moreLinkClickAction
         * Desc: Method executes when more link is clicked and it added 20 more records to the current Grid
         * @param: 
         * @return: 
        **/
        function {!uniqueId}moreLinkClickAction() {
            debug('Length   -  ' + {!uniqueId}vendorGrid.dataSource.view().length);
            Visualforce.remoting.Manager.invokeAction( '{!$RemoteAction.BlackPurlContentCtrl.increaseVendor}', 
                                                        {!uniqueId}vendorGrid.dataSource.view().length + 21 , 20, isInactiveIncluded, encodeString(FilterJsonData),
                function(result, event){ 
                    if (event.type == 'exception') {
                        {!uniqueId}showPopupNotification(event.message, "error");
                    } else {
                        var vendor = decodeString(result);
                        var find = '\'';
                        var re = new RegExp(find, 'g');
                        vendor = vendor.replace(re,'');
                        debug(vendor);
                        vendor = JSON.parse(vendor);
                        if(vendor.length < 21) {
                            $("#{!uniqueId}MoreLink").addClass("linkDisable");
                        }
                        if(vendor.length > 0) {
                            $("#{!uniqueId}FewerLink").removeClass("linkDisable");
                        }
                        var sorts = {!uniqueId}vendorGrid.dataSource.sort();
                        {!uniqueId}vendorGrid.dataSource.filter({});
                        {!uniqueId}vendorGrid.dataSource.sort({});

                        for(var i = 0; i < 20 ; i++){
                            if(vendor[i] != null) {
                                {!uniqueId}vendorGrid.dataSource.view().push(vendor[i]);
                            }
                        }
                        {!uniqueId}vendorGrid.dataSource.filter(FilterKeys);
                        if(sorts != null) {
                             {!uniqueId}vendorGrid.dataSource.sort(sorts);
                        }
                    }
                },
                {escape: true}
            );
        }

        /**
         * Name: {!uniqueId}fewerLinkClickAction
         * Desc: Method executes when fewer link is clicked and it removes last 20 records to the current Grid
         * @param: 
         * @return: 
        **/
        function {!uniqueId}fewerLinkClickAction() {
            var gridLength = {!uniqueId}vendorGrid.dataSource.view().length;
            $("#{!uniqueId}MoreLink").removeClass("linkDisable");
            if(gridLength <= +dropDownNumber + 1) {
                $("#{!uniqueId}FewerLink").addClass("linkDisable");
                if(gridLength <= +dropDownNumber) {
                    return;
                }
            }
            {!uniqueId}vendorGrid.dataSource.filter({});
            var Sorts= {!uniqueId}vendorGrid.dataSource.sort();
            {!uniqueId}vendorGrid.dataSource.sort({});
            
            for(var i = gridLength-1; i > gridLength - 20 - 1 ; i--){
                if(i == +dropDownNumber - 1) {
                    $("#{!uniqueId}FewerLink").addClass("linkDisable");
                    return;
                } else if(i == +dropDownNumber) {
                    $("#{!uniqueId}FewerLink").addClass("linkDisable");
                }
                {!uniqueId}vendorGrid.dataSource.view().pop(i);
            }
            if(Sorts!= null) {
                {!uniqueId}vendorGrid.dataSource.sort(Sorts);
            }
            {!uniqueId}vendorGrid.dataSource.filter(FilterKeys);
        }

        /**
         * Name: {!uniqueId}loadVendorGrid
         * Desc: Method to load the vendor Grid when the component is loaded.
         * @param: 
         * @return: 
        **/
        function {!uniqueId}loadVendorGrid(){
            // Variable to get current drop down number
            dropDownNumber = document.getElementById('{!uniqueId}dropDownList').value;
            isInactiveIncluded = document.getElementById('{!uniqueId}IncludeInactiveCheckBox').checked;
            
            // Grid Data Source
            var vendorGridDataSource = new kendo.data.DataSource({
                transport: {
                    read: function (options) {
                        
                        // make AJAX request to the remote service
                        Visualforce.remoting.Manager.invokeAction( '{!$RemoteAction.BlackPurlContentCtrl.getJSONForVendor}', 
                                                                         +dropDownNumber, 20, isInactiveIncluded, encodeString('[]'),
                            function(result, event){
                                if (event.type == 'exception') {
                                    {!uniqueId}showPopupNotification(event.message, "error");
                                } else {
                                    var vendor = decodeString(result);
                                    var find = '\'';
                                    var re = new RegExp(find, 'g');
                                    vendor = vendor.replace(re,'');
                                    vendor = JSON.parse(vendor);
                                    if(vendor.length==0) {
                                        {!uniqueId}showPopupNotification('No records found ','info');
                                    }
                                    if(vendor.length ==  +dropDownNumber) {
                                        $("#{!uniqueId}MoreLink").removeClass("linkDisable");
                                    } else if(vendor.length <  +dropDownNumber) {
                                        $("#{!uniqueId}MoreLink").addClass("linkDisable");
                                    }
                                    options.success(vendor);
                                }
                            },
                            {escape: true}
                        );

                    },
                    create:function(e) {
                         return false;
                    },
                    update:function(e) {
                        return false;
                    },
                },
                schema: {
                    model: {
                        Id: "Vendor_Id",
                        fields: {
                            Vendor_Name: { type: "string" },
                            Vendor_Vendor_Code : {type: "string" },
                            Vendor_BillingStreet: { type: "string" },
                            Vendor_BillingCity: {  type: "string" },
                            Vendor_Phone: { type: "string" },
                            Vendor_Email : { type: "string"},
                            Is_recent: {type: "boolean"}
                        }
                    }
                },
                sortable: {
                    mode: "single",
                    allowUnsort: false
                }
            });
            
            // Method: Load Data Grid here
            $("#{!uniqueId}grid").kendoGrid({
                 toolbar: [
                    {
                        name: "Add",
                        template: '<img src="{!URLFOR($Resource.Images, '/add.jpg')}" class="bpGridAddButton" id="{!uniqueId}Vendor_Add_Button">',
                        text: "Add Vendor Part",
                        click: function(e){
                            return false;
                        }
                    }
                 ],
                 filterable: 
                    {
                        extra: false,
                        operators: {
                            string: {
                                startswith: "Starts with",
                                eq: "Is equal to",
                                neq: "Is not equal to"
                            }
                        }
                    },
                columns: [
                        {
                            field:"Vendor_Name", title:"Name", width: "20%", 
                            filterable: {
                                ui : vendorNameFilter
                            },
                            template: '<div   #=Is_recent  ? "class=recentRows" : ""#  ><span  style="margin-left:3px" title=\'${Vendor_Name}\'>${Vendor_Name}</span><div>'
                        },
                        {
                            field:"Vendor_Vendor_Code",title:"Vendor Code", width: "15%", 
                            filterable: {
                                ui : vendorCodeFilter
                            },
                            template: '<span title=\'${Vendor_Vendor_Code}\'>${Vendor_Vendor_Code}</span>'
                        },
                        {
                            field:"Vendor_BillingStreet",title:"Street", width: "15%", 
                            filterable: false,
                            template: '<span title=\'${Vendor_BillingStreet}\'>${Vendor_BillingStreet}</span>'
                        },
                        {
                            field:"Vendor_BillingCity",title:"City", width: "20%",
                            filterable: {
                                ui:vendorCityFilter
                            },
                            template: "<span title=\'${Vendor_BillingCity}\'>${Vendor_BillingCity}</span>"
                        },
                        {
                            field: "Vendor_Phone", title: "Phone No", width: "15%" ,
                             filterable: {
                                ui:vendorPhoneFilter
                            },
                            template: '<span title=\'${Vendor_Phone}\'>${Vendor_Phone}</span>'
                        },
                        {
                            field:"Vendor_Email",title:"Email", width: "15%" , 
                            filterable: {
                                ui:vendorEmailFilter
                            },
                            template: '<a href="mailto:#=Vendor_Email#">#=Vendor_Email#</a>', encoded: false
                        }
                    ],
                    dataSource: vendorGridDataSource,
                    scrollable:false,
                    sortable : true,
                    serverFiltering: true,
                    reorderable: false,
                    dataBound: {!uniqueId}onVendorDataBound,
                    selectable: "single",
                    change: function(e) {
                        openSelectedVendorTab(e);
                    }
                });

                // Called to bind auto-complete to filter in case of Vendor Name
                function vendorNameFilter(element) {
                    element.kendoAutoComplete({
                        ignoreCase: true         
                    });
                    autoCompleteCall(element, 'autoVendorName', 'Vendor_Name'); 
                }

                // Called in case of city filter
                function vendorCodeFilter(element) {
                    element.kendoAutoComplete({
                        ignoreCase: true         
                    });
                    autoCompleteCall(element, 'autoVendorCode', 'Vendor_Vendor_Code');
                }
                
                // Called in case of city filter
                function vendorCityFilter(element) {
                    element.kendoAutoComplete({
                        ignoreCase: true         
                    });
                    autoCompleteCall(element, 'autoVendorPhone', 'Vendor_BillingCity');
                }

                // Called in case of telephone Filter
                function vendorPhoneFilter(element) {
                    element.kendoMaskedTextBox({
                       mask: "999-000-0000"
                    });
                    vendorEqualFilterCall(element, 'filterVendorPhone', 'Vendor_Phone');
                }
                
                // Called in case of Email
                function vendorEmailFilter(element) {
                    element.kendoAutoComplete({
                        ignoreCase: true         
                    });
                    vendorEqualFilterCall(element, 'filterVendorEmail', 'Vendor_Email');
                }
        }
        

        // variable to store the Vendor Grid Instance
        var {!uniqueId}vendorGrid = $("#{!uniqueId}grid").data("kendoGrid");
        
        /**
         * Name: {!uniqueId}getSelectedRowData
         * Desc: Method to get row data which is selected.
         * @param: 
         * @return: selected row data
        **/
        function {!uniqueId}getSelectedRowData(){
            var rowIndex = {!uniqueId}vendorGrid.select().closest("tr");
            if(rowIndex.length == 0){
                return null;
            }else{
                var rowData = {!uniqueId}vendorGrid.dataItem(rowIndex);
                if(rowData.Vendor_Id != ""){
                    return rowData;
                }else if( ({!uniqueId}vendorGrid.editable.validatable.validate()) == false ){
                    return null;
                }
            }
            return rowData;
        }
        
        /**
         * Name: {!uniqueId}onCustDataBound
         * Desc: Method to Bound vendor datasource to the Grid.
         * @param: 
         * @return: 
        **/
        function {!uniqueId}onVendorDataBound(e) {

            // Calculate current Grid length
            var gridlen={!uniqueId}vendorGrid.dataSource.view().length;
            
            // Variable to store selected row data
            var selectedRowData ;

            // Add toolbar to the bottom of the Grid
            $("#{!uniqueId}grid").find(".k-grid-toolbar").insertAfter($("#{!uniqueId}grid").children()[1]);
            $(".k-grid-toolbar").css("background-color", "#ffffff");
            //$(".k-grid-toolbar").css("border-bottom", " solid 1px #ccc");
            $(".k-grid-toolbar").css("border-top", "none");
            $(".k-grid-toolbar").css("height", "25px");
            $(".k-grid-toolbar").css("vertical-align", "middle");
            $(".bpGridAddButton").prop('title', 'Add');
            
            $(".k-grid table tr").hover(function(){
                $(this).find('td').each (function() {
                    $(this).addClass("tr_hover");
                });
            }, function(){
                $(this).find('td').each (function() {
                    $(this).removeClass("tr_hover");
                });
            });
            
            // Set the width of the filter input
            $("#{!uniqueId}grid").find(".k-filter-row").children().find("span>input").css('width','130px');
            
            if(gridlen == {!currentNoOfCustomerByCustomSetting}) {     
                {!uniqueId}vendorGrid.element.on("click", "tbody>tr", "click", function (event) {
                    selectedRowData = {!uniqueId}getSelectedRowData();
                    $("#{!uniqueId}grid").find('tr>td.GridRowSelected').removeClass('GridRowSelected');
                    $("#{!uniqueId}grid").find('tr.k-state-selected>td').addClass('GridRowSelected');
                    debug(selectedRowData);
                    event.stopPropagation();
                });
            }
        }

        /**
         * Name: {!uniqueId}showPopupNotification
         * Desc: Method to show popup Notification.
         * @param: (1) message - Message that is to be displayed
         *         (2) msgType - Type of message - info, warning, error etc.
         * @return: 
        **/
        function {!uniqueId}showPopupNotification(message, msgType){
            {!uniqueId}popupNotification.hide();
            {!uniqueId}popupNotification.show(kendo.toString(message), msgType);
        }
        
        // variables related to Vendor Panel
        var vendorsGridTabPanel;
        var vendorIdToTabIndexMap = {};
        
        /**
         * Name: initVendorsTabPanel
         * Desc: Method to Initialize vendors tab panel
         * @param: 
         * @return: 
        **/
        function initVendorsTabPanel(){
            vendorsGridTabPanel = $("#vendorTabPanel").kendoTabStrip().data("kendoTabStrip");
            vendorsGridTabPanel.select(0);
        }
        
        /**
         * Name: openSelectedVendorTab
         * Desc: Method to open the selected vendor details tab
         * @param: 
         * @return: 
        **/
        function openSelectedVendorTab(e){
            var selectedRowData = {!uniqueId}getSelectedRowData();
            debug('selectedRowData' + selectedRowData.Vendor_Id);
            if(vendorIdToTabIndexMap.hasOwnProperty(selectedRowData.Vendor_Id)) {
                createRecentVendorRecord(selectedRowData.Vendor_Id);
                vendorsGridTabPanel.select(vendorIdToTabIndexMap[selectedRowData.Vendor_Id]);
                return;
            }

            if(vendorsGridTabPanel.tabGroup[0].children.length == 4){
                {!uniqueId}showPopupNotification("Please close a tab first in order to see the vendor detail.", "error");
                return;
            }

            if(selectedRowData != null && !vendorIdToTabIndexMap.hasOwnProperty(selectedRowData.Vendor_Id)){
                createRecentVendorRecord(selectedRowData.Vendor_Id);
                vendorIdToTabIndexMap[selectedRowData.Vendor_Id] = vendorsGridTabPanel.tabGroup[0].children.length;
                openNewFormDataTab(selectedRowData.Vendor_Id, selectedRowData.Vendor_Name);
            } else {
                {!uniqueId}showPopupNotification("Some error occurred. Please reload the page.", "error");
            }
            binWindowUnLoadEvent();
        }
        
        /**
         * Name: generateCountriesPicklistJSON
         * Desc: Method to generate JSON data for Countries dropdown 
         * @param:  (1) callbackToPopulatePicklist - Call back function to populate countries picklist
         * @return: 
        **/
        function generateCountriesPicklistJSON( callbackToPopulatePicklist ) {
            Visualforce.remoting.Manager.invokeAction( '{!$RemoteAction.BlackPurlContentCtrl.generateJSONForAllCountries}', 
                                                        function(result, event){
                                                            if (event.type == 'exception') {
                                                                {!uniqueId}showPopupNotification(event.message, "error");
                                                            } else {
                                                                var countriesJSON = decodeString(result);
                                                                var find = '\'';
                                                                var re = new RegExp(find, 'g');
                                                                countriesJSON = countriesJSON.replace(re,'');
                                                                countriesJSON = JSON.parse(countriesJSON);
                                                                callbackToPopulatePicklist(countriesJSON);
                                                            }
                                                        },
                                                        {escape: true}
            );
        }
        
        /**
         * Name: generateStatesPicklistJSON
         * Desc: Method to generate JSON data for States dropdown according to slected country
         * @param:  (1) callbackToPopulatePicklist - Call back function to populate states picklist
         * @return: 
        **/
        function generateStatesPicklistJSON( callbackToPopulatePicklist, selectedCountryValue ) {
            Visualforce.remoting.Manager.invokeAction( '{!$RemoteAction.BlackPurlContentCtrl.getJSONForStateByCountry}', 
                                                        encodeString(selectedCountryValue),
                                                        function(result, event){
                                                            if (event.type == 'exception') {
                                                                {!uniqueId}showPopupNotification(event.message, "error");
                                                            } else {
                                                                var statesJSON = decodeString(result);
                                                                var find = '\'';
                                                                var re = new RegExp(find, 'g');
                                                                statesJSON = statesJSON.replace(re,'');
                                                                statesJSON = JSON.parse(statesJSON);
                                                                callbackToPopulatePicklist(statesJSON);
                                                            }
                                                        },
                                                        {escape: true}
            );
        }
        
        /**
         * Name: generateObjFieldPicklistJSON
         * Desc: Method to generate JSON data for for on object picklist type field
         * @param:  objName - Object API name
         *          fieldName - Picklist type field name for the object
         *          callbackToPopulatePicklist - Call back function to populate dropdown element
         * @return: 
        **/
        function generateObjFieldPicklistJSON( objName, fieldName, callbackToPopulateDropdown ) {
            Visualforce.remoting.Manager.invokeAction( '{!$RemoteAction.BlackPurlContentCtrl.getJSONForObjectPicklistField}', 
                                                        encodeString(objName), encodeString(fieldName),
                                                        function(result, event){
                                                            if (event.type == 'exception') {
                                                                {!uniqueId}showPopupNotification(event.message, "error");
                                                            } else {
                                                                var fieldPicklistJSON = decodeString(result);
                                                                var find = '\'';
                                                                var re = new RegExp(find, 'g');
                                                                fieldPicklistJSON = fieldPicklistJSON.replace(re,'');
                                                                fieldPicklistJSON = JSON.parse(fieldPicklistJSON);
                                                                callbackToPopulateDropdown(fieldPicklistJSON);
                                                            }
                                                        },
                                                        {escape: true}
            );
        }
        
        /**
         * Name: generateObjRecordsPicklistJSON
         * Desc: Method to generate JSON data for for on object records
         * @param:  objName - Object API name
         *          displayFieldName - Display field name for the object
         *          callbackToPopulatePicklist - Call back function to populate dropdown element
         * @return: 
        **/
        function generateObjRecordsPicklistJSON( objName, displayFieldName, callbackToPopulateDropdown ) {
            Visualforce.remoting.Manager.invokeAction( '{!$RemoteAction.BlackPurlContentCtrl.getJSONForObjectRecordsPicklist}', 
                                                        encodeString(objName), encodeString(displayFieldName),
                                                        function(result, event){
                                                            if (event.type == 'exception') {
                                                                {!uniqueId}showPopupNotification(event.message, "error");
                                                            } else {
                                                                var objRecordsPicklistJSON = decodeString(result);
                                                                var find = '\'';
                                                                var re = new RegExp(find, 'g');
                                                                objRecordsPicklistJSON = objRecordsPicklistJSON.replace(re,'');
                                                                objRecordsPicklistJSON = JSON.parse(objRecordsPicklistJSON);
                                                                callbackToPopulateDropdown(objRecordsPicklistJSON);
                                                            }
                                                        },
                                                        {escape: true}
            );
        }
        
        /**
         * Name: saveVendorDetails
         * Desc: Method to save the selected vendor details 
         * @param:  (1) vendorId - Id of Vendor
                    (2) vendorType - Type of Vendor
                    (3) vendorDetailsJSON - JSON String of vendor details
                    (4) vendorSaveCallBack - Cusmoter Save Call back function
         * @return: 
        **/
        function saveVendorDetails(vendorDetailsJSON, currentVendorUID, vendorSaveCallBack){
            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.BlackPurlContentCtrl.saveVendorJSON}',
                                                       encodeString(vendorDetailsJSON),
                    function(result, event){
                        if (event.status) {
                            // Successfully deleted record
                            var grid = $("#{!uniqueId}grid").data("kendoGrid");
                            vendorSaveCallBack(decodeString(result));
                            updateMapValues(decodeString(result), currentVendorUID);
                            {!uniqueId}showPopupNotification("Saved successfully", "success");
                            grid.dataSource.read();
                        } else if (event.type === 'exception') {
                            {!uniqueId}showPopupNotification(event.message, "error");
                        } else {
                            {!uniqueId}showPopupNotification(event.message, "error");
                        }
                    },
                    {escape: true}
            );
        }
        
        /**
         * Name: updateMapValues
         * Desc: Method to update map values after susseccful saving of new vendor
         * @param: (1) result - Vendor Id of current Vendor
         *         (2) currentVendorUID - Vendor UID in case it was a new vendor
         * @return: 
        **/
        function updateMapValues(result, currentVendorUID) {
            var newVendorUID = currentVendorUID[currentVendorUID.length - 1];
            for(var key in vendorIdToTabIndexMap) {
                if(key == newVendorUID) {
                    var tabIndex = vendorIdToTabIndexMap[key];
                    delete vendorIdToTabIndexMap[newVendorUID];
                    vendorIdToTabIndexMap[result] = tabIndex;
                }
            }
        }
        
        var ImgObjG;
        var vendorIdG;
        var anyChangesInVendorClosingTab;
        
        /**
         * Name: removeSelecedTab
         * Desc: Method to remove the tab from view
         * @param:  (1) ImgObj - Id of Img Object
                    (2) VendorId - Id of Vendor
                    (3) IsselectedTabModified - Boolean to check if there is any update in current tab.
         * @return: 
        **/
        function removeSelecedTab(ImgObj, vendorId, IsselectedTabModified) {
            ImgObjG = ImgObj;
            vendorIdG = vendorId;
            if(IsselectedTabModified){
                var actionConfirmMsg = "PartTabCloseBeforeSave"+"There are some changes not saved in the form. Do you want to continue?";
                confirmAction("Confirm Action", actionConfirmMsg, removeSelectedTabCallBack);
            }else{
                removeSelectedTabCallBack(true);
            }
            if(vendorsGridTabPanel.tabGroup[0].children.length == 1){
                $(window).unbind('beforeunload');
            }
        }
        
        /**
         * Name: removeSelectedTabCallBack
         * Desc: Method to remove the tab from view
         * @param: (1) isConfirmed - boolean variable to show if tab is closed.
         * @return: 
        **/
        function removeSelectedTabCallBack(isConfirmed){
            if(isConfirmed == false){
                return;
            }
            vendorsGridTabPanel.remove($(ImgObjG).closest("li"));
            var removedTab;
            if(vendorIdG == 'null'){
                removedTab = vendorIdToTabIndexMap['New'];
                delete vendorIdToTabIndexMap['New'];
            } else {
                removedTab = vendorIdToTabIndexMap[vendorIdG];
                delete vendorIdToTabIndexMap[vendorIdG];
            }
            for(var key in vendorIdToTabIndexMap) {
                if(vendorIdToTabIndexMap[key] > removedTab) {
                    var tabIndex = vendorIdToTabIndexMap[key];
                    vendorIdToTabIndexMap[key] = tabIndex - 1;
                }
            }
            vendorsGridTabPanel.select(0);
        }
        
        /**
         * Name: {!uniqueId}vendorGridAddButtonClickEvent
         * Desc: Method used to create a new vendor opens a tab saying "New Vendor" 
                        and display a detail form for various information
         * @param: 
         * @return: 
        **/
        function {!uniqueId}vendorGridAddButtonClickEvent(){
            if(vendorsGridTabPanel.tabGroup[0].children.length >= 4){
                {!uniqueId}showPopupNotification("Please close a tab first in order to see the vendor detail.", "error");
                return;
            }
            vendorIdToTabIndexMap['' + tabCounter] = vendorsGridTabPanel.tabGroup[0].children.length;
            openNewFormDataTab(null, "New Vendor " + (++newVendorRecCounter) );
        }
        
        /**
         * Name: openNewFormDataTab
         * Desc: Method opens a tab with vendor details form as parameter values
         * @param:  (1) VendorId - Id of Vendor
                    (2) vendorName - Name of cutsomer
         * @return: 
        **/
        function openNewFormDataTab(vendorId, vendorName){
            var navURL = "{!$Page.VendorOverview}?pageno=page" + tabCounter ;
            if(vendorId != null){
                navURL += "&V_ID=" + vendorId;
            }
            vendorsGridTabPanel.insertAfter( 
                {
                    text: "<div id='page"+ tabCounter +"TabNameDiv' style='width:100px; overflow: hidden; white-space: nowrap; float:left' title='"+ vendorName +"'> " + vendorName +" </div> <div style='float:right'> <img src='" + '{!URLFOR($Resource.Images, "x-mark.png")}' + "' onclick='page"+tabCounter+"preRemoveSelecedTab(this, \""+vendorId+"\");'> </dvi>",
                    encoded: false,
                    contentUrl: navURL
                },
                vendorsGridTabPanel.tabGroup.children("li:last")
            );
            vendorsGridTabPanel.select(vendorsGridTabPanel.tabGroup.children().length - 1);
            tabCounter = tabCounter + 1;
        }

         /**
         * Name: autoCompleteCall
         * Desc: Method to bind the data to keypress events to the autocomplete Name
         * @param:  (1) element - Filter Element
         * @return: 
        **/
        function autoCompleteCall(element, elementId, columnName) {
            $(element).attr('id', elementId);
            var delayVendorInput = (function(){
                var timer = 0;
                return function(callback, ms){
                    clearTimeout(timer);
                    timer = setTimeout(callback, ms);
                };
            })();

            $(element).parents("div").children("select").children('option[value!="startswith"]').remove();
            $(element).parents("div").children("select").prop('disabled', true);

            $(element).parent().closest("div").find("button[type='submit']").on('click',function() {                            
                var keyValue = $('#'+elementId).val();
                setFilterKeys(columnName,'startswith', keyValue);
                debug(FilterJsonData);
                {!uniqueId}BindGridData();
            });

            $(element).parent().closest("div").find("button[type='reset']").on('click',function() {                         
                removeFilterKeys(columnName);
                {!uniqueId}BindGridData();
            });
        
            $("input[data-role='autocomplete']").keyup(function(event) {
                if($('#'+elementId).val().length >= 3) {
                    if((event.keyCode == 13) || (event.keyCode == 40)) {
                        
                    } else {
                        delayVendorInput(function(){
                            getAutoCompleteSugestion(elementId, columnName);
                        }, 400 );
                    }
                } else {
                    startSugest = 0;
                }
            });
        } 
        
        
        function vendorEqualFilterCall(element, elementId, columnName) {
            $(element).attr('id', elementId);
            $(element).parents("div").children("select").children('option[value!="eq"]').remove();
            $(element).parents("div").children("select").prop('disabled', true);
            var selectList = $(element).parents("div").children("select");
            
            $(element).parent().closest("div").find("button[type='submit']").on('click',function() {                            
                debug(selectList.val());
                var keyValue = $('#' + elementId).val();
                setFilterKeys(columnName, selectList.val(), keyValue);
                debug(FilterJsonData);
                {!uniqueId}BindGridData();
            });
        
            $(element).parent().closest("div").find("button[type='reset']").on('click',function() {                         
                removeFilterKeys(columnName);
                {!uniqueId}BindGridData();
            });
        } 
        
        
        function getAutoCompleteSugestion(elementId, columnName) {
            var InputItem = $('#'+ elementId).val();  
            isInactiveIncluded = document.getElementById('{!uniqueId}IncludeInactiveCheckBox').checked; 
            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.BlackPurlContentCtrl.getJSONForFilteredVendor}',
                                                            encodeString(InputItem), encodeString(columnName),isInactiveIncluded, 
                    function(result, event){
                        if (event.status) {
                            dataarray = $.parseJSON(decodeString(result));
                            $('#'+ elementId).data("kendoAutoComplete").setDataSource(dataarray);
                            if(startSugest == 0) {
                                var searchKey = $('#' + elementId).val();
                                $('#' + elementId).data("kendoAutoComplete").search(searchKey);
                                startSugest = 1;
                            }
                         } else if (event.type === 'exception') {
                             {!uniqueId}showPopupNotification(event.message, "error");
                         } else {
                            {!uniqueId}showPopupNotification(event.message, "error");
                         }
                    },
                    {escape: true}
            );
        }
        
        /**
         * Name: removeFilterKeys
         * Desc: Method to reset Filter Key To the Datbase
         * @param:  (1) fieldvalue - the column name frim which filter is to be removed
         * @return: 
        **/
        function removeFilterKeys(fieldvalue) {
            if(FilterKeys.length > 0) {     
                for (var i = 0 ; i < FilterKeys.length ; i++) {
                    if (FilterKeys[i]["field"] == fieldvalue) {
                        FilterKeys.splice(i,1);
                    }
                }
            }
            FilterJsonData = JSON.stringify(FilterKeys);    
            debug('FilterJsondata  ' + FilterJsonData);
        }
        
        /**
         * Name: setFilterKeys
         * Desc: Method to set Filter Key To the Datbase
         * @param:  (1) fieldvalue - the column name frim which filter is to be removed
                    (2) operatorvalue - The opertor that is selected from filter drop down
                    (3) Keyvalue - the typed (searched) String
         * @return: 
        **/
        function setFilterKeys(fieldValue, operatorValue, keyValue) {       
            debug('operatorValue  ' + operatorValue + '\n\nfieldValue' + fieldValue);
            var newFilter = { field: fieldValue, operator: operatorValue, value: keyValue};
            var recordNo = 0;
            
            if(FilterKeys.length == 0) {        
                FilterKeys.push(newFilter);
            } else {
                for (var i = 0 ; i < FilterKeys.length ; i++) {
                    if(FilterKeys[i]["field"] == fieldValue) {
                        FilterKeys.splice(i, 1, newFilter);
                        recordNo = 1;
                    }
                }
                if(recordNo == 0) {
                    FilterKeys.push(newFilter);
                }
            }
            FilterJsonData = JSON.stringify(FilterKeys);        
        }
        
        /**
         * Name: {!uniqueId}BindGridData()
         * Desc: Method to bind dataSource to the new searched result
         * @param: 
         * @return: 
        **/
        function {!uniqueId}BindGridData() {    
            isInactiveIncluded = document.getElementById('{!uniqueId}IncludeInactiveCheckBox').checked;
            dropDownNumber = document.getElementById('{!uniqueId}dropDownList').value;
            
            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.BlackPurlContentCtrl.getJSONForVendor}',
                                                          +dropDownNumber , 20, isInactiveIncluded, encodeString(FilterJsonData),
                        function(result, event){
                            if (event.status) {
                                var dataArray = decodeString(result);
                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                dataArray = dataArray.replace(re,'');
                                debug(dataArray);
                                dataArray = JSON.parse(dataArray);
                                
                                $("#{!uniqueId}grid").data("kendoGrid").dataSource.data(dataArray);
                                if(dataArray.length ==  +dropDownNumber) {
                                    $("#{!uniqueId}MoreLink").removeClass("linkDisable");
                                } else if(dataArray.length <  +dropDownNumber) {
                                    $("#{!uniqueId}MoreLink").addClass("linkDisable");
                                }
                                
                                if(FilterJsonData != '[]' && FilterJsonData != '') {
                                    if(dataArray.length == 0) {
                                        $("#{!uniqueId}NumberOfFilterRecords").html('<i> No records found </i>');
                                    } else {
                                        $("#{!uniqueId}NumberOfFilterRecords").html('<b>'+ dataArray[0].TotalFilteredRecords + '</b><i> records retrieved </i>');
                                    }
                                } else {
                                    $("#{!uniqueId}NumberOfFilterRecords").html('');        
                                }
                                
                                $("#{!uniqueId}FewerLink").addClass("linkDisable");
                            } else if (event.type === 'exception') {
                                {!uniqueId}showPopupNotification(event.message, "error");
                            } else {
                                {!uniqueId}showPopupNotification(event.message, "error");
                            }
                        },
                        {escape: true}
            );
        }

    </script>
</apex:component>