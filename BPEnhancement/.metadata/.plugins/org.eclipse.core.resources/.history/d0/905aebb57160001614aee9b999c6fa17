<apex:page standardStylesheets="false" showChat="false" showHeader="false" sidebar="false" Controller="CustomerOrderCtrl">
   <html ng-app="CusOrder">
        <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.0-beta.6/angular-animate.js"></script>


        <head>
            <title>Customer Order</title>
            
            <apex:stylesheet value="{!URLFOR($Resource.fontawsome, 'css/font-awesome.css')}"/>
            <c:Css_and_Js />
            <c:NewViewCustomerStyle />
            <c:New_Price_mini_page_layout ></c:New_Price_mini_page_layout>
            <c:New_Customer_mini_page_layout />
            <c:New_Invoice_mini_page_layout />
            <c:NewAddEditCustomer />
            <c:NewAddNewCOU />
            <c:LogServiceWorkPopWizard />
            <c:NewPartPopUpOnVendorOrder />
            <c:UserSearchComponent />      
            <c:COActionModel />
            <c:COUInfoPopUp />
            <apex:includeScript value="{!URLFOR($Resource.ngDroplet,'ngDroplet/js/ng-droplet.min.js')}"/>
              <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.newjqueryUICss)}" media="all" />
            <!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.css" /> -->
            <apex:includeScript value="{!$Resource.JqueryUI}"/>
            <script src="https://rawgithub.com/brandonaaron/jquery-mousewheel/master/jquery.mousewheel.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script>
            <style>
                /* START: Added for NGUpload */
                section.container section.droplet droplet {
                    height: 75px;
                }
                
                
                .dropletcontainer {
                    width: 80%;
                    margin: auto;
                    vertical-align: middle;
                    display: table-cell;
                    float: left;
                    margin-left: 10%;
                    margin-right: -7%;
                    margin-bottom: 20px;
                }
                .event-dragover .drag-container{
                    border: 1px dashed grey;
                    padding: 20px 0 20px 29%;
                    background: white;
                    color: grey;
                }
                .event-dragover span.btn.bigfont {
                    color: grey;
                }
                 p.drag-container{
                    padding: 20px 0 20px 29%;
                    width: auto;
                     float: left;
                }
                span.btn.bigfont {
                    font-size: 19px;
                    text-align: center;
                    text-decoration: underline;
                    color: #00AEEF;
                    margin-left: -12px;
                }
                .bigfont {
                    font-size: 18px;
                    color: #00AEEF
                }
                /* END: Added for NGUpload */
                
                a.not-active {
                   pointer-events: none;
                   cursor: default;
                   color: inherit;
                }
                u.disable_link{
                    text-decoration : none;
                }
                .round_btn{ 
                    border-radius:3pt;
                    padding:3px 0px;
                    height: 24px;   
                }
                .rowGeneral .subsectionGeneral {
                    padding-left: 10px;
                    padding-right: 10px
                }
                .rowGeneral .subsectionGeneral_rightonly {
                    padding-right: 10px
                }
                .main_section .rowGeneral {
                    padding-right: 4%;
                }
                .Profile_pic {
                    padding-right: 0px;
                }
                .rowGeneral .Active_Button {
                    Padding: 0px;
                    height: 24px;
                }
                .rowGeneral .Active_Button_row {
                    Padding-right: 0px;
                    margin-top: 12px;
                }
                .rowGeneral .see_more_button {
                    padding-top: 0px;
                    padding-bottom: 0px;
                }
                .rowGeneral .see_more_button_row {
                    margin-top: 20px;
                }
                .rowGeneral .social_icon_row {
                    margin-top: 12px;
                }
                .rowGeneral .icon_google {
                    color: #d34836;
                    font-size: 24px;
                }
                .rowGeneral .icon_in {
                    color: #007bb6;
                    font-size: 24px;
                }
                .rowGeneral .icon_fb {
                    color: #3B5998;
                    font-size: 24px;
                }
                .rowGeneral .icon_tweet {
                    color: #00AEEF;
                    font-size: 24px;
                }
                .favorite {
                    font-size: 10px
                }
                .non_favorite {
                    margin-left: 9px;
                }
                .label_favorite {
                    margin-left: 5px;
                }
                .customer_general_column {
                    padding-right: 1px;
                }
                .rowGeneral .general_info_customer {
                    margin-top: 12px;
                }
                .rowGeneral .statistics_row {
                    margin-top: 24px
                }
                .telemetry_Main {
                    border-top: 1px solid #ECF0F1;
                    margin-top: 24px;
                }
                .cou_plus_icon {
                    margin-left: 10px;
                    color: #939CA9;
                }
                .main_section_COU {
                    margin-bottom: 48px;
                    margin-top: 21px;
                }
                .main_section_COU .line {
                    border-top: 1px solid #ECF0F1;
                    margin: 0px 20px 0px 20px;
                }
                .main_section_COU_Header .actionRow .sectionText {
                    font-weight: bold;
                    color: #00AEEF;
                    margin-left: 24px;
                }
                .main_section_COU_Header {
                    border-top: 1px solid #ECF0F1;
                    margin: 0px 20px 0px 20px;
                    padding-top: 24px;
                    border-top: 1px solid #ECF0F1;
                }
                .gid_container_Customer .table {
                    border: 0;
                }
                .main_section_COU_Header .actionRow .actionText {
                    margin-left: 5px;
                    color: #939CA9;
                    background-color: #F6F7F9;
                    padding:0px 5px 2px 5px;
                }
                .first_img {
                    height: 30px;
                }
                .gid_container_Customer .table th {
                    border: none;
                    padding-top: 15px;
                    padding-bottom: 15px;
                }
                .gid_container_Customer .table tbody {
                    border: none;
                }
                .gid_container_Customer .table tbody > tr > td {
                    border: none;
                    padding-top: 2px;
                    padding-bottom: 2px;
                    vertical-align: middle;
                }
                .gid_container_Customer .table tbody .tddropdown td {
                    padding-top: 2px;
                    padding-bottom: 2px;
                    vertical-align: middle;
                }
                .angucomplete-dropdown {
                    width: 100%;
                    margin-top: 28px;
                }
                .gid_container_Customer .tableHeader {
                    margin-left: -15px;
                    margin-right: -15px;
                }
                .gid_container_Customer .S2 {
                    margin-left: 12px;
                    margin-right: 12px;
                }
                .gid_container_Customer table tr.edit_panel {
                    background: #fff;
                }
                .gid_container_Customer table tr.edit_panel,
                .gid_container_Customer table tr.Editable_row {} .gid_container_Customer table tr.edit_panel.show_tr {
                    display: table-row;
                }
                .gid_container_Customer table tr.edit_panel input[type="radio"] {
                    float: left;
                    position: relative;
                }
                .gid_container_Customer table tr.edit_panel td .edit_box .edit-body .editform_btn {
                    position: absolute;
                    right: 20px;
                    top: 87px;
                    width: 50px;
                }
                .gid_container_Customer table tr.edit_panel td {
                    overflow: hidden;
                    height: 0;
                    padding-top: 5px;
                }
                .gid_container_Customer table tr.edit_panel td .edit_box {
                    border: 1px dashed #A8A8A8;
                    margin: 10px 5px;
                    position: relative;
                }
                .gid_container_Customer table tr.edit_panel.animate_tr td {
                    border-left: 3px solid #939393;
                    height: auto;
                    padding: 4px;
                }
                .gid_container_Customer table tr.edit_panel td .edit_box.ng-hide {
                    height: 0;
                }
                .gid_container_Customer table tr.edit_panel td .edit_box {
                    transition: all 0.5s ease;
                }
                .edit_box {
                    transition: .5s linear all;
                    height: 130px;
                }
                .gid_container_Customer table tr.edit_panel.animate_tr {
                    margin-top: 10px;
                    transition: all 0.5s ease;
                }
                .gid_container_Customer table tr.edit_panel td .edit_box .its-heading {
                    position: absolute;
                    left: 24px;
                    top: -15px;
                    min-width: 175px;
                    background: #fff;
                    min-height: 30px;
                    padding: 6px;
                    font-size: 14px;
                    color: #939CA9;
                    font-weight: bold;
                }
                .gid_container_Customer .table .edite_btn {
                    height: 38px;
                    width: 38px;
                    float: left;
                    padding: 4px;
                    margin: 4px 0;
                }
                .gid_container_Customer table tr.edit_panel td .edit_box .edit-body {
                    margin: 26px;
                }
                
                .gid_container_Customer table tr td .notification{
                  color: #C9302C;
                  display: block;
                  clear: both;
                  font-size: 11px;
                  font-style: italic;
                }
                .gid_container_Customer table tr td .AvalaibleQtyNotification{
                  color: #1abc9c;
                  display: block;
                  clear: both;
                  font-size: 11px;
                  font-style: italic;
                }
                .gid_container_Customer table tr td .Infonotification{
                  color: #2E64FE;
                  display: block;
                  clear: both;
                  font-size: 11px;
                  font-style: italic;
                }
                
                #CO_Merchandise_block_grid_container .Editable_row .form-control{
                    width: 75%;
                    border-color: #00AEEF;
                    text-align: center;
                    display: table-row;
                    float: left;
                }
                
                .gid_container_Customer table tr.edit_panel input[type="radio"]{
                    float: left;
                    position: relative;
                }
                .gid_container_Customer table tr.edit_panel td .edit_box .edit-body .radio label span {
                    display: block;
                    float: left;
                    margin-top: 0px;
                    font-size: 14px;
                    color: #707070;
                }
                .gid_container_Customer table tr.edit_panel td .edit_box .edit-body .radio label span.select_box_container {
                    display: block;
                    float: left;
                    margin-left: 22px;
                    margin-top: -4px;
                }
                .gid_container_Customer table tr.disabledCheckOut{
                    color:#B3B3B3;
                }
                
                
                .animate-showContent {
                    opacity: 1;
                }
                .animate-showContent.ng-hide-add.ng-hide-add-active,
                .animate-showContent.ng-hide-remove.ng-hide-remove-active {
                    -webkit-transition: all ease-in-out 0.1s;
                    transition: all ease-in-out 0.1s;
                }
                .animate-showContent.ng-hide {
                    line-height: 0;
                    opacity: 0;
                    padding: 0 10px;
                }
                .caret {
                    font-size: 16px
                }
                .statistics_row .tiles {
                    padding-left: 10px;
                    padding-right: 10px;
                }
                @media screen and (min-width: 1200px) {
                    .mb-datepicker {
                        width: 350px;
                    }
                    .mb-datepicker table {
                        width: 350px;
                        border-spacing: 13px 5px;
                        border-collapse: inherit;
                    }
                    .mb-datepicker table tbody {
                        display: block;
                        border: 1px solid #B7BEC6;
                        border-collapse: separate;
                        margin: -13px;
                        margin-top: 2px;
                        border-radius: 1px;
                    }
                }
                @media screen and (max-width: 1200px) {
                    .mb-datepicker {
                        width: 300px;
                    }
                    .mb-datepicker table {
                        width: 300px;
                        border-spacing: 6px 5px;
                        border-collapse: inherit;
                    }
                    .mb-datepicker table tbody {
                        display: block;
                        border: 1px solid #B7BEC6;
                        border-collapse: separate;
                        margin: -6px;
                        margin-top: 2px;
                        border-radius: 1px;
                    }
                }
                .mb-datepicker {
                    background-color: #fff;
                    margin-top: 0px;
                    margin-left: 10px;
                    font-family: 'Open Sans', sans-serif;
                }
                .mb-datepicker table tbody tr td.day-head {
                    background-color: #fff;
                    border-bottom: 1px solid #FFF;
                }
                .mb-datepicker table tbody tr td.day-head:hover {
                    background-color: #fff;
                    border-bottom: 1px solid #FFF;
                }
                .header-year-wrapper {
                    padding-top: 5px;
                    padding-bottom: 5px;
                    color: white;
                    font-family: \"Open Sans\", sans-serif;
                 font-size: 16px;
                    background-color: #B7BEC6;
                }
                .header-month {
                    width: 66%;
                }
                .header-nav-wrapper {
                    padding-top: 2px;
                    padding-bottom: 1px;
                    color: #fff;
                    font-family: \"Open Sans\", sans-serif;
                    font-size: 15px;
                    background-color: #B7BEC6;
                    text-transform: uppercase;
                }
                .header-nav-wrapper .header-item {
                     margin-top:2px
                }
                .mb-datepicker table tbody tr td {
                    padding: 4px;
                    color: #939CA9;
                }
                .day {
                    color: #000 !important;
                }
                .mb-datepicker table tbody tr.days .day-item:hover {
                    background-color: #FFF;
                    color: #000 !important;
                }
                .today {
                    border: 1px solid #00AEEF;
                    background-color: #FFF !important;
                    color: #000 !important;
                }
                .searchToAdd .input-group{
                    border: 2px solid #fff;
                    margin-top: -2px;
                 }
                #SearchToAddElement > .form-control{
                    border: none;
                    box-shadow: none;
                    height: 32px;
                }
                
                
                 .mainSection .Mrg20:last-child {margin-top: 20px;}
                 .main_section_COU_Header .Sub_total_right{
                    color:#939CA9;
                    font-size:16px;
                    margin-right:45px;
                    margin-bottom:10px;
                 }
                 .Servicegray{
                     background: #A5AFB1;
                     padding: 3px 7px;
                    color: #FFF;
                    text-transform: uppercase;


                }
                .ServiceToggle{
                display: inline;
                margin-left:5px;


                }
                .ServiceToggle .LabelBtn{padding: 0 10px;}
                .ServiceToggle .caretBtn{padding:8px;}
                 .ServiceToggle .dropdown-menu{margin-top:12px;}
                 .sidePanel .leftPanelLinks .subSectionwc{padding:7px 20px; cursor: pointer;}
                 .pinneditems ul{padding:0;}
                 .pinneditems ul li{list-style: none; padding:10px 35px;}

                 
                  .pinneditems ul li i.fa-thumb-tack{color: #00AEEF;}
                  .InfoMT{margin-top:35px;}


                  /* Modified by Tarun Min-height*/
                  .InfoMT .lightbox{width:300px; border:1px solid #ccc; height:auto; border-radius: 5px;}
                  .starimgdiv{
                    width: 32px;
                    height: 76px;
                    background: #FFF;
                    padding: 0px;
                    float: left;
                    margin: 10px;


                    }
                    .starimgdiv .starimg{height: 35px;


                        width: 35px;
                        padding: 5px;
                        border-radius: 5px;
                        background: #373C40;
                        margin-left: 2px;}
                .itemicon{
                        float: left;
                        width: 50px;
                        margin-top: 10px;}
                .infotext{
                        margin-left: 20px;
                        margin-top: 7px;
                        position: relative;


                        width: 220px;
                        left: 36px;}
                .infotext p{margin:0;}
            </style>
            <style>
                ::-webkit-scrollbar{
                    width: 11px;
                    height: 20px;
                }
                ::-webkit-scrollbar-button{
                    background: #ECF0F1;
                }
                ::-webkit-scrollbar-track-piece{
                    background: #ECF0F1;
                }
                ::-webkit-scrollbar-thumb{
                    background: #B7BEC6;
                    border-radius : 3px;
                    border: 1px solid #fff;
                } 
                
                .sidePanel .leftPanelLinks:hover { overflow: auto; }
                
                .sidePanel .leftPanelLinks .active:after{
                   content: none; 
                
                }
                .sidePanel .leftPanelLinks{
                    height: 200px;
                    overflow: hidden;
                }
       
                .sidePanel{
                    
                    padding: 0;
                    color: #939CA9;
                    
                }
                .sidePanel .orderNumber{
                    height: 48px;
                    background-color: #E6EBEC;
                    color: #00AEEF;
                    font-weight: bold;
                    padding: 15px 20px;
                    margin-bottom: 20px;
                }
                
                .ownerInfo{
                    padding: 5px 10px 5px 20px;
                    border-top: 2px solid #ECF0F1;
                    color: #939CA9;
                    border-bottom: 2px solid #ECF0F1;
                }
                .ownerInfo .Name{
                    margin-left: 20px;
                }
                .angucomplete-dropdown {
                    width: 100%;
                    margin-top: 28px;
                }
                .chk_tick {
                    width: 20px !important;
                    height: 20px !important;
                    border-radius: 4px;
                    margin: 3px 15px;
                    border: 1px solid #cccccc;
                    display: block;
                    float: left;
                    cursor: pointer;
                }
                .chk_tick .chksqure {
                    font-size: 0px;
                    height: 12px;
                    width: 12px;
                    margin: 3px;
                    border-radius: 2px;
                    background: #D8D8D8;
                }
               .chked .chksqure {
                    font-size: 0px !important;
                    height: 12px;
                    width: 12px;
                    margin: 3px;
                    border-radius: 2px;
                    background: #71BF3E;
                }
                .deposit_option{
                    margin-right: 20px;
                    float: left;
                 }
                .deposit_option label{
                    float: left;    
                }
                .deposit_option .paymentLabel{
                    margin-top: 5px;
                    display: -webkit-box;
                }
                .disabledTr{
                    opacity:0.5;
                }
                .fixedHeaderText{
                    padding: 0 5px 0 10px;
                    margin-top: 7px;
                    width: 500px;
                    background: #FFFFFF;
                    height: 41px;
                    border-top-right-radius: 2px;
                    border-top-left-radius: 2px;
                    border-top: 1px solid #D1D2D2;
                    border-left: 1px solid #D1D2D2;
                    border-right: 1px solid #D1D2D2;
                }
                /* .ServiceHeader  .fixedHeaderText{
                    width: 500px;
                } */
                
                .fixedHeaderText .total{
                     margin-top: 7px;
                }
                .fixedContent{  
                    padding: 9px;   
                    position: fixed;
                    top: 50px;
                    right: 0;
                    width: 45%;
                    z-index: 99;
                }
                 .orderleftPanelLinks .ordertotal, .totalDue{padding:12px 20px;}
                 .orderleftPanelLinks, .totalDue{padding-bottom:20px;}
               
                .orderleftPanelLinks .ordertotal a:hover, .totalDue a:hover{text-decoration:none;}
                .totalDue a:hover{color:#00AEEF}
                .orderleftPanelLinks .ordertotal a, .totalDue a{width:48%; float:left;    text-transform: uppercase;}
                .error_msg{
                position: absolute;
                background: #000;
                padding: 5px 8px;
                top: -38px;
                left: -6px;
    			border-radius: 8px;
                z-index: 98;
                color: #fff;
                opacity: 0.9;
    			font-size: 12px;
            }
            .error_msg:before{
                border-color: #ccc transparent;
                border-style: solid;
                border-width: 10px 10px 0;
                content: "";
               	left: 57px;
    
                position: absolute;
                top: 27px;
            }
			 .gid_container_Customer.alignleft{
            	margin-left : -18%;
            }
            .error_msg:after{
                border-bottom-color: #000;
                top: 26px;
                border-color: #000 transparent;
                border-style: solid;
                border-width: 10px 10px 0;
                content: "";
                left: 57px;
                position: absolute;
            }
                .Requiredtd{
                color:#C9302C;
                font-weight: bold;      
                }
              .addnewItem{
                    border: 1px dashed #939598;
                    margin: 20px 0;
                    text-align: center;
                    padding: 20px 0;
                }
                        
                 .reomve_btn{
                    position: absolute;
                    top: -12px;
                    right: -10px;
                    color: #fff;
                    background: #fff;
                    border-radius: 25px;
                    border: 1px solid #707070;
                    cursor: pointer;
                }
                .newDropdown{
                    left: -48px;
                    top: 40px;
                }
                .newDropdown:before {
                    border-color: #fff transparent;
                    border-style: solid;
                    border-width: 0 11px 13px;
                    content: "";
                    left: 62px;
                    position: absolute;
                    top: -13px;
                 }
                 
                 .mytxtbox,
                 .mytxtbox:focus{
                    border: none;
                    outline: none;
                    display: inline-block;
                    box-shadow: none;
                    padding-left: 10px;
                 }
                 
                 .serviceNeedSection .servicelabel{
                        margin-bottom: 7px;
                 }
                 
                 .PT15{
                    padding-top: 15px;
                 }
                 
                 .timePickerDropdown .dropdown-menu{
                    min-width: 80px;

                    top: 40px; 
                    max-height: 150px;
                    overflow-y: scroll;
                 }
                 
                 .timePickerDropdown .dropdown-menu:before {
                    border-color: #ccc transparent;
                    border-style: solid;
                    border-width: 0 8px 8px;
                    content: "";

                    left: 20px;
                    position: absolute;



                    top: -9px;


                 }
                 
                 .timePickerDropdown .dropdown-menu:after {
                    border-bottom-color: #fff;

                    top: -7px;
                    border-color: #fff transparent;
                    border-style: solid;
                    border-width: 0 8px 8px;
                    content: "";

                    left: 20px;
                    position: absolute;




                }
                
                .serviceNeedSection .multiselect{
                    width: 400px;




                }
                
                .COUList .dropdown-menu{
                    max-height: 150px;
                    overflow-y: scroll;
                    left: auto;
                    top: 17px;  


                }
                
                .dropdown-menu li a{
                    cursor: pointer;






                }
                
                
                .icon_list{
                    margin-left:20px; 
                    float:left;


                }
                .icon_list .fa-question-circle{
                    color: #939CA9;
                 }
                .icon_list .fa-thumb-tack{

                    color: #939CA9;
                }
                .icon_list .active-pin{
                    color: #00AEEF;
                }
                .InfoMT .angucomplete-dropdown{
                    width:300px;
                    margin-top:0px;
                    margin-left:-2px;
                }
                    /* changes done by DK*/
               .lable_fields .form_lable_icons{
                display: block;
                float: left;
                width: 30px;
                height: 30px;
                background-image: url('{!URLFOR($Resource.Images, 'circlefornumber.png')}') no-repeat;
                font-size: 10px;
                padding: 8px 5px;

                }
                .SignIncontainer .lable_fields p{ 
                padding: 5px 5px 5px 5px;
                font-weight: bold;
                float: left;


                }
               
                .SignIncontainer .MRL{
                    margin-left: 30px; 
                    margin-right:75px;

                }

                .PDZero{
                    padding:0;

                }

                .gid_container_Customer{

                    margin-top:35px;

                 }
                .gid_container_Customer .table th {
                    border: none;
                    padding-top: 15px;
                    padding-bottom: 15px;

                }
                 .gid_container_Customer .table tbody > tr > td {
                    border: none;
                    vertical-align: middle;

                }
                .show_Availableline{
                    background: #71BF3E;
                    color: #fff;
                    padding-left: 10px;

                }
                .gid_container_Customer .table tbody > tr > td i.servicesitem

                {
                    background: #CEC7C7;
                     padding:5px;
                    border-radius: 3px;

                }
                .gid_container_Customer table tr.edit_panel td .serviceitemedit{
                     margin: 10px 0;

                }
                .gid_container_Customer table tr.edit_panel td.edit-service-item .serviceitemedit.ng-hide{
                    height: 0;

                }
                .gid_container_Customer table tr.edit_panel td.edit-service-item .serviceitemedit{
                    border: 1px solid #BBE5F9;
                    height: 190px;
                    transition: all 0.5s ease;


                
                }
                .gid_container_Customer table tr.edit_panel td.edit-service-item .serviceitemedit .its-heading{
                    position: static;

                }
                .gid_container_Customer table tr.edit_panel td .serviceitemedit .edit-body .editform_btn{
                    right:auto;
                    width:70px;
                    top: 150px;

                }
                #MerchandiseSection .gid_container_Customer table tr.edit_panel td .serviceitemedit .edit-body .editform_btn{
                    top: 150px;
                }
                
                #MerchandiseSection .gid_container_Customer table tr.edit_panel td.edit-service-item .serviceitemedit{
                    height: 190px;
                }
                
                #MerchandiseSection .gid_container_Customer table tr.edit_panel td .serviceitemedit .edit-body .radio label, .checkbox label{
                    height: 30px;
                }
                
                .gid_container_Customer .table tbody  tr  td.BL{
                border-left:1px solid #999;

                }
                .gid_container_Customer table tr.edit_panel td .serviceitemedit .edit-body{
                    margin: 15px 26px 15px 0px;

                }
                .gid_container_Customer table tr.edit_panel td .serviceitemedit .edit-body .radio label, .checkbox label{
                    padding: 0;
                    height: 30px;

                }
                .edit-service-chek{
                    margin: 0;
                    margin-right:10px;

                }
                .HG50{
                    height: 50px;

                }
                .BGFF{
                    background:#fff;

                }
                .serviceLabeledit{
                    width:123px; 
                    padding:0;


                    margin: 0;



                    outline:none;
                    height: 20px;
                    float: left;
                    margin-left:3px;

                }


                .edittext{
                    width:122px;
                    display: inline-block;
                    float: left;
                    text-overflow: ellipsis;
                    white-space: nowrap;
                    overflow: hidden;
                    margin-left: 5px;


                }
                
                .bgRed{
                    background: #E80000 ;


                }
                
                .fixedRow .pinneditems{
                    width: 800px;
                    background: white;
                    z-index: 999;


                }  
                
                .fixedPinnedItems{
                    position: fixed;
                    top: 92px;
                    left: 17.83%;
                    width: 82.17%;
                    z-index: 990;
                    background: white;

                }
                .serviceReviewcontainer .multiselect{
                    width: 400px;


                }
                
                .actionDropdown{
                    display: inline;

                }
                .actionDropdown ul{
                    top: 26px;
                    left: -66px;

                }
                .actionDropdown ul:before{
                    border-color: rgba(0, 0, 0, .15) transparent;
                    border-style: solid;
                    border-width: 0 11px 13px;
                    content: "";
                    left: 62px;
                    position: absolute;
                    top: -13px;

                }
                .actionDropdown ul:after{
                    border-color: #fff transparent;
                    border-style: solid;
                    border-width: 0 11px 13px;
                    content: "";
                    left: 62px;
                    position: absolute;
                    top: -11px;

                }
                .hour-notestext{
                    white-space: nowrap;
                    width: 350px;
                    overflow: hidden;
                    text-overflow: ellipsis;


                }
                
                .sideBarTotals{
                    position: fixed;
                    bottom: 10px;
                    width: 16.6%;
                    border-top: 2px solid #ECF0F1;

                }
                /*change by DK*/
                .F12{
                    font-size: 12px;

                }
                .FC2{
                    color: #00AEEF;

                }
                .blueColor{
                    color: #2E64FE;


                }
                
                .greenColor{
                    color: #71BF3E;
                }
                
                .greenColorBold{
                   color: #71BF3E;
                   font-weight: bold;
                }
                
                
                .finalizeInvoiceBtnSection .C5{
                    background-color: #B7BEC6;

                }
                .angucomplete-holder .form-control-small{
                    box-shadow: none;
                }
                
                .deActice-Header{
                    pointer-events: none;
                    opacity: 0.75;
                    background: #CCE;
                }
                .deActice-SidePanel{
                    pointer-events: none;
                    opacity: 0.5;
                    background: #ECF0F1;
                }
                
                .fixedContent .fa-floppy-o, .fixedContent .fa-cog{color:#000}
                .width-88{width: 88px;}
               /*  @-moz-document url-prefix() {
                   .PL14 {
                     padding-left:14px;
                  }
                } */
                .headdingFirstText{
                    color: #B7BEC6;
                    float: left;
                    font-family: 'Open Sans', sans-serif;
                    font-weight: 800;
                    text-transform: capitalize;
                    font-size: 13px;
                    margin: 0.01em;
                    padding-right: 5px;
                }
                .ActionIcons{
                    margin-left: 10px;
                    margin-top: 8px;
                }
                .ActionIcons .btn {
                    padding: 2px 5px 0px 6px;
                    color: #FFF;
                    background: #B7BEC6;
                    line-height: 1.16;
                    font-weight: bold;
                    font-size:12px;
                    text-transform: uppercase;
                }
                .ActionIcons .btn .caret{
                    margin-left: 2px;
                }
                .searchToAdd .activeSearchDiv{
                    border:2px solid #00AEEF; 
                }

                
                
                /* Added by Tarun */
                .ProviderList .dropdown-menu {
                    max-height: 115px;
                }
                .select-provider {
                    margin: 5px 0 10px 10px;
                    opacity: 0.6;
                }
                .InfoMT .providerBox{
                    min-height: 100px;
                }
                .gid_container_Customer table tr.edit_panel td .edit_box .edit-body .attachmenteditform_btn{
                    position: absolute;
                    left: 60px;
                    top: 87px;
                    width: 60px;
                }
                .gid_container_Customer .chkoutmodeicon .fa{
               	    font-size: 20px;
    				color: #B7BEC6;
                }
                
                .browse_but{
                    margin-top: 11px;
                    margin-left: 5px;
                    width: 20%;
                    float: left;
                }
                .browse_section{
                    border: 1px dashed #00AEEF;
                    background: #e8f0fe;
                }
                .browse_droplet{
                    width: 100%;
                    float: left;
                }
                
                
                /* checkout mode css */
                .checkout_mode{
                    margin: 0 23px;
                    padding: 5px;
                    display: inline-block;
                    border-radius: 10px;
                }
                
                .checkout_mode .modeIcon{
                    font-size: 30px;
                    padding: 0 3px 5px 3px;
                    margin: 0 5px;
                    cursor: pointer;
                    color: #B7BEC6;
                }
                .checkout_mode .activeCheckoutmode{
                    color: #00AEEF;
                }
                .checkout_mode_name{
                    margin: 10px 35px;
                    font-size: 22px;
                    color: #00AEEF;
                    font-weight: bold;
                }
                
                .payment_Option{
                    width: 250px;
                    margin-left: 24px;
                    margin-top: 24px;       
                }

                .payment_ActibveOption{
                    padding: 0 10px 0 0;
                    width: 200px;
                }
                .payment_ActibveOption p .fa{
                    font-size: 30px;

					float: left;
                    color: #B7BEC6;
                    position: relative;
    				top: -5px;

                }
                .payment_ActibveOption p span{
                    float: left;
                    font-size: 20px;

                    margin-left: 10px;
                    text-transform: capitalize;
                    margin-top: -3px;  
					color: #B7BEC6;
                }
                .payment_ActibveOption a p .F25{
                    font-size: 25px;
                }
                .payment_ActibveOption p{
                    float: left;
                    margin: 0;
                }
                .payment_DropDown{
                    min-width: 300px;
                    padding: 10px 0px;
                } 
                .payment_DropDown li {
                    float: left;
                    padding: 0 0 10px 20px;
                    width: 100%;
                } 
                .payment_DropDown li a {
                    float: left;
                    width: 33%;
                    text-align: center;
                    padding: 5px 0px;
                }
                .dropdown-menu li a p {
                    float: left;
                    width: 100%;
                    margin: 0;
                }
                .dropdown-menu li a p .fa {
                    color: #B7BEC6;


                    font-size: 30px;
                }
                .payment_DropDown li a span{
                    color:#B7BEC6;


                    font-size: 11px;
                }
                
                .payment_Active{
                    background-color: rgb(224, 231, 232);   
                }

				.payment_TotalAmount{
					position: absolute;
					top: 40px;
					left: 50px;					

				}


				.payment_TotalAmount p{
					text-transform: capitalize;
				}

				.payment_ConfirmBox{
					position: fixed !important;
					top: 35% !important;
					left: 40% !important;
				}
				


				#CO_Payment_block_gid_container table tr.edit_panel td .edit_box{
				    height: 90px;
				    transition: all 0.5s ease;
				}
				


				#CO_Payment_block_gid_container table tr.edit_panel td .edit_box.ng-hide{
					height: 0;
				} 

				#CO_Payment_block_gid_container table tr.edit_panel td .edit_box .edit-body .editform_btn{
					top: 45px;
				}
				


				.chk_tick.disabledChk{
					cursor:not-allowed;
				}
				


				.workIcon,
				.claimIcon{
					font-style: normal;
				    border-radius: 4px;
				    background: #727983;
				    color: #fff;
				}

				.claimIcon{
				    padding-left: 7px;
    				padding-right: 7px;
				}
				.MLR0{
                 	margin-left: 0;
    				margin-right: 0;
                }

				/* @media screen and (min-width: 1367px) and (max-width:1700px) {
				 	.payment_TotalAmount{
				 		left:118px;
				 	}

				 
				 }*/
				.userimg {
				    margin-bottom: 4%;
				}
				.infotext p {
				    margin: 0;
				    /* word-wrap: break-word; */
				    word-break: break-all;
				    width: 230px;
				}

            </style>
            <script>
            	//richa
            	$(document).click(function(e) {

				    // check that your clicked
				    // element has no id=info
				    // and is not child of info
				    if (e.target.id != 'CO_Deposits_block_deposit_header_amount_block_pricebox_error_msg' 
				    && e.target.id != 'CO_Deposits_block_deposit_header_amount_block_pricebox_addbtn_Payments') {
				        $("#CO_Deposits_block_deposit_header_amount_block_pricebox_error_msg").hide();
				    }
				    else {
				    	$("#CO_Deposits_block_deposit_header_amount_block_pricebox_error_msg").show();
				    }
				});
                var CusOrder = angular.module('CusOrder', [ 'addEditPartModule', 
                                                            'addEditHourLogModule', 
                                                            'angucomplete', 
                                                            'ngAnimate', 
                                                            'ui-notification', 
                                                            'BPGlobalHeader', 
                                                            'ui.date', 
                                                            'addNewCOUModule', 
                                                            'PartPopUpModule', 
                                                            'COUInfoModule', 
                                                            'coActionModule',
                                                            'ngDroplet']);
               
                CusOrder.directive('numberOnlyInput', function () {
                    return { 
                        restrict : 'EA', 
                        template : '<input type="text" onfocus="this.select();" class="form-control text-center" ng-model="inputValue" id="{{idVal}}" ng-disabled="disableAttr" tabindex="{{tabIndex}}" />',
                        scope : {
                            inputValue : '=',
                            "idVal": "@idVal",  
                            "tabIndex": "@tabIndex",
                            "disableAttr": '=',
                            "includeNegative":"@includeNegative",
							"includeZero" : "@includeZero"
                        },
                        link : function (scope) {
                            scope.$watch('inputValue', function (newValue, oldValue) {
                                var arr = String(newValue).split("");
                                var pieces = String(newValue).split(".");
                                if (arr.length === 0)
                                    return;
                                if (arr[0] == '-' && arr[1] != 0) {
                                    return;
                                } else if (isNaN(newValue)){

                                    scope.inputValue = oldValue;
								}
                                else if(newValue == 0 || newValue == -0){
                                	if(angular.isDefined(scope.includeZero)){
                                		debug(scope.includeZero);
                                	}else{
                                		scope.inputValue = oldValue;
                                	}
                                } else if (typeof(pieces[1]) != "undefined" && pieces[1].length > 2) {
                                    scope.inputValue = oldValue;
                                }
                            });
                        }
                    };
                });
                
                
                   CusOrder.directive('numberOnlyInputClaim', function () {
                    return { 
                        restrict : 'EA', 
                        template : '<input type="text" onfocus="this.select();"  class="form-control text-center" ng-model="inputValue" id="{{idVal}}" ng-disabled="disableAttr" tabindex="{{tabIndex}}" />',
                        scope : {
                            inputValue : '=',
                            "idVal": "@idVal",  
                            "tabIndex": "@tabIndex",
                            "disableAttr": '=',
                            "includeNegative":"@includeNegative",
                            
                            "precisionLength" : '@',  /* added by pooja */ 
                            
                        },
                        link : function (scope, el, attrs) {
                            scope.$watch('inputValue', function (newValue, oldValue) {
                                var arr = String(newValue).split("");
                                var pieces = String(newValue).split(".");
                                if (arr.length === 0)
                                    return;
                                if (arr[0] == '-' && arr[1] != 0) {
                                    
                                    return;
                                } else if (isNaN(newValue) ) {


                                    scope.inputValue = oldValue;
                                   
                                    /* Start:added by pooja */
                                    var newValue = scope.inputValue;
                                    var pieces = String(newValue).split(".");
                                    if(pieces[1] != null && pieces[1] != "" && pieces[1].length > attrs.precisionLength){
										pieces[1] = pieces[1].substring(0, attrs.precisionLength);
									}
									scope.inputValue = pieces[0] + ((pieces[1] != null && pieces[1] != "") ? ("." + pieces[1]) : ((attrs.precisionLength > 0 && String(newValue).indexOf(".") != -1) ? ".": ""));
									/* End:added by pooja */
									
                                } else if (typeof(pieces[1]) != "undefined" && pieces[1].length > 2) {
                                    scope.inputValue = oldValue;
                                    
                                    /* Start:added by pooja */
                                    var newValue = scope.inputValue;
                                    var pieces = String(newValue).split(".");
                                    if(pieces[1] != null && pieces[1] != "" && pieces[1].length > attrs.precisionLength){
										pieces[1] = pieces[1].substring(0, attrs.precisionLength);
									}
									scope.inputValue = pieces[0] + ((pieces[1] != null && pieces[1] != "") ? ("." + pieces[1]) : ((attrs.precisionLength > 0 && String(newValue).indexOf(".") != -1) ? ".": ""));
									/* End:added by pooja */
                                }
                            });
                        }
                    };
                });
                
                
                
                CusOrder.directive('numberOnlyInputService', function () {
                    return { 
                        restrict : 'EA',
                        template : '<input type="text" ng-blur="CO_SearchToAdd_value" onfocus="this.select();" class="form-control text-center" ng-model="inputValue" id="{{idVal}}" tabindex="{{tabIndex}}" />',
                        scope : {
                            inputValue : '=',
                            "idVal": "@idVal",
                            "tabIndex": "@tabIndex"
                        },
                        link : function (scope) {
                            scope.$watch('inputValue', function (newValue, oldValue) {
                                var arr = String(newValue).split("");
                                var pieces = String(newValue).split(".");
                                if (arr.length === 0)
                                    return;
                                if (arr[0] == '-') {
                                    scope.inputValue = oldValue;
                                } else if (isNaN(newValue)) {
                                    scope.inputValue = oldValue;
                                } else if (typeof(pieces[1]) != "undefined" && pieces[1].length > 2) {
                                    scope.inputValue = oldValue;
                                }
                            });
                            
                            scope.focusSerchtoAdd=function(){
                                     angular.element('#CO_SearchToAdd_value').focus();
                            }
                        }
                    };
                });
        
        
                
                
                CusOrder.directive('priceOnlyInputCustomerOrder', function () {
                    return {
                        restrict : 'EA',
                        template : '<input type="text" class="form-control" ng-model="inputValue" id="{{idVal}}" />',
                        scope : {
                            inputValue : '=',
                            "idVal": "@idVal"
                        },
                        link : function (scope) {
                            scope.$watch('inputValue', function (newValue, oldValue) {
                                var arr = String(newValue).split("");
                                var pieces = String(newValue).split(".");
                                if (arr.length === 0)
                                    return;
                                if (arr[0] == '-') {
                                    scope.inputValue = oldValue;
                                } else if (isNaN(newValue)) {
                                    scope.inputValue = oldValue;
                                } else if (typeof(pieces[1]) != "undefined" && pieces[1].length > 2) {
                                    scope.inputValue = oldValue;
                                }
                            });
                        }
                    };
                });
                
                CusOrder.directive('tooltip', function(){
                    return {
                        restrict: 'A',
                        link: function(scope, element, attrs){
                            $(element).hover(function(){
                                // on mouseenter
                                $(element).tooltip('show');
                            }, function(){
                                // on mouseleave
                                $(element).tooltip('hide');



                            });
                        }
                    };
                });
                
                
                CusOrder.controller('mainCtrl', function ($scope, $sce, $q,$rootScope, $timeout, 
                                                            Notification, 
                                                            CustomerInfoService, userService, SOHeaderService, WizardService, FileUploadService) {

                    
                    






                    $scope.isOpen = true;
                   // $scope.CustomerOrderModel = [];
                    $scope.CustomerOrderModel = {};
                    $scope.objectData = "";
                    $scope.ShowContent = false;
                    $scope.CustomerModal = {};
                    $scope.ViewCustomer ={};
                    $scope.CustomerOrderModel.InvoiceHistory={};
                    $scope.CustomerOrderModel.CustomerInfo = [];
                    $scope.CustomerOrderModel.CheckOutItems = [];
                    $scope.CustomerOrderModel.Payment=[];
                    $scope.CustomerOrderModel.Deposits=[];
                    $scope.CustomerOrderModel.MerchandiseItems=[]; 
                    $scope.CustomerOrderModel.serviceOrderList=[];
                    $scope.CustomerOrderModel.AllSectionList = [];
                    $scope.CustomerOrderModel.SelectedSection={'item':'Info Section','relatedSection':'CustomerSection','sectionType':[{'Object':'Customer:','Value':'Customer'},{'Object':'User:','Value':'User'},{'Object':'Merchandise:','Value':'Part__c'},{'Object':'Kit:','Value':'Kit_Header__c'},{'Object':'Fee:','Value':'Fee__c'}]}
                    
                    $scope.CustomerOrderModel.SOHeaderList=[];  
                    $scope.CustomerOrderModel.SectionList =[];  
                    $scope.CustomerOrderModel.VendorOrderListByVendorId = [];
					$scope.CustomerOrderModel.payment_TotalAmount = false;	

                    $scope.CustomerOrderModel.ChangeRecords = 0;
                    $scope.CustomerOrderModel.IsFirst = 0;
                    
                    $scope.CustomerOrderModel.checkOutMode = 'Customer';
                    
                    //wizard variables
                    $scope.WizardModel = {};
                    $scope.CustomerOrderModel.isWizardMode = false;
                    
                    $scope.maxStringSize = 6000000;    //Maximum String size is 6,000,000 characters
                    $scope.maxFileSize = 4350000;      //After Base64 Encoding, this is the max file size
                    $scope.chunkSize = 950000;         //Maximum Javascript Remoting message size is 1,000,000 characters
                    $scope.attachment='';
                    $scope.attachmentName='';
                    $scope.fileSize=0;
                    $scope.positionIndex=0;
                    $scope.isBrowseFile = false;
                    
                    
                    $scope.FileUpload = {};
                    $scope.FileUpload.maxStringSize = 6000000;    //Maximum String size is 6,000,000 characters
                    $scope.FileUpload.maxFileSize = 4350000;      //After Base64 Encoding, this is the max file size
                    $scope.FileUpload.chunkSize = 950000;         //Maximum Javascript Remoting message size is 1,000,000 characters
                    $scope.FileUpload.attachment='';
                    $scope.FileUpload.attachmentName='';
                    $scope.FileUpload.fileSize=0;
                    $scope.FileUpload.positionIndex=0;
                    $scope.FileUpload.isBrowseFile = false;
                    $scope.CustomerOrderModel.allowFromPopup = false;
                    if ($scope.PrintPreviewModel == undefined) {
                        $scope.PrintPreviewModel = {};
                    }
                     $scope.PrintPreviewModel.PrintPreviewInfo = [];
                     
                    // Listen for when the interface has been configured.
                    //This is the code for ng-droplet
                     /**
                     * @property interface
                     * @type {Object}
                     */
                    $scope.FileUpload.interface = {};
                    
                    /**
                     * @property uploadCount
                     * @type {Number}
                     */
                    $scope.FileUpload.uploadCount = 0;
            
                    /**
                     * @property success
                     * @type {Boolean}
                     */
                    $scope.FileUpload.success = false;
            
                    /**
                     * @property error
                     * @type {Boolean}
                     */
                    $scope.FileUpload.error = false;
                    
                    // Listen for when the interface has been configured.
                    $scope.$on('$dropletReady', function whenDropletReady() {
                        try {
                            $scope.FileUpload.interface.allowedExtensions(['png', 'jpg', 'bmp', 'gif','txt','pdf','svg', 'torrent']);
                            $scope.FileUpload.interface.defineHTTPSuccess([/2.{2}/]);
                            $scope.FileUpload.interface.useArray(false);
                            $scope.FileUpload.interface.setMaximumValidFiles(1);
                        } catch(ex){}
                    });
            
                    // Listen for when the files have been successfully uploaded.
                    $scope.$on('$dropletSuccess', function onDropletSuccess(event, response, files) {
                        $scope.FileUpload.uploadCount = files.length;
                        $scope.FileUpload.success     = true;
                        $timeout(function timeout() {
                            $scope.FileUpload.success = false;
                        }, 5000);
            
                    });
                    
                    // Listen for when the files have failed to upload.
                    $scope.$on('$dropletError', function onDropletError(event, response) {
                        $scope.FileUpload.error = true;
                        $timeout(function timeout() {
                            $scope.FileUpload.error = false;
                        }, 5000);
            
                    });
                    $scope.$on('$dropletFileAdded', function onDropletFileAdded(event, singlefile) {


                        $scope.FileUpload.uploadFile(singlefile.file);
                        $scope.FileUpload.firsttime = false;
                    });
                    
                    $scope.FileUpload.uploadFile = function (file) {
                        $scope.FileUpload.isloading = true;
                        if (file != undefined) {
                            if (file.size <= $scope.FileUpload.maxFileSize) {
                                $scope.FileUpload.attachmentName = file.name;
                                
                                var fileReader = new FileReader();
                                fileReader.onloadend = function (e) {
                                    $scope.FileUpload.attachment = window.btoa(this.result); //Base 64 encode the file before sending it
                                    $scope.FileUpload.positionIndex = 0;
                                    $scope.FileUpload.fileSize = $scope.FileUpload.attachment.length;
                                    $scope.FileUpload.doneUploading = false;
                                    if ($scope.FileUpload.fileSize < $scope.FileUpload.maxStringSize) {
                                        $scope.FileUpload.isloading = false;
                                        $scope.FileUpload.tempattachmentbody = $scope.FileUpload.attachment;
                                        $scope.FileUpload.uploadAttachment();
                                    } else {
                                        $scope.FileUpload.isloading = false;
                                    }
                                }
                                fileReader.onerror = function (e) {}
                                fileReader.onabort = function (e) {
                                    $scope.FileUpload.isloading = false
                                        $scope.FileUpload.uploadAttachment();
                                }
                                fileReader.readAsBinaryString(file); //Read the body of the file
                            } else {
                                $scope.FileUpload.isloading = false;
                            }
                        } else {
                            $scope.FileUpload.isloading = false;
                            $scope.FileUpload.uploadAttachment();
                        }
                    }
                    $scope.FileUpload.uploadAttachment = function () {
                        var source = $scope.CustomerOrderModel.isWizardMode ? 'Claim Submission' : 'Manual Upload';
                        $scope.FileUpload.isloading = true;
                        var index = $scope.CustomerOrderModel.SelectedSection.index;
                        var parentId = $scope.CustomerOrderModel.serviceOrderList[index].Id;
                        FileUploadService.uploadAttachment( $scope.FileUpload.attachmentName, 
                                                            $scope.FileUpload.tempattachmentbody, 
                                                            parentId, 
                                                            source
                                                        ).then(
                            function (successfulResult) {
                                $scope.FileUpload.isloading = false; 


                                $scope.CustomerOrderModel.SOHeaderList[index].AttachmentList = successfulResult;
                                $scope.CustomerOrderModel.createAttachmentGridEditItem(null);


                        }, function (errorSearchResult) {
                            responseData = errorSearchResult;
                        })
                    }
                    
                    // START: PART POPUP ATTRS AND METHODS
                    // Modals for Add/Edit Part component
                    $scope.PartCompModal = {};
        
                    $scope.$on('CustomerOrder_AddNewMerchandise', function (event, args) {
                        $scope.CustomerOrderModel.createPart();
                    });
        
                    $scope.CustomerOrderModel.createPart = function () {
                        $scope.PartCompModal.openAddPartPopup();
                    }
                    // END: PART POPUP ATTRS AND METHODS
                    
                    // k left bar heading lables
                    $scope.CustomerOrderModel.populateLeftSideHeadingLables = function(){
                        $scope.CustomerOrderModel.populateLeftSideHeadingLables();
                    }
                    
                    $scope.CustomerOrderModel.EnableCheckout =function (checkoutItem,index){
                        
                        if(checkoutItem.IsInvoiceable){
                            return false;
                        }else{
                            return true;    
                        }
                    
                    } 
                            
                        $scope.CustomerOrderModel.showCustomerInfoOverlay = function (event, custId) {
                        $scope.CustomerOrderModel.OverlayInfo = {};
                        $scope.CustomerOrderModel.CustomerOverlay = [];
                        $scope.CustomerOrderModel.showInfoOverlay(event, custId);


                        CustomerInfoService.customerInfo(custId).then(function (customerRecord) {
                            if (customerRecord.length > 0) {
                                $scope.CustomerOrderModel.OverlayInfo = customerRecord[0];
                                if ($scope.CustomerOrderModel.OverlayInfo.Cust_PreferredPhone == "") {
                                    if ($scope.CustomerOrderModel.OverlayInfo.Cust_HomeNumber != "") {
                                        $scope.CustomerOrderModel.OverlayInfo.Cust_PreferredPhone = $scope.CustomerOrderModel.OverlayInfo.Cust_HomeNumber;
                                    } else if ($scope.CustomerOrderModel.OverlayInfo.Cust_WorkNumber != "") {
                                        $scope.CustomerOrderModel.OverlayInfo.Cust_PreferredPhone = $scope.CustomerOrderModel.OverlayInfo.Cust_WorkNumber;
                                    } else if ($scope.CustomerOrderModel.OverlayInfo.Cust_Mobile != "") {
                                        $scope.CustomerOrderModel.OverlayInfo.Cust_PreferredPhone = $scope.CustomerOrderModel.OverlayInfo.Cust_Mobile;
                                    }
                                }
                                if ($scope.CustomerOrderModel.OverlayInfo.Cust_PreferredEmail == "") {
                                    if ($scope.CustomerOrderModel.OverlayInfo.Cust_HomeEmail != "") {
                                        $scope.CustomerOrderModel.OverlayInfo.Cust_PreferredEmail = $scope.CustomerOrderModel.OverlayInfo.Cust_HomeEmail;
                                    } else if ($scope.CustomerOrderModel.OverlayInfo.Cust_WorkEmail != "") {
                                        $scope.CustomerOrderModel.OverlayInfo.Cust_PreferredEmail = $scope.CustomerOrderModel.OverlayInfo.Cust_WorkEmail;
                                    } else if ($scope.CustomerOrderModel.OverlayInfo.Cust_OtherEmail != "") {
                                        $scope.CustomerOrderModel.OverlayInfo.Cust_PreferredEmail = $scope.CustomerOrderModel.OverlayInfo.Cust_OtherEmail;
                                    }
                                }
        
                                $scope.CustomerOrderModel.CustomerOverlay = [{
                                        label : 'Name',
                                        value : $scope.CustomerOrderModel.OverlayInfo.Cust_Name
                                    }, {
                                        label : 'PHONE PRIMARY',
                                        value : $scope.CustomerOrderModel.OverlayInfo.Cust_PreferredPhone
                                    }, {
                                        label : 'PHONE ALT',
                                        value : $scope.CustomerOrderModel.OverlayInfo.Cust_Mobile
                                    }, {
                                        label : 'EMAIL',
                                        value : $scope.CustomerOrderModel.OverlayInfo.Cust_PreferredEmail
                                    }, {
                                        label : 'ADDRESS',
                                        value : $scope.CustomerOrderModel.OverlayInfo.Cust_BillingStreet + ' ' +
                                        $scope.CustomerOrderModel.OverlayInfo.Cust_BillingCity
                                    }
                                ];
                            }
                        }, function (errorSearchResult) {
                            $scope.CustomerOrderModel.OverlayInfo = errorSearchResult;
                        });
                    }
                     
                     
                            $scope.CustomerOrderModel.setPreffered =function(customerRecord){




                                
                                $scope.CustomerOrderModel.CustomerInfoData  = customerRecord;
                                
                                 $scope.CustomerOrderModel.CustomerInfoDetails=[];
                                 
                                if (!customerRecord.Cust_PreferredPhone) {
                                    if (customerRecord.Cust_HomeNumber ) {
                                        customerRecord.Cust_PreferredPhone = customerRecord.Cust_HomeNumber;
                                    } else if (customerRecord.Cust_WorkNumber ) {
                                        customerRecord.Cust_PreferredPhone = customerRecord.Cust_WorkNumber;
                                    } else if (customerRecord.Cust_Mobile ) {
                                        customerRecord.Cust_PreferredPhone = customerRecord.Cust_OtherNumber;
                                    }
                                    else{
                                        customerRecord.Cust_PreferredPhone="-";
                                    }
                                }
                              
                                if (!customerRecord.Cust_PreferredEmail) {
                                    
                                    if (customerRecord.Cust_HomeEmail.length > 0) {
                                        customerRecord.Cust_PreferredEmail = customerRecord.Cust_HomeEmail;


                                    } else if (customerRecord.Cust_HomeEmail.length > 0  ) {
                                        customerRecord.Cust_PreferredEmail = customerRecord.Cust_WorkEmail;


                                    } else if (customerRecord.Cust_OtherEmail ) {
                                        customerRecord.Cust_PreferredEmail = customerRecord.Cust_OtherEmail;


                                    }else{
                                        customerRecord.Cust_PreferredEmail="-";
                                    }
                                }
                                
                               
                                 
                                 $scope.CustomerOrderModel.CustomerInfoDetails = [ {
                                                  label : 'Email:',
                                                  value : customerRecord.Cust_PreferredEmail
                                              }, {
                                                  label : 'Phone:',
                                                  value : customerRecord.Cust_PreferredPhone
                                              }, {
                                                  label : 'Cell:',
                                                  value : (!customerRecord.Cust_OtherNumber ? "-" :customerRecord.Cust_OtherNumber)
                                              }, {
                                                  label : 'Address:',
                                                  value : customerRecord.Cust_BillingStreet + '\n' +
                                                          customerRecord.Cust_BillingCity + '\n' +
                                                          customerRecord.Cust_BillingState+ '\n' +
                                                          customerRecord.Cust_BillingCountry + '\n' +
                                                          customerRecord.Cust_BillingPostalCode
                                                          
                                              }
                                    ];
                            }
                                
                                
                    
                    
                    //View Customer To get Call Back results 
                    $scope.ViewCustomer.saveCustomer = function (result) {
        
                        if (result.Id.length == 18) {
                            result.Id = result.Id.substring(0, 15);
                        }
                        if ($scope.CustomerOrderModel.Customer.Value.length == 18) {
                            $scope.CustomerOrderModel.Customer.Value = $scope.CustomerOrderModel.Customer.Value.substring(0, 15);
                        }
        
                        if ($scope.CustomerOrderModel.Customer.Value == result.Id) {
                            var customerId = $scope.CustomerOrderModel.Customer.Value;
        
                               CustomerInfoService.customerInfo(customerId).then(function (customerRecord) {
                               
                                    $scope.CustomerOrderModel.setPreffered(customerRecord[0]);
                               })
                                
                            }
                        } 
                    
                    $scope.CustomerOrderModel.isSearchToAddVisible = function(){
                        
                        if($scope.CustomerOrderModel.coHeaderDetails != undefined && $scope.CustomerOrderModel.coHeaderDetails.OrderStatus == 'Closed'){
                            return false;
                        }
                        else if($scope.CustomerOrderModel.SelectedSection.relatedSection.indexOf('ServiceOrderSection') != -1){
                            var soIndex = parseInt($scope.CustomerOrderModel.SelectedSection.relatedSection.replace('ServiceOrderSection', ''));
                            if($scope.CustomerOrderModel.SOHeaderList[soIndex].SOHeaderInfo.WorkStatus== 'Complete'|| 
                            	$scope.CustomerOrderModel.SOHeaderList[soIndex].SOHeaderInfo.WorkStatus== 'Reviewed' ||
                            	$scope.CustomerOrderModel.SOHeaderList[soIndex].SOHeaderInfo.WorkStatus== 'Signed Out'){
                                return false;
                            }
                            if($scope.CustomerOrderModel.SOHeaderList[soIndex].SOHeaderInfo.TransactionType == 'Third-Party'
                                && $scope.CustomerOrderModel.SOHeaderList[soIndex].SOHeaderInfo.ProviderId == null){
                                return false;     
                            }
                        }
                        return true;
                    }
                     
                    $scope.getSectionToMove = function(sectionId) {
                        return function(SectionList) {
                            return SectionList.Id != sectionId;
                        }
                    } 
                    
                    
                    $scope.CustomerOrderModel.showInfoOverlay = function (event, custId) {
                        var targetEle = angular.element(event.target);
                        var elementWidth = targetEle.width();
                        if (targetEle.width() > targetEle.parent().width()) {
                            elementWidth = targetEle.parent().width() - 15;
                        }
        
                        angular.element('.Customer-info-overlay').css('top', targetEle.offset().top - 45);
                        angular.element('.Customer-info-overlay').css('left', event.clientX);
                        angular.element('.Customer-info-overlay').show();
                    } 
                     
                    $scope.CustomerOrderModel.hideCustomerInfoOverlay = function () {
                        angular.element('.Customer-info-overlay').hide();
                    }
                            
                    
                    $scope.CustomerOrderModel.EditCustomerOverLay = function () {
        
                    $scope.$broadcast('EditCustomerEvent', $scope.CustomerOrderModel.Customer.Value);
        
                      /* $scope.CustomerOrderModel.hideCustomerInfoOverlay();
        
                        $scope.CustomerOrderModel.CustomerInfo
                        CustomerInfoService.EditCustomerDetails($scope.CustomerOrderModel.Customer.Value)
                        .then(function (successfulSearchResult) {
                            $scope.CustomerOrderModel.CustomerInfo = successfulSearchResult[0];
                            $scope.CustomerOrderModel.IsFirst = 1;
                            $scope.CustomerOrderModel.ChangeRecords = 1;
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                        });*/
                    }
                    
                    $scope.CustomerOrderModel.createKit = function() {
                        $scope.$broadcast('AddKitEvent');
                    }
                    
                    $scope.CustomerOrderModel.openAddCustomerOwnedUnitPopup = function (event, SoHeaderIndex) {
                        event.stopPropagation();
                        // Broadcast an event for Add Customer Owned Unit popup to open and set data
                        $scope.CustomerOrderModel.currentSOHeaderIndexForCOU = SoHeaderIndex;                  
                        $scope.$broadcast('AddCustomerOwnedUnitEvent');


                    }
                    
                    $scope.CustomerOrderModel.createLogHoursPopup = function (soHeaderId, index){
                        var coHeaderId = $scope.CustomerOrderModel.coHeaderId;
                        var logHourObject = {};
                        logHourObject.SOHeaderId = soHeaderId;
                        
                        var days = 0;
                        var hour = 0;
                        var minute = 0;
                        for(i=0; i<$scope.CustomerOrderModel.SOHeaderList[index].HoursLoggedList.length; i++){
                            days += $scope.CustomerOrderModel.SOHeaderList[index].HoursLoggedList[i].TimeSpent_D;
                            hour += $scope.CustomerOrderModel.SOHeaderList[index].HoursLoggedList[i].TimeSpent_H;
                            minute += $scope.CustomerOrderModel.SOHeaderList[index].HoursLoggedList[i].TimeSpent_M;
                        }
                        if(minute > 59){
                            hour += Math.floor(minute / 60);
                            minute = minute - (60 * (Math.floor(minute / 60)));
                        }
                        if(hour > 23){
                            days += Math.floor(hour / 24);
                            hour = hour - (24 * (Math.floor(hour / 24)));
                        }
                        var PreviouslyLogged = days+'d '+hour+'h '+minute+'m';
                        logHourObject.PreviouslyLogged = PreviouslyLogged;
                        
                        
                        var totalSec = $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.EstimatedHours * 3600;


                        var days  =  parseInt( totalSec / 86400, 10);
                        var hours = parseInt( totalSec / 3600 ) % 24;
                        var minutes = parseInt( totalSec / 60 ) % 60;

                        
                        var OriginalEstimate = days+ "d " + hours + "h " + minutes+ "m ";
                        
                        logHourObject.OriginalEstimate = OriginalEstimate;


                        $scope.$broadcast('AddHourlogServiceEvent', logHourObject, coHeaderId, index);
                    }
                    
                    $scope.logHourRecordSaveCallback = function(hourLogList, index){




                        $scope.CustomerOrderModel.SOHeaderList[index].HoursLoggedList = hourLogList;
                        $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.Status = hourLogList[0].SOHeaderStatus;
                        $scope.CustomerOrderModel.createHoursLoggedGridEditItem(null);
                    } 

                    
                    $scope.ViewCustomer = {};
                    $scope.COUModal = {};
                    $scope.ViewCustomer.SaveCustomerOwnedUnitsToserver = function (selectedCOURecords) {

                    
                        SOHeaderService.saveCOU(selectedCOURecords , $scope.CustomerOrderModel.Customer.Value)
                            .then(function (successfulSearchResult){




                                $scope.CustomerOrderModel.COUList = successfulSearchResult.COUList;


                                if($scope.CustomerOrderModel.COUList.length == 1){
                                    $scope.CustomerOrderModel.setCurrentCOU($scope.CustomerOrderModel.COUList[0].Id, $scope.CustomerOrderModel.currentSOHeaderIndexForCOU); 

                                }
                                if (angular.element('#AddNewCOU') != null) {
                                    angular.element('#AddNewCOU').modal('hide');

                                }
                                Notification.success('Customer Unit Saved Successfully');

                                
                        },
                            function (errorSearchResult) {
                                responseData = errorSearchResult;
                                Notification.error("Some error occurred, please refresh the page");

                        });


                    }
                    
                    // This code opens the popup of COActionModel
                    $scope.CustomerOrderModel.openCOActionPopup = function () {
                        angular.element('#coaction').modal({
                            backdrop : 'static',
                            keyboard : false
                        });
                        
                    }
                    
                    $scope.CustomerOrderModel.RemoveCustomerOverLay = function () {
                        CustomerInfoService.removeCustomer($scope.CustomerOrderModel.coHeaderId)
                        .then(function (successfulSearchResult) {
                            
                            $scope.CustomerOrderModel.Customer = {};
                            
                            $scope.CustomerOrderModel.MerchandiseItems = successfulSearchResult.COKHList;
                            $scope.CustomerOrderModel.COUList = successfulSearchResult.COUList;
                            
                            $scope.CustomerOrderModel.MerchandiseItems_editRow = [];
                            for (i = 0; i < $scope.CustomerOrderModel.MerchandiseItems.length; i++) {
                                $scope.CustomerOrderModel.MerchandiseItems_editRow.push({
                                    isEdit : false,
                                     MoveTosection:''
                                });
                            }
                            $scope.CustomerOrderModel.populateLeftSideHeadingLables();
                            $('.Customer-info-overlay').hide(); 
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                            $scope.CustomerOrderModel.MerchandiseGhostItems = [];
                        });
                    }
                    
                    $scope.CustomerOrderModel.OpenModal = function () {
                        $scope.CustomerOrderModel.ChangeRecords = 2;
                    }
                    
                    
                    $scope.UpdateMerchandiseListonTabOut = function (successfulSearchResult) {





                        
                        $scope.CustomerOrderModel.MerchandiseItems = successfulSearchResult.COKHList;
                        $scope.CustomerOrderModel.MerchandiseTotal = successfulSearchResult.MerchandiseTotal.toFixed(2);
        
                        /*$scope.CustomerOrderModel.SpecialOrder = successfulSearchResult.specialOrderList;
                        $scope.CustomerOrderModel.SpecialOrder_editRow = [];
        
                        for (i = 0; i < $scope.CustomerOrderModel.MerchandiseItems.length; i++) {
                            if ($scope.CustomerOrderModel.MerchandiseItems[i].isSpecialOrder == true || $scope.CustomerOrderModel.MerchandiseItems[i].Status == "Required") {
                                $scope.CustomerOrderModel.SpecialOrder.push($scope.CustomerOrderModel.MerchandiseItems[i]);
                            }
                        }
        
                        for (i = 0; i < $scope.CustomerOrderModel.SpecialOrder.length; i++) {
                            $scope.CustomerOrderModel.SpecialOrder_editRow.push({
                                isEdit : false
                            });
                        }*/
                    } 
                    
        
                    $scope.UpdateMerchandiseList = function (successfulSearchResult) {


                        debug(successfulSearchResult.COKHList);  
                        $scope.CustomerOrderModel.MerchandiseItems = successfulSearchResult.COKHList;
                        $scope.CustomerOrderModel.MerchandiseTotal = successfulSearchResult.MerchandiseTotal.toFixed(2);
                        
                        $scope.CustomerOrderModel.MerchandiseItems_editRow = [];
                        var HeaderItems = [];
                        var rowNumber = 0;

                        for (i = 0; i < $scope.CustomerOrderModel.MerchandiseItems.length; i++) {
                            if($scope.CustomerOrderModel.MerchandiseItems[i].Id != null){


                                rowNumber++;
                            }
                            HeaderItems.push({
                                isEdit : false,
                                radioValue : 0,
                                optionSelected : 0,
                                rowNumber: rowNumber,
                                lineItems : [],
                                MoveTosection : ''

                            });
                            for (j = 0; j < $scope.CustomerOrderModel.MerchandiseItems[i].COLIList.length; j++) {

                                rowNumber++;
                                HeaderItems[i].lineItems.push({



                                    isEdit : false,
                                    radioValue : 0,
                                    optionSelected : 0,
                                     rowNumber: rowNumber,
                                    MoveTosection : ''


                                });
                            }
                            
                            $scope.CustomerOrderModel.MerchandiseItems_editRow = HeaderItems;




                        }
                        
                       $scope.CustomerOrderModel.UpdateSpecialOrder(successfulSearchResult.specialOrderList);
                      
                    }
                    
                    
                    $scope.CustomerOrderModel.CreateCustomerFromCO =function(){
                          $rootScope.$broadcast('AddCustomerEvent');
                    }
                    
                    $scope.CustomerOrderModel.CreateMerchandiseFromCO =function(){
                         $rootScope.$broadcast('AddPartEvent');
                    }
                      
                    $scope.CustomerOrderModel.CreateKitFromCO =function(){
                         $rootScope.$broadcast('AddKitEvent');
                    }
                    
                    $scope.CustomerOrderModel.CreateLabourFromCO =function(){
                         $rootScope.$broadcast('AddLabourEvent');
                    }
                    
                    $scope.CustomerOrderModel.CreateFeeFromCO =function(){
                         $rootScope.$broadcast('AddFeeEvent');
                    }
                    
                     
                    $scope.$on('ReturnCustomer', function(event, args) {  
                             $scope.CustomerOrderModel.Customer = {
                            Name : args.Name,
                            Value : args.Value
                        }
                        // do what you want to do
                    });
                    
                     $scope.CustomerOrderModel.CreateCustomerFromCO =function(){
                          $rootScope.$broadcast('AddCustomerEvent');
                    
                    } 
                     $scope.CustomerOrderModel.UpdateMerchandiseFromSearchResult = function (successfulSearchResult, isMerchandise) {
                         $scope.UpdateMerchandiseList(successfulSearchResult);
                         $scope.bindCheckOutList(successfulSearchResult.coInvoiceItemRecs);
                         var COKHLength = $scope.CustomerOrderModel.MerchandiseItems_editRow.length - 1;


                         if(COKHLength >= 0 && isMerchandise){
                             if($scope.CustomerOrderModel.MerchandiseItems[COKHLength].Id != null){
                                $scope.CustomerOrderModel.MerchandiseItems_editRow[COKHLength].isEdit = true;

                             }else{
                                $scope.CustomerOrderModel.MerchandiseItems_editRow[COKHLength].lineItems[0].isEdit = true;

                             }
                             setTimeout(function () {
                                 angular.element('#MerchandiseSection').find('input[type=text]').filter(':visible:first').focus();

                             }, 10);
                         }
                         $scope.CustomerOrderModel.COInvoiceHeaderId = ((successfulSearchResult.coInvoiceHeaderRec == null) ? ' ' : successfulSearchResult.coInvoiceHeaderRec.COInvoiceHeaderId);
                        
                    }  
                    
                    
                    $scope.CustomerOrderModel.UpdateSpecialOrder =function(specialOrderList){
                      $scope.CustomerOrderModel.SpecialOrder =specialOrderList
                      $scope.CustomerOrderModel.SpecialOrder_editRow = [];
                        for (i = 0; i < $scope.CustomerOrderModel.SpecialOrder.length; i++) {
                            $scope.CustomerOrderModel.SpecialOrder_editRow.push({
                                isEdit : false
                            });
                        }
                    }
        
                    $scope.UpdateDepositsList = function (depositsList) {
                        $scope.CustomerOrderModel.Deposits = depositsList;
                        $scope.CustomerOrderModel.Deposits_editRow = [];
                        for (i = 0; i < $scope.CustomerOrderModel.Deposits.length; i++) {
                            $scope.CustomerOrderModel.Deposits_editRow.push({
                                isEdit : false
                            });
                        }
                        
                        $scope.CustomerOrderModel.populateLeftSideHeadingLables();
                    }
        
                    $scope.CustomerOrderModel.closeCreateDropDown = function(){
                        angular.element(".customDropdownDiv").removeClass("open");
                    }
                    
                    $scope.UpdatePaymentList = function (PaymentList) {
                        $scope.CustomerOrderModel.Payment = PaymentList;
                        //$scope.CustomerOrderModel.currentPayment = PaymentList;
                        $scope.CustomerOrderModel.Payments_editRow = [];
                        for (i = 0; i < $scope.CustomerOrderModel.Payment.length; i++) {
                            $scope.CustomerOrderModel.Payments_editRow.push({
                                isEdit : false,
                                radioValue : 0
                            });
                        }
                        $scope.CustomerOrderModel.populateLeftSideHeadingLables();
                    }
        
                    $scope.setAllData = function (successfulSearchResult) {


                        $scope.CustomerOrderModel.OrderName = successfulSearchResult.coHeaderRec.OrderName;
                        $scope.CustomerOrderModel.coHeaderDetails.OrderStatus = successfulSearchResult.coHeaderRec.OrderStatus;
                        
                        orderName = successfulSearchResult.coHeaderRec.OrderName;
                        $scope.CustomerOrderModel.CurrentUserLocale = successfulSearchResult.CurrentUserLocale;
                        $scope.CustomerOrderModel.Customer = {
                            Name : successfulSearchResult.coHeaderRec.CustomerName,
                            Value : successfulSearchResult.coHeaderRec.CustomerId
                        }
        
                        $scope.CustomerOrderModel.MerchandiseGhostItems = [];
                        $scope.CustomerOrderModel.COUList = successfulSearchResult.COUList;
                        $scope.CustomerOrderModel.ProviderList = successfulSearchResult.ProviderList;

                        $scope.UpdateMerchandiseList(successfulSearchResult);
                        $scope.UpdateDepositsList(successfulSearchResult.coDeposits);
                        $scope.UpdatePaymentList(successfulSearchResult.coInvoicePaymentRecs);
                        $scope.CustomerOrderModel.InvoiceHistory = successfulSearchResult.COInvoiceHistoryRecs;
                        $scope.CustomerOrderModel.User = {
                            Name : '{!JSENCODE($User.FirstName)}' + ' ' + '{!JSENCODE($User.LastName)}',
                            Value : ''
                        }
        
                        $scope.CustomerOrderModel.COInvoiceHeaderId = ((successfulSearchResult.coInvoiceHeaderRec == null) ? ' ' : successfulSearchResult.coInvoiceHeaderRec.COInvoiceHeaderId);
                        $scope.bindCheckOutList(successfulSearchResult.coInvoiceItemRecs);
                        
                        
                       
                    }
                    
                    
                    $scope.CustomerOrderModel.loadCOonAdd = function(){
                        $scope.LoadCustomerOrder();
                    }
                    
                    $scope.CustomerOrderModel.refreshCustomerOrder = function(){
                        $scope.CustomerOrderModel.isrefresh = true;
                        $scope.LoadCustomerOrder();
                    }
                    
                    $scope.LoadCustomerOrder = function ()
                    {
                    	if($scope.CustomerOrderModel.coHeaderId == null || $scope.CustomerOrderModel.coHeaderId == undefined) {
                        	$scope.CustomerOrderModel.coHeaderId = "{!JSENCODE(URLENCODE($CurrentPage.parameters.id))}" ? "{!JSENCODE(URLENCODE($CurrentPage.parameters.id))}" : null;
                        }











                        if($scope.CustomerOrderModel.coHeaderId == null){
                            $scope.CustomerOrderModel.coHeaderDetails = {};
                            $scope.CustomerOrderModel.InvoiceHistory={};
                            $scope.CustomerOrderModel.CustomerInfo = [];
                            $scope.CustomerOrderModel.CheckOutItems = [];
                            $scope.CustomerOrderModel.Payment=[];
                            $scope.CustomerOrderModel.Deposits=[];
                            $scope.CustomerOrderModel.MerchandiseItems=[]; 
                            $scope.CustomerOrderModel.MerchandiseGhostItems = [];
                            $scope.CustomerOrderModel.serviceOrderList=[];
                            $scope.CustomerOrderModel.AllSectionList = [];
                            $scope.CustomerOrderModel.SOHeaderList=[];  
                            $scope.CustomerOrderModel.SectionList =[];  
                            $scope.CustomerOrderModel.VendorOrderListByVendorId = [];
                            $scope.CustomerOrderModel.Customer = {};
                            $scope.CustomerOrderModel.populateLeftSideHeadingLables();
                            $timeout(function(){$scope.AddToSearch('Customer:');}, 10); 
                        }else{


                            CustomerInfoService.getCOHeaderDetails($scope.CustomerOrderModel.coHeaderId)
                            .then(function (successfulSearchResult) {
                            	debug("not data inside customer")


                            	debug(successfulSearchResult);
                                $scope.CustomerOrderModel.coHeaderDetails=successfulSearchResult.coHeaderRec;
								$scope.CustomerOrderModel.IsTaxIncludingPricing = successfulSearchResult.IsTaxIncludingPricing;
                                

                                $scope.setAllData(successfulSearchResult);




                                $scope.ShowContent = true;
                                
                                
                                var custId= $scope.CustomerOrderModel.Customer.Value;
                                    
                               if(custId !=null){
                                      CustomerInfoService.customerInfo(custId).then(function (customerRecord) {
                                     			debug("customerRecord");
                                                debug(customerRecord);    


                                                if (customerRecord.length > 0) {
                                                    
                                                    
                                                    $scope.CustomerOrderModel.setPreffered(customerRecord[0]);
                                                  
                                                    
                                               } 
                                            });
                               
                               
                               }    
                                
                               $scope.$watch('CustomerOrderModel.Customer.Name', function (newVal, oldVal) {
                                    if(newVal !=oldVal){
                                    debug('***************' + newVal)
                                            if($scope.CustomerOrderModel.COUList.length == 0 && $scope.CustomerOrderModel.SOHeaderList != undefined){
                                                for(i=0; i< $scope.CustomerOrderModel.SOHeaderList.length; i++){
                                                    $scope.CustomerOrderModel.SOHeaderList[i].SOHeaderInfo.selectedCOU = {}
                                                    $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.selectedProvider = {};
                                                }
                                            }
                                            if($scope.CustomerOrderModel.Customer.Value == null || $scope.CustomerOrderModel.Customer.Value == ""){
                                                return;
                                            }
                                            CustomerInfoService.customerInfo( $scope.CustomerOrderModel.Customer.Value).then(function (customerRecord) {
                                                if (customerRecord.length > 0) {
                                                   $scope.CustomerOrderModel.setPreffered(customerRecord[0]);
                                                   debug('customer change watch called');
                                               } 
                                            });
                                        }
                               });  
                                
                                
    
                                $timeout(function(){$scope.AddToSearch('Customer:');}, 1000); 
                            },
                                function (errorSearchResult) {
                                responseData = errorSearchResult;
                                Notification.error('Some Error Occured please Try later');
                                $scope.CustomerOrderModel.isrefresh = false;
                            });
                            $scope.CustomerOrderModel.LoadServiceOrder();
                        }
                        
                    }
					$scope.CustomerOrderModel.ReturnCustomerDetails = function(CustomerId, CustomerName, coHeaderId){
        				debug('ReturnCustomerDetails');
        				$scope.CustomerOrderModel.Customer.Value = CustomerId;
        				$scope.CustomerOrderModel.Customer.Name = CustomerName;
        				$scope.CustomerOrderModel.coHeaderId = coHeaderId;
        			}

                    $scope.bindCheckOutList = function (coInvoiceItemRecs) {
                        $scope.CustomerOrderModel.CheckOutItems = [];
                        for(i = 0; i < coInvoiceItemRecs.length; i++) {
                            if(coInvoiceItemRecs[i].COLineItemId != null ){
                                $scope.CustomerOrderModel.CheckOutItems.push(coInvoiceItemRecs[i]);
                            } else {
                                if(coInvoiceItemRecs[i].IsFinalizable && coInvoiceItemRecs[i].IsActive){
                                    coInvoiceItemRecs[i].IsActive = true;
                                } else {
                                    coInvoiceItemRecs[i].IsActive = false;
                                }
                                $scope.CustomerOrderModel.CheckOutItems.push(coInvoiceItemRecs[i]);
                            }
                        }
                        $scope.CustomerOrderModel.sortCheckout();
                    }
                    
                    
                    
                    $scope.CustomerOrderModel.changeCheckoutMode = function(mode){
                    	if($scope.CustomerOrderModel.Payment.length != 0){
                    		Notification.error('Can\'t change checkout mode after payment');
                    		return;
                    	}


                    	if(mode == undefined){
                    		$scope.CustomerOrderModel.checkOutMode = 'Customer';
                    	}else{

                    		$scope.CustomerOrderModel.checkOutMode = mode;
                    	}

                    	$scope.CustomerOrderModel.sortCheckout();
                    
                    }
					

					$scope.CustomerOrderModel.allowCheckoutSort = true;
					$scope.CustomerOrderModel.sortCheckout = function(){
						var checkoutItems = [];
						var customerCheckouts = _.filter($scope.CustomerOrderModel.CheckOutItems, function(item){ return item.CheckoutType == 'Customer'; });
						var internalCheckouts = _.filter($scope.CustomerOrderModel.CheckOutItems, function(item){ return item.CheckoutType == 'Internal'; });
						var thirdPartyCheckouts = _.filter($scope.CustomerOrderModel.CheckOutItems, function(item){ return item.CheckoutType == 'Third-Party'; });
						

						if(customerCheckouts.length == 0 && internalCheckouts.length == 0){
							$scope.CustomerOrderModel.checkOutMode = 'Third-Party';
						}else if(internalCheckouts.length == 0 && thirdPartyCheckouts.length == 0){
							$scope.CustomerOrderModel.checkOutMode = 'Customer';
						}else if(thirdPartyCheckouts.length == 0 && customerCheckouts.length == 0){
							$scope.CustomerOrderModel.checkOutMode = 'Internal';
						}
						


						debug('sort checkout');
						debug(customerCheckouts);
						debug(internalCheckouts);
						debug(thirdPartyCheckouts);
						if($scope.CustomerOrderModel.checkOutMode == 'Customer'){
							var selectableCustomerCheckouts = _.filter(customerCheckouts, function(item){ return item.IsInvoiceable == true; });
							var nonSelectableCustomerCheckouts = _.filter(customerCheckouts, function(item){ return item.IsInvoiceable == false; });
							customerCheckouts = [];
							customerCheckouts = customerCheckouts.concat(selectableCustomerCheckouts);
							customerCheckouts = customerCheckouts.concat(nonSelectableCustomerCheckouts);
							checkoutItems = checkoutItems.concat(customerCheckouts);
							angular.forEach(thirdPartyCheckouts, function(value, key){
								value.IsActive = false;
							});

							angular.forEach(internalCheckouts, function(value, key){
								value.IsActive = false;
							});

							checkoutItems = checkoutItems.concat(thirdPartyCheckouts);
							checkoutItems = checkoutItems.concat(internalCheckouts);
						}else if($scope.CustomerOrderModel.checkOutMode == 'Third-Party'){
							checkoutItems = checkoutItems.concat(thirdPartyCheckouts);
							angular.forEach(customerCheckouts, function(value, key){
								value.IsActive = false;
							});

							angular.forEach(internalCheckouts, function(value, key){
								value.IsActive = false;
							});

							checkoutItems = checkoutItems.concat(customerCheckouts);
							checkoutItems = checkoutItems.concat(internalCheckouts);
						}else if($scope.CustomerOrderModel.checkOutMode == 'Internal'){
							checkoutItems = checkoutItems.concat(internalCheckouts);
							angular.forEach(customerCheckouts, function(value, key){
								value.IsActive = false;
							});

							angular.forEach(thirdPartyCheckouts, function(value, key){
								value.IsActive = false;
							});

							checkoutItems = checkoutItems.concat(customerCheckouts);
							checkoutItems = checkoutItems.concat(thirdPartyCheckouts);
						}

						debug(checkoutItems);
						$scope.CustomerOrderModel.CheckOutItems = checkoutItems;
						if(!$scope.CustomerOrderModel.allowCheckoutSort){  
                        	$scope.UpdateCheckout();
                        	$scope.CustomerOrderModel.allowCheckoutSort = true;
                        }else{
                        	$scope.CustomerOrderModel.allowCheckoutSort = false;
                        }
						
					}
					
					
					$scope.CustomerOrderModel.checkoutModeContainerShown = function(){
                    	var count = 0
                    	if($scope.CustomerOrderModel.checkoutModeVisible('Customer')){
                    		count++;
                    	}
                    	if($scope.CustomerOrderModel.checkoutModeVisible('Third-Party')){
                    		count++;
                    	}
                    	if($scope.CustomerOrderModel.checkoutModeVisible('Internal')){
                    		count++;
                    	}
                    	var isVisible = count > 1 ? true : false;
                    	return isVisible;

                    }
                    

                    $scope.CustomerOrderModel.checkoutModeVisible = function(Type){
                    	if(_.findIndex($scope.CustomerOrderModel.CheckOutItems, {CheckoutType: Type}) > -1){
                    		return true;
                    	}


                    	return false;
                    }
                    
                    
                    $scope.AddToSearch = function (objectName) {
                     	var ObjectVal = objectName;
                    	if(ObjectVal == 'Merchandise:'){ObjectVal = 'Part__c'}
                        $scope.CustomerOrderModel.ObjectSelected = {  
                            Name : objectName,
                            Value : ObjectVal


                        }
                        $timeout($scope.setFocus, 500);
                    }
                    
                    $scope.setFocusWithMerchandise = function () {
                       // $scope.AddToSearch('Merchandise:');
                        
                         $scope.CustomerOrderModel.ObjectSelected = {  
                            Name : 'Merchandise:',
                            Value : 'Part__c'
                        }
                         $timeout($scope.setFocus, 500);
                        //angular.element('#CO_SearchToAdd_value').focus();
                    }
        
                    $scope.setFocus = function () {
                        angular.element('#CO_SearchToAdd_value').focus();
                    }
                    
                    $scope.setDeductibleFocus = function (index) {
                        var id = '#DeductibleAmount' +index;
                        angular.element(id).focus();
                    }
                    $scope.CustomerOrderModel.deposit_method = "Cash";
                    $scope.CustomerOrderModel.deposit_Amount = "";
                    $scope.CustomerOrderModel.isReverseDeposit = false;
        
                    $scope.CustomerOrderModel.addDeposit = function () {
                        $scope.CustomerOrderModel.isDepositAmountError = false;
                        var deposits = [];
                        var depositModel = {};
                        var maxDeposit = 999999.99;
                        depositModel.PaymentMethod = $scope.CustomerOrderModel.deposit_method;
                        depositModel.Amount = $scope.CustomerOrderModel.deposit_Amount;
                        depositModel.COHeaderId = $scope.CustomerOrderModel.coHeaderId;
                        if (depositModel.Amount == "") {
                            $scope.CustomerOrderModel.isDepositAmountError = true;
                            $scope.CustomerOrderModel.isDepositAmountErrorMsg = "Please Enter Amount";
                            return;
                        } else if (( + (depositModel.Amount)).toFixed(2) == 0) {
                            $scope.CustomerOrderModel.isDepositAmountError = true;
                            $scope.CustomerOrderModel.isDepositAmountErrorMsg = "Amount Can't be Zero";
                            return;
                        } else if (isNaN(depositModel.Amount)) {
                            $scope.CustomerOrderModel.isDepositAmountError = true;
                            $scope.CustomerOrderModel.isDepositAmountErrorMsg = "Amount Should be Numeric";
                            return;
                        } else if (depositModel.Amount < 0 && !$scope.CustomerOrderModel.isReverseDeposit) {
                            $scope.CustomerOrderModel.isDepositAmountError = true;
                            $scope.CustomerOrderModel.isDepositAmountErrorMsg = "Amount Should be Positive";
                            return;
                        } else if (depositModel.Amount < -1 * $scope.CustomerOrderModel.calculateDepositTotal()) {
                            $scope.CustomerOrderModel.isDepositAmountError = true;
                            $scope.CustomerOrderModel.isDepositAmountErrorMsg = "Total can't be Negative";
                            return;
                        } else if (depositModel.Amount > maxDeposit) {
                            $scope.CustomerOrderModel.isDepositAmountError = true;
                            $scope.CustomerOrderModel.isDepositAmountErrorMsg = "Amount cannot exceed 6 digits";
                            return;
                        }
                        depositModel.Amount = ( + (depositModel.Amount)).toFixed(2);
                        deposits.push(depositModel);
        
                        CustomerInfoService.AddDeposit(JSON.stringify(deposits))
                        .then(function (successfulSearchResult) {
                            $scope.UpdateDepositsList(successfulSearchResult);
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                        });
                        $scope.CustomerOrderModel.isReverseDeposit = false;
                        $scope.CustomerOrderModel.deposit_Amount = "";
                        $scope.CustomerOrderModel.deposit_method = "Cash";
                    }
        
                    $scope.CustomerOrderModel.Payment_method = "Cash";
                    $scope.CustomerOrderModel.Payment_Amount = "";
                    $scope.CustomerOrderModel.PaymentReverseLink = null;
                    $scope.CustomerOrderModel.isReversePayment = false;
        
        			$scope.CustomerOrderModel.blurHide = function() {
        				$scope.CustomerOrderModel.isPaymentAmountError = false;
        			}
        
                    $scope.CustomerOrderModel.addPayment = function () {
                        if($scope.CustomerOrderModel.Customer.Value == undefined || $scope.CustomerOrderModel.Customer.Value == null || $scope.CustomerOrderModel.Customer.Value == ''){
                            Notification.error('First add customer to Make Payment');
                            return;

                        }
                        $scope.CustomerOrderModel.isPaymentAmountError = false;
                        var Payment = [];
                        var PaymentModel = {};
                        var maxPayment = 999999.99;
                        PaymentModel.ReverseLink = $scope.CustomerOrderModel.PaymentReverseLink;
                        PaymentModel.PaymentMethod = $scope.CustomerOrderModel.Payment_method;
                        PaymentModel.Amount = $scope.CustomerOrderModel.Payment_Amount;
                        PaymentModel.COInvoiceHeaderId = $scope.CustomerOrderModel.COInvoiceHeaderId;



                        if (PaymentModel.Amount == "") {
                            $scope.CustomerOrderModel.isPaymentAmountError = true;
                            $scope.CustomerOrderModel.isPaymentAmountErrorMsg = "Please Enter Amount";
                            return;
                        } else if (( + (PaymentModel.Amount)).toFixed(2) == 0) {  
                            $scope.CustomerOrderModel.isPaymentAmountError = true;
                            $scope.CustomerOrderModel.isPaymentAmountErrorMsg = "Amount Can't be Zero";
                            return;
                        } else if (isNaN(PaymentModel.Amount)) {
                            $scope.CustomerOrderModel.isPaymentAmountError = true;
                            $scope.CustomerOrderModel.isPaymentAmountErrorMsg = "Amount Should be Numeric";
                            return;
                        } else if (PaymentModel.Amount < 0 && !$scope.CustomerOrderModel.isReversePayment && !$scope.CustomerOrderModel.IsPartReturn) {
                            $scope.CustomerOrderModel.isPaymentAmountError = true;
                            $scope.CustomerOrderModel.isPaymentAmountErrorMsg = "Amount Should be Positive";
                            return;
                        } else if (PaymentModel.PaymentMethod == 'Use Deposit' && PaymentModel.Amount > ($scope.CustomerOrderModel.calculateDepositTotal() - $scope.CustomerOrderModel.calculateDepositUsed())) {
                            $scope.CustomerOrderModel.isPaymentAmountError = true;
                            $scope.CustomerOrderModel.isPaymentAmountErrorMsg = "Deposit Not Available";
                            return;
                        } else if (PaymentModel.Amount > maxPayment) {
                            $scope.CustomerOrderModel.isPaymentAmountError = true;
                            $scope.CustomerOrderModel.isPaymentAmountErrorMsg = "Amount cannot exceed 6 digits";
                            return;
                        }else if (!$scope.CustomerOrderModel.IsPartReturn && (PaymentModel.Amount < -1 * $scope.CustomerOrderModel.calculatePaymentTotal())) {
                            $scope.CustomerOrderModel.isPaymentAmountError = true;
                            $scope.CustomerOrderModel.isPaymentAmountErrorMsg = "Total can't be Negative";
                            return;
                        } else if(PaymentModel.PaymentMethod == 'Use Deposit' && $scope.CustomerOrderModel.IsPartReturn && PaymentModel.Amount < 0) {
                            $scope.CustomerOrderModel.isPaymentAmountError = true;
                            $scope.CustomerOrderModel.isPaymentAmountErrorMsg = "Deposit cannot be used in Part Return Case";
                            return;

                        }else if(!$scope.CustomerOrderModel.allowFromPopup && PaymentModel.Amount - $scope.CustomerOrderModel.calculateBalanceDue() > 0){
                        	angular.element('#payment_ConfirmBox').show();
                        	return;

                        }
                        PaymentModel.Amount = ( + (PaymentModel.Amount)).toFixed(2);
                        Payment.push(PaymentModel);
                        CustomerInfoService.AddPayment(JSON.stringify(Payment))
                        .then(function (successfulResult) {
                            $scope.CustomerOrderModel.isReversePayment = false;
                            $scope.CustomerOrderModel.PaymentReverseLink = null;
                            $scope.CustomerOrderModel.Payment_Amount = "";
                            $scope.UpdatePaymentList(successfulResult);
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                        });
                        $scope.CustomerOrderModel.isReversePayment = false;
                        $scope.CustomerOrderModel.PaymentReverseLink = null;
                        $scope.CustomerOrderModel.Payment_Amount = "";
                        $scope.CustomerOrderModel.Payment_method = "Cash";
                    }
        
					$scope.CustomerOrderModel.payment_Response = function(response){
        				if(response){
        					angular.element('#payment_ConfirmBox').hide();
        					$scope.CustomerOrderModel.allowFromPopup = true;
        					$scope.CustomerOrderModel.addPayment();
        					$scope.CustomerOrderModel.allowFromPopup = false;
        					
        				}
        				else{



        					angular.element('#payment_ConfirmBox').hide();
        					$scope.CustomerOrderModel.allowFromPopup = false;
        				}
        			
        			}



                    //End
                    //dep used 
                    $scope.CustomerOrderModel.calculateDepositUsed = function () {
						var PaymentList = $scope.CustomerOrderModel.Payment;
                        var depositUsed = 0;
                        for (i = 0; i < PaymentList.length; i++) {
                            if (PaymentList[i].PaymentMethod == 'Use Deposit') {
                                depositUsed += PaymentList[i].Amount;



                            }
                        }
                        return depositUsed;
                    }
                    $scope.CustomerOrderModel.calculateLeftPanelDeposits = function(){
						 var deposits = 0;
                        for (i = 0; i < $scope.CustomerOrderModel.Deposits.length; i++) {
                            deposits += $scope.CustomerOrderModel.Deposits[i].Amount;
                        }
                        
                        var PaymentList = $scope.CustomerOrderModel.Payment;
                        var totalPayment = 0;
                        for (i = 0; i < PaymentList.length; i++) {
                            totalPayment += PaymentList[i].Amount;
                        }
                        //debug('totalPayment'+totalPayment);
                        
                        deposits += totalPayment;
                        
                        deposits = deposits.toFixed(2);
                        deposits = deposits - $scope.CustomerOrderModel.calculateDepositUsed();
                        return deposits;
                    }
                    
                    
                    $scope.CustomerOrderModel.calculateLeftPanelTotalDue = function(){
                        var ORDERTOTAL = $scope.CustomerOrderModel.calculateOrderTotal();
                        var DEPOSITS = $scope.CustomerOrderModel.calculateLeftPanelDeposits();
                        var INVOICED = $scope.CustomerOrderModel.calculateInvoiceHistoryTotal();
                        var totalDue = ORDERTOTAL - DEPOSITS - INVOICED;
                        
                        return totalDue.toFixed(2);
                    }
        
                    
                    $scope.CustomerOrderModel.calculateBalanceDue = function () {
        
                        var CheckoutItemList = $scope.CustomerOrderModel.CheckOutItems;
                        var PaymentList = $scope.CustomerOrderModel.Payment;
                        var ChekoutAmt = 0;
                        var balanceDue = 0;
                        var totalPayment = 0;
                        $scope.CustomerOrderModel.IsPartReturn = false;
                        
                        for (i = 0; i < CheckoutItemList.length; i++) {
                            if (CheckoutItemList[i].IsActive) {
                                if(CheckoutItemList[i].Total < 0) {
                                    $scope.CustomerOrderModel.IsPartReturn = true;
                                }
                                if($scope.CustomerOrderModel.IsTaxIncludingPricing){
                                	ChekoutAmt += CheckoutItemList[i].Total
                                }else{
                                	ChekoutAmt += (CheckoutItemList[i].Total + CheckoutItemList[i].TaxAmount);
                                }
                                
                            }
                        }
                        
                        for (i = 0; i < PaymentList.length; i++) {
                            totalPayment += PaymentList[i].Amount;
                        }
                        if (ChekoutAmt != null && totalPayment != null) {
                            balanceDue = (ChekoutAmt.toFixed(2) - totalPayment.toFixed(2));
                        }
                        return balanceDue.toFixed(2);
                    }
        
                    $scope.CustomerOrderModel.EnableFinaliseInvoice = function () {
                        var CheckoutItemList = $scope.CustomerOrderModel.CheckOutItems;
                        var IsEnable = false;
                        if($scope.CustomerOrderModel.checkOutMode == 'Customer'){
                        	var balanceDue = $scope.CustomerOrderModel.calculateBalanceDue();
        
	                        if (balanceDue == 0) {
	                            for (i = 0; i < CheckoutItemList.length; i++) {
	                                if (CheckoutItemList[i].IsActive) {
	                                    IsEnable = true;
	                                    break;
	                                }
	                            }
	                        }
                        }else{
                        	IsEnable = true;
                        }
                        return IsEnable;
                    }
                    
                    
                    $scope.CustomerOrderModel.EnableFinaliseOrder = function () {
                        var CheckoutItemList = $scope.CustomerOrderModel.CheckOutItems;
                        var IsEnable = true;
        
                        for (i = 0; i < CheckoutItemList.length; i++) {
                            if(!(CheckoutItemList[i].IsFinalizable && CheckoutItemList[i].IsActive)) {
                                IsEnable = false;
                                break;
                            }
                        }
                        return IsEnable;
                    }
        
                    $scope.CustomerOrderModel.calculateInvoiceHistoryTotal = function () {
                        var invoiceHistoryTotal = 0;
                        for (i = 0; i < $scope.CustomerOrderModel.InvoiceHistory.length; i++) {
                            invoiceHistoryTotal += $scope.CustomerOrderModel.InvoiceHistory[i].Total;
                        }
                        invoiceHistoryTotal = invoiceHistoryTotal.toFixed(2);
                        return invoiceHistoryTotal;
                    }


        
                    $scope.CustomerOrderModel.MerchandiseGoAction = function(radioValue, kitHeaderId, Id, kitHeaderIndex, kitLineItemIndex){
                        
                        var removelineitemId;
                        if(radioValue == 0){
                            if(kitHeaderId != null){
                                //$scope.CustomerOrderModel.removeServiceItem(kitHeaderId, index, soHederIndex);
                                debug('remove Kit Header');
                                removelineitemId = kitHeaderId;
                            }else{
                                //$scope.CustomerOrderModel.removeServiceItem(Id, index, soHederIndex);
                                debug('remove Line item');


                                removelineitemId = Id;
                            }
                            debug(removelineitemId);
                            CustomerInfoService.removeLineItemsInMerchGrid(removelineitemId, $scope.CustomerOrderModel.coHeaderId)
                            .then(function (successfulSearchResult) {
                                $scope.UpdateMerchandiseList(successfulSearchResult);
                                $scope.bindCheckOutList(successfulSearchResult.coInvoiceItemRecs);
                                $scope.CustomerOrderModel.populateLeftSideHeadingLables();
                            },
                                function (errorSearchResult) {
                                responseData = errorSearchResult;

                            });   
                        }else if(radioValue == 1){
                            //$scope.CustomerOrderModel.breakServiceKitLineItem(kitHeaderId, index, soHederIndex);
                            debug('Break Kit');


                            CustomerInfoService.splitCOKHItem(kitHeaderId, $scope.CustomerOrderModel.coHeaderId)
                            .then(function (successfulSearchResult) {
                                $scope.UpdateMerchandiseList(successfulSearchResult);
                                $scope.bindCheckOutList(successfulSearchResult.coInvoiceItemRecs);
                                $scope.CustomerOrderModel.populateLeftSideHeadingLables();

                            },
                                function (errorSearchResult) {
                                responseData = errorSearchResult;


                            });             
                        }
                        else if(radioValue == 2){
                            //debug('Generate Special Order'+$scope.CustomerOrderModel.MerchandiseItems_editRow[kitHeaderIndex].lineItems[kitLineItemIndex].optionSelected);  
                            $scope.CustomerOrderModel.MerchandiseItems_editRow[kitHeaderIndex].lineItems[kitLineItemIndex].optionSelected;
                            $scope.createSpecialOrder($scope.CustomerOrderModel.MerchandiseItems[kitHeaderIndex].COLIList[kitLineItemIndex], $scope.CustomerOrderModel.MerchandiseItems_editRow[kitHeaderIndex].lineItems[kitLineItemIndex].optionSelected);
                           
                          
                        }else if (radioValue == 3 ){
                                        if(kitHeaderId !=null){
                                                if($scope.CustomerOrderModel.MerchandiseItems_editRow[kitHeaderIndex].MoveTosection !='' || $scope.CustomerOrderModel.MerchandiseItems_editRow[kitHeaderIndex].MoveTosection == null){
                                                        var Idfrom = 'Merchandise' ;
                                                        SOHeaderService.moveLineItem(Idfrom,$scope.CustomerOrderModel.MerchandiseItems_editRow[kitHeaderIndex].MoveTosection,kitHeaderId,$scope.CustomerOrderModel.coHeaderId).then(function(successfulSearchResult){
                                                                    $scope.UpdateMerchandiseList(successfulSearchResult);
                                                                    $scope.bindCheckOutList(successfulSearchResult.coInvoiceItemRecs);
                                                                    $scope.CustomerOrderModel.populateLeftSideHeadingLables();
                                                                     $scope.CustomerOrderModel.LoadServiceOrder();
                                                        });
                                                        
                                                }
                                        }else{
                                                        var Idfrom = 'Merchandise' ;
                                                        SOHeaderService.moveLineItem(Idfrom,$scope.CustomerOrderModel.MerchandiseItems_editRow[kitHeaderIndex].lineItems[kitLineItemIndex].MoveTosection,Id,$scope.CustomerOrderModel.coHeaderId).then(function(successfulSearchResult){
                                                                    $scope.UpdateMerchandiseList(successfulSearchResult);
                                                                    $scope.bindCheckOutList(successfulSearchResult.coInvoiceItemRecs);
                                                                    $scope.CustomerOrderModel.populateLeftSideHeadingLables();
                                                                    $scope.CustomerOrderModel.LoadServiceOrder();
                                                        })
                                        
                                        }

                       }
                    

                        /*
                        if ($scope.CustomerOrderModel.MerchandiseItems_editRow[index].radioValue == 1) {
                            $scope.removeMerchandiseItem($scope.CustomerOrderModel.MerchandiseItems[index].CoLineItemId);
                        } else if ($scope.CustomerOrderModel.MerchandiseItems_editRow[index].radioValue == 2) {
                            $scope.CustomerOrderModel.MerchandiseItems_editRow[index].isError = false;
                            debug('selected option'+$scope.CustomerOrderModel.MerchandiseItems_editRow[index].optionSelected);
                            if($scope.CustomerOrderModel.MerchandiseItems_editRow[index].optionSelected == 0){
                                $scope.CustomerOrderModel.MerchandiseItems_editRow[index].isError = true;
                                return;
                            }
                            
                            $scope.createSpecialOrder($scope.CustomerOrderModel.MerchandiseItems[index], $scope.CustomerOrderModel.MerchandiseItems_editRow[index].optionSelected);
                            
                        }*/
                    }
        
                    $scope.removeMerchandiseItem = function (id) {
                        CustomerInfoService.removeCOLineItem(id, $scope.CustomerOrderModel.coHeaderId)
                        .then(function (successfulSearchResult) {
                            $scope.UpdateMerchandiseList(successfulSearchResult);
                            $scope.bindCheckOutList(successfulSearchResult.coInvoiceItemRecs);
                            
                            $scope.CustomerOrderModel.populateLeftSideHeadingLables();
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                        });
                    }
        
        
                    $scope.createSpecialOrder = function (merchItem, voHeaderId) {
                        //var COlineItems = [];
                        $scope.CustomerOrderModel.itemsPageSortAttrsJSON = {
                            ChangesCount    :   0,
                            CurrentPage     :   1,
                            PageSize        :   10,
                            Sorting :   [{
                                FieldName       :   "ItemDesc",
                                SortDirection   :   "ASC"
                            }]
                        };
                        try{
                            $scope.CustomerOrderModel.itemsPageSortAttrsJSON.PageSize = '{!JSENCODE(TEXT(Related_List_Page_Size))}';
                        } catch (ex){}
                        
                        $scope.CustomerOrderModel.customersPageSortAttrsJSON = {
                            ChangesCount    :   0,
                            CurrentPage     :   1,
                            PageSize        :   10,
                            Sorting :   [{
                                FieldName       :   "Item",
                                SortDirection   :   "ASC"
                            }]
                        };
                        try{
                            $scope.CustomerOrderModel.customersPageSortAttrsJSON.PageSize = '{!JSENCODE(TEXT(Related_List_Page_Size))}';
                        } catch (ex){}
                        
                        $scope.CustomerOrderModel.stocksPageSortAttrsJSON = {
                            ChangesCount    :   0,
                            CurrentPage     :   1,
                            PageSize        :   10,
                            Sorting :   [{
                                FieldName       :   "Item",
                                SortDirection   :   "ASC"
                            }]
                        };
                        try{
                            $scope.CustomerOrderModel.stocksPageSortAttrsJSON.PageSize = '{!JSENCODE(TEXT(Related_List_Page_Size))}';
                        } catch (ex){}
                        
        
                        merchItem.isSpecialOrder = true;
                        //COlineItems.push(JSON.stringify(merchItem));
                        debug(merchItem);


                        CustomerInfoService.createSpecialOrder(merchItem.partId, merchItem.CoLineItemId, voHeaderId, $scope.CustomerOrderModel.coHeaderId, JSON.stringify($scope.CustomerOrderModel.itemsPageSortAttrsJSON), JSON.stringify($scope.CustomerOrderModel.customersPageSortAttrsJSON), JSON.stringify($scope.CustomerOrderModel.stocksPageSortAttrsJSON))
                        .then(function (successfulSearchResult) {
                            debug(successfulSearchResult);
                            $scope.UpdateMerchandiseList(successfulSearchResult);
                            debug('special order created');
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                        });
                    }

                    /*
                    $scope.CustomerOrderModel.closeEditMerchRow = function (isUpdateGrid) {
                        var lineitem = [];
        
                        for (i = 0; i < $scope.CustomerOrderModel.MerchandiseItems_editRow.length; i++) {
                            if ($scope.CustomerOrderModel.MerchandiseItems_editRow[i].isEdit == true) {
                                if ($scope.CustomerOrderModel.MerchandiseItems[i].isSpecialOrder == false) {
                                    if ($scope.CustomerOrderModel.MerchandiseItems[i].Qty == "") {
                                        $scope.CustomerOrderModel.MerchandiseItems[i].Qty = 0;
                                    }
                                    if ($scope.CustomerOrderModel.MerchandiseItems[i].QtyCommitted == "") {
                                        $scope.CustomerOrderModel.MerchandiseItems[i].QtyCommitted = 0;
                                    }
                                    if ($scope.CustomerOrderModel.MerchandiseItems[i].Price == "") {
                                        $scope.CustomerOrderModel.MerchandiseItems[i].Price = 0;
                                    }
                                    lineitem.push(JSON.stringify($scope.CustomerOrderModel.MerchandiseItems[i]));
                                }
                            }
                        }
                        $scope.SaveMerchandiseToserver(lineitem, isUpdateGrid);
                    }
                    */
                    $scope.CustomerOrderModel.SavekitInMerchandise = function(lineItem, editedKitLineItem ,  isUpdateGrid) {
                        debug('SavekitInMerchandise');
                        debug(editedKitLineItem);
                        CustomerInfoService.updateCOKHLineItemsRecalculation(lineItem, $scope.CustomerOrderModel.coHeaderId, editedKitLineItem)
                        .then(function (successfulSearchResult) {
                            debug('saaaaaaaaaaaave');
                            debug(successfulSearchResult);
                            if(isUpdateGrid){
                                $scope.UpdateMerchandiseList(successfulSearchResult);
                            }else{
                                $scope.UpdateMerchandiseListonTabOut(successfulSearchResult);
                            }
                            if(successfulSearchResult.error.ResponseCode == '300'){
                                Notification.error(successfulSearchResult.error.ResponseMeassage);
                            }
                            $scope.bindCheckOutList(successfulSearchResult.coInvoiceItemRecs);
                            $scope.CustomerOrderModel.populateLeftSideHeadingLables();
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                            $scope.searching = false;
                            $scope.CustomerOrderModel.MerchandiseGhostItems = [];
                        });
                    }
                    
                    $scope.SaveMerchandiseToserver = function (lineItem, isUpdateGrid) {
                        if(lineItem[0].IsFee){
                            lineItem[0].QtyCommitted = lineItem[0].Qty;

                        }
                        userService.SaveMerchandiseLineItem($scope.CustomerOrderModel.coHeaderId, JSON.stringify(lineItem))
                        .then(function (successfulSearchResult) {
                            debug('saaaaaaaaaaaave Kit ');
                            debug(successfulSearchResult);
                            if(isUpdateGrid){
                                $scope.UpdateMerchandiseList(successfulSearchResult);
                            }else{
                                $scope.CustomerOrderModel.MerchandiseItems = successfulSearchResult.COKHList;;
                            }
                            $scope.bindCheckOutList(successfulSearchResult.coInvoiceItemRecs);
                            $scope.CustomerOrderModel.populateLeftSideHeadingLables();
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult; 
                            $scope.searching = false;
                            $scope.CustomerOrderModel.MerchandiseGhostItems = [];
                        });

                        
                    }

                    
                    $scope.CustomerOrderModel.VendorOrderListByVendorIdForMerchandise = [];

                    
                    $scope.CustomerOrderModel.editMerchItem = function (event, COKHIndex, COLIIndex, refreshGrid) {
                        if($scope.CustomerOrderModel.coHeaderDetails.OrderStatus == 'Closed'){
                            return;
                        }
                        var isEditModeEnabled = false;
                        var isKit = false;
                        var lineitem = [];
                        var editedKitLineItem = null;
						if(angular.isDefined(event.parentElement)){
	                        if(event.parentElement.id.indexOf('CustomerOrder_SpecialOrderGrid_tbody_expandtr_td') != -1 && event.type !='keydown'){
	                        	return;
	                        }
                        }
                        if((event.target.id.indexOf('CustomerOrder_SpecialOrderGrid_tbody_expandtr_td') != -1 || event.target.id.indexOf('merch_item_row') !=-1)  && event.type !='keydown'){
	                        	debug('condition true');
	                        	return;
	                    }
                        //debug(event.toElement);
                       
                        if(angular.isDefined(event.toElement)){
	                        debug('inside ----');
	                        if((event.toElement.id.indexOf('CustomerOrder_SpecialOrderGrid_tbody_expandtr_td') != -1 || event.toElement.id.indexOf('merch_item_row') !=-1)  && event.type !='keydown'){
	                        	debug('condition true');
	                        	return;
	                        }
	                        
	                        
                        }
                        if(event.target.parentElement.parentElement.id.indexOf('CustomerOrder_SpecialOrderGrid_tbody_expandtr_td') != -1){
                        	return;
                        }
                        if((event.target['type'] == 'text' || event.target['type'] == 'radio' || event.target['type'] == 'select-one' || event.target['type'] == 'select' || event.target['type'] == 'button' ||  event.target['type'] == 'submit'||  event.target['type'] == 'checkbox' || event.target['type'] == 'span') && event.type !='keydown'){
                        	return;
                        }
                        if(event.target['type'] == 'text' && event.type !='keydown'){
                        	return;
                        }
                       
					   for (i = 0; i < $scope.CustomerOrderModel.MerchandiseItems_editRow.length; i++) {
                            if ($scope.CustomerOrderModel.MerchandiseItems_editRow[i].isEdit == true) {
                                isEditModeEnabled = true;
                                lineitem = $scope.CustomerOrderModel.MerchandiseItems[i];
                                if($scope.CustomerOrderModel.MerchandiseItems[i].Id != null){

                                    isKit = true;
                                }
                            }else if(!isEditModeEnabled){
                                for(j = 0; j < $scope.CustomerOrderModel.MerchandiseItems_editRow[i].lineItems.length; j++){
                                    if($scope.CustomerOrderModel.MerchandiseItems_editRow[i].lineItems[j].isEdit == true){

                                        
                                        isEditModeEnabled = true;
                                        if($scope.CustomerOrderModel.MerchandiseItems[i].Id != null){

                                            isKit = true;
                                            lineitem = $scope.CustomerOrderModel.MerchandiseItems[i];
                                            editedKitLineItem = $scope.CustomerOrderModel.MerchandiseItems[i].COLIList[j];

                                        }else{
                                            lineitem.push($scope.CustomerOrderModel.MerchandiseItems[i].COLIList[j]);



                                        }
                                    }
                                }
                            }
                        }
                        
                        if(!isEditModeEnabled) {
                            var lineItem = $scope.CustomerOrderModel.MerchandiseItems[COKHIndex].COLIList[COLIIndex];
                            debug(lineItem);


                            if(COLIIndex != null){
                                if(!(lineItem.Status == 'Invoiced') ){ 
                                    $scope.CustomerOrderModel.MerchandiseItems_editRow[COKHIndex].lineItems[COLIIndex].isEdit = true;

                                    
                                    if($scope.CustomerOrderModel.MerchandiseItems[COKHIndex].COLIList[COLIIndex].VendorId != null){
                                        SOHeaderService.getVendorOrderByVendorId($scope.CustomerOrderModel.MerchandiseItems[COKHIndex].COLIList[COLIIndex].VendorId).then(function(successfulSearchResult){
                                            $scope.CustomerOrderModel.VendorOrderListByVendorIdForMerchandise = successfulSearchResult;
                                            for(i=0; i<$scope.CustomerOrderModel.VendorOrderListByVendorIdForMerchandise.length; i++){
                                                if($scope.CustomerOrderModel.MerchandiseItems[COKHIndex].COLIList[COLIIndex].VONumber == $scope.CustomerOrderModel.VendorOrderListByVendorIdForMerchandise[i].VOName){
                                                    $scope.CustomerOrderModel.MerchandiseItems_editRow[COKHIndex].lineItems[COLIIndex].optionSelected = $scope.CustomerOrderModel.VendorOrderListByVendorIdForMerchandise[i].VOId;







                                                    break;
                                                }
                                            }
                                        })
                                    }
                                }   
                            }else{
                                $scope.CustomerOrderModel.MerchandiseItems_editRow[COKHIndex].isEdit = true;

                            }
                            
                                setTimeout(function () {
                                    angular.element(event.target).closest('tr').next().find('input').filter(':first').focus();
                                }, 10);
                        } else {
                            debug(isKit);
                            debug(lineitem);





                            if(isKit){
                                $scope.CustomerOrderModel.SavekitInMerchandise(JSON.stringify(lineitem), JSON.stringify(editedKitLineItem) , refreshGrid);

                            }else{
                                $scope.SaveMerchandiseToserver(lineitem, refreshGrid);

                            }
                            
                        }
                    }
        
                    // merchandise edit row tab out
                    $scope.CustomerOrderModel.editRowTabOut = function(event, kitHeaderIndex, lineItemIndex){
                        if (!event.shiftKey && event.keyCode == 9) {
                            event.preventDefault();
                            angular.element('#CO_SearchToAdd_value').focus();
                            $scope.CustomerOrderModel.editMerchItem(event, kitHeaderIndex, lineItemIndex , true);

                        }
                   }
                    
                    $scope.CustomerOrderModel.editDeductible = function(event,DeductibleJson, index){
                        if (!event.shiftKey && event.keyCode == 9) {
                            //debug(DeductibleJson);
                            //event.preventDefault();
                            DeductibleJson.SoHeaderId = $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.Id;
                            DeductibleJson.CoHeaderId = $scope.CustomerOrderModel.coHeaderId;
                            //debug(DeductibleJson);
                            SOHeaderService.editDeductibleAmount(JSON.stringify(DeductibleJson))
		                        .then(function (successfulSearchResult) {
		                            //$scope.CustomerOrderModel.LoadServiceOrder();
		                            //angular.element('#CO_SearchToAdd_value').focus();
		                            debug('deductable tab out');
		                            debug(successfulSearchResult);
		                            $scope.bindCheckOutList(successfulSearchResult.coInvoiceItemRecs);
		                        },

		                            function (errorSearchResult) {
		                            responseData = errorSearchResult;
		                        });


                        }
                   }
                   
                   
                   $scope.CustomerOrderModel.getOutstandingItems = function(soHeaderIndex){
                        var itmesCount = 0;
                        var lineItemsList = $scope.CustomerOrderModel.SOHeaderList[soHeaderIndex].SOGridItems;
                        for(var i=0; i<lineItemsList.length; i++){
                            for(var j=0; j<lineItemsList[i].SOKH.SOLIList.length; j++){
                                if(lineItemsList[i].SOKH.SOLIList[j].IsPart && 
                                    (lineItemsList[i].SOKH.SOLIList[j].Status == 'Required' || lineItemsList[i].SOKH.SOLIList[j].Status == 'Ordered')){
                                    itmesCount++;
                                }
                            }                        
                        }
                        return itmesCount;
                   }
                    
                    $scope.CustomerOrderModel.editRowBlur = function(event, kitHeaderIndex, lineItemIndex, focusElementId) {
                        if (!event.shiftKey && event.keyCode == 9) {
                            if($scope.CustomerOrderModel.MerchandiseItems[kitHeaderIndex].COLIList[lineItemIndex].IsPart){
                                setTimeout(function(){ angular.element('#'+focusElementId).focus(); }, 3000);  
                                $scope.CustomerOrderModel.editMerchItem(event, kitHeaderIndex, lineItemIndex, false);

                            }
                        }
                    }
					
					$scope.CustomerOrderModel.editRowBlurCommited = function(event, kitHeaderIndex, lineItemIndex, focusElementId) {
                        if (!event.shiftKey && event.keyCode == 9) {
                            if($scope.CustomerOrderModel.MerchandiseItems[kitHeaderIndex].COLIList[lineItemIndex].IsPart){
                                if($scope.CustomerOrderModel.MerchandiseItems[kitHeaderIndex].COLIList[lineItemIndex].QtyCommitted =='' || $scope.CustomerOrderModel.MerchandiseItems[kitHeaderIndex].COLIList[lineItemIndex].QtyCommitted =='undefined' ){
                                	$scope.CustomerOrderModel.MerchandiseItems[kitHeaderIndex].COLIList[lineItemIndex].QtyCommitted = 0;
                                }

                            }
                        }
                    }
					

                    $scope.CustomerOrderModel.closeEditSpecialOrderRow = function () {
                        for (i = 0; i < $scope.CustomerOrderModel.SpecialOrder_editRow.length; i++) {
                            $scope.CustomerOrderModel.SpecialOrder_editRow[i].isEdit = false;
                        }
                    }
        
                    $scope.CustomerOrderModel.editSpecialOrderItem = function (index) {
if(angular.isDefined(event.parentElement)){
	                        if(event.parentElement.id.indexOf('CustomerOrder_SpecialOrderGrid_tbody_expandtr_td') != -1 && event.type !='keydown'){
	                        	return;
	                        }
                        }
                        if((event.target.id.indexOf('CustomerOrder_SpecialOrderGrid_tbody_expandtr_td') != -1 || event.target.id.indexOf('merch_item_row') !=-1)  && event.type !='keydown'){
	                        	debug('condition true');
	                        	return;
	                    }
                        //debug(event.toElement);
                       
                        if(angular.isDefined(event.toElement)){
	                        debug('inside ----');
	                        if((event.toElement.id.indexOf('CustomerOrder_SpecialOrderGrid_tbody_expandtr_td') != -1 || event.toElement.id.indexOf('merch_item_row') !=-1)  && event.type !='keydown'){
	                        	debug('condition true');
	                        	return;
	                        }
	                        
	                        
                        }
                        if(event.target.parentElement.parentElement.id.indexOf('CustomerOrder_SpecialOrderGrid_tbody_expandtr_td') != -1){
                        	return;
                        }
                        if((event.target['type'] == 'text' || event.target['type'] == 'radio' || event.target['type'] == 'select-one' || event.target['type'] == 'select' || event.target['type'] == 'button' ||  event.target['type'] == 'submit'||  event.target['type'] == 'checkbox' || event.target['type'] == 'span') && event.type !='keydown'){
                        	return;
                        }
                        if(event.target['type'] == 'text' && event.type !='keydown'){
                        	return;
                        }
						
                        if($scope.CustomerOrderModel.coHeaderDetails.OrderStatus == 'Closed'){
                            return;
                        }
                        var isEditModeEnabled = false;
                        for (i = 0; i < $scope.CustomerOrderModel.SpecialOrder_editRow.length; i++) {
                            if ($scope.CustomerOrderModel.SpecialOrder_editRow[i].isEdit == true) {
                                isEditModeEnabled = true;
                            }
                            $scope.CustomerOrderModel.SpecialOrder_editRow[i].isEdit = false;
                        }
                        if (!isEditModeEnabled) {
                            if ($scope.CustomerOrderModel.SpecialOrder[index].Status == 'Required') {
                                $scope.CustomerOrderModel.SpecialOrder_editRow[index].isEdit = true;
                                SOHeaderService.getVendorOrderByVendorId($scope.CustomerOrderModel.SpecialOrder[index].VendorId).then(function(successfulSearchResult){
                                            $scope.CustomerOrderModel.VendorOrderListByVendorIdForSpecialOrder = successfulSearchResult;
                                            for(i=0; i<$scope.CustomerOrderModel.VendorOrderListByVendorIdForMerchandise.length; i++){
                                                if($scope.CustomerOrderModel.MerchandiseItems[index].COLIList[index].VONumber == $scope.CustomerOrderModel.VendorOrderListByVendorIdForMerchandise[i].VOName){
                                                    $scope.CustomerOrderModel.SpecialOrder_editRow[index].lineItems[index].optionSelected = $scope.CustomerOrderModel.VendorOrderListByVendorIdForMerchandise[i].VOId;
                                                    break;
                                                }
                                            }
                                        })
                            }
                        }
                    }
        
                    $scope.CustomerOrderModel.closeEditDepositRow = function () {
                        if (!$scope.CustomerOrderModel.isReverseDeposit) {
                            for (i = 0; i < $scope.CustomerOrderModel.Deposits_editRow.length; i++) {
                                $scope.CustomerOrderModel.Deposits_editRow[i].isEdit = false;
                            }
                        }
                    }
        
                    $scope.CustomerOrderModel.editDepositItem = function (index) {
                        if($scope.CustomerOrderModel.coHeaderDetails.OrderStatus == 'Closed'){
                            return;
                        }
                        var isEditModeEnabled = false;
                        for (i = 0; i < $scope.CustomerOrderModel.Deposits_editRow.length; i++) {
                            if ($scope.CustomerOrderModel.Deposits_editRow[i].isEdit == true) {
                                isEditModeEnabled = true;
                            }
                            $scope.CustomerOrderModel.Deposits_editRow[i].isEdit = false;
                        }
                        if (!isEditModeEnabled) {
                            $scope.CustomerOrderModel.Deposits_editRow[index].isEdit = true;
                        }
                    }
        
                    $scope.CustomerOrderModel.ReverseDeposit = function (deposit) {
                        $scope.CustomerOrderModel.isReverseDeposit = true;
                        $scope.CustomerOrderModel.deposit_method = deposit.PaymentMethod;
                        $scope.CustomerOrderModel.deposit_Amount =  - (deposit.Amount);
                    }
        
                    $scope.CustomerOrderModel.calculateDepositTotal = function () {
                        var depositTotal = 0;
                        for (i = 0; i < $scope.CustomerOrderModel.Deposits.length; i++) {
                            depositTotal += $scope.CustomerOrderModel.Deposits[i].Amount;
                        }
                        depositTotal = depositTotal.toFixed(2);
                        return depositTotal;
                    }
                    $scope.CustomerOrderModel.isDeleteServiceOrder = function(soIndex){
                        if(($scope.CustomerOrderModel.SOHeaderList[soIndex].SOGridItems.length>0) || ($scope.CustomerOrderModel.SOHeaderList[soIndex].HoursLoggedList.length>0)
                            || $scope.CustomerOrderModel.SOHeaderList[soIndex].SOHeaderInfo.WorkStatus== 'Complete'
                            || $scope.CustomerOrderModel.SOHeaderList[soIndex].SOHeaderInfo.WorkStatus== 'Reviewed'
                            || $scope.CustomerOrderModel.SOHeaderList[soIndex].SOHeaderInfo.WorkStatus== 'Signed Out'
                            || $scope.CustomerOrderModel.coHeaderDetails.OrderStatus == "Closed")
                        {
                            return false;
                        }
                        else{
                            return true;
                        }
                        
                    }

                    $scope.CustomerOrderModel.closeEditPaymentRow = function () {
                        if (!$scope.CustomerOrderModel.isReversePayment) {
                            for (i = 0; i < $scope.CustomerOrderModel.Payments_editRow.length; i++) {
                                $scope.CustomerOrderModel.Payments_editRow[i].isEdit = false;
                            }
                        }
                    }
        
                    $scope.CustomerOrderModel.editPaymentItem = function (index) {
                        if($scope.CustomerOrderModel.coHeaderDetails.OrderStatus == 'Closed'){
                            return;
                        }
                        var isEditModeEnabled = false;
                        for (i = 0; i < $scope.CustomerOrderModel.Payments_editRow.length; i++) {
                            if ($scope.CustomerOrderModel.Payments_editRow[i].isEdit == true) {
                                isEditModeEnabled = true;
                            }
                            $scope.CustomerOrderModel.Payments_editRow[i].isEdit = false;
                        }
                        if (!isEditModeEnabled) {
                            $scope.CustomerOrderModel.Payments_editRow[index].isEdit = true;
                        }
                    }
                    
                    
                    $scope.CustomerOrderModel.paymentGoAction = function(index, paymentObj){
                    	var selectedOption = $scope.CustomerOrderModel.Payments_editRow[index].radioValue;
                    	if(selectedOption == 0){
                    		$scope.CustomerOrderModel.ReversePayment(paymentObj);
                    	}

                    
                    }
        
                    $scope.CustomerOrderModel.ReversePayment = function (Payment) {
                        $scope.CustomerOrderModel.isReversePayment = true;
                        $scope.CustomerOrderModel.PaymentReverseLink = Payment.COInvoicePaymentId;
                        $scope.CustomerOrderModel.Payment_method = Payment.PaymentMethod;
                        $scope.CustomerOrderModel.Payment_Amount =  - (Payment.Amount);
                    }
        
                    $scope.CustomerOrderModel.calculatePaymentTotal = function () {
                        var PaymentTotal = 0;
                        for (i = 0; i < $scope.CustomerOrderModel.Payment.length; i++) {
                            PaymentTotal += $scope.CustomerOrderModel.Payment[i].Amount;
                        }
                        PaymentTotal = PaymentTotal.toFixed(2);
                        return PaymentTotal;
                    }
                    //END
        
                    $scope.CustomerOrderModel.calculateDepositTotalOverlay = function (event) {
                        var depositsMade = 0;
                        var depositsUsed = 0;
                        var depositsBalance = 0;
        				debug('$scope.CustomerOrderModel.calculatePaymentTotal');
                        // Calculation
                        for (i = 0; i < $scope.CustomerOrderModel.Deposits.length; i++) {
                            depositsMade += $scope.CustomerOrderModel.Deposits[i].Amount;
                        }
                        
                        // This is come from payment section. So for now it is assumed as fixed.
                        depositsUsed = $scope.CustomerOrderModel.calculateDepositUsed();
                        depositsBalance = depositsMade - depositsUsed;
        
                        depositsMade = depositsMade.toFixed(2);
                        depositsUsed = depositsUsed.toFixed(2);
                        depositsBalance = depositsBalance.toFixed(2);
        
                        var fieldsJSON = [{
                                label : 'Deposits Made',
                                value : depositsMade
                            }, {
                                label : 'Deposits Used',
                                value : depositsUsed
                            }, {
                                label : 'DEPOSIT BALANCE',
                                value : depositsBalance
                            }
                        ];
                        $scope.CustomerOrderModel.showPriceInfoOverlay(event, fieldsJSON);
                    }
        
                    $scope.CustomerOrderModel.calculateMerchandiseTotal = function () {
                        var subTotal = 0;
                        for (i = 0; i < $scope.CustomerOrderModel.MerchandiseItems.length; i++) {
                            if ($scope.CustomerOrderModel.CurrentUserLocale == 'en_AU') {
                                subTotal += $scope.CustomerOrderModel.MerchandiseItems[i].SubTotal;
                            } else {
                                subTotal += $scope.CustomerOrderModel.MerchandiseItems[i].SubTotal + ($scope.CustomerOrderModel.MerchandiseItems[i].Qty * $scope.CustomerOrderModel.MerchandiseItems[i].Price * $scope.CustomerOrderModel.MerchandiseItems[i].Tax) / 100;
                            }
                        }
                        subTotal = subTotal.toFixed(2);
                        return '$' + subTotal;
                    }

                    
                    $scope.CustomerOrderModel.calculateOrderTotal = function () {
                        var Total = 0;
                        if(!isNaN($scope.CustomerOrderModel.MerchandiseTotal)){
                            Total = Total + parseFloat($scope.CustomerOrderModel.MerchandiseTotal);

                        }
                        for(i=0; i<$scope.CustomerOrderModel.SOHeaderList.length; i++){
                            Total = Total + parseFloat($scope.CustomerOrderModel.SOHeaderList[i].SOHeaderInfo.Total);

                        }
                        return parseFloat(Total).toFixed(2);


                    }
                    $scope.CustomerOrderModel.deleteSoHeaderInfo = function(soHeaderID){
                        $scope.CustomerOrderModel.closeCreateDropDown();    
                         SOHeaderService.deleteServiceOrder($scope.CustomerOrderModel.coHeaderId, soHeaderID)
                            .then(function (successfulSearchResult) {
                            debug(successfulSearchResult);
                            $scope.CustomerOrderModel.updatedResult = successfulSearchResult;
                                 $scope.CustomerOrderModel.SOHeaderList = successfulSearchResult.SOList;
                                $scope.CustomerOrderModel.pinnedItems = successfulSearchResult.PinnedItemList;
                                $scope.CustomerOrderModel.getServiceOrderList();
                                $scope.CustomerOrderModel.setServiceOrderData();
                                $scope.CustomerOrderModel.resetServiceOrderData();
                                $scope.CustomerOrderModel.createGridEditItem(null);
                                $scope.CustomerOrderModel.populateLeftSideHeadingLables();
                                $scope.CustomerOrderModel.createHoursLoggedGridEditItem(null);
                                setTimeout(function(){ angular.element('[data-toggle="tooltip"]').tooltip(); }, 1000); 
                                var leftPanelLinks = angular.element(window).height() - ( angular.element(".headerNav").height() + angular.element(".orderNumber").height() + angular.element(".sidepaneluserinfo").height() + angular.element(".statusRow").height() + angular.element(".ownerInfo").height() + angular.element(".sideBarTotals").height() + 85);
                                debug("left panel height");
                                debug(leftPanelLinks);


                                angular.element(".leftPanelLinks").css("height",leftPanelLinks); 
                                $scope.CustomerOrderModel.UpdateSpecialOrder(successfulSearchResult.specialOrderList);
                                $scope.bindCheckOutList(successfulSearchResult.coInvoiceItemRecs);
                                 
                                 angular.element('html, body').stop().animate({
                                    scrollTop : 0
                                }, 500, function () {
                                    angular.element(document).on("scroll", function () {
                                        $scope.CustomerOrderModel.onScroll();
                                    });
                                });
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                            Notification.error(errorSearchResult);
                        });
                    
                    
                    }
                    var toaloverlaytimer;
                    //balance due overlay
                    $scope.CustomerOrderModel.calculateTotalOverlay = function (event, SOHeaderId, gridName) {
                        toaloverlaytimer = $timeout(function () {


                            //Deprecated
                            var isAustralianMarket = false;
                            
                            var totalsJson;
                            CustomerInfoService.getGridTotal($scope.CustomerOrderModel.coHeaderId, SOHeaderId, gridName , isAustralianMarket)
                            .then(function (successfulSearchResult) {
                                debug('Total Result');


                                debug(successfulSearchResult);
                                totalsJson = successfulSearchResult;

                                
                                var fieldsJSON = [];

                                fieldsJSON.push({label : 'Parts Total', value : totalsJson.Total_Part.toFixed(2)});
                                fieldsJSON.push({label : 'Fees Total',value : totalsJson.Total_Fee.toFixed(2)});
                                if(SOHeaderId != null){
                                    fieldsJSON.push({label : 'Labours Total',value : totalsJson.Total_Laobur.toFixed(2)});

                                }
                                fieldsJSON.push({label : 'SUB TOTAL',value : totalsJson.Total.toFixed(2)});
                                if(!$scope.CustomerOrderModel.IsTaxIncludingPricing){
                                	angular.forEach(totalsJson.SalesTaxList, function(value, key) {
										fieldsJSON.push({label : value.TaxName,value : value.TaxValue.toFixed(2)});
									});
                                }
                                
                                //fieldsJSON.push({label : 'Sales Tax',value : totalsJson.SalesTax.toFixed(2)});
                                fieldsJSON.push({label : 'Price Override',value : totalsJson.PriceOverrides.toFixed(2)});
                                fieldsJSON.push({label : 'TOTAL',value : (totalsJson.Total + totalsJson.SalesTax).toFixed(2)});


                                if($scope.CustomerOrderModel.IsTaxIncludingPricing){
                                	angular.forEach(totalsJson.SalesTaxList, function(value, key) {
										fieldsJSON.push({label : value.TaxName,value : value.TaxValue.toFixed(2)});
									});
                                }


                                $scope.CustomerOrderModel.showPriceInfoOverlay(event, fieldsJSON);

                            },
                                function (errorSearchResult) {
                                responseData = errorSearchResult;

                            });
                        }, 1000);
                        
                    }
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

                    
                    $scope.CustomerOrderModel.calculateBalanceDueTotalOverlay = function (event) {
                        debug('checkout overlay');
                        var ausTaxRate = '{!JSENCODE(TEXT(Sales_Tax_Rate))}';
                        var CheckoutItemList = $scope.CustomerOrderModel.CheckOutItems;
                        var PaymentList = $scope.CustomerOrderModel.Payment;
                        var merchandise = 0;
                        var salesTax = 0;
                        var totalInvoice = 0;
                        var payments = 0;
        
                        for (i = 0; i < CheckoutItemList.length; i++) {
                            if (CheckoutItemList[i].IsActive) {
                                merchandise += (CheckoutItemList[i].Total);
                                salesTax += (CheckoutItemList[i].TaxAmount)
        
								
        						if($scope.CustomerOrderModel.IsTaxIncludingPricing){
                                	totalInvoice += CheckoutItemList[i].Total;
                                }else{
                                	totalInvoice += (CheckoutItemList[i].Total + CheckoutItemList[i].TaxAmount);

                                }
                            }


                        }
        
                        for (i = 0; i < PaymentList.length; i++) {
                            payments += PaymentList[i].Amount;


                        }


        				var fieldsJSON = [];
                        fieldsJSON.push({label : 'Merchandise', value : (merchandise).toFixed(2)});



                        if(!$scope.CustomerOrderModel.IsTaxIncludingPricing){
                        	fieldsJSON.push({label : 'Sales Tax',  value : (salesTax).toFixed(2)});

                        }
                        fieldsJSON.push({label : 'Total Invoice ',value : (totalInvoice).toFixed(2)});


                        fieldsJSON.push({label : 'Less: Payments',value : (payments).toFixed(2)});



                        if($scope.CustomerOrderModel.IsTaxIncludingPricing){
                        	fieldsJSON.push({label : 'Sales Tax',  value : (salesTax).toFixed(2)});
                        }

                        $scope.CustomerOrderModel.showPriceInfoOverlay(event, fieldsJSON);
                    }
        
                    $scope.CustomerOrderModel.showPriceInfoOverlay = function (event, fieldsJSON) {
                        $scope.CustomerOrderModel.priceOverlay = fieldsJSON;
                        setTimeout(function () {
                            var targetEle = angular.element(event.target);
                            var overlayTop = angular.element('.Price-info-overlay').height() + 50;
                            angular.element('.Price-info-overlay').addClass('afterarrow');
                            if (angular.element('.Price-info-overlay').hasClass('beforearrow')) {
                                angular.element('.Price-info-overlay').removeClass('beforearrow');
                                debug(1);


                            }
                            
                            if (targetEle.offset().top - $(document).scrollTop() < 300) {
                                angular.element('.Price-info-overlay').removeClass('afterarrow');
                                angular.element('.Price-info-overlay').addClass('beforearrow');
                                overlayTop = overlayTop - angular.element('.Price-info-overlay').height() - 115;
                                debug(2);


                            }
        
                            angular.element('.Price-info-overlay').css('top', targetEle.offset().top - overlayTop);
                            angular.element('.Price-info-overlay').css('left', targetEle.offset().left - 270);
                        }, 10);
                        angular.element('.Price-info-overlay').show();
                    }
        
                    $scope.CustomerOrderModel.hidePriceInfoOverlay = function () {
                        $timeout.cancel(toaloverlaytimer);
                        angular.element('.Price-info-overlay').hide();
                    }
        
                    $scope.isEmpty = function (obj) {
                        return angular.equals({}, obj);
                    };

                    
                    // part popup functions
                    var timer;
                    $scope.CustomerOrderModel.openpartpopup = function (event, partId) {
                         timer = $timeout(function () {
                            //var partId = $scope.CustomerOrderModel.VORLineItemGroupList[index].PartId;
                            debug(partId);


                            $scope.$broadcast('PartPopUpEvent',  partId);
                            $scope.applyCssOnPartPopUp(event, '.PartPopupOnVenderOrder');
                         }, 1000);



                                
                     }
                     
                     $scope.CustomerOrderModel.hidePartPopUp =function(){
                         $timeout.cancel(timer);
                         angular.element('.Vendor-Order-Part-Popup').hide();



                     }
                     
                     
                    var timer2;


                    $scope.CustomerOrderModel.openCOUpopup = function (event, COUId) {
                   
                         timer2 = $timeout(function () {
                            //var partId = $scope.CustomerOrderModel.VORLineItemGroupList[index].PartId;
                            debug(COUId);


                            $scope.$broadcast('COUPopUpEvent',  COUId);
                            $scope.applyCssOnPartPopUp(event, '.COUInfoPopup');
                         }, 1000);

						
						


                                
                     }
                     
                     $scope.CustomerOrderModel.hideCOUPopUp =function(){
                         $timeout.cancel(timer2);
                         angular.element('#COUInfoPopup').hide();


                     }
                     
                     $scope.applyCssOnPartPopUp = function (event, className) {
                        var targetEle = angular.element(event.target);
                        var elementWidth = targetEle.width();
                        if (targetEle.width() > targetEle.parent().width()) {
                            elementWidth = targetEle.parent().width() - 15;

                        }
                        angular.element(className).css('top', targetEle.offset().top);
                        angular.element(className).css('left', event.clientX);
                        setTimeout(function(){  angular.element(className).show(); }, 1000); 




                    }
                    
                    
                    
                    // Customer Info Overlay fields
                    $scope.CustomerOrderModel.showCustomerInfoOverlay = function (event, custId) {
                        $scope.CustomerOrderModel.OverlayInfo = {};
                        $scope.CustomerOrderModel.CustomerOverlay = [];
                        $scope.CustomerOrderModel.showInfoOverlay(event, custId);
                        CustomerInfoService.customerInfo(custId).then(function (customerRecord) {
                            if (customerRecord.length > 0) {
                                $scope.CustomerOrderModel.OverlayInfo = customerRecord[0];
                                debug("$scope.CustomerOrderModel.OverlayInfo : "+JSON.stringify($scope.CustomerOrderModel.OverlayInfo)); 
                                if ($scope.CustomerOrderModel.OverlayInfo.Cust_PreferredPhone == "") {
                                    if ($scope.CustomerOrderModel.OverlayInfo.Cust_HomeNumber != "") {
                                        $scope.CustomerOrderModel.OverlayInfo.Cust_PreferredPhone = $scope.CustomerOrderModel.OverlayInfo.Cust_HomeNumber;
                                    } else if ($scope.CustomerOrderModel.OverlayInfo.Cust_WorkNumber != "") {
                                        $scope.CustomerOrderModel.OverlayInfo.Cust_PreferredPhone = $scope.CustomerOrderModel.OverlayInfo.Cust_WorkNumber;
                                    } else if ($scope.CustomerOrderModel.OverlayInfo.Cust_Mobile != "") {
                                        $scope.CustomerOrderModel.OverlayInfo.Cust_PreferredPhone = $scope.CustomerOrderModel.OverlayInfo.Cust_Mobile;
                                    }
                                }
                                if ($scope.CustomerOrderModel.OverlayInfo.Cust_PreferredEmail == "") {
                                    if ($scope.CustomerOrderModel.OverlayInfo.Cust_HomeEmail != "") {
                                        $scope.CustomerOrderModel.OverlayInfo.Cust_PreferredEmail = $scope.CustomerOrderModel.OverlayInfo.Cust_HomeEmail;
                                    } else if ($scope.CustomerOrderModel.OverlayInfo.Cust_WorkEmail != "") {
                                        $scope.CustomerOrderModel.OverlayInfo.Cust_PreferredEmail = $scope.CustomerOrderModel.OverlayInfo.Cust_WorkEmail;
                                    } else if ($scope.CustomerOrderModel.OverlayInfo.Cust_OtherEmail != "") {
                                        $scope.CustomerOrderModel.OverlayInfo.Cust_PreferredEmail = $scope.CustomerOrderModel.OverlayInfo.Cust_OtherEmail;
                                    }
                                }
                                debug($scope.CustomerOrderModel.OverlayInfo.Cust_BillingStreet + ' ' +$scope.CustomerOrderModel.OverlayInfo.Cust_BillingCity);
                                        debug($scope.CustomerOrderModel.OverlayInfo.Cust_BillingStreet + ' ' );
                        


        						$scope.CustomerOrderModel.CustomerOverlay = [{
                                        label : 'Name',
                                        value : $scope.CustomerOrderModel.OverlayInfo.Cust_Name
                                    }, {
                                        label : 'Nick Name',
                                        value : $scope.CustomerOrderModel.OverlayInfo.Cust_NickName
                                    }, {
                                        label : 'PHONE PRIMARY',
                                        value : $scope.CustomerOrderModel.OverlayInfo.Cust_PreferredPhone
                                    }, {
                                        label : 'PHONE ALT',
                                        value : $scope.CustomerOrderModel.OverlayInfo.Cust_OtherNumber
                                    }, {
                                        label : 'EMAIL',
                                        value : $scope.CustomerOrderModel.OverlayInfo.Cust_PreferredEmail
                                    }, {
                                        label : 'ADDRESS',
                                        value : $scope.CustomerOrderModel.OverlayInfo.Cust_BillingStreet + ' ' +
                                        $scope.CustomerOrderModel.OverlayInfo.Cust_BillingCity
                                    }
                                ];
               
                                
                            }
                        }, function (errorSearchResult) {
                            $scope.CustomerOrderModel.OverlayInfo = errorSearchResult;
                        });
                    }
        
                    // user Info Overlay field
                    $scope.CustomerOrderModel.showUserInfoOverlay = function (event, custId) {
                        $scope.CustomerOrderModel.OverlayInfo = {};
                        $scope.CustomerOrderModel.CustomerOverlay = [];
                        $scope.CustomerOrderModel.showInfoOverlay(event, custId);
                        CustomerInfoService.customerInfo(custId).then(function (customerRecord) {
                            if (customerRecord.length > 0) {
                                $scope.CustomerOrderModel.OverlayInfo = customerRecord[0];
                                $scope.CustomerOrderModel.CustomerOverlay = [{
                                        label : 'Name',
                                        value : $scope.CustomerOrderModel.OverlayInfo.User_Name
                                    }, {
                                        label : 'PHONE PRIMARY',
                                        value : $scope.CustomerOrderModel.OverlayInfo.User_Phone
                                    }, {
                                        label : 'EMAIL',
                                        value : $scope.CustomerOrderModel.OverlayInfo.User_Email
                                    }
                                ];
                            }
                        }, function (errorSearchResult) {
                            $scope.CustomerOrderModel.OverlayInfo = errorSearchResult;
                        });
                    }
        
                  
                    $scope.CustomerOrderModel.hideCustomerInfoOverlay = function () {
                        angular.element('.Customer-info-overlay').hide();
                    }
        
                    $scope.CustomerOrderModel.showInvoiceDetail = function (invoiceHeaderId, event) {
                        $scope.CustomerOrderModel.InvoiceDetailInfo = {};
                        var targetEle = angular.element(event.target);
                        var elementWidth = targetEle.width();
                        if (targetEle.width() > targetEle.parent().width()) {
                            elementWidth = targetEle.parent().width() - 15;
                        }
                        angular.element('.Invoice-info-overlay').css('top', targetEle.offset().top - 275);
                        angular.element('.Invoice-info-overlay').css('left', event.clientX);
                        angular.element('.Invoice-info-overlay').show();
                        CustomerInfoService.InvoiceDetails(invoiceHeaderId).then(function (invoicedetail) {

                            $scope.CustomerOrderModel.InvoiceDetailInfo = invoicedetail[0];
                            var subTotal = 0;
                            var tax = 0;
                            for (i = 0; i < invoicedetail[0].COInvoiceItesRecs.length; i++) {
                                subTotal += invoicedetail[0].COInvoiceItesRecs[i].Total;
                                tax += invoicedetail[0].COInvoiceItesRecs[i].TaxAmount;
                            }
                            $scope.CustomerOrderModel.InvoiceDetailInfo.OverlayTotals = {};
                            $scope.CustomerOrderModel.InvoiceDetailInfo.OverlayTotals.subTotal = subTotal;
                            $scope.CustomerOrderModel.InvoiceDetailInfo.OverlayTotals.Tax = tax;
                            $scope.CustomerOrderModel.InvoiceDetailInfo.OverlayTotals.payTotal = $scope.CustomerOrderModel.InvoiceDetailInfo.IsTaxIncludingPricing ? subTotal  : subTotal + tax;
                            $scope.CustomerOrderModel.populateLeftSideHeadingLables();
                        }, function (errorSearchResult) {
                            $scope.CustomerOrderModel.OverlayInfo = errorSearchResult;
                        });
                    }
        
                    $scope.CustomerOrderModel.hideInvoiceDetail = function () {
                        angular.element('.Invoice-info-overlay').hide();
                    }
        
                    $scope.CustomerOrderModel.hidePanel = function (event, id) {
                        var targetelement = angular.element(event.target.closest('.heading_icon'));
                        if (targetelement.hasClass('rotation90')) {
                            targetelement.removeClass('rotation90');
                        } else {
                            targetelement.addClass('rotation90');
                        }
                        $('#' + id).toggle();
                    }
        
                    $scope.AddRemoveItems = function (index) {
                    	if ($scope.CustomerOrderModel.CheckOutItems[index].IsInvoiceable 
                        	&& ($scope.CustomerOrderModel.CheckOutItems[index].SOStatus == null ||  
                        		$scope.CustomerOrderModel.CheckOutItems[index].SOStatus=="Complete" ||  
                        		$scope.CustomerOrderModel.CheckOutItems[index].SOStatus=="Reviewed")
                        	&& $scope.CustomerOrderModel.CheckOutItems[index].CheckoutType == $scope.CustomerOrderModel.checkOutMode){
                    		

	                    		$scope.CustomerOrderModel.CheckOutItems[index].IsActive = !$scope.CustomerOrderModel.CheckOutItems[index].IsActive;
	                       		$scope.UpdateCheckout(index);  
                        }
                        //debug($scope.CustomerOrderModel.CheckOutItems);
                    }
         
                    $scope.UpdateCheckout = function (index) {
                        /*var CheckOutJson = {
                            COInvoiceHeaderId : $scope.CustomerOrderModel.COInvoiceHeaderId,
                            COInvoiceItemId : $scope.CustomerOrderModel.CheckOutItems[index].COInvoiceItemId,
                            COLineItemId : $scope.CustomerOrderModel.CheckOutItems[index].COLineItemId
                        }*/
                        
                        var checkoutList = [];
                        if(index != undefined){
                        	checkoutList.push($scope.CustomerOrderModel.CheckOutItems[index]);
                        }else{
                        	checkoutList = $scope.CustomerOrderModel.CheckOutItems;
                        }
                        
        
                        CustomerInfoService.UpdateChekoutItems(JSON.stringify(checkoutList), $scope.CustomerOrderModel.coHeaderId)
                        .then(function (successfulSearchResult) {
                        	debug('successfulSearchResult');
                        	debug(successfulSearchResult);
                            $scope.bindCheckOutList(successfulSearchResult.coInvoiceItemRecs);
                             
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                        });
                    }
        
                    $scope.FinaliseInvoice = function () {
                        
                        if($scope.CustomerOrderModel.Customer.Value == undefined || $scope.CustomerOrderModel.Customer.Value == null || $scope.CustomerOrderModel.Customer.Value == ''){
                            Notification.error('First add customer to Make Payment');
                            return;

                        }
                         debug('-------------------------');
                         
                        CustomerInfoService.FinaliseInvoice(JSON.stringify($scope.CustomerOrderModel.CheckOutItems), $scope.CustomerOrderModel.coHeaderId, $scope.CustomerOrderModel.checkOutMode)
                        .then(function (successfulSearchResult) {
                        	debug(successfulSearchResult);
                        	debug('successful');
                            $scope.setAllData(successfulSearchResult);
                            $scope.CustomerOrderModel.LoadServiceOrder();
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                        });
                    }
                    
                    $scope.FinaliseOrder = function () {
                        if($scope.CustomerOrderModel.Customer.Value == undefined || $scope.CustomerOrderModel.Customer.Value == null || $scope.CustomerOrderModel.Customer.Value == ''){
                            Notification.error('First add customer to Make Payment');
                            return;
 
                        }
                        CustomerInfoService.FinaliseOrder(JSON.stringify($scope.CustomerOrderModel.CheckOutItems), 
                        									$scope.CustomerOrderModel.coHeaderId,
                        									$scope.CustomerOrderModel.checkOutMode)
                        .then(function (successfulSearchResult) {
                            $scope.setAllData(successfulSearchResult);
                            $scope.CustomerOrderModel.LoadServiceOrder();
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                        });
                    }
                    
                    
                    
                    
                    angular.element(document).on("scroll", function(){
                        $scope.CustomerOrderModel.onScroll();
                        debug( $scope.CustomerOrderModel.activeSidepanelink);
                    });
                    
                    $scope.sidepanelLink = function(event){
                        event.preventDefault();
                        //debug('linked Clicked');
                        angular.element(document).off("scroll");
                        var target = angular.element(event.target.closest('a')).attr("href");
                        //debug(target);


                        angular.element(angular.element(event.target.closest('a')).attr("rel")).show();
                        angular.element('html, body').stop().animate({
                            scrollTop : angular.element(target).offset().top - top_for_scroll - 60
                        }, 100, function () {
                            //window.location.hash = target;
                            angular.element(document).on("scroll", function(){
                                $scope.CustomerOrderModel.onScroll();
                            });
                            $scope.CustomerOrderModel.onScroll();
                        });
                    }
                    
                    $scope.scrollSidepanel = function(){
                        debug($(".leftPanelLinks .active").position().top);
                        debug($(".leftPanelLinks").scrollTop()); 
                        if($(".leftPanelLinks .active").position().top < 180 || $(".leftPanelLinks .active").position().top > 480){
                            $('.leftPanelLinks').animate({
                                //scrollTop: $(".leftPanelLinks .active").position().top - $(".leftPanelLinks").scrollTop() - 180
                                scrollTop: $(".leftPanelLinks .active").offset().top   
                            }, 100);

                        }
                    
                    }
                    
                    
                   angular.element('.leftPanelLinks').bind('mousewheel', function(e, d) {
                    var toolbox = $('.leftPanelLinks'),
                          height = toolbox.height(),
                          scrollHeight = toolbox.get(0).scrollHeight;
                    //debug('left panel scroll');
                    if((this.scrollTop === (scrollHeight - height) && d < 0) || (this.scrollTop === 0 && d > 0)) {
                      e.preventDefault();


                    }
                   });
                   /* $scope.CustomerOrderModel.activeSidepanelink = '';
                    $scope.CustomerOrderModel.onScroll = function(){
                        var activeSidepanelink = 'Info';
                        var heading  = '';
                        var scrollPos = angular.element(document).scrollTop();
                        if(scrollPos < angular.element('#customer-order-info').position().top + angular.element('#customer-order-info').height() - 50 ){
                            heading = '<span class="heading_icon handCursor"><i class="fa fa-chevron-circle-right"></i></span> A - Info';
                            activeSidepanelink = 'Info';
                        }
                         else if(scrollPos < angular.element('.service_section').position().top + angular.element('.service_section').height() - 50 ){
                            heading = angular.element('.service_section h1').html();
                            activeSidepanelink = 'ServiceSection';
                        }
                        else if(scrollPos < angular.element('.merchandise_section').position().top + angular.element('.merchandise_section').height() - 50 ){
                            heading = angular.element('.merchandise_section h1').html();
                            activeSidepanelink = 'Merchandise';
                        }
                        else if(scrollPos < angular.element('.special_order_section').position().top + angular.element('.special_order_section').height() - 50){
                            heading = angular.element('.special_order_section h1').html();
                            activeSidepanelink = 'Special Orders';
                        }
                        else if(scrollPos < angular.element('.deposits_section').position().top + angular.element('.deposits_section').height() - 50){
                            heading = angular.element('.deposits_section h1').html();
                            activeSidepanelink = 'Deposits';
                        }
                        else if(scrollPos < angular.element('.active_invoice_section').position().top + angular.element('.active_invoice_section').height() - 50){
                            heading = angular.element('.active_invoice_section h1').html();
                            activeSidepanelink = 'Checkout';
                        }
                        else if(scrollPos < angular.element('.final_invoices_section').position().top + angular.element('.final_invoices_section').height() - 50){
                            heading = angular.element('.final_invoices_section h1').html();
                            activeSidepanelink = 'Invoice History';
                        }
                        angular.element('#sticky-heading h1').html(heading);
                    
                        $scope.CustomerOrderModel.activeSidepanelink = activeSidepanelink;
                        if(!$scope.$$phase) {
                            $scope.$digest();
                        }
                    }*/
                    
                    // scrolling and collapsible panels code
                    $scope.CustomerOrderModel.activeSidepanelink = '#CustomerSection';
                    
                    $scope.CustomerOrderModel.displaySections = {
                        'Customer' : true,
                        'Merchandise' : true,
                        'SpecialOrder' : true,
                        'Deposit' : true,
                        'Checkout' : true,
                        'InvoiceHistory' : true
                    };
                    
                      

                    angular.element(document).off("scroll");
                    angular.element(document).on("scroll", function () {
                        $scope.CustomerOrderModel.onScroll();
                    });


                    
                    $scope.CustomerOrderModel.scrollToPanel = function(event,sectionToscroll){
                        if(event !=null){
                            event.preventDefault(); 
                        }
                        angular.element(document).off("scroll");
                        var target = angular.element("#"+sectionToscroll);
                        angular.element('html, body').stop().animate({
                            scrollTop : angular.element(target).offset().top - 120
                        }, 500, function () {
                            angular.element(document).on("scroll", function () {
                                $scope.CustomerOrderModel.onScroll();
                            });
                            $scope.CustomerOrderModel.onScroll();
                        });
                    }  
        


                    // Wizard Js
                    
                    /*$scope.CustomerOrderModel.calculateWizardBodyHeight = function(){ 
                        var windowHeight = window.outerHeight;
                        var bgHeaderHeight = angular.element(".headerNav").height();
                        var fixedRowHeight = angular.element(".fixedRow").height();
                        var wizardWrapperHeight = (angular.element(".buttonSection ").height() * 2) + angular.element("#crumbs").height();
                        var wizardbodyHeight = windowHeight - (bgHeaderHeight + fixedRowHeight + wizardWrapperHeight);
                        angular.element(".wizardWrapper .wizardBody").height(wizardbodyHeight - 125);

                    }*/
                    
                    $scope.CustomerOrderModel.statusToChevronList = 

                                                            {Sign_In : [{Name: 'Service Information', isActive : true, key: 'Service_Information'},
                                                                        {Name: 'Sign In Unit', isActive : false, key: 'Sign_In_Unit'},
                                                                        {Name: 'Approval Method', isActive : false, key: 'Approval_Method'},
                                                                        {Name: 'Seek Approval 1', isActive : false, key: 'Digital_Signature_Approval'},
                                                                        {Name: 'Seek Approval 2', isActive : false, key: 'Print_Approval'},
                                                                        {Name: 'Seek Approval 3', isActive : false, key: 'Remotely_Approval'}]

                                                            };
                    
                    
                    $scope.CustomerOrderModel.overridenStatusToNextStatusMap = 
                                                            [{ Key: 'New' , value: 'Ready'},
                                                            { Key: 'Ready' , value: 'In Progress'},
                                                            { Key: 'In Progress' , value: 'On Hold'},
                                                            { Key: 'On Hold' , value: 'Complete'},
                                                            { Key: 'Complete' , value: 'Reviewed'},
                                                            { Key: 'Reviewed' , value: 'Signed Out'},
                                                            { Key: 'Signed Out' , value: 'Invoiced'},
                                                            { Key: 'Invoiced' , value: 'Invoiced'},
                                                            ];
                    
                    $scope.CustomerOrderModel.WorkStatusToNextStatusMap = 
                                                            [{ Key: 'Start Progress' , value: 'In Progress'},
                                                            { Key: 'Put On Hold' , value: 'On Hold'},
                                                            { Key: 'Set As Complete' , value: 'Complete'},
                                                            { Key: 'Re-Open For Work' , value: 'Ready'},
                                                            { Key: 'Force To Ready' , value: 'Ready'},
                                                            { Key: 'Force To Reviewed' , value: 'Reviewed'},
                                                            { Key: 'Force To Sign Out' , value: 'Signed Out'},
                                                            { Key: 'Force To Checkout' , value: 'Signed Out'},

                                                            ];
                      $scope.CustomerOrderModel.ClaimStatusToNextStatusMap =   
                                                             [{ Key: 'Unsubmitted' , value: 'Ready to Submit'}
                                                             ];
                                                            
                    $scope.CustomerOrderModel.bodyScrollPosition = 0;
                     
                    $scope.CustomerOrderModel.toggleWizardMode = function(workStatus, WizardMode, soHeaderIndex){
    

                        $scope.WizardModel.currentClaimWizardKey = '';
                        if(soHeaderIndex != undefined){
                            $scope.WizardModel.WizardSOHeaderIndex = soHeaderIndex;
                            $scope.WizardModel.WizardSOHeader = angular.copy($scope.CustomerOrderModel.SOHeaderList[soHeaderIndex]);
                            $scope.WizardModel.WizardSOHeaderId = $scope.CustomerOrderModel.SOHeaderList[soHeaderIndex].SOHeaderInfo.Id;
                        }  
                        
                        
                        
                        $scope.WizardModel.currentWizardKey = workStatus.StatusUniqueKey;
                        $scope.WizardModel.currentClaimWizardKey = workStatus.StatusUniqueKey;
                        if(workStatus != null && workStatus.StatusUniqueKey == 'Override'){
                            $scope.CustomerOrderModel.workOverrideAction(workStatus.AvailableStatus, soHeaderIndex);
                        }
                        else if(workStatus != null  && ((workStatus.StatusUniqueKey == 'Start_Progress') ||
                                 (workStatus.StatusUniqueKey == 'Put_On_Hold') || 
                                 (workStatus.StatusUniqueKey == 'Set_As_Complete')|| 
                                 (workStatus.StatusUniqueKey == 'Re-Open_For_Work') ||
                                 (workStatus.StatusUniqueKey == 'Force_To_Ready')||
                                 (workStatus.StatusUniqueKey == 'Force_To_Reviewed')||
                                 (workStatus.StatusUniqueKey == 'Force_To_Sign_Out') ||
								 (workStatus.StatusUniqueKey == 'Force_To_Checkout'))){

                                    $scope.CustomerOrderModel.workStatusChangeAction(workStatus.AvailableStatus, soHeaderIndex);
                        } 
                        else if(workStatus != null  && (workStatus.StatusUniqueKey == 'Log_Service_Work')){
                            $scope.CustomerOrderModel.createLogHoursPopup($scope.CustomerOrderModel.SOHeaderList[soHeaderIndex].SOHeaderInfo.Id, soHeaderIndex)
                        }else if(workStatus != null  && (workStatus.StatusUniqueKey == 'Go_To_CheckOut')){
                            if($scope.CustomerOrderModel.CheckOutItems.length == 0 ){
                                Notification.error('No Items to checkout');
                            }else{
                                $scope.CustomerOrderModel.scrollToPanel(null, 'CheckoutSection');
                            }   

                        }
                        else if(workStatus != null  && workStatus.StatusUniqueKey == 'Review_Service'){
                            $scope.CustomerOrderModel.PrintPreviewDetails($scope.WizardModel.WizardSOHeaderId);
                            $scope.CustomerOrderModel.currentChevronList = [{Name: 'Review & Comment', isActive : true, key: 'Review_Service'}]
                            $scope.CustomerOrderModel.isWizardMode = WizardMode;
                            $scope.CustomerOrderModel.isWorkWizardMode = WizardMode;

                            if ($scope.$root.$$phase != '$apply' && $scope.$root.$$phase != '$digest')
                            $scope.$apply();
                            angular.element('html, body').stop().animate({
                                scrollTop : 0 
                            }, 1);   

                            
                        }
                        else if(workStatus != null  && workStatus.StatusUniqueKey == 'Service_Sign_Out'){
                            $scope.CustomerOrderModel.currentChevronList = [{Name: 'Approval Method', isActive : false, key: 'Approval_Method'}]
                            $scope.CustomerOrderModel.isWizardMode = WizardMode;
                            $scope.CustomerOrderModel.isWorkWizardMode = WizardMode;
                            WizardService.getWizardInfo($scope.CustomerOrderModel.SOHeaderList[soHeaderIndex].SOHeaderInfo.Id, workStatus.StatusUniqueKey).then(function (successfulSearchResult) {
                                debug(' ---- WizardInfo  -------');
                                debug(successfulSearchResult);
                                $scope.WizardModel.wizardInfo = successfulSearchResult;
                                    
                                // create approval checkboxes.
                                $scope.WizardModel.createApprovalVariables();
                                $scope.WizardModel.changeApprovalMethod(true);
                                $scope.WizardModel.getCustomerInfo();
                                angular.element('html, body').stop().animate({
                                    scrollTop : 0
                                }, 1);
                                //$scope.CustomerOrderModel.updateChevronList(workStatus, soHeaderIndex);
                            },
                                function (errorSearchResult) {
                                responseData = errorSearchResult;
                            });
                            
                        }else if(workStatus != null  && workStatus.StatusUniqueKey == 'Get_Customer_Approval'){
                                $scope.CustomerOrderModel.isWizardMode = WizardMode;
                                $scope.CustomerOrderModel.isWorkWizardMode = WizardMode;
                                angular.element('html, body').stop().animate({
                                    scrollTop : 0
                                }, 1);
                                WizardService.getCustomerApprovalInfo($scope.CustomerOrderModel.SOHeaderList[soHeaderIndex].SOHeaderInfo.Id, 
                                                                        'Get_Approval',
                                                                        null).then(function (successfulSearchResult) {
                                debug(' ---- Get Approval WizardInfo  -------');
                                debug(successfulSearchResult);
                                $scope.WizardModel.wizardInfo = {};
                                $scope.WizardModel.wizardInfo.Sign_In = {};
                                $scope.WizardModel.wizardInfo.Sign_In.Approval_Method = successfulSearchResult;
                                    
                                // create approval checkboxes.
                                $scope.WizardModel.createApprovalVariables();
                                $scope.WizardModel.changeApprovalMethod(true);  
                                $scope.WizardModel.getCustomerInfo();
                                //$scope.CustomerOrderModel.updateChevronList(workStatus, soHeaderIndex);
                            },
                                function (errorSearchResult) {
                                responseData = errorSearchResult;
                            });
                        }else{
                            $scope.CustomerOrderModel.isWizardMode = WizardMode;
                            $scope.CustomerOrderModel.isWorkWizardMode = WizardMode;
                            if($scope.CustomerOrderModel.isWizardMode){
                                $scope.CustomerOrderModel.bodyScrollPosition = angular.element(document).scrollTop();
                                if(workStatus != null){
                                    WizardService.getWizardInfo($scope.CustomerOrderModel.SOHeaderList[soHeaderIndex].SOHeaderInfo.Id, workStatus.StatusUniqueKey).then(function (successfulSearchResult) {
                                        debug(' ---- WizardInfo  -------');
                                        debug(successfulSearchResult);
                                        $scope.WizardModel.wizardInfo = successfulSearchResult;
                                        
                                        // set up date time
                                        $scope.WizardModel.wizardInfo.Sign_In.Service_Information.selectedTime = $scope.CustomerOrderModel.getTimeFromSFformat($scope.WizardModel.wizardInfo.Sign_In.Service_Information.PromisedBy);
                                        $scope.WizardModel.wizardInfo.Sign_In.Service_Information.selectedDate = $scope.CustomerOrderModel.getDateFromSFformat($scope.WizardModel.wizardInfo.Sign_In.Service_Information.PromisedBy);
                                        $scope.WizardModel.wizardInfo.Sign_In.Service_Information.CategoryNameStr = $scope.WizardModel.wizardInfo.Sign_In.Service_Information.CategoryName;
                                        
                                        $scope.WizardModel.setCurrentCOU($scope.WizardModel.wizardInfo.Sign_In.Service_Information.COUId);
                                        // create approval checkboxes.
                                        $scope.WizardModel.createApprovalVariables();
                                        $scope.WizardModel.changeApprovalMethod(true);
                                        $scope.WizardModel.getCustomerInfo();
                                        //$scope.CustomerOrderModel.updateChevronList(workStatus, soHeaderIndex);
                                        angular.element('html, body').stop().animate({
                                            scrollTop : 0
                                        }, 1);
                                    },
                                        function (errorSearchResult) {
                                        responseData = errorSearchResult;
                                    });
                                }
                            }else{
                                angular.element('html, body').stop().animate({
                                    scrollTop : $scope.CustomerOrderModel.bodyScrollPosition 
                                }, 1); 
                            }
                            
                            /*if($scope.CustomerOrderModel.isWizardMode){
                                setTimeout(function(){
                                    $scope.CustomerOrderModel.calculateWizardBodyHeight();
                                }, 1000);

                            }*/
                            debug($scope.CustomerOrderModel.currentChevronList);
                            /* if (!$scope.$$phase) {
                                $scope.$digest();
                            } */
                        }  
                    }
                    
                    $scope.CustomerOrderModel.openCustomerApproval = function(soHeaderIndex) {
                        var workStatus = {AvailableStatus : 'Get Customer Approval',
                                            StatusUniqueKey : 'Get_Customer_Approval'
                                        };
                                        
                        $scope.CustomerOrderModel.toggleWizardMode(workStatus, true, soHeaderIndex);                
                    }
                    
                    $scope.CustomerOrderModel.openPendingCustomerApproval = function(soHeaderIndex, sectionKey, count, status) {
                        debug(soHeaderIndex + '  ' +  sectionKey + '  ' +   count + '  ' +   status);
                        if(status == 'Pending' && sectionKey != undefined) {
                            if(sectionKey == 'Get_Approval') {
                                sectionKey = 'Get_Customer_Approval';
                            }
                            var workStatus = {AvailableStatus : sectionKey.replace(/_/g, ' '),
                                            StatusUniqueKey : sectionKey
                                        };
                                        
                            $scope.CustomerOrderModel.toggleWizardMode(workStatus, true, soHeaderIndex, count);             
                        }
                    }
                    
                    $scope.WizardModel.createApprovalVariables = function(){ 
                        $scope.WizardModel.wizardInfo.Sign_In.Digital_Signature_Approval = false;
                        $scope.WizardModel.wizardInfo.Sign_In.Print_Approval = false;
                        $scope.WizardModel.wizardInfo.Sign_In.Remotely_Approval = false;
                        for(var i=0; i<$scope.WizardModel.wizardInfo.Sign_In.Approval_Method.length; i++){
                            $scope.WizardModel.wizardInfo.Sign_In[$scope.WizardModel.wizardInfo.Sign_In.Approval_Method[i].ApprovalType] = true;
                        }
                    }
                      
                    $scope.WizardModel.changeApprovalMethod = function(isLoad, checkBoxModel){
                        $scope.WizardModel.wizardInfo.Sign_In.deletedApproval_Method = [];
                        $scope.CustomerOrderModel.currentChevronList = [];
                        if(!isLoad){
                            $scope.WizardModel.wizardInfo.Sign_In[checkBoxModel] = !$scope.WizardModel.wizardInfo.Sign_In[checkBoxModel];
                        }
                        if($scope.WizardModel.currentWizardKey == 'Sign_In'){
                            $scope.CustomerOrderModel.currentChevronList.push({Name: 'Service Information', isActive : false, key: 'Service_Information'});
                            $scope.CustomerOrderModel.currentChevronList.push({Name: 'Sign In Unit', isActive : false, key: 'Sign_In_Unit'});
                        }
                        if($scope.WizardModel.currentWizardKey == 'Sign_In' || $scope.WizardModel.currentWizardKey == 'Service_Sign_Out'
                            || $scope.WizardModel.currentWizardKey == 'Get_Customer_Approval'){
                            $scope.CustomerOrderModel.currentChevronList.push({Name: 'Approval Method', isActive : false, key: 'Approval_Method'});
                        }
                        
                        var DigitalSignIndex = _.findIndex($scope.WizardModel.wizardInfo.Sign_In.Approval_Method, {ApprovalType: 'Digital_Signature_Approval'});
                        var PrintIndex = _.findIndex($scope.WizardModel.wizardInfo.Sign_In.Approval_Method, {ApprovalType: 'Print_Approval'});
                        var RemoteIndex = _.findIndex($scope.WizardModel.wizardInfo.Sign_In.Approval_Method, {ApprovalType: 'Remotely_Approval'});
                                    
                        
                        if($scope.WizardModel.wizardInfo.Sign_In.Digital_Signature_Approval){
                            $scope.CustomerOrderModel.currentChevronList.push({Name: 'Seek Approval', isActive : false, key: 'Digital_Signature_Approval'});
                            if(DigitalSignIndex == -1){
                                var deletedDigitalSignIndex = _.findIndex($scope.WizardModel.wizardInfo.Sign_In.deletedApproval_Method, {ApprovalType: 'Digital_Signature_Approval'});
                                var recordId;
                                if(deletedDigitalSignIndex > -1){
                                    recordId = $scope.WizardModel.wizardInfo.Sign_In.deletedApproval_Method[deletedDigitalSignIndex].Id;
                                }
                                $scope.WizardModel.wizardInfo.Sign_In.Approval_Method.push({ApprovalType: 'Digital_Signature_Approval', Id : recordId, IsApprovalObtained : false});
                            }
                        }else if(DigitalSignIndex != -1){
                            $scope.WizardModel.wizardInfo.Sign_In.deletedApproval_Method.push($scope.WizardModel.wizardInfo.Sign_In.Approval_Method[DigitalSignIndex]);
                            $scope.WizardModel.wizardInfo.Sign_In.Approval_Method.splice(DigitalSignIndex, 1);
                        }
                        
                        if($scope.WizardModel.wizardInfo.Sign_In.Print_Approval){
                            $scope.CustomerOrderModel.currentChevronList.push({Name: 'Seek Approval', isActive : false, key: 'Print_Approval'});
                            if(PrintIndex == -1){
                                var deletedPrintIndex = _.findIndex($scope.WizardModel.wizardInfo.Sign_In.deletedApproval_Method, {ApprovalType: 'Print_Approval'});
                                var recordId;
                                if(deletedPrintIndex > -1){
                                    recordId = $scope.WizardModel.wizardInfo.Sign_In.deletedApproval_Method[deletedPrintIndex].Id;
                                }
                                $scope.WizardModel.wizardInfo.Sign_In.Approval_Method.push({ApprovalType: 'Print_Approval', 
                                                                                            Id : recordId,
                                                                                            SectionKey : 'Sign_In',
                                                                                            IsApprovalObtained : false});
                            }  
                        }else if(PrintIndex != -1){
                            $scope.WizardModel.wizardInfo.Sign_In.deletedApproval_Method.push($scope.WizardModel.wizardInfo.Sign_In.Approval_Method[PrintIndex]);
                            $scope.WizardModel.wizardInfo.Sign_In.Approval_Method.splice(PrintIndex, 1);
                        }
                        
                        
                        if($scope.WizardModel.wizardInfo.Sign_In.Remotely_Approval){
                            $scope.CustomerOrderModel.currentChevronList.push({Name: 'Seek Approval', isActive : false, key: 'Remotely_Approval'});
                            if(RemoteIndex == -1){
                                var deletedRemoteIndex = _.findIndex($scope.WizardModel.wizardInfo.Sign_In.deletedApproval_Method, {ApprovalType: 'Remotely_Approval'});
                                var recordId;
                                if(deletedRemoteIndex > -1){
                                    recordId = $scope.WizardModel.wizardInfo.Sign_In.deletedApproval_Method[deletedRemoteIndex].Id;
                                }
                                $scope.WizardModel.wizardInfo.Sign_In.Approval_Method.push({ApprovalType: 'Remotely_Approval', Id : recordId, IsApprovalObtained : false});
                            }
                        }else if(RemoteIndex != -1){
                            $scope.WizardModel.wizardInfo.Sign_In.deletedApproval_Method.push($scope.WizardModel.wizardInfo.Sign_In.Approval_Method[RemoteIndex]);
                            $scope.WizardModel.wizardInfo.Sign_In.Approval_Method.splice(PrintIndex, 1);
                        }
                        
                        
                        var ApprovalMethodIndex = _.findIndex($scope.CustomerOrderModel.currentChevronList, {key: 'Approval_Method'});
                        
                        for(var i=ApprovalMethodIndex+1; i<$scope.CustomerOrderModel.currentChevronList.length; i++){
                            $scope.CustomerOrderModel.currentChevronList[i].Name = $scope.CustomerOrderModel.currentChevronList[i].Name+' '+ (i-ApprovalMethodIndex);
                        } 
                        
                        isLoad ? $scope.CustomerOrderModel.currentChevronList[0].isActive = true : $scope.CustomerOrderModel.currentChevronList[ApprovalMethodIndex].isActive = true;
                        debug($scope.CustomerOrderModel.currentChevronList);
                    }
                    
                    
                    
                    $scope.WizardModel.getCustomerInfo = function(){
                        
                        $scope.WizardModel.customerInfoJSON =  [
                                                {
                                                    Label : 'CALL (Home)', 
                                                    Value : $scope.CustomerOrderModel.CustomerInfoData.Cust_HomeNumber,
                                                    IsSelected : false,
                                                    Type: 'Phone'
                                                },
                                                {
                                                    Label : 'SEND EMAIL (Home)', 
                                                    Value : $scope.CustomerOrderModel.CustomerInfoData.Cust_HomeEmail,
                                                    IsSelected : false,
                                                    Type: 'Email'
                                                },
                                                {
                                                    Label : 'CALL (Other)', 
                                                    Value : $scope.CustomerOrderModel.CustomerInfoData.Cust_Mobile,
                                                    IsSelected : false,
                                                    Type: 'Phone'
                                                },{
                                                    Label : 'SEND EMAIL (Other)', 
                                                    Value : $scope.CustomerOrderModel.CustomerInfoData.Cust_OtherEmail,
                                                    IsSelected : false,
                                                    Type: 'Email'
                                                }
                                            ];
                        
                    }
                    
                    
                    $scope.WizardModel.changeApprovalObtained = function(index){
                        debug(index);


                        $scope.WizardModel.wizardInfo.Sign_In.Approval_Method[index].IsApprovalObtained = !$scope.WizardModel.wizardInfo.Sign_In.Approval_Method[index].IsApprovalObtained;
                    }
                    
                    
                    $scope.WizardModel.saveWizardData = function(){
                        debug('soHeader Id :- '+$scope.WizardModel.WizardSOHeaderId);
                        debug('Save JSON');


                        debug($scope.WizardModel.wizardInfo.Sign_In);
                        WizardService.saveWizardDetails($scope.WizardModel.WizardSOHeaderId,
                                                        $scope.WizardModel.currentWizardKey,
                                                        JSON.stringify($scope.WizardModel.wizardInfo.Sign_In),
                                                        JSON.stringify($scope.WizardModel.wizardInfo.Sign_In.deletedApproval_Method)).then(function (successfulSearchResult) {
                                debug('Save Data');


                                debug(successfulSearchResult);
                                //$scope.WizardModel.updateApprovalList(successfulSearchResult.Sign_In.Approval_Method);
                        },
                            function (errorSearchResult) {
                            Notification.error(errorSearchResult);
                            responseData = errorSearchResult;
                        });
                    }
                    
                    
                    
                    $scope.WizardModel.saveServiceClaimWizardData = function(){
                        debug('soHeader Id :- '+$scope.WizardModel.WizardSOHeaderId);
                        debug('Save JSON');


                        debug($scope.WizardModel.wizardInfo.Ready_to_Submit);
                        WizardService.saveWizardDetails($scope.WizardModel.WizardSOHeaderId,
                                                        $scope.WizardModel.currentClaimWizardKey,
                                                        JSON.stringify($scope.WizardModel.wizardInfo.Ready_to_Submit),
                                                        null).then(function (successfulSearchResult) {
                                debug('Save Data');


                                debug(successfulSearchResult);
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                        });
                    }
                    
                    
                    $scope.WizardModel.saveGetApproval = function(){
                        WizardService.saveCustomerApprovalInfo($scope.WizardModel.WizardSOHeaderId,
                                                        JSON.stringify($scope.WizardModel.wizardInfo.Sign_In.Approval_Method)).then(function (successfulSearchResult) {
                                debug('Save Data');


                                debug(successfulSearchResult);
                                $scope.WizardModel.wizardInfo.Sign_In.Approval_Method = successfulSearchResult;
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                        });
                    }
                    
                    
                    
                    
                    $scope.WizardModel.submitForReview = function(){
                        $scope.CustomerOrderModel.saveServiceReview($scope.WizardModel.WizardSOHeaderIndex, true);
                        var index = _.findIndex($scope.CustomerOrderModel.overridenStatusToNextStatusMap, {Key: $scope.CustomerOrderModel.SOHeaderList[$scope.WizardModel.WizardSOHeaderIndex].SOHeaderInfo.WorkStatus});
                        var newStatus = $scope.CustomerOrderModel.overridenStatusToNextStatusMap[index].value;
                        WizardService.changeStatus($scope.WizardModel.WizardSOHeaderId, newStatus, 'Work').then(function (successfulSearchResult) {
                                $scope.WizardModel.closeWizardMode();
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                        });
                    }
                    
                    $scope.WizardModel.SendEmailOnSignInWizard = function(){
                        var RemoteIndex = _.findIndex($scope.WizardModel.wizardInfo.Sign_In.Approval_Method, {ApprovalType: 'Remotely_Approval'});
                        var Notes = '';
                        if(RemoteIndex > -1){
                            Notes = $scope.WizardModel.wizardInfo.Sign_In.Approval_Method[RemoteIndex].Notes;
                        }
                        debug("$scope.WizardModel.customerInfoJSON : "+ JSON.stringify($scope.WizardModel.customerInfoJSON));
                        WizardService.sendOnSignInWizard(JSON.stringify($scope.WizardModel.customerInfoJSON), Notes, $scope.WizardModel.WizardSOHeaderId, $scope.CustomerOrderModel.Customer.Name).then(function (successfulSearchResult) {

                                if(successfulSearchResult == 'Sent'){
                                     Notification.success('Email successfully sent');

                                }else{
                                    Notification.error('Select a valid email address');
                                }
                                debug(successfulSearchResult);
                                //$scope.WizardModel.updateApprovalList(successfulSearchResult.Sign_In.Approval_Method);
                        },
                        function (errorSearchResult) {
                            responseData = errorSearchResult;  
                            
                        });
                    }
                    
                    
                    
                    $scope.WizardModel.SendEmailOnClaimWizard = function(){
                        debug('SendEmailOnClaimWizard');
                        var Notes = $scope.WizardModel.wizardInfo.Ready_to_Submit.Approval_Method[0].Notes;
                        Notes = Notes == undefined ? '' : Notes;
                        debug(Notes);


                        WizardService.sendOnSignInWizard(JSON.stringify($scope.CustomerOrderModel.vendorInfoJSON), Notes, $scope.WizardModel.WizardSOHeaderId, $scope.CustomerOrderModel.Customer.Name).then(function (successfulSearchResult) {
                                debug(successfulSearchResult);
                                if(successfulSearchResult == 'Sent'){
                                     Notification.success('Email successfully sent');
                                     $scope.WizardModel.submitClaimRecords();
                                }else{
                                    Notification.error('Select a valid email address');
                                }

                                debug(successfulSearchResult);
                                //$scope.WizardModel.updateApprovalList(successfulSearchResult.Sign_In.Approval_Method);
                        },  
                        function (errorSearchResult) {
                            responseData = errorSearchResult;
                        });
                        
                    }
                    
                    
                    // submit claim
                    $scope.WizardModel.submitClaimRecords = function(){
                        WizardService.submitClaimRecords($scope.WizardModel.WizardSOHeaderId).then(function (successfulSearchResult) {
                                debug('Submit claim success');
                                //$scope.WizardModel.updateApprovalList(successfulSearchResult.Sign_In.Approval_Method);
                                $scope.WizardModel.closeWizardMode();
                        },
                        function (errorSearchResult) {
                            responseData = errorSearchResult;
                        });
                    }
                    
                    
                    $scope.WizardModel.saveAndExitSignIn = function(isSave){
                        if(isSave){
                            if($scope.WizardModel.currentWizardKey == 'Sign_In'){
                                 $scope.CustomerOrderModel.SaveserviceInfo($scope.WizardModel.WizardSOHeaderIndex, true);
                                 $scope.WizardModel.saveWizardData();
                            	
                            }else if($scope.WizardModel.currentWizardKey == 'Review_Service'){
                                $scope.WizardModel.submitForReview();
                            }else if($scope.WizardModel.currentClaimWizardKey == 'Claim_Submission'){
                                $scope.CustomerOrderModel.SaveserviceInfo($scope.WizardModel.WizardSOHeaderIndex, true);
                                $scope.WizardModel.saveServiceClaimWizardData();
                            }else if($scope.WizardModel.currentWizardKey == 'Get_Customer_Approval'){
                                $scope.WizardModel.saveGetApproval();
                            }else if($scope.WizardModel.currentWizardKey == 'Service_Sign_Out'){
                                var index = _.findIndex($scope.CustomerOrderModel.overridenStatusToNextStatusMap, {Key: $scope.CustomerOrderModel.SOHeaderList[$scope.WizardModel.WizardSOHeaderIndex].SOHeaderInfo.WorkStatus});
                                var newStatus = $scope.CustomerOrderModel.overridenStatusToNextStatusMap[index].value;
                                WizardService.changeStatus($scope.WizardModel.WizardSOHeaderId, newStatus, 'Work').then(function (successfulSearchResult) {
                                        $scope.WizardModel.closeWizardMode();
                                },
                                    function (errorSearchResult) {
                                    responseData = errorSearchResult;
                                });
                                
                            }
                        }
                        $scope.WizardModel.closeWizardMode();
                    }  
                    
                    $scope.WizardModel.closeWizardMode = function(){
                        $scope.CustomerOrderModel.isWizardMode = false;
                        $scope.CustomerOrderModel.isWorkWizardMode = false;
                        $scope.CustomerOrderModel.isClaimWizardMode = false;
                        angular.element('html, body').stop().animate({
                            scrollTop : $scope.CustomerOrderModel.bodyScrollPosition 
                        }, 1); 
                        $scope.LoadCustomerOrder();
                    }
                                        
                    $scope.WizardModel.updateApprovalList = function(approvalList){
                        for(var i=0; i<approvalList.length; i++){
                            for(var j=0; j<$scope.WizardModel.wizardInfo.Sign_In.Approval_Method.length; j++){
                                if(approvalList[i].ApprovalType == $scope.WizardModel.wizardInfo.Sign_In.Approval_Method[j].ApprovalType){
                                    $scope.WizardModel.wizardInfo.Sign_In.Approval_Method[j].Id = approvalList[i].Id;
                                    break;
                                }
                            }
                        }
                    }   
                    
                    
                       
                    $scope.WizardModel.getCurrentActiveChevronIndex = function(){
                        if($scope.WizardModel != null && $scope.WizardModel.currentClaimWizardKey == 'Claim_Response') {
                            $scope.CustomerOrderModel.updateFinalizeButtonVisibility();
                        }
                        var index = _.findIndex($scope.CustomerOrderModel.currentChevronList, {isActive: true});
                        return index+1;
                    }

                    $scope.CustomerOrderModel.updateChevronList = function(workStatus, soHeaderIndex){
                        $scope.CustomerOrderModel.currentChevronList = $scope.CustomerOrderModel.statusToChevronList[workStatus.StatusUniqueKey];
                        angular.forEach($scope.CustomerOrderModel.currentChevronList, function(value, key){
                            value.isActive = false;
                        });
                        $scope.CustomerOrderModel.currentChevronList[0].isActive = true;
                    }
                    
                    
                    $scope.CustomerOrderModel.workOverrideAction = function(workStatus, soHeaderIndex){
                        var index = _.findIndex($scope.CustomerOrderModel.overridenStatusToNextStatusMap, {Key: $scope.CustomerOrderModel.SOHeaderList[soHeaderIndex].SOHeaderInfo.WorkStatus});
                        var newStatus = $scope.CustomerOrderModel.overridenStatusToNextStatusMap[index].value;
                        var appLogInfo = {oldStatus: $scope.CustomerOrderModel.SOHeaderList[soHeaderIndex].SOHeaderInfo.WorkStatus, 
                                        newStatus: newStatus,
                                        soHeaderId : $scope.CustomerOrderModel.SOHeaderList[soHeaderIndex].SOHeaderInfo.Id,
                                        label : workStatus ,
                                        isWorkStatus : $scope.CustomerOrderModel.isWorkWizardMode};
                        $scope.$broadcast('OverridenStatus', appLogInfo);
                    
                    }
                    
                    $scope.CustomerOrderModel.workStatusChangeAction = function(workStatus, soHeaderIndex){
                        var index = _.findIndex($scope.CustomerOrderModel.WorkStatusToNextStatusMap, {Key: workStatus});
                        var newStatus = $scope.CustomerOrderModel.WorkStatusToNextStatusMap[index].value;
                        var appLogInfo = {oldStatus: $scope.CustomerOrderModel.SOHeaderList[soHeaderIndex].SOHeaderInfo.WorkStatus, 
                                        newStatus: newStatus,
                                        soHeaderId : $scope.CustomerOrderModel.SOHeaderList[soHeaderIndex].SOHeaderInfo.Id,
                                        label : workStatus,
                                        type : 'Work'};
                        $scope.$broadcast('OverridenStatus', appLogInfo);
                    
                    }
                    
                    $scope.CustomerOrderModel.claimStatusChangeAction = function(claimStatus, soHeaderIndex){
                        var index = _.findIndex($scope.CustomerOrderModel.ClaimStatusToNextStatusMap, {Key: $scope.CustomerOrderModel.SOHeaderList[soHeaderIndex].SOHeaderInfo.ClaimStatus});
                        var newStatus = $scope.CustomerOrderModel.ClaimStatusToNextStatusMap[index].value;
                        var appLogInfo = {oldStatus: $scope.CustomerOrderModel.SOHeaderList[soHeaderIndex].SOHeaderInfo.ClaimStatus, 
                                        newStatus: newStatus,
                                        soHeaderId : $scope.CustomerOrderModel.SOHeaderList[soHeaderIndex].SOHeaderInfo.Id,
                                        label : claimStatus,
                                        type : 'Claim'};
                        $scope.$broadcast('OverridenStatus', appLogInfo);
                    
                    }
                    
                    $scope.$on('Override_Status',function(event, args)
                           {
                               debug(args);


                               //$scope.CustomerModal.editCustomer(customerId);
                              $scope.LoadCustomerOrder();
                           });
                    
                    
                    $scope.CustomerOrderModel.changeWorkStatus = function(workStatus, soHeaderIndex){
                        debug(workStatus);


                        var target = '#ServiceOrderSection'+soHeaderIndex;
                        angular.element('html, body').stop().animate({
                            scrollTop : angular.element(target).offset().top - 120
                        }, 500, function () {
                                                        
                        }).promise().then(function() {
                            $scope.CustomerOrderModel.toggleWizardMode(workStatus, true, soHeaderIndex);
                        });
                    }
                      
                    
                    
                    $scope.CustomerOrderModel.changeClaimStatus = function(claimStatus, soHeaderIndex){
                        debug(claimStatus);


                        var target = '#ServiceOrderSection'+soHeaderIndex;
                        angular.element('html, body').stop().animate({
                            scrollTop : angular.element(target).offset().top - 120
                        }, 500, function () {
                                                        
                        }).promise().then(function() {
                            $scope.CustomerOrderModel.toggleClaimWizardMode(claimStatus, true, soHeaderIndex);
                        });
                    }
                    
                    $scope.CustomerOrderModel.editClaimResponseDetailItemRow = function(indexVal) {
                        if(indexVal == null) {
                            indexVal = -1;
                        }
                        if($scope.WizardModel.wizardInfo.NonVarianceLineItemList != null) {
                            for(var i = 0; i < $scope.WizardModel.wizardInfo.NonVarianceLineItemList.length; i++) {
                                if(indexVal == i) {
                                    $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].IsEdit = true;
                                } else {
                                    $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].IsEdit = false;
                                }
                            }
                        }
                    }
                    
                    $scope.CustomerOrderModel.toggleClaimWizardMode = function(claimStatus, WizardMode, soHeaderIndex){
                        debug(claimStatus)


                        $scope.WizardModel.currentWizardKey = '';
                        if(soHeaderIndex != undefined){
                            $scope.WizardModel.WizardSOHeaderIndex = soHeaderIndex;
                            $scope.WizardModel.WizardSOHeader = angular.copy($scope.CustomerOrderModel.SOHeaderList[soHeaderIndex]);
                            $scope.WizardModel.WizardSOHeaderId = $scope.CustomerOrderModel.SOHeaderList[soHeaderIndex].SOHeaderInfo.Id;
                        }
                        
                        if( claimStatus.StatusUniqueKey == 'View_Claim_Response'){
                            claimStatus.StatusUniqueKey = 'Claim_Response'; 
                        }
                        if( claimStatus.StatusUniqueKey == 'View_Submitted_Claim'){
                            claimStatus.StatusUniqueKey = 'Claim_Submission'; 
                        }
                        $scope.WizardModel.currentClaimWizardKey = claimStatus.StatusUniqueKey;
                        if(claimStatus != null && claimStatus.StatusUniqueKey == 'Force_Claim_Submission'){
                            $scope.CustomerOrderModel.claimStatusChangeAction(claimStatus.AvailableStatus, soHeaderIndex);
                        }
                        else if(claimStatus != null){
                            $scope.CustomerOrderModel.isWizardMode = WizardMode;
                            $scope.CustomerOrderModel.isClaimWizardMode = WizardMode;
                            if($scope.CustomerOrderModel.isWizardMode){
                                $scope.WizardModel.WizardSOHeaderId = $scope.CustomerOrderModel.SOHeaderList[soHeaderIndex].SOHeaderInfo.Id;
                                $scope.CustomerOrderModel.bodyScrollPosition = angular.element(document).scrollTop();
                                if(claimStatus != null){ 
                                    debug(claimStatus.StatusUniqueKey);
                                    if(claimStatus.StatusUniqueKey == 'Claim_Submission'){
                                        var providerId = $scope.CustomerOrderModel.SOHeaderList[soHeaderIndex].SOHeaderInfo.ProviderId;
                                            if(providerId != null){
                                                $scope.CustomerOrderModel.getProviderInfo(providerId);
                                            }




                                        $scope.CustomerOrderModel.currentChevronList = [{Name: 'Claim Information', isActive : false, key: 'Claim_Information'},
                                                                            {Name: 'Claim Details', isActive : false, key: 'Claim_Details'},
                                                                            {Name: 'Attachments', isActive : false, key: 'Attachments'},
                                                                            {Name: 'Submit Claim', isActive : false, key: 'Submit_Claim'}];
                                    } else if(claimStatus.StatusUniqueKey == 'Claim_Response') {
                                        $scope.CustomerOrderModel.currentChevronList = [{Name: 'Response Information', isActive : false, key: 'Claim_Response_Information'},
                                                                            {Name: 'Response Details', isActive : false, key: 'Claim_Response_Details'},
                                                                            {Name: 'Variance Disposition', isActive : false, key: 'Claim_Response_Variance_Disposition'}];
                                    } else if(claimStatus.StatusUniqueKey == 'View_Claim_Response') {
                                        
                                    }
                                        
                                    if($scope.CustomerOrderModel.currentChevronList != null) {                              
                                        $scope.CustomerOrderModel.currentChevronList[0].isActive = true;
                                    }
                                    WizardService.getWizardInfo($scope.CustomerOrderModel.SOHeaderList[soHeaderIndex].SOHeaderInfo.Id, claimStatus.StatusUniqueKey).then(function (successfulSearchResult) {
                                        debug(successfulSearchResult);
                                        $scope.WizardModel.wizardInfo = successfulSearchResult;
                                        $scope.WizardModel.wizardInfo.NextButtonAvail = true;
                                            angular.element('html, body').stop().animate({
                                                scrollTop : 0 
                                            }, 1);
                                        if(claimStatus.StatusUniqueKey == 'Claim_Submission'){
                                            // Get call in case CREATE claim wizard
                                            $scope.WizardModel.getCustomerInfo();
                                            if($scope.WizardModel.wizardInfo.Ready_to_Submit != null && $scope.WizardModel.wizardInfo.Ready_to_Submit.Approval_Method.length == 0){
                                                $scope.WizardModel.wizardInfo.Ready_to_Submit.Approval_Method.push({ApprovalType: 'Submit_Claim'})
                                            }
                                            debug($scope.WizardModel.wizardInfo);
                                        } else if(claimStatus.StatusUniqueKey == 'Claim_Response'){
                                            // Get call in case CREATE claim response wizard
                                                angular.element('html, body').stop().animate({
                                                    scrollTop : 0 
                                                }, 1);
                                            $scope.WizardModel.wizardInfo.ClaimDispositionsList = ['Accepted', 'Denied'];
                                            if($scope.WizardModel.wizardInfo.ClaimDisposition == 'Accepted w/ Adjustment'){
                                                $scope.WizardModel.wizardInfo.ClaimDispositionsList.remove('Accepted w/ Adjustment');
                                                $scope.WizardModel.wizardInfo.ClaimDispositionsList.push('Accepted w/ Adjustment');
                                            }
                                            
                                            $scope.WizardModel.wizardInfo.VarianceBillToList = ['Internal', 'Customer'];
                                            if($scope.WizardModel.wizardInfo.InternalCategoryList == null) {
                                                $scope.WizardModel.wizardInfo.InternalCategoryList = [];
                                            }
                                            
                                            $scope.CustomerOrderModel.editClaimResponseDetailItemRow(-1);
                                            $scope.CustomerOrderModel.calculateClaimResponseVariance(null);
                                            $scope.CustomerOrderModel.resetClaimResponseValidation();
                                            
                                            debug($scope.WizardModel.wizardInfo);
                                        } else if(claimStatus.StatusUniqueKey == 'View_Claim_Response'){
                                            // Get call in case VIEW claim response wizard
                                        }
                                    },
                                        function (errorSearchResult) {
                                        responseData = errorSearchResult;
                                    });
                                                                        
                                }
                            }else{
                                angular.element('html, body').stop().animate({
                                    scrollTop : $scope.CustomerOrderModel.bodyScrollPosition 
                                }, 1); 
                            }
                            debug($scope.CustomerOrderModel.currentChevronList);
                            if (!$scope.$$phase) {
                                $scope.$digest();
                            }
                        }  
                    }

                    $scope.CustomerOrderModel.NextAction = function(index){
                    			if($scope.CustomerOrderModel.isClaimWizardMode){
                                      debug('next action -----');
                                      if($scope.WizardModel.currentClaimWizardKey == 'Claim_Response'){
                                        if($scope.WizardModel.wizardInfo.ResponseDate == null || $scope.WizardModel.wizardInfo.ResponseDate.length == 0) {
                                            $scope.WizardModel.wizardInfo.ClaimResponseValidationModel['ResponseDate'] = {isError : true, ErrorMessage : "Response Date is required"};
                                            return;
                                        }  else if($scope.WizardModel.wizardInfo.ProviderClaimNumber == null || $scope.WizardModel.wizardInfo.ProviderClaimNumber.length == 0 || $scope.WizardModel.wizardInfo.ProviderClaimNumber.length ==''){
                                            $scope.WizardModel.wizardInfo.ClaimResponseValidationModel['ProviderClaimNumber'] = {isError : true, ErrorMessage : "Claim No is required"};
                                            return;
                                        }
                                        else {
                                            $scope.WizardModel.wizardInfo.ClaimResponseValidationModel['ResponseDate'] = {isError : false, ErrorMessage : ""};
                                            $scope.WizardModel.wizardInfo.ClaimResponseValidationModel['ProviderClaimNumber'] = {isError : false, ErrorMessage : ""};
                                        }   
                                    }
                                }
                        var newIndex = index == -1 ? _.findIndex($scope.CustomerOrderModel.currentChevronList, {isActive: true})+1 : index;
                        if(newIndex != -1){
                            angular.forEach($scope.CustomerOrderModel.currentChevronList, function(value, key){
                                value.isActive = false;
                            });
                            if(newIndex < $scope.CustomerOrderModel.currentChevronList.length){
                                $scope.CustomerOrderModel.currentChevronList[newIndex].isActive = true;
                                var sectionKey = $scope.CustomerOrderModel.currentChevronList[newIndex].key;
                                if(sectionKey == 'Digital_Signature_Approval' || sectionKey == 'Print_Approval' 
                                    || sectionKey == 'Remotely_Approval' || sectionKey == 'Submit_Claim' || sectionKey == 'Review_Service'){
                                    $scope.CustomerOrderModel.PrintPreviewDetails($scope.WizardModel.WizardSOHeaderId);
                                }
                            }
                        }
                        if(index == -1){
	                            if($scope.CustomerOrderModel.isWorkWizardMode){
	                                if($scope.WizardModel.currentWizardKey == 'Get_Customer_Approval'){
	                                    $scope.WizardModel.saveGetApproval();
	                                }
	                                if($scope.WizardModel.currentWizardKey == 'Sign_In' && newIndex == 1){
	                                    $scope.CustomerOrderModel.SaveserviceInfo($scope.WizardModel.WizardSOHeaderIndex, true);
	                                }
	                                	$scope.WizardModel.saveWizardData();
	                            }
	                            if($scope.CustomerOrderModel.isClaimWizardMode){
	                                if($scope.WizardModel.currentClaimWizardKey == 'Claim_Submission'){
	                                    $scope.CustomerOrderModel.SaveserviceInfo($scope.WizardModel.WizardSOHeaderIndex, true);
	                                } else if($scope.WizardModel.currentClaimWizardKey == 'Claim_Response'){
	                                
	                                    $scope.CustomerOrderModel.SaveClaimResponse($scope.WizardModel.wizardInfo.SOHeaderId, 
	                                                                                $scope.WizardModel.wizardInfo,
	                                                                                $scope.WizardModel.getCurrentActiveChevronIndex() - 1,
	                                                                                false
	                                                                            );
	                                }
                            }
                        }
                    }
                    
                    $scope.CustomerOrderModel.SaveAndCloseClaimResponseAction = function(index) {
                        $scope.CustomerOrderModel.SaveClaimResponse($scope.WizardModel.wizardInfo.SOHeaderId, 
                                                                    $scope.WizardModel.wizardInfo,
                                                                    $scope.WizardModel.getCurrentActiveChevronIndex(),
                                                                    true
                                                                );
                    }
                    
                    $scope.CustomerOrderModel.changeClaimDisposition = function(isPicklistChange, indexVal,event){
                        if(event !=undefined){
                                if(event.keyCode ==9){
                                    if($scope.WizardModel.wizardInfo.NonVarianceLineItemList[indexVal].ApprovedQty > $scope.WizardModel.wizardInfo.NonVarianceLineItemList[indexVal].ClaimedQty ){
                                        $scope.WizardModel.wizardInfo.NonVarianceLineItemList[indexVal].ApprovedQty =  $scope.WizardModel.wizardInfo.NonVarianceLineItemList[indexVal].ClaimedQty;
                                        Notification.error('Approved quantity cannot be greater than Claim quantity');
                                        event.preventDefault();
                                    }
                                }
                        }

                        if(isPicklistChange) {
                            $scope.WizardModel.wizardInfo.ClaimDispositionsList.remove('Accepted w/ Adjustment');
                            for(var i = 0; i < $scope.WizardModel.wizardInfo.NonVarianceLineItemList.length; i++) {
                                $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].IsEdit = false;
                                if($scope.WizardModel.wizardInfo.ClaimDisposition == 'Accepted') {
                                    $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ApprovedQty = $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ClaimedQty;
                                    $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ApprovedPrice = $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ClaimedPrice;
                                } else if($scope.WizardModel.wizardInfo.ClaimDisposition == 'Denied') {
                                    $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ApprovedQty = 0;
                                    $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ApprovedPrice = 0;
                                }
                            }
                            $scope.CustomerOrderModel.calculateClaimResponseVariance(null);
                        } else if(!isPicklistChange){
                            if($scope.WizardModel.wizardInfo.ClaimDisposition == 'Denied'){
                                for(var i = 0; i < $scope.WizardModel.wizardInfo.NonVarianceLineItemList.length; i++) {
                                    //$scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].IsEdit = false;
                                    if(indexVal != i) {
                                        $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ApprovedQty = $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ClaimedQty;
                                        $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ApprovedPrice = $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ClaimedPrice;
                                    } else {
                                        if($scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ApprovedQty == 0) {
                                            $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ApprovedQty = $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ClaimedQty;
                                        } else if($scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ApprovedPrice == 0) {
                                            $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ApprovedPrice = $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ClaimedPrice;
                                        }
                                    }
                                }
                            }
                            
                            if($scope.WizardModel.wizardInfo.ClaimDisposition != 'Accepted w/ Adjustment') {
                                $scope.CustomerOrderModel.calculateClaimResponseVariance(indexVal);
                            } else {
                                $scope.CustomerOrderModel.calculateClaimResponseVariance(null);
                            }
                            
                            //if($scope.WizardModel.wizardInfo.ClaimDisposition == 'Denied') {
                                $scope.WizardModel.wizardInfo.ClaimDispositionsList.remove('Accepted w/ Adjustment');
                                $scope.WizardModel.wizardInfo.ClaimDispositionsList.push('Accepted w/ Adjustment');
                                $scope.WizardModel.wizardInfo.ClaimDisposition = 'Accepted w/ Adjustment';
                            //}
                        }
                    }
                    
                    $scope.CustomerOrderModel.calculateClaimResponseVariance = function(indexVal){
                        if(indexVal == null){
                            $scope.WizardModel.wizardInfo.ApprovedItems = 0;
                            $scope.WizardModel.wizardInfo.TaxAmount = 0;
                            $scope.WizardModel.wizardInfo.TotalVarianceAmount = 0;
                        }
                        if($scope.WizardModel.wizardInfo.NonVarianceLineItemList != null) {
                            for(var i = 0; i < $scope.WizardModel.wizardInfo.NonVarianceLineItemList.length; i++) {
                                if(indexVal == null || indexVal == i){
                                    if(indexVal != null) {
                                        $scope.WizardModel.wizardInfo.ApprovedItems -= $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ApprovedSubTotal;
                                        $scope.WizardModel.wizardInfo.TaxAmount -= $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].TaxAmount;
                                        $scope.WizardModel.wizardInfo.TotalVarianceAmount -= $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].VarianceAmount;
                                    }
                                    // Update approved Subtotal:
                                    $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ApprovedSubTotal = $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ApprovedQty * $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ApprovedPrice;
                                    
                                    // Update Variance quantity
                                    $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].VarianceQuantity = $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ClaimedQty - $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ApprovedQty;
                                    
                                    // Update Variance amount
                                    $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].VarianceAmount = $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ClaimedSubtotal - $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ApprovedSubTotal;
                                    $scope.WizardModel.wizardInfo.TotalVarianceAmount += $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].VarianceAmount;
                                    
                                    // Update Tax amount
                                    $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].TaxAmount = $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ApprovedSubTotal * ($scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].Tax / 100);
                                    
                                    $scope.WizardModel.wizardInfo.ApprovedItems += $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].ApprovedSubTotal;
                                    $scope.WizardModel.wizardInfo.TaxAmount += $scope.WizardModel.wizardInfo.NonVarianceLineItemList[i].TaxAmount;
                                }
                                
                            }
                        }
                        $scope.WizardModel.wizardInfo.Total = $scope.WizardModel.wizardInfo.ApprovedItems + $scope.WizardModel.wizardInfo.TaxAmount - $scope.WizardModel.wizardInfo.DeductibleAmount;
                        
                        if($scope.WizardModel.wizardInfo.TotalVarianceAmount != 0) {
                            $scope.WizardModel.wizardInfo.VarianceHeader = 'Outstanding Variance';
                        } else {
                            $scope.WizardModel.wizardInfo.VarianceHeader = 'No Variance';
                        }
                    }
                    
                    $scope.CustomerOrderModel.ResponseDateChanges = function(indexVal) {
                        if($scope.WizardModel.wizardInfo.ResponseDate == null || $scope.WizardModel.wizardInfo.ResponseDate.length == 0) {
                            $scope.WizardModel.wizardInfo.ClaimResponseValidationModel['ResponseDate'] = {isError : true, ErrorMessage : "Response Date is required"};
                            $scope.WizardModel.wizardInfo.NextButtonAvail = false;
                            return;
                        }  else if($scope.WizardModel.wizardInfo.ProviderClaimNumber == null || $scope.WizardModel.wizardInfo.ProviderClaimNumber.length == 0 ){
                            $scope.WizardModel.wizardInfo.ClaimResponseValidationModel['ProviderClaimNumber'] = {isError : true, ErrorMessage : "Claim No is required"};
                            $scope.WizardModel.wizardInfo.NextButtonAvail = false;
                            return;
                        }
                        else {
                            $scope.WizardModel.wizardInfo.ClaimResponseValidationModel['ResponseDate'] = {isError : false, ErrorMessage : ""};
                            $scope.WizardModel.wizardInfo.ClaimResponseValidationModel['ProviderClaimNumber'] = {isError : false, ErrorMessage : ""};
                        }
                        
                        $scope.WizardModel.wizardInfo.NextButtonAvail = true;
                    }

                    $scope.CustomerOrderModel.changeVarianceBillTo = function(indexVal) {
                        if($scope.WizardModel.wizardInfo.VarianceLineItemList[i].BillTo == 'Customer') {
                            $scope.WizardModel.wizardInfo.VarianceLineItemList[i].Category = null;
                        }
                        $scope.CustomerOrderModel.updateFinalizeButtonVisibility();
                    }
                    
                    $scope.CustomerOrderModel.changeVarianceCategory = function(indexVal) {
                        $scope.CustomerOrderModel.updateFinalizeButtonVisibility();
                    }
                    
                    $scope.CustomerOrderModel.updateFinalizeButtonVisibility = function() {
                        if($scope.WizardModel != null && $scope.WizardModel.wizardInfo != null) {
                            $scope.WizardModel.wizardInfo.FinalizeButtonAvail = true;
                            if($scope.WizardModel.wizardInfo.VarianceLineItemList != null) {
                                for(var i = 0; i < $scope.WizardModel.wizardInfo.VarianceLineItemList.length; i++) {
                                    if($scope.WizardModel.wizardInfo.VarianceLineItemList[i].BillTo == 'Third_Party'){
                                        $scope.WizardModel.wizardInfo.VarianceLineItemList[i].BillTo = 'Internal';
                                    }
                                    
                                    var VarianceLineItem = $scope.WizardModel.wizardInfo.VarianceLineItemList[i];
                                    if(VarianceLineItem.BillTo == null || VarianceLineItem.BillTo.length == 0) {
                                        $scope.WizardModel.wizardInfo.FinalizeButtonAvail = false;
                                        break;
                                    }
                                    if(VarianceLineItem.BillTo == 'Internal' && (VarianceLineItem.Category == null || VarianceLineItem.Category.length == 0)) {
                                        $scope.WizardModel.wizardInfo.FinalizeButtonAvail = false;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    
                    $scope.CustomerOrderModel.resetClaimResponseValidation = function() {
                        $scope.WizardModel.wizardInfo.ClaimResponseValidationModel = {ResponseDate : {isError : false, ErrorMessage : ""},ProviderClaimNumber : {isError : false, ErrorMessage : ""}};
                        $scope.WizardModel.wizardInfo.NextButtonAvail = true;
                    }
                    
                    $scope.CustomerOrderModel.SaveClaimResponse = function(ServiceOrderHeaderId, claimResponse, currentStepNumber, closeWizard){
                        WizardService.saveClaimResponse(ServiceOrderHeaderId, JSON.stringify(claimResponse), currentStepNumber)
                        .then(function (successfulSearchResult) {
                            debug('After Save call:');
                            debug(successfulSearchResult);
                            //Notification.success('Service Order Saved Successfully');
                            if($scope.WizardModel.currentClaimWizardKey == 'Claim_Response'){
                                if( currentStepNumber == 3 || closeWizard) {
                                    $scope.WizardModel.closeWizardMode();
                                }
                                // Get call in case CREATE claim response wizard
                                $scope.WizardModel.wizardInfo = successfulSearchResult;
                                
                                $scope.WizardModel.wizardInfo.ClaimDispositionsList = ['Accepted', 'Denied'];
                                if($scope.WizardModel.wizardInfo.ClaimDisposition == 'Accepted w/ Adjustment'){
                                    $scope.WizardModel.wizardInfo.ClaimDispositionsList.remove('Accepted w/ Adjustment');
                                    $scope.WizardModel.wizardInfo.ClaimDispositionsList.push('Accepted w/ Adjustment');
                                }
                                
                                if($scope.WizardModel.wizardInfo.InternalCategoryList == null) {
                                    $scope.WizardModel.wizardInfo.InternalCategoryList = [];
                                }
                                $scope.WizardModel.wizardInfo.VarianceBillToList = ['Internal', 'Customer'];
                                $scope.CustomerOrderModel.editClaimResponseDetailItemRow(-1);
                                $scope.CustomerOrderModel.calculateClaimResponseVariance(null);
                                $scope.CustomerOrderModel.resetClaimResponseValidation();
                                
                                debug($scope.WizardModel.wizardInfo);
                            } else if($scope.WizardModel.currentClaimWizardKey == 'View_Claim_Response'){
                                // Get call in case VIEW claim response wizard
                            }
                        },
                        function (errorSearchResult) {
                            responseData = errorSearchResult;
                        });
                    }
                    
                    $scope.CustomerOrderModel.isNextbuttonActive = function(){
                        var activeChevronIndex;
                        if($scope.CustomerOrderModel.currentChevronList != undefined){
                            for(var i =0; i < $scope.CustomerOrderModel.currentChevronList.length; i++){
                                if($scope.CustomerOrderModel.currentChevronList[i].isActive){
                                    activeChevronIndex = i;
                                }
                            }
                            if(activeChevronIndex == $scope.CustomerOrderModel.currentChevronList.length-1){
                                return false;
                            }   
                        }
                        return true;
                    
                    }
                    
                    $scope.CustomerOrderModel.showSection = function(sectionUniqueKey){
                        var index = _.findIndex($scope.CustomerOrderModel.currentChevronList, {key: sectionUniqueKey});
                        if(index > -1 && $scope.CustomerOrderModel.currentChevronList != undefined){
                            return $scope.CustomerOrderModel.currentChevronList[index].isActive;
                        }
                        return false;
                        
                    }
                    
                    
                    // Start Sign In Service information
                        $scope.CustomerOrderModel.getDateFromSFformat = function(salesforceDate){
                        if(salesforceDate == null){
                            return $scope.CustomerOrderModel.getCurrentDate();
                        }  
                        var date = salesforceDate.substring(0, salesforceDate.indexOf(" "));
                        return date;
                    }
                    
                    $scope.CustomerOrderModel.getTimeFromSFformat = function(salesforceDate){
                        if(salesforceDate == null){
                            return '12:00 AM';
                        }
                        var time = salesforceDate.substring(salesforceDate.indexOf(" ")+1, salesforceDate.length);
                        return time;
                    }

                                        
                    $scope.WizardModel.setCurrentCOU = function(COUId){
                        debug($scope.CustomerOrderModel.COUList);
                        for(var i=0; i<$scope.CustomerOrderModel.COUList.length; i++) {
                            $scope.WizardModel.wizardInfo.Sign_In.Service_Information.selectedCOU = {};
                            if($scope.CustomerOrderModel.COUList[i].Id == COUId){
                                debug('matched '+COUId);


                                $scope.WizardModel.wizardInfo.Sign_In.Service_Information.selectedCOU = $scope.CustomerOrderModel.COUList[i];
                                $scope.WizardModel.wizardInfo.Sign_In.Service_Information.COUId = $scope.CustomerOrderModel.COUList[i].Id;
                                break;
                            } 
                        }

                    }  
                    
                    $scope.CustomerOrderModel.getSFformatDate = function(currentDate, currentTime){
                        var dateTime = currentDate+' '+currentTime;
                        return dateTime;
                    } 
                    
                    $scope.CustomerOrderModel.getCurrentDate  = function(){
                        var today = new Date();
                        var dd = today.getDate();
                        var mm = today.getMonth()+1; //January is 0!
                        var yyyy = today.getFullYear();
                        if(dd<10){
                            dd='0'+dd

                        } 
                        if(mm<10){
                            mm='0'+mm

                        }   
                        var today = mm+'/'+dd+'/'+yyyy;

                        return today;
                    }
                    
                    $scope.CustomerOrderModel.validatePromisedByDate  = function(index){
                    	 debug("index : "+index);
                    	 
                    	 if($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.selectedDate.length < 10)  //SOHeader.SOHeaderInfo.selectedDate
                    	 {
                    	 	debug("SOHeader.SOHeaderInfo.selectedDate.length < 10 : ");
                    	 	Notification.error('Promised By is Invalid');
                    	 	return;
                    	 }
                    	   
	                     /*  if(!selectedDate){
						  	return;
	                      } 
	                      else{
	                      	alert("selectedDate : "+selectedDate);
	                      } */
                        /* var selectedDate = new D
                        
                        
                        
                        
                        
                        
                        ate($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.selectedDate);
                        var selectedTime = $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.selectedTime;
                        var Hours = selectedTime.indexOf('PM') > -1 ? parseInt(selectedTime.substring(0, selectedTime.indexOf(':')))+12 : parseInt(selectedTime.substring(0, selectedTime.indexOf(':')));
                        selectedDate.setHours(Hours); 
                        selectedDate.setMinutes(parseInt(selectedTime.substring(selectedTime.indexOf(':')+1, selectedTime.length))); 
                        var today = new Date();
                        var timeDiff = Math.floor((selectedDate.getTime() - today.getTime()) / (1000*60*60));
                        var isPrevDate = timeDiff < 0 ? true : false;
                        if(isPrevDate){
                            Notification.error('Promised By is Invalid');  
                        } */
                        $scope.CustomerOrderModel.SaveserviceInfo(index);
                        //return isPrevDate;
                    }
                    
                    $scope.WizardModel.toggleIsPromisedByAmPm = function(value){
                        debug('toggle called' + value);
                        if($scope.WizardModel.wizardInfo.Sign_In.Service_Information.IsPromisedByAmPm == value){
                           $scope.WizardModel.wizardInfo.Sign_In.Service_Information.IsPromisedByAmPm = '';
                        }else{
                            $scope.WizardModel.wizardInfo.Sign_In.Service_Information.IsPromisedByAmPm = value;
                          $scope.WizardModel.wizardInfo.Sign_In.Service_Information.selectedTime  = '12:00 '+value;
                        }
                        //$scope.CustomerOrderModel.validatePromisedByDate(index);   
                    }
                    
                    $scope.WizardModel.changeProviderList = function() {
                        //$scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.Provider = {};
                        for(var i=0; i<$scope.CustomerOrderModel.MasterData.TTList.length; i++){
                            if($scope.WizardModel.wizardInfo.Sign_In.Service_Information.TransactionTypeId == $scope.CustomerOrderModel.MasterData.TTList[i].Id){
                                $scope.WizardModel.wizardInfo.Sign_In.Service_Information.TransactionType = $scope.CustomerOrderModel.MasterData.TTList[i].Type;
                                //$scope.WizardModel.wizardInfo.Sign_In.Service_Information.Provider = $scope.CustomerOrderModel.MasterData.TTList[i].ProviderList[0];
                            }
                        }
                        
                        if($scope.WizardModel.wizardInfo.Sign_In.Service_Information.TransactionType !='Internal') {
                            $scope.WizardModel.wizardInfo.Sign_In.Service_Information.CategoryNameStr = '';
                            $scope.WizardModel.wizardInfo.Sign_In.Service_Information.Category = null;
                            $scope.WizardModel.wizardInfo.Sign_In.Service_Information.CategoryName = '';
                        }

                    }
                    
                    $scope.WizardModel.addAndRemoveFromMultiSelect = function (event, index, modelName, ModelKey, fieldLabel) {
                        var isAlreadyExist = false;
                        var fieldValue = $scope.WizardModel.wizardInfo.Sign_In.Service_Information[modelName];
                            debug(fieldValue);


                        if((event.keyCode == 13 || event.keyCode == 9) && fieldValue != '' && fieldValue != undefined) {
                            for(var i=0; i<$scope.WizardModel.wizardInfo.Sign_In.Service_Information[ModelKey].length; i++){
                                if($scope.WizardModel.wizardInfo.Sign_In.Service_Information[ModelKey][i] == $scope.WizardModel.wizardInfo.Sign_In.Service_Information[modelName]){
                                    isAlreadyExist = true; 
                                    Notification.error('Same '+ fieldLabel +' Already Exist');
                                }
                            }
                            if(!isAlreadyExist){
                                $scope.WizardModel.wizardInfo.Sign_In.Service_Information[ModelKey].push($scope.WizardModel.wizardInfo.Sign_In.Service_Information[modelName]);
                               // $scope.CustomerOrderModel.SaveserviceInfo(index);
                            }
                            $scope.WizardModel.wizardInfo.Sign_In.Service_Information[modelName] = '';
                        }
                     
                        /*remove using backspace */
                        var length = $scope.WizardModel.wizardInfo.Sign_In.Service_Information[ModelKey].length;
                        if(event.keyCode === 8 && (fieldValue == undefined || fieldValue == '')) {
                            $scope.WizardModel.wizardInfo.Sign_In.Service_Information[ModelKey].splice(length-1, 1);
                            //$scope.CustomerOrderModel.SaveserviceInfo(index);
                        }
                        
                    }
                    
                    // Remove 
                    $scope.WizardModel.removeFromMultiSelect = function(index, ModelKey) {
                        $scope.WizardModel.wizardInfo.Sign_In.Service_Information[ModelKey].splice(index, 1);
                    }
                    
                    
                    // add remove notes
                    $scope.CustomerOrderModel.addAndRemoveFromNotesMultiSelect = function (event, index, modelName, ModelKey, fieldLabel) {
                        var isAlreadyExist = false;
                        var fieldValue = $scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec[modelName];
                        
                        if((event.keyCode == 13 || event.keyCode == 9) && fieldValue != '' && fieldValue != undefined) {
                            for(var i=0; i<$scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec[ModelKey].length; i++){
                                if($scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec[ModelKey][i] == $scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec[modelName]){
                                    isAlreadyExist = true; 
                                    Notification.error('Same '+ fieldLabel +' Already Exist');
                                }
                            }
                            if(!isAlreadyExist){
                                $scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec[ModelKey].push($scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec[modelName]);
                                $scope.CustomerOrderModel.saveServiceReview(index);

                            }
                            $scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec[modelName] = '';
                        }
                     
                        /*remove using backspace */
                        var length = $scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec[ModelKey].length;
                        if(event.keyCode === 8 && (fieldValue == undefined || fieldValue == '')) {
                            $scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec[ModelKey].splice(length-1, 1);
                            $scope.CustomerOrderModel.saveServiceReview(index);
                        }
                    }
                    
                    $scope.CustomerOrderModel.removeNotesFromMultiSelect = function(index, parentIndex, ModelKey) {
                        $scope.CustomerOrderModel.SOHeaderList[parentIndex].SOReviewRec[ModelKey].splice(index, 1);
                        $scope.CustomerOrderModel.saveServiceReview(parentIndex);
                    }
                    
                    $scope.CustomerOrderModel.PrintPreviewDetails = function(soHeaderId){
                        debug('print soHeaderId ' + soHeaderId)         
                        $scope.PrintPreviewModel.PrintPreviewInfo = [];             
                        FileUploadService.PrintPreviewDetails(soHeaderId).then(
                            function (successfulResult) {
                            debug("print data")


                            debug(successfulResult);
                            $scope.PrintPreviewModel.PrintPreviewInfo=successfulResult;
                        }, function (errorSearchResult) {
                            responseData = errorSearchResult;
                        })
        
                    }
                    
                    
                    
                    
                    // End Sign In Service Information
                    
                    // End Wizard Js
                    
                    $scope.CustomerOrderModel.sidepanelLink = function (event, relatedContent, isWork, isClaim) {
                        event.preventDefault();
                        //debug('sidepanelLink');
                        //$scope.CustomerOrderModel.displaySections[relatedContent] = true;
                        angular.element(document).off("scroll");
                                              var target = angular.element(angular.element(event.target).closest('a')).attr("href");
                        debug(target);


                        angular.element('html, body').stop().animate({
                            scrollTop : angular.element(target).offset().top - 120
                        }, 500, function () {
                            angular.element(document).on("scroll", function () {
                                $scope.CustomerOrderModel.onScroll();
                            });
                            $scope.CustomerOrderModel.onScroll();
                            
                        }).promise().then(function() {
                            if(isWork || isClaim){
                                $scope.CustomerOrderModel.scrollCallback(target, isWork, isClaim);
                            }
                        });
                    }
        
                    $scope.CustomerOrderModel.onScroll = function () {
                        if($scope.CustomerOrderModel.isWizardMode){
                            return;
                        }
                        var activeSidepanelink;
                        var heading = '';
                        var scrollPos = angular.element(document).scrollTop();
                        var fixedHeight = 90;
                     
                        
                        if (scrollPos < angular.element('#CustomerSection').position().top + angular.element('#CustomerSection').height() + fixedHeight) {
                            activeSidepanelink = '#CustomerSection';
                        } else if(($scope.CustomerOrderModel.serviceOrderList.length > 0)  && (scrollPos < angular.element($scope.CustomerOrderModel.serviceOrderList[$scope.CustomerOrderModel.serviceOrderList.length - 1].SectionID).position().top + angular.element($scope.CustomerOrderModel.serviceOrderList[$scope.CustomerOrderModel.serviceOrderList.length-1].SectionID).height() + fixedHeight  )){
                                for ( i =0 ; i <  $scope.CustomerOrderModel.serviceOrderList.length ; i++ ){
                                    var sectionId=$scope.CustomerOrderModel.serviceOrderList[i].SectionID;
                                    if((scrollPos < angular.element(sectionId).position().top + angular.element(sectionId).height() + fixedHeight) && angular.element(sectionId).height() != 0  ){
                                            activeSidepanelink = sectionId;
                                            break;
                                    }
                                }     
                        } else if ( (scrollPos < angular.element('#MerchandiseSection').position().top + angular.element('#MerchandiseSection').height() + fixedHeight ) && angular.element('#MerchandiseSection').height() != 0) {
                                debug(angular.element('#MerchandiseSection').position().top + angular.element('#MerchandiseSection').height()); 
                            activeSidepanelink = '#MerchandiseSection';
                        } else if ( (scrollPos < angular.element('#SpecialOrderSection').position().top + angular.element('#SpecialOrderSection').height() + fixedHeight)  && angular.element('#SpecialOrderSection').height() != 0) {
                            activeSidepanelink = '#SpecialOrderSection';
                        } else if ( ( scrollPos < angular.element('#DepositSection').position().top + angular.element('#DepositSection').height() + fixedHeight)  && angular.element('#DepositSection').height() != 0  ) {
                            activeSidepanelink = '#DepositSection';
                        } else if ( (scrollPos < angular.element('#CheckoutSection').position().top + angular.element('#CheckoutSection').height() + fixedHeight) && angular.element('#CheckoutSection').height() != 0  ) {
                            activeSidepanelink = '#CheckoutSection';
                        } else if ( (scrollPos < angular.element('#InvoiceHistory').position().top + angular.element('#InvoiceHistory').height() + fixedHeight) &&  angular.element('#InvoiceHistory').height() != 0 ) {
                            activeSidepanelink = '#InvoiceHistory';
                        }else{
                            activeSidepanelink = '#InvoiceHistory';
                        }
                        
                        $scope.CustomerOrderModel.activeSidepanelink = activeSidepanelink;
                         if(activeSidepanelink){
                            $scope.CustomerOrderModel.UpdateSelectedSectionItems( activeSidepanelink.replace('#',''));
                        }
                        if (!$scope.$$phase) {
                            $scope.$digest();
                        }
                    }
                    
                    
                    
                    $scope.CustomerOrderModel.scrollCallback = function(target, isWork, isClaim){
                        var currentIndex = parseInt(target.replace('#ServiceInfoSection', ''));
                        var targetId = isWork ? "SoHeaderWorkDropdown"+currentIndex : isClaim ? "SoHeaderClaimDropdown"+currentIndex : null ;
                        var targetClaimId  = "SoHeaderWorkDropdown"+currentIndex;
                        debug('targetId  '+targetId)
                        if(targetId != null){
                            angular.element('#'+targetId).addClass("open");
                        }
                        
                    }
                    
                    //Function to scroll dropdown list items






                        
                                                            
                                                            
                    // Update Section Search to add List 
                    
                        $scope.CustomerOrderModel.UpdateSelectedSection= function(event,index){
                        event.preventDefault();
                        if($scope.CustomerOrderModel.SectionList[index].item =='+ Add New Service Order' ){
                            if($scope.CustomerOrderModel.Customer.Value ==null){
                                Notification.error('First add Customer before creating Service Order');
                                return;
                            }
                            if($scope.CustomerOrderModel.coHeaderDetails.OrderStatus == 'Closed'){
                                Notification.error('Can\'t create Service Order on closed Customer Order');
                                return;
                            }
                            CustomerInfoService.createSOHeader($scope.CustomerOrderModel.coHeaderId)
                            .then(function (successfulSearchResult) {
                            debug('%c Create SO ', 'background: #222; color: #bada55');
                            debug(successfulSearchResult);
                            var CurrentSectionResult =successfulSearchResult.SOList
                            var lastitemIndex=CurrentSectionResult.length -1;
                            var AddedItem= CurrentSectionResult[lastitemIndex]
                            var ServiceOrderNo = $scope.CustomerOrderModel.serviceOrderList.length;

                            
                            for(var i=0; i<$scope.CustomerOrderModel.MasterData.TTList.length; i++){
                                if($scope.CustomerOrderModel.MasterData.TTList[i].Type == 'Customer'){
                                    AddedItem.SOHeaderInfo.TransactionTypeId = $scope.CustomerOrderModel.MasterData.TTList[i].Id;
                                    AddedItem.SOHeaderInfo.TransactionType = $scope.CustomerOrderModel.MasterData.TTList[i].Type;
                                    debug('AddedItem');
                                    debug(AddedItem);







                                }
                            }
                            
                            $scope.CustomerOrderModel.SOHeaderList.push(AddedItem); 
                            $scope.CustomerOrderModel.serviceOrderList.push({'SectionID':'#ServiceOrderSection'+ ServiceOrderNo,'Name':AddedItem.SOHeaderInfo.Name,'Id':AddedItem.SOHeaderInfo.Id})
                            $scope.CustomerOrderModel.displaySections.ServiceOrder.push({'display':true});
                            $scope.CustomerOrderModel.setServiceOrderData();
                            $scope.CustomerOrderModel.resetServiceOrderData();
                            $scope.CustomerOrderModel.populateLeftSideHeadingLables();  
                            
                            
                                      
                            var ServiceOrderIndex = 0;   
                            debug($scope.CustomerOrderModel.SectionList);
                                setTimeout(function () { 
                                    for(var j=0; j< $scope.CustomerOrderModel.SectionList.length;j++){

                                            
                                            if($scope.CustomerOrderModel.SectionList[j].relatedSection=='ServiceOrderSection'+ ($scope.CustomerOrderModel.serviceOrderList.length-1)){
                                                $scope.CustomerOrderModel.SelectedSection = $scope.CustomerOrderModel.SectionList[j];
                                                ServiceOrderIndex = j;




                                                
                                            }
                                    }
                                    
                                    debug($scope.CustomerOrderModel.SelectedSection.relatedSection);
                                    $scope.CustomerOrderModel.scrollToPanel (event,$scope.CustomerOrderModel.SelectedSection.relatedSection);

                                    
                                    if($scope.CustomerOrderModel.COUList.length == 1){
                                        $scope.CustomerOrderModel.setCurrentCOU($scope.CustomerOrderModel.COUList[0].Id, ServiceOrderIndex-1); 




                                    }
                                    
                                }, 1000);
                                
                                $scope.CustomerOrderModel.createGridEditItem(null);  
                                
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                        });
                    }


                    else{
                        $scope.CustomerOrderModel.SelectedSection = $scope.CustomerOrderModel.SectionList[index];
                        $scope.CustomerOrderModel.scrollToPanel (event,$scope.CustomerOrderModel.SelectedSection.relatedSection);
                    
                    }
                    
                   }
                   
                   $scope.CustomerOrderModel.UpdateSelectedSectionItems=function(sectionName){
                        if($scope.CustomerOrderModel.SelectedSection == sectionName) return;
                        for(i=0; i < $scope.CustomerOrderModel.SectionList.length; i ++){
                                if($scope.CustomerOrderModel.SectionList[i].relatedSection == sectionName) {
                                    return  $scope.CustomerOrderModel.SelectedSection = $scope.CustomerOrderModel.SectionList[i];
                                }                           
                        }
                    }
                    
                    /*$scope.CustomerOrderModel.UpdateSelectedSection= function(event,index){
                        event.preventDefault();


                        
                        $scope.CustomerOrderModel.SelectedSection = $scope.CustomerOrderModel.SectionList[index];
                        $scope.CustomerOrderModel.scrollToPanel (event,$scope.CustomerOrderModel.SelectedSection.relatedSection);


                        
                    


                    }*/     
                    
                    
                    
                    // Service order ########
                    $scope.CustomerOrderModel.LoadServiceOrder = function(){
                        SOHeaderService.getSOMasterData($scope.CustomerOrderModel.coHeaderId)
                        .then(function (SOMasterData) {
                            debug('SOMasterData');
                            debug(SOMasterData);


                            $scope.CustomerOrderModel.MasterData = SOMasterData;
                            SOHeaderService.getSOHeaderDetails($scope.CustomerOrderModel.coHeaderId, null)
                            .then(function (successfulSearchResult1) {
                                debug('---Service Order Data 1234567890 ---');
                                debug(successfulSearchResult1)
                                $scope.CustomerOrderModel.SOHeaderList = successfulSearchResult1.SOList;
                                $scope.CustomerOrderModel.pinnedItems = successfulSearchResult1.PinnedItemList;
                                $scope.CustomerOrderModel.getServiceOrderList();
                                $scope.CustomerOrderModel.setServiceOrderData();
                                $scope.CustomerOrderModel.resetServiceOrderData();
                                $scope.CustomerOrderModel.createGridEditItem(null);
                                $scope.CustomerOrderModel.populateLeftSideHeadingLables();
                                debug('CustomerOrderModel.SoItems_editRow');
                                debug($scope.CustomerOrderModel.SoItems_editRow);

                                $scope.CustomerOrderModel.createHoursLoggedGridEditItem(null);
                                $scope.CustomerOrderModel.createAttachmentGridEditItem(null);
                                
                                setTimeout(function(){ angular.element('[data-toggle="tooltip"]').tooltip(); }, 1000); 
                                var leftPanelLinks = angular.element(window).height() - ( angular.element(".headerNav").height() + angular.element(".orderNumber").height() + angular.element(".sidepaneluserinfo").height() + angular.element(".statusRow").height() + angular.element(".ownerInfo").height() + angular.element(".sideBarTotals").height() + 85);
                                angular.element(".leftPanelLinks").css("height",leftPanelLinks); 


                                 
                                $scope.CustomerOrderModel.calculateOrderTotal();
                                debug('soheaderList');


                                debug($scope.CustomerOrderModel.SOHeaderList);
                                
                                $scope.CustomerOrderModel.isrefresh = false;

                            },
                                function (errorSearchResult) {
                                responseData = errorSearchResult;
                                Notification.error('Some Error Occured please Try later');
                                $scope.CustomerOrderModel.isrefresh = false;

                            });
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                        });
                    }

                    // Attachments function 
                    $scope.CustomerOrderModel.createAttachmentGridEditItem = function(indexToUpdate){
                        if(indexToUpdate == null){
                            $scope.CustomerOrderModel.Attachment_editRow = [];
                            for(var i=0; i<$scope.CustomerOrderModel.SOHeaderList.length; i++){
                                var SOHeader_Attachment_editRow =[]; 
                                for(var j=0; j<$scope.CustomerOrderModel.SOHeaderList[i].AttachmentList.length; j++){
                                    SOHeader_Attachment_editRow.push({
                                         isEdit : false,
                                         radioValue : 0
                                     });
                                }
                                $scope.CustomerOrderModel.Attachment_editRow.push({SOHeader_Attachment_editRow : SOHeader_Attachment_editRow});
                            }
                            
                        }
                        debug('Attachment_editRow');
                        debug($scope.CustomerOrderModel.Attachment_editRow);
                   }
                   
                   
                    $scope.CustomerOrderModel.editAttachmentItem = function (parentIndex, index) {
                        //debug(parentIndex);
                        //debug(index);


                        if($scope.CustomerOrderModel.SOHeaderList[parentIndex].SOHeaderInfo.WorkStatus == 'Complete' 
                        	|| $scope.CustomerOrderModel.SOHeaderList[parentIndex].SOHeaderInfo.WorkStatus == 'Reviewed'
                        	|| $scope.CustomerOrderModel.SOHeaderList[parentIndex].SOHeaderInfo.WorkStatus == 'Signed Out'){
                            return;
                        }
                        if(index != null){
                            var isEditModeEnabled = false;
                            for (i = 0; i < $scope.CustomerOrderModel.Attachment_editRow[parentIndex].SOHeader_Attachment_editRow.length; i++) {
                                if ($scope.CustomerOrderModel.Attachment_editRow[parentIndex].SOHeader_Attachment_editRow[i].isEdit == true) {
                                    isEditModeEnabled = true;

                                }
                                $scope.CustomerOrderModel.Attachment_editRow[parentIndex].SOHeader_Attachment_editRow[i].isEdit = false;

                            }
                            if (!isEditModeEnabled) {
                                $scope.CustomerOrderModel.Attachment_editRow[parentIndex].SOHeader_Attachment_editRow[index].isEdit = true;


                            }
                        }else{
                            for (i = 0; i < $scope.CustomerOrderModel.Attachment_editRow[parentIndex].SOHeader_Attachment_editRow.length; i++) {
                                $scope.CustomerOrderModel.Attachment_editRow[parentIndex].SOHeader_Attachment_editRow[i].isEdit = false;


                            }
                        }
                    }
                   
                   
                   $scope.CustomerOrderModel.createHoursLoggedGridEditItem = function(indexToUpdate){
                        if(indexToUpdate == null){
                            $scope.CustomerOrderModel.HoursLogged_editRow = [];
                            for(var i=0; i<$scope.CustomerOrderModel.SOHeaderList.length; i++){
                                var SOHeader_HoursLogged_editRow =[]; 
                                for(var j=0; j<$scope.CustomerOrderModel.SOHeaderList[i].HoursLoggedList.length; j++){
                                    SOHeader_HoursLogged_editRow.push({




                                         isEdit : false,
                                         radioValue : 0
                                     });
                                }
                                $scope.CustomerOrderModel.HoursLogged_editRow.push({SOHeader_HoursLogged_editRow : SOHeader_HoursLogged_editRow});



                            }
                            
                        }
                        //debug('HoursLogged_editRow');
                        //debug($scope.CustomerOrderModel.HoursLogged_editRow);
                   }
                   
                   $scope.CustomerOrderModel.editHoursLoggedItem = function (parentIndex, index) {
                        if($scope.CustomerOrderModel.SOHeaderList[parentIndex].SOHeaderInfo.WorkStatus == 'Complete' 
                        	|| $scope.CustomerOrderModel.SOHeaderList[parentIndex].SOHeaderInfo.WorkStatus == 'Reviewed'
                        	|| $scope.CustomerOrderModel.SOHeaderList[parentIndex].SOHeaderInfo.WorkStatus == 'Complete'){
                            return;
                        }
                        if(index != null){
                            var isEditModeEnabled = false;
                            for (i = 0; i < $scope.CustomerOrderModel.HoursLogged_editRow[parentIndex].SOHeader_HoursLogged_editRow.length; i++) {
                                if ($scope.CustomerOrderModel.HoursLogged_editRow[parentIndex].SOHeader_HoursLogged_editRow[i].isEdit == true) {
                                    isEditModeEnabled = true;

                                }
                                $scope.CustomerOrderModel.HoursLogged_editRow[parentIndex].SOHeader_HoursLogged_editRow[i].isEdit = false;

                            }
                            if (!isEditModeEnabled) {
                                $scope.CustomerOrderModel.HoursLogged_editRow[parentIndex].SOHeader_HoursLogged_editRow[index].isEdit = true;


                            }
                        }else{
                            for (i = 0; i < $scope.CustomerOrderModel.HoursLogged_editRow[parentIndex].SOHeader_HoursLogged_editRow.length; i++) {
                                $scope.CustomerOrderModel.HoursLogged_editRow[parentIndex].SOHeader_HoursLogged_editRow[i].isEdit = false;


                            }
                        }
                    }
                    
                    
                    $scope.CustomerOrderModel.editHoursLoggedGoAction = function(parentIndex, index){
                        var radioValue = $scope.CustomerOrderModel.HoursLogged_editRow[parentIndex].SOHeader_HoursLogged_editRow[index].radioValue;
                        if(radioValue == 0){
                            debug($scope.CustomerOrderModel.SOHeaderList[parentIndex].HoursLoggedList[index]);
                            var coHeaderId = $scope.CustomerOrderModel.coHeaderId;
                            $scope.$broadcast('EditHourLogServiceEvent', $scope.CustomerOrderModel.SOHeaderList[parentIndex].HoursLoggedList[index], coHeaderId, parentIndex);

                        }
                    }
                    
                    // Attachment apply function 
                    $scope.CustomerOrderModel.editAttachmentApplyAction = function(attachmentId, soHeaderId, parentIndex, index){
                        var radioValue = $scope.CustomerOrderModel.Attachment_editRow[parentIndex].SOHeader_Attachment_editRow[index].radioValue;
                        if(radioValue == 0){
                            FileUploadService.removeAttachment(attachmentId, soHeaderId).then(
                                function (successfulResult) {
                                debug(parentIndex);


                                debug(successfulResult);
                                $scope.CustomerOrderModel.SOHeaderList[parentIndex].AttachmentList = successfulResult;
                                $scope.CustomerOrderModel.createAttachmentGridEditItem(null);
                            }, function (errorSearchResult) {
                                responseData = errorSearchResult;
                            })
                        }  
                   
                    } 
                   //by Subhrant Function to createeditmode for grid items
                   $scope.CustomerOrderModel.createGridEditItem = function(indextoUpdate){
                        var allItem = false;
                        var firstItem=false;
                        if(indextoUpdate !=null){



                                    var HeaderItems_editRow =[];
                                    for(var j =0 ; j < $scope.CustomerOrderModel.SOHeaderList[indextoUpdate].SOGridItems.length;j++){
                                                 var  SOLI_editRow = [];
                                                 if(j==0 && $scope.CustomerOrderModel.SOHeaderList[indextoUpdate].SOGridItems[j].SOKH.Id !=null){



                                                        firstItem =false;
                                                        allItem = true;
                                                 }
                                                 else if(j==0 && $scope.CustomerOrderModel.SOHeaderList[indextoUpdate].SOGridItems[j].SOKH.Id == null){



                                                        firstItem =true;
                                                        allItem = false;
                                                 }
                                                        for(var k=0 ; k < $scope.CustomerOrderModel.SOHeaderList[indextoUpdate].SOGridItems[j].SOKH.SOLIList.length;k++){

                                                            
                                                             SOLI_editRow.push({
                                                                    isEdit : false,
                                                                    radioValue : 0,
                                                                    optionSelected : 0,
                                                                    IsEvenRow : allItem,
                                                                    MoveTosection:''
                                                                });
                                                                
                                                                allItem =(allItem == true ? false : true);                                              



                                                        }
                                                    
                                                    if(j==0 ){
                                                         HeaderItems_editRow.push({
                                                                isEdit : false,
                                                                radioValue : 0,
                                                                optionSelected : 0,
                                                                IsEvenRow : firstItem,
                                                                SOLI_editRow : SOLI_editRow,
                                                                MoveTosection : ''
                                                        });
                                                    }
                                                    else{
                                                            HeaderItems_editRow.push({
                                                                isEdit : false,
                                                                radioValue : 0,
                                                                optionSelected : 0,
                                                                IsEvenRow : allItem,
                                                                SOLI_editRow : SOLI_editRow,
                                                                MoveTosection : ''
                                                        });
                                                        
                                                        if( $scope.CustomerOrderModel.SOHeaderList[indextoUpdate].SOGridItems[j].SOKH.Id !=null){
                                                            allItem =(allItem ==true ? false : true);
                                                        }
                                                    }
                                                }
                                                $scope.CustomerOrderModel.SoItems_editRow[indextoUpdate].HeaderItems_editRow = HeaderItems_editRow;
                        
                        }
                        else{
                        
                                    $scope.CustomerOrderModel.SoItems_editRow=[];

                                    
                                    for(var i=0; i < $scope.CustomerOrderModel.SOHeaderList.length;i++){
                                                var HeaderItems_editRow =[];
                                                for(var j =0 ; j < $scope.CustomerOrderModel.SOHeaderList[i].SOGridItems.length;j++){
                                                 var  SOLI_editRow = [];
                                                 if(j==0 && $scope.CustomerOrderModel.SOHeaderList[i].SOGridItems[j].SOKH.Id !=null){
                                                        firstItem =false;
                                                        allItem = true;
                                                 }
                                                 else if(j==0 && $scope.CustomerOrderModel.SOHeaderList[i].SOGridItems[j].SOKH.Id == null){
                                                        firstItem =true;
                                                        allItem = false;
                                                 }
                                                for(var k=0 ; k < $scope.CustomerOrderModel.SOHeaderList[i].SOGridItems[j].SOKH.SOLIList.length;k++){
                                                     SOLI_editRow.push({
                                                            isEdit : false,
                                                            radioValue : 0,
                                                            optionSelected : 0,
                                                            IsEvenRow : allItem,
                                                            MoveTosection:''
                                                        });
                                                        allItem =(allItem == true ? false : true);                                              
                                                }
                                                    
                                                if(j==0 ){
                                                     HeaderItems_editRow.push({
                                                            isEdit : false,
                                                            radioValue : 0,
                                                            optionSelected : 0,
                                                            IsEvenRow : firstItem,
                                                            SOLI_editRow : SOLI_editRow,
                                                            MoveTosection:''
                                                    });
                                                }
                                                else{
                                                        HeaderItems_editRow.push({
                                                            isEdit : false,
                                                            radioValue : 0,
                                                            optionSelected : 0,
                                                            IsEvenRow : allItem,
                                                            SOLI_editRow : SOLI_editRow,
                                                            MoveTosection:''
                                                    });
                                                    
                                                    if( $scope.CustomerOrderModel.SOHeaderList[i].SOGridItems[j].SOKH.Id !=null){
                                                        allItem =(allItem ==true ? false : true);

                                                    }
                                                }
                                                    
                                             }
                                                $scope.CustomerOrderModel.SoItems_editRow.push({HeaderItems_editRow : HeaderItems_editRow});

                                        }
                                debug('--------------------------------');  



                                
                                
                            }
                   } 
                   
                   $scope.CustomerOrderModel.changeServiceOrderKitItemsSelectedOption=function(soHederIndex,kitHeaderindex,index,value){
                   
                       debug(soHederIndex +',' +kitHeaderindex +',' +index +',' +value)
                      $scope.CustomerOrderModel.SoItems_editRow[soHederIndex].HeaderItems_editRow[kitHeaderindex].SOLI_editRow[index].optionSelected = value
                   
                   }
                   
                   $scope.CustomerOrderModel.serviceItemGoAction =function(optionSelected, kitHeaderId, Id, index, soHederIndex,SoliIndex){
                        debug(optionSelected);
                        if(optionSelected == 0){
                            if(kitHeaderId != null){
                                $scope.CustomerOrderModel.removeServiceItem(kitHeaderId, index, soHederIndex);
                            }else{
                                $scope.CustomerOrderModel.removeServiceItem(Id, index, soHederIndex);
                            }
                        }else if(optionSelected == 1){
                            $scope.CustomerOrderModel.breakServiceKitLineItem(kitHeaderId, index, soHederIndex);            
                        }
                        else if(optionSelected == 2){
                            var voHeaderId = $scope.CustomerOrderModel.SoItems_editRow[soHederIndex].HeaderItems_editRow[index].SOLI_editRow[SoliIndex].radioValue 
                            var partId = $scope.CustomerOrderModel.SOHeaderList[soHederIndex].SOGridItems[index].SOKH.SOLIList[SoliIndex].PartId;
                            var coli =  $scope.CustomerOrderModel.SOHeaderList[soHederIndex].SOGridItems[index].SOKH.SOLIList[SoliIndex].CoLineItem;
                            if(partId !=null && coli !=null ){
                                $scope.CustomerOrderModel.createSpecialOrderServiceOrder(partId, coli, voHeaderId,soHederIndex)
                            }
                            else{
                                debug('cannot generate sp')
                            }
                        }else if(optionSelected == 3){
                                //var voHeaderId = $scope.CustomerOrderModel.SoItems_editRow[soHederIndex].HeaderItems_editRow[index].SOLI_editRow[SoliIndex].radioValue;
                                //var partId = $scope.CustomerOrderModel.SOHeaderList[soHederIndex].SOGridItems[index].SOKH.SOLIList[SoliIndex].PartId;
                                //var coli =  $scope.CustomerOrderModel.SOHeaderList[soHederIndex].SOGridItems[index].SOKH.SOLIList[SoliIndex].CoLineItem;  
                                debug($scope.CustomerOrderModel.SOHeaderList[soHederIndex]);  
                                debug($scope.CustomerOrderModel.SOHeaderList[soHederIndex].SOGridItems[index].SOKH);
                                debug($scope.CustomerOrderModel.SoItems_editRow[soHederIndex].HeaderItems_editRow[index].MoveTosection);
                                
                                if(kitHeaderId !=null){ 
                                                if($scope.CustomerOrderModel.SoItems_editRow[soHederIndex].HeaderItems_editRow[index].MoveTosection =='Merchandise'){
                                                    if($scope.CustomerOrderModel.SOHeaderList[soHederIndex].SOGridItems[index].SOKH.IsServiceKit == true){
                                                        Notification.error('Service Kit could not be moved to Merchandise section');
                                                        return;
                                                    }
                                                }
                                                if($scope.CustomerOrderModel.SoItems_editRow[soHederIndex].HeaderItems_editRow[index].MoveTosection !='' || $scope.CustomerOrderModel.SoItems_editRow[soHederIndex].HeaderItems_editRow[index].MoveTosection == null){
                                                            SOHeaderService.moveLineItem($scope.CustomerOrderModel.SOHeaderList[soHederIndex] ,$scope.CustomerOrderModel.SoItems_editRow[soHederIndex].HeaderItems_editRow[index].MoveTosection,kitHeaderId,$scope.CustomerOrderModel.coHeaderId).then(function(successfulSearchResult){
                                                                    $scope.UpdateMerchandiseList(successfulSearchResult);
                                                                    $scope.bindCheckOutList(successfulSearchResult.coInvoiceItemRecs);
                                                                    $scope.CustomerOrderModel.populateLeftSideHeadingLables();
                                                                    $scope.CustomerOrderModel.LoadServiceOrder();
                                                        });
                                                        
                                                }  
                                        }else{
                                                          
                                             var partId = $scope.CustomerOrderModel.SOHeaderList[soHederIndex].SOGridItems[index].SOKH.SOLIList[SoliIndex].PartId;
                                             var coli =  $scope.CustomerOrderModel.SOHeaderList[soHederIndex].SOGridItems[index].SOKH.SOLIList[SoliIndex].CoLineItem;
                                             if($scope.CustomerOrderModel.SoItems_editRow[soHederIndex].HeaderItems_editRow[index].SOLI_editRow[SoliIndex].MoveTosection == 'Merchandise'){
                                                  if(partId ==null &&  coli ==null){
                                                    Notification.error('Labor cannot be moved to merchandise section');
                                                    return;
                                                  }
                                             }
                                                        
                                                    SOHeaderService.moveLineItem($scope.CustomerOrderModel.SOHeaderList[soHederIndex],$scope.CustomerOrderModel.SoItems_editRow[soHederIndex].HeaderItems_editRow[index].SOLI_editRow[SoliIndex].MoveTosection,Id,$scope.CustomerOrderModel.coHeaderId).then(function(successfulSearchResult){
                                                        $scope.UpdateMerchandiseList(successfulSearchResult);
                                                        $scope.bindCheckOutList(successfulSearchResult.coInvoiceItemRecs);
                                                        $scope.CustomerOrderModel.populateLeftSideHeadingLables();
                                                        $scope.CustomerOrderModel.LoadServiceOrder();
                                                    })
                                                    
                                        
                                        }
                                 
                                /*if(partId !=null && coli !=null ){
                                        
                                }*/
                        }
                   }
                  
                  
                   $scope.CustomerOrderModel.createSpecialOrderServiceOrder = function (partId, coli, voHeaderId,soHederIndex) {
                        //var COlineItems = [];
                        $scope.CustomerOrderModel.itemsPageSortAttrsJSON = {
                            ChangesCount    :   0,
                            CurrentPage     :   1,
                            PageSize        :   10,  
                            Sorting :   [{
                                FieldName       :   "ItemDesc",
                                SortDirection   :   "ASC"
                            }]
                        };
                        try{
                            $scope.CustomerOrderModel.itemsPageSortAttrsJSON.PageSize = '{!JSENCODE(TEXT(Related_List_Page_Size))}';
                        } catch (ex){}
                        
                        $scope.CustomerOrderModel.customersPageSortAttrsJSON = {  
                            ChangesCount    :   0,
                            CurrentPage     :   1,
                            PageSize        :   10,
                            Sorting :   [{
                                FieldName       :   "Item",
                                SortDirection   :   "ASC"
                            }]
                        };
                        try{
                            $scope.CustomerOrderModel.customersPageSortAttrsJSON.PageSize = '{!JSENCODE(TEXT(Related_List_Page_Size))}';
                        } catch (ex){}
                        
                        $scope.CustomerOrderModel.stocksPageSortAttrsJSON = {
                            ChangesCount    :   0,
                            CurrentPage     :   1,
                            PageSize        :   10,
                            Sorting :   [{
                                FieldName       :   "Item",
                                SortDirection   :   "ASC"
                            }]
                        };
                        try{
                            $scope.CustomerOrderModel.stocksPageSortAttrsJSON.PageSize = '{!JSENCODE(TEXT(Related_List_Page_Size))}';
                        } catch (ex){}
                        
                        CustomerInfoService.createSpecialOrderServiceOrder(partId, coli, voHeaderId, $scope.CustomerOrderModel.coHeaderId, JSON.stringify($scope.CustomerOrderModel.itemsPageSortAttrsJSON), JSON.stringify($scope.CustomerOrderModel.customersPageSortAttrsJSON), JSON.stringify($scope.CustomerOrderModel.stocksPageSortAttrsJSON))
                        .then(function (successfulSearchResult) {
                            $scope.CustomerOrderModel.SOHeaderList[soHederIndex] = successfulSearchResult.SOList[soHederIndex];
                            $scope.CustomerOrderModel.setServiceOrderData();
                            $scope.CustomerOrderModel.resetServiceOrderData();
                            $scope.CustomerOrderModel.UpdateSpecialOrder(successfulSearchResult.specialOrderList);
                            $scope.bindCheckOutList(successfulSearchResult.coInvoiceItemRecs);
                            $scope.CustomerOrderModel.createGridEditItem(soHederIndex);
                            
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                        });
                    }
                  $scope.CustomerOrderModel.removeServiceItem =function(Id,index,soHederIndex){
                  debug("this is service order id")
                    debug($scope.CustomerOrderModel.SOHeaderList[soHederIndex].SOHeaderInfo.Id);
                       SOHeaderService.removeLineItems( Id, $scope.CustomerOrderModel.coHeaderId, $scope.CustomerOrderModel.SOHeaderList[soHederIndex].SOHeaderInfo.Id).then(function(successfulSearchResult){
                            debug('soHederIndex'+soHederIndex);
                            $scope.CustomerOrderModel.SOHeaderList[soHederIndex] = successfulSearchResult.SOList[soHederIndex];
                            $scope.CustomerOrderModel.setServiceOrderData();
                            $scope.CustomerOrderModel.resetServiceOrderData();
                            $scope.CustomerOrderModel.UpdateSpecialOrder(successfulSearchResult.specialOrderList);
                            $scope.bindCheckOutList(successfulSearchResult.coInvoiceItemRecs);
                           $scope.CustomerOrderModel.createGridEditItem(soHederIndex);



                           
                       
                       },
                        function (errorSearchResult) {  
                           responseData = errorSearchResult;

                        });
                  }
                  
                  
                  $scope.CustomerOrderModel.breakServiceKitLineItem =function(kitHeaderId,index,soHederIndex){
                           SOHeaderService.splitSOKHItem(kitHeaderId, $scope.CustomerOrderModel.coHeaderId).then(function(successfulSearchResult){
                                        $scope.CustomerOrderModel.SOHeaderList[soHederIndex] = successfulSearchResult.SOList[soHederIndex];
                                        //$scope.CustomerOrderModel.getServiceOrderList();
                                        $scope.CustomerOrderModel.setServiceOrderData();
                                        $scope.CustomerOrderModel.resetServiceOrderData();
                                        $scope.CustomerOrderModel.UpdateSpecialOrder(successfulSearchResult.specialOrderList);
                                        $scope.bindCheckOutList(successfulSearchResult.coInvoiceItemRecs);
                                        $scope.CustomerOrderModel.createGridEditItem(soHederIndex);
                                        //$scope.CustomerOrderModel.populateLeftSideHeadingLables();


                           
                           },
                            function (errorSearchResult) {
                                        responseData = errorSearchResult;


                                      }
                           );
                   
                  }


                  // This will create Special order it will be called from Special order Section    
                   $scope.CustomerOrderModel.createNewSpecialorder = function(partid, coliId, vendorId){
                        debug(partid + "partid");
                        var item = {'partId': partid, 'CoLineItemId': coliId};
                        if(angular.isDefined(vendorId)){
                        $scope.createSpecialOrder(item, vendorId);
                        }
                        else{
                        return false;
                        }
                   }
                   $scope.CustomerOrderModel.addServiceItem = function(Name,Value){
                         if(Value != 'undefined'){
                            var  soHeaderId =  $scope.CustomerOrderModel.SOHeaderList[$scope.CustomerOrderModel.SelectedSection.index].SOHeaderInfo.Id
                            var selectedIndex =  $scope.CustomerOrderModel.SelectedSection.index;
                            //debug($scope.CustomerOrderModel.ObjectSelected.Value +','+soHeaderId +','+ $scope.CustomerOrderModel.coHeaderId)


                                    
                                    
                              if($scope.CustomerOrderModel.Customer.Value !=null){

                              
                                    SOHeaderService.addLineItems(Value, soHeaderId ,  $scope.CustomerOrderModel.coHeaderId,$scope.CustomerOrderModel.Customer.Value)
                                    .then(function (successfulSearchResult) {
                                        $scope.CustomerOrderModel.SOHeaderList[selectedIndex] = successfulSearchResult.SOList[selectedIndex];
                                        $scope.CustomerOrderModel.getServiceOrderList();
                                        $scope.CustomerOrderModel.setServiceOrderData();
                                        $scope.CustomerOrderModel.resetServiceOrderData();
                                        $scope.CustomerOrderModel.createGridEditItem(selectedIndex);
                                        $scope.CustomerOrderModel.populateLeftSideHeadingLables();  
                                            var sectionaName = $scope.CustomerOrderModel.SectionList[selectedIndex].relatedSection;  
                                            debug($scope.CustomerOrderModel.SOHeaderList[selectedIndex]);

                                            
                                            var SOGridItemslength =  $scope.CustomerOrderModel.SOHeaderList[selectedIndex].SOGridItems;

                                            
                                            if($scope.CustomerOrderModel.SOHeaderList[selectedIndex].SOGridItems[SOGridItemslength.length-1].SOKH.hasChildren==true){
                                                $scope.CustomerOrderModel.SoItems_editRow[selectedIndex].HeaderItems_editRow[SOGridItemslength.length-1].isEdit = true;


                                            }
                                            else{
                                                $scope.CustomerOrderModel.SoItems_editRow[selectedIndex].HeaderItems_editRow[SOGridItemslength.length-1].SOLI_editRow[0].isEdit=true;

                                            }
                                            setTimeout(function () {
                                                 elementId = '#ServiceOrderSection'+selectedIndex+' #CO_ItemGrid_gid_container';
                                                 angular.element(elementId).find('input[type=text]').filter(':visible:first').focus();




                                             }, 10);
                                            
                                            
                                        },
                                            function (errorSearchResult) {
                                    responseData = errorSearchResult;




                                  });
                              
                              } 
                        }
                   }
                    
                   $scope.CustomerOrderModel.updateServiceOrderKitHeader =function(soIndex,parentIndex,event){



                                    
                        
                            
                   
                   
                   }
                   
                   $scope.CustomerOrderModel.solieditRowBlur  = function(soIndex,parentIndex,index,event, refreshEditMode, focusElementId){
                        //debug($scope.CustomerOrderModel.SOHeaderList[soIndex].SOGridItems[parentIndex].SOKH.SOLIList[index]);
                        debug(focusElementId);
                        if (!event.shiftKey && event.keyCode == 9) {
                            if($scope.CustomerOrderModel.SOHeaderList[soIndex].SOGridItems[parentIndex].SOKH.SOLIList[index].IsPart){
                                setTimeout(function(){ 
                                    angular.element('#'+focusElementId).focus(); 
                                }, 3000);  
                                $scope.CustomerOrderModel.updateServiceOrderLineItem(soIndex, parentIndex, index, event, false);
                            }
                        }
                   }
                   
                   $scope.CustomerOrderModel.editRowTabOutServiceOrderLineItem = function(soIndex,parentIndex,index,event){
                        if (!event.shiftKey && event.keyCode == 9) {
                            debug('tab');


                            event.preventDefault();
                            if(!$scope.CustomerOrderModel.isWizardMode){
                                angular.element('#CO_SearchToAdd_value').focus();
                            }
                            $scope.CustomerOrderModel.updateServiceOrderLineItem(soIndex,parentIndex,index,event, true);

                        }
                   }
                    
                    //update Soli
                    $scope.CustomerOrderModel.updateServiceOrderLineItem =function(soIndex,parentIndex,index,event, refreshEditMode){
                        debug($scope.CustomerOrderModel.SOHeaderList[soIndex].SOHeaderInfo.Status)
                        if($scope.CustomerOrderModel.SOHeaderList[soIndex].SOHeaderInfo.WorkStatus== 'Complete'
                            || $scope.CustomerOrderModel.SOHeaderList[soIndex].SOHeaderInfo.WorkStatus== 'Reviewed'
                            || $scope.CustomerOrderModel.SOHeaderList[soIndex].SOHeaderInfo.WorkStatus== 'Signed Out'){
                            return;
                        }
                             var isEditModeEnabled = false;
                             var IsparentUpdate = false;
                             var parentIndexToUpdate = 0;
                             var childIndexToUpdate = 0;
                            //$scope.CustomerOrderModel.HeaderItems_editRow[soIndex];
                             for(var i =0 ;i < $scope.CustomerOrderModel.SoItems_editRow[soIndex].HeaderItems_editRow.length ; i ++){

                             
                                    if($scope.CustomerOrderModel.SoItems_editRow[soIndex].HeaderItems_editRow[i].isEdit==true ){
                                                isEditModeEnabled = true;
                                                IsparentUpdate = true;
                                                parentIndexToUpdate = i;
                                                break;
                                    }
                                    else{  
                                            for(var j=0;j <  $scope.CustomerOrderModel.SoItems_editRow[soIndex].HeaderItems_editRow[i].SOLI_editRow.length;j++ ){
                                                if($scope.CustomerOrderModel.SoItems_editRow[soIndex].HeaderItems_editRow[i].SOLI_editRow[j].isEdit == true){
                                                    isEditModeEnabled = true;
                                                    parentIndexToUpdate = i;
                                                    childIndexToUpdate = j ;
                                                    break;
                                                } 
                                            }
                                        }   
                             }
                             if (!isEditModeEnabled) {  
                               if(index !=null)

                                {   
                                    //Added condition for completed and reviewed
                                    var lineItem = $scope.CustomerOrderModel.SOHeaderList[soIndex].SOGridItems[parentIndex].SOKH.SOLIList[index];
                                    debug($scope.CustomerOrderModel.SOHeaderList[soIndex].SOHeaderInfo.Status);
                                    if((lineItem.IsFee || lineItem.IsLabour || !(lineItem.Status == 'Invoiced' || $scope.CustomerOrderModel.SOHeaderList[soIndex].SOHeaderInfo.WorkStatus== 'Complete'
																					                            || $scope.CustomerOrderModel.SOHeaderList[soIndex].SOHeaderInfo.WorkStatus== 'Reviewed'
																					                            || $scope.CustomerOrderModel.SOHeaderList[soIndex].SOHeaderInfo.WorkStatus== 'Signed Out')) && !lineItem.IsFixedPrice){
                                        $scope.CustomerOrderModel.SoItems_editRow[soIndex].HeaderItems_editRow[parentIndex].SOLI_editRow[index].isEdit = true;
                                        if(!(lineItem.IsFee || lineItem.IsLabour)){
                                            var vendorId =   $scope.CustomerOrderModel.SOHeaderList[soIndex].SOGridItems[parentIndex].SOKH.SOLIList[index].VendorId; 
                                            debug(vendorId );


                                            $scope.CustomerOrderModel.getVendorOrderBySOlIVendorId(vendorId);
                                        }
                                        
                                    }
                                }
                                else{
                                    $scope.CustomerOrderModel.SoItems_editRow[soIndex].HeaderItems_editRow[parentIndex].isEdit = true;

                                }
                                setTimeout(function () {
                                     elementId = '#ServiceOrderSection'+soIndex+' #CO_ItemGrid_gid_container';
                                     angular.element(elementId).find('input[type=text]').filter(':visible:first').focus();




                                 }, 10);
                                
                             }
                             else{
                                    if(IsparentUpdate){
                                        var soKHItemJSON =  $scope.CustomerOrderModel.SOHeaderList[soIndex].SOGridItems[parentIndexToUpdate];
                                        if(!soKHItemJSON.IsFixedPrice){
                                            SOHeaderService.updateSOKHLineItems( angular.toJson(soKHItemJSON),$scope.CustomerOrderModel.coHeaderId)
                                            .then(function(successfulSearchResult){
                                                $scope.CustomerOrderModel.SOHeaderList[soIndex] = successfulSearchResult.SOList[soIndex];
                                                $scope.CustomerOrderModel.setServiceOrderData();
                                                $scope.CustomerOrderModel.resetServiceOrderData();
                                                debug(successfulSearchResult.specialOrderList);
                                                if(refreshEditMode){
                                                    $scope.CustomerOrderModel.createGridEditItem(soIndex);

                                                }
                                                $scope.CustomerOrderModel.UpdateSpecialOrder(successfulSearchResult.specialOrderList);
                                                $scope.CustomerOrderModel.COInvoiceHeaderId = ((successfulSearchResult.coInvoiceHeaderRec == null) ? ' ' : successfulSearchResult.coInvoiceHeaderRec.COInvoiceHeaderId);
                                                $scope.bindCheckOutList(successfulSearchResult.coInvoiceItemRecs); 



                                            },
                                            function (errorSearchResult) {
                                                responseData = errorSearchResult;



                                            });
                                        }
                                        else{
                                            $scope.CustomerOrderModel.createGridEditItem(soIndex);



                                        }
                                    }
                                    else{
                                        var lineItemJSON= $scope.CustomerOrderModel.SOHeaderList[soIndex].SOGridItems[parentIndexToUpdate].SOKH.SOLIList[childIndexToUpdate]; 
                                        debug(parentIndexToUpdate + ', ' +childIndexToUpdate );
                                        debug(lineItemJSON)


                                        SOHeaderService.updateSOLineItems(angular.toJson(lineItemJSON), $scope.CustomerOrderModel.coHeaderId).then(function(successfulSearchResult){
                                            //$scope.CustomerOrderModel.SOHeaderList[soIndex].SOLIList.SOGridItems
                                            //debug('######################');
                                            //debug(successfulSearchResult);
                                            $scope.CustomerOrderModel.SOHeaderList[soIndex] = successfulSearchResult.SOList[soIndex];
                                                $scope.CustomerOrderModel.setServiceOrderData();
                                                $scope.CustomerOrderModel.resetServiceOrderData();
                                                    debug('SPL Order');


                                                debug(successfulSearchResult.specialOrderList);
                                                $scope.CustomerOrderModel.UpdateSpecialOrder(successfulSearchResult.specialOrderList);
                                            $scope.bindCheckOutList(successfulSearchResult.coInvoiceItemRecs);
                                            if(refreshEditMode){
                                                $scope.CustomerOrderModel.createGridEditItem(soIndex);


                                            }
                                        },
                                         function (errorSearchResult) {
                                                responseData = errorSearchResult;

                                            }
                                        );
                                        
                                    }
                             
                             }
                            
                    }
                        
                    $scope.CustomerOrderModel.getVendorOrderBySOlIVendorId  =function(vendorId){
                                $scope.CustomerOrderModel.VendorOrderListByVendorId =[] 
                                SOHeaderService.getVendorOrderByVendorId(vendorId).then(function(successfulSearchResult){
                                    $scope.CustomerOrderModel.VendorOrderListByVendorId = successfulSearchResult;
                                    debug( $scope.CustomerOrderModel.VendorOrderListByVendorId);
                                    
                                })
                        
                    
                    }
                         
                   $scope.CustomerOrderModel.getServiceOrderList = function(){
                        $scope.CustomerOrderModel.serviceOrderList=[];
                        var serviceOrder = [];
                        $scope.CustomerOrderModel.AllSectionList=[];
                        $scope.CustomerOrderModel.AllSectionList.push({'Name':'Merchandise','Id':'Merchandise'})
                        
                        
                        for(var i = 0; i < $scope.CustomerOrderModel.SOHeaderList.length ; i++) {
                            $scope.CustomerOrderModel.serviceOrderList.push({'SectionID':'#ServiceOrderSection'+ i,'Name':$scope.CustomerOrderModel.SOHeaderList[i].SOHeaderInfo.Name,'Id':$scope.CustomerOrderModel.SOHeaderList[i].SOHeaderInfo.Id})
                            serviceOrder.push({'display':true});
                           if(!($scope.CustomerOrderModel.SOHeaderList[i].SOHeaderInfo.WorkStatus== 'Complete'
	                            || $scope.CustomerOrderModel.SOHeaderList[i].SOHeaderInfo.WorkStatus== 'Reviewed'
	                            || $scope.CustomerOrderModel.SOHeaderList[i].SOHeaderInfo.WorkStatus== 'Signed Out')){
                             $scope.CustomerOrderModel.AllSectionList.push({'Name':$scope.CustomerOrderModel.SOHeaderList[i].SOHeaderInfo.Name,'Id':$scope.CustomerOrderModel.SOHeaderList[i].SOHeaderInfo.Id});
                            }   
                        }
                        $scope.CustomerOrderModel.displaySections.ServiceOrder = serviceOrder;
                        
                   }
                    
                    $scope.CustomerOrderModel.createTimePickerList = function(){  
                        $scope.CustomerOrderModel.timePickerList = [];
                        $scope.CustomerOrderModel.timePickerList.push('12:00 AM');
                        $scope.CustomerOrderModel.timePickerList.push('12:30 AM');
                        for(var i=1; i<=11; i++){  
                            var time = i <= 9 ? '0'+i: i;

                            if(time != 0){
                                $scope.CustomerOrderModel.timePickerList.push(time+':00 AM');

                            }  
                            if(time != 12){
                                $scope.CustomerOrderModel.timePickerList.push(time+':30 AM');


                            }
                        }
                        $scope.CustomerOrderModel.timePickerList.push('12:00 PM');
                        $scope.CustomerOrderModel.timePickerList.push('12:30 PM');
                        for(var i=1; i<=11; i++){ 
                            var time = i <= 9 ? '0'+i: i;

                            if(time != 0){
                                $scope.CustomerOrderModel.timePickerList.push(time+':00 PM');

                            }
                            if(time != 12){
                                $scope.CustomerOrderModel.timePickerList.push(time+':30 PM');


                            }
                        }
                    }
                    $scope.CustomerOrderModel.createTimePickerList();
                    

                    $scope.CustomerOrderModel.resetServiceOrderData = function(){
                        for(i=0; i< $scope.CustomerOrderModel.SOHeaderList.length; i++){
                            $scope.CustomerOrderModel.setCurrentCOU($scope.CustomerOrderModel.SOHeaderList[i].SOHeaderInfo.COUId, i);
                            //$scope.CustomerOrderModel.changeProviderList(i);
                            $scope.CustomerOrderModel.setCurrentProvider($scope.CustomerOrderModel.SOHeaderList[i].SOHeaderInfo.ProviderId, i);


                        }
                    }
                      
                    $scope.CustomerOrderModel.setServiceOrderData = function(){
                        angular.forEach($scope.CustomerOrderModel.SOHeaderList, function(value, key) {
                            value.SOHeaderInfo.selectedTime = $scope.CustomerOrderModel.getTimeFromSFformat(value.SOHeaderInfo.PromisedBy);
                            value.SOHeaderInfo.selectedDate = $scope.CustomerOrderModel.getDateFromSFformat(value.SOHeaderInfo.PromisedBy);
                            value.SOHeaderInfo.CategoryNameStr = value.SOHeaderInfo.CategoryName;

                        });
                    }
                    
                    $scope.CustomerOrderModel.getProviderInfo = function(providerId){
                       
                         SOHeaderService.getProviderInformation(providerId)
                        .then(function (successfulSearchResult) {
                            
                            debug(successfulSearchResult);
                            $scope.CustomerOrderModel.VendorInfo = successfulSearchResult.VendorDetailRec;
                            debug($scope.CustomerOrderModel.VendorInfo.VendorDetailRec);
                            $scope.CustomerOrderModel.getVendorInfo();
                            debug( $scope.CustomerOrderModel.vendorInfoJSON);
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                        });

                   }
                    $scope.CustomerOrderModel.isPreferredActive = function(label,key){
                    if($scope.CustomerOrderModel.VendorInfo[label] == key){
                        return true;
                    }
                    else{
                        return false;
                    }
              } 
                     $scope.CustomerOrderModel.getVendorInfo = function(){
                        $scope.CustomerOrderModel.vendorInfoJSON =  [
                                                {
                                                    Label : 'CALL (Work)', 
                                                    Value : $scope.CustomerOrderModel.VendorInfo.WorkNumber,
                                                    IsSelected : false,
                                                    Type: 'Phone',
                                                    isPreferred: $scope.CustomerOrderModel.isPreferredActive('PreferredPhone','WorkNumber')
                                                },
                                                {
                                                    Label : 'SEND EMAIL (Work)', 
                                                    Value :$scope.CustomerOrderModel.VendorInfo.WorkEmail,
                                                    IsSelected : false,
                                                    Type: 'Email',
                                                    isPreferred: $scope.CustomerOrderModel.isPreferredActive('PreferredEmail','WorkEmail')
                                                },
                                                {
                                                    Label : 'CALL (OTHER)', 
                                                    Value : $scope.CustomerOrderModel.VendorInfo.OtherPhone,
                                                    IsSelected : false,
                                                    Type: 'Phone',
                                                    isPreferred: $scope.CustomerOrderModel.isPreferredActive('PreferredPhone','OtherPhone')
                                                },
                                                {
                                                    Label : 'SEND EMAIL (OTHER)', 
                                                    Value : $scope.CustomerOrderModel.VendorInfo.OtherEmail,
                                                    IsSelected : false,
                                                    Type: 'Email',
                                                    isPreferred: $scope.CustomerOrderModel.isPreferredActive('PreferredEmail','OtherEmail')
                                                }
                                            ];
                        
                    }
                    
                    //payment option
                    $scope.CustomerOrderModel.paymentOption = function(paymentMode){
                        $scope.CustomerOrderModel.Payment_method = paymentMode;
                        debug($scope.CustomerOrderModel.Payment_method);
                    
                    }
                    
                    $scope.CustomerOrderModel.populateLeftSideHeadingLables = function(){
                        $scope.CustomerOrderModel.LeftSideHeadingLables = {};
                        $scope.CustomerOrderModel.SectionList =[];
                        var currentHeadingSequenceIndex = 65;
                            $scope.CustomerOrderModel.AllSectionList = [];

                       
                        // Info Header
                        $scope.CustomerOrderModel.LeftSideHeadingLables['Info'] = String.fromCharCode(currentHeadingSequenceIndex++);
                        $scope.CustomerOrderModel.SectionList.push({'refrenceId':null,'item':'Info Section','relatedSection':'CustomerSection','sectionType':[{'Object':'Customer:','Value':'Customer'},{'Object':'User:','Value':'User'},{'Object':'Merchandise:','Value':'Part__c'},{'Object':'Kit:','Value':'Kit_Header__c'},{'Object':'Fee:','Value':'Fee__c'}] ,'index':null});
                        
                        // service Order section 
                        for(i=0 ; i < $scope.CustomerOrderModel.serviceOrderList.length ; i++ ){
                                $scope.CustomerOrderModel.LeftSideHeadingLables['ServiceOrder'+ i] = String.fromCharCode(currentHeadingSequenceIndex++);
                                $scope.CustomerOrderModel.SectionList.push({'item':$scope.CustomerOrderModel.serviceOrderList[i].Name, 'relatedSection':'ServiceOrderSection'+i,'sectionType':[{'Object':'Customer:','Value':'Customer'},{'Object':'Merchandise:','Value':'Part__c'},{'Object':'Kit:','Value':'Kit_Header__c'},{'Object':'Labour:','Value':'Labour_Code__c' },{'Object':'Fee:','Value':'Fee__c'}] ,'index':i});
                                
                                if(!($scope.CustomerOrderModel.SOHeaderList[i].SOHeaderInfo.WorkStatus== 'Complete'
			                            || $scope.CustomerOrderModel.SOHeaderList[i].SOHeaderInfo.WorkStatus== 'Reviewed'
			                            || $scope.CustomerOrderModel.SOHeaderList[i].SOHeaderInfo.WorkStatus== 'Signed Out')){
                                     $scope.CustomerOrderModel.AllSectionList.push({'Name':$scope.CustomerOrderModel.SOHeaderList[i].SOHeaderInfo.Name,'Id':$scope.CustomerOrderModel.SOHeaderList[i].SOHeaderInfo.Id});
                                }   

                        }
                          
                        // Merchandise Header
                        if($scope.CustomerOrderModel.MerchandiseItems != undefined && ($scope.CustomerOrderModel.MerchandiseItems.length != 0 || $scope.CustomerOrderModel.MerchandiseGhostItems.length != 0)){
                            $scope.CustomerOrderModel.LeftSideHeadingLables['Merchandise'] = String.fromCharCode(currentHeadingSequenceIndex++);
                             $scope.CustomerOrderModel.SectionList.push({'item':'Merchandise', 'relatedSection':'MerchandiseSection','sectionType':[{'Object':'Merchandise:','Value':'Part__c'},{'Object':'Kit:','Value':'Kit_Header__c'},{'Object':'Fee:','Value':'Fee__c'}],'index':null});
                            

                          }
                        $scope.CustomerOrderModel.AllSectionList.push({'Name':'Merchandise','Id':'Merchandise'}); 
                        // Merchandise: Items Header
                        if($scope.CustomerOrderModel.MerchandiseItems != undefined && ($scope.CustomerOrderModel.MerchandiseItems.length != 0 || $scope.CustomerOrderModel.MerchandiseGhostItems.length != 0)){
                            $scope.CustomerOrderModel.LeftSideHeadingLables['M_Items'] = 1;
                        }
                        
                        // Special Orders Header
                        if($scope.CustomerOrderModel.SpecialOrder != undefined && ($scope.CustomerOrderModel.SpecialOrder.length != 0)){
                            
                            $scope.CustomerOrderModel.LeftSideHeadingLables['Special_Orders'] = String.fromCharCode(currentHeadingSequenceIndex++);
                            $scope.CustomerOrderModel.SectionList.push({'item':'Special Order','relatedSection':'SpecialOrderSection','sectionType':[{'Object':'Customer:','Value':'Customer'},{'Object':'User:','Value':'User'},{'Object':'Merchandise:','Value':'Part__c'}],'index':i});
                        }
                        
                        // Deposits Header
                        $scope.CustomerOrderModel.LeftSideHeadingLables['Deposits'] = String.fromCharCode(currentHeadingSequenceIndex++);
                           $scope.CustomerOrderModel.SectionList.push({'item':'Deposit','relatedSection':'DepositSection','sectionType':[{'Object':'Customer:','Value':'Customer'},{'Object':'User:','Value':'User'},{'Object':'Merchandise:','Value':'Part__c'}],'index':i});
                        // Checkout Header
                        if($scope.CustomerOrderModel.CheckOutItems != undefined && $scope.CustomerOrderModel.CheckOutItems.length != 0){
                            $scope.CustomerOrderModel.LeftSideHeadingLables['Checkout'] = String.fromCharCode(currentHeadingSequenceIndex++);
                             $scope.CustomerOrderModel.SectionList.push({'item':'CheckOut', 'relatedSection':'CheckoutSection','sectionType':[{'Object':'Customer:','Value':'Customer'},{'Object':'User:','Value':'User'},{'Object':'Merchandise:','Value':'Part__c'}],'index':i});
                        }
                        
                        if($scope.CustomerOrderModel.coHeaderDetails.OrderStatus != 'Closed'){
                            $scope.CustomerOrderModel.SectionList.push({'item':'+ Add New Service Order', 'relatedSection':'None','sectionType':'','index':i});
                        }
                        // Checkout: Items Header 
                        if($scope.CustomerOrderModel.CheckOutItems != undefined && $scope.CustomerOrderModel.CheckOutItems.length != 0){
                            $scope.CustomerOrderModel.LeftSideHeadingLables['C_Items'] = 1;
                        }
                        
                        // Checkout: Payments Header
                        if($scope.CustomerOrderModel.CheckOutItems != undefined && $scope.CustomerOrderModel.CheckOutItems.length != 0){
                            $scope.CustomerOrderModel.LeftSideHeadingLables['C_Payments'] = 2;
                        }
                        
                        // Checkout: Finalize Order Header
                        if($scope.CustomerOrderModel.CheckOutItems != undefined && $scope.CustomerOrderModel.CheckOutItems.length != 0){
                            $scope.CustomerOrderModel.LeftSideHeadingLables['C_Finalize_Order'] = 3;
                        }
                        
                        // Invoice History Header
                        if($scope.CustomerOrderModel.InvoiceHistory != undefined && $scope.CustomerOrderModel.InvoiceHistory.length != 0){
                            $scope.CustomerOrderModel.LeftSideHeadingLables['Invoice_History'] = String.fromCharCode(currentHeadingSequenceIndex++);
                        }
                        
                        //debug($scope.CustomerOrderModel.LeftSideHeadingLables);
                    }
                    
                    
                    
                    $scope.CustomerOrderModel.getDateFromSFformat = function(salesforceDate){

                        if(salesforceDate == null){
                            return $scope.CustomerOrderModel.getCurrentDate();


                        }  
                        var date = salesforceDate.substring(0, salesforceDate.indexOf(" "));


                        return date;
                    }
                    
                    $scope.CustomerOrderModel.getTimeFromSFformat = function(salesforceDate){
                        if(salesforceDate == null){
                            return '12:00 AM';


                        }
                        var time = salesforceDate.substring(salesforceDate.indexOf(" ")+1, salesforceDate.length);


                        return time;
                    }


                                        
                    $scope.CustomerOrderModel.setCurrentCOU = function(COUId, index){
                        debug($scope.CustomerOrderModel.COUList);
                        for(var i=0; i<$scope.CustomerOrderModel.COUList.length; i++) {
                            $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.selectedCOU = {};
                            if($scope.CustomerOrderModel.COUList[i].Id == COUId){
                                debug('matched '+COUId);


                                $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.selectedCOU = $scope.CustomerOrderModel.COUList[i];
                                $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.COUId = $scope.CustomerOrderModel.COUList[i].Id;
                                break;
                            } 
                        }
                        $scope.CustomerOrderModel.SaveserviceInfo(index);
                    } 
                    

                    /* Added by Tarun */
                    $scope.CustomerOrderModel.setCurrentProvider = function(providerId, index){
                        debug($scope.CustomerOrderModel.MasterData.ProviderList);
                        debug('*** Tarun Provider*** ' + providerId);
                        debug($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.selectedProvider);
                        for(var i = 0; i < $scope.CustomerOrderModel.MasterData.ProviderList.length; i++) {
                            $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.selectedProvider = {};
                            if($scope.CustomerOrderModel.MasterData.ProviderList[i].Id == providerId) {
                                debug('matched ' + providerId);
                                $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.selectedProvider = $scope.CustomerOrderModel.MasterData.ProviderList[i];
                                $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.ProviderId = $scope.CustomerOrderModel.MasterData.ProviderList[i].Id;
                                break;
                            } 
                        }

                        $scope.CustomerOrderModel.SaveserviceInfo(index);
                    } 

                    $scope.CustomerOrderModel.getSFformatDate = function(currentDate, currentTime){
                        var dateTime = currentDate+' '+currentTime;
                        return dateTime;
                    } 
                    
                    $scope.CustomerOrderModel.getCurrentDate  = function(){
                        var today = new Date();
                        var dd = today.getDate();
                        var mm = today.getMonth()+1; //January is 0!
                        var yyyy = today.getFullYear();
                        if(dd<10){
                            dd='0'+dd

                        } 
                        if(mm<10){
                            mm='0'+mm

                        } 
                        var today = mm+'/'+dd+'/'+yyyy;

                        return today;
                    }
                    
                  /*   $scope.CustomerOrderModel.validatePromisedByDate  = function(index){
                        /*var selectedDate = new Date($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.selectedDate);
                        var selectedTime = $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.selectedTime;
                        var Hours = selectedTime.indexOf('PM') > -1 ? parseInt(selectedTime.substring(0, selectedTime.indexOf(':')))+12 : parseInt(selectedTime.substring(0, selectedTime.indexOf(':')));
                        selectedDate.setHours(Hours); 
                        selectedDate.setMinutes(parseInt(selectedTime.substring(selectedTime.indexOf(':')+1, selectedTime.length))); 
                        var today = new Date();
                        var timeDiff = Math.floor((selectedDate.getTime() - today.getTime()) / (1000*60*60));
                        var isPrevDate = timeDiff < 0 ? true : false;
                        if(isPrevDate){
                            //Notification.error('Promised By is Invalid');  

                        }
                        $scope.CustomerOrderModel.SaveserviceInfo(index);
                        //return isPrevDate;
                    }
                     */
                    $scope.CustomerOrderModel.toggleIsPromisedByAmPm = function(index, value){
                        debug('toggle called' + value);
                        if($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.IsPromisedByAmPm == value){
                            $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.IsPromisedByAmPm = '';


                        }else{
                            $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.IsPromisedByAmPm = value;
                            $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.selectedTime  = '12:00 '+value;


                        }
                        $scope.CustomerOrderModel.validatePromisedByDate(index);   
                    }
                    
                    $scope.CustomerOrderModel.changeProviderList = function(index) {
                        $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.Provider = {};
                        for(var i=0; i<$scope.CustomerOrderModel.MasterData.TTList.length; i++){
                            if($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.TransactionTypeId == $scope.CustomerOrderModel.MasterData.TTList[i].Id){
                                $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.TransactionType = $scope.CustomerOrderModel.MasterData.TTList[i].Type;
                                $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.Provider = $scope.CustomerOrderModel.MasterData.TTList[i].ProviderList[0];
                            }
                        }
                        if($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.TransactionType !='Third-Party') {
	                        for(var i=0; i<$scope.CustomerOrderModel.pinnedItems.length;i++) {
	                            if($scope.CustomerOrderModel.pinnedItems[i]=='Provider') {
	                                $scope.CustomerOrderModel.pinnedItems.splice(i,1);
	                            }
	                        }
                        }
                        
                        if($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.TransactionType !='Internal') {
                            for(var i=0; i<$scope.CustomerOrderModel.pinnedItems.length;i++) {
                                if($scope.CustomerOrderModel.pinnedItems[i] =='Category') {
                                    $scope.CustomerOrderModel.pinnedItems.splice(i,1);


                                }
                            }
                            /*$scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.CategoryNameStr = '';
                            $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.CategoryId = null;
                            $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.CategoryName = '';*/

                        }else{
                            $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.CategoryNameStr = $scope.CustomerOrderModel.MasterData.DefaultInternalCategoryName;
                            $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.CategoryId = $scope.CustomerOrderModel.MasterData.DefaultInternalCategoryId;
                            $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.CategoryName = $scope.CustomerOrderModel.MasterData.DefaultInternalCategoryName;
                        
                        }
                        $scope.CustomerOrderModel.SaveserviceInfo(index);   
                        
                        SOHeaderService.getSOHeaderDetails($scope.CustomerOrderModel.coHeaderId, 'checkOut').then(function (successfulResult) {
							debug(successfulResult);
							$scope.bindCheckOutList(successfulResult.coInvoiceItemRecs);
						},

                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                            Notification.error('Some Error Occured please Try later');
                        });

                    }
                    
                    $scope.CustomerOrderModel.addAndRemoveFromMultiSelect = function (event, index, modelName, ModelKey, fieldLabel) {
                        var isAlreadyExist = false;
                        var fieldValue = $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo[modelName];



                        if((event.keyCode == 13 || event.keyCode == 9) && fieldValue != '' && fieldValue != undefined) {
                            for(var i=0; i<$scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo[ModelKey].length; i++){
                                if($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo[ModelKey][i] == $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo[modelName]){
                                    isAlreadyExist = true; 
                                    Notification.error('Same '+ fieldLabel +' Already Exist');


                                }
                            }
                            if(!isAlreadyExist){
                                $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo[ModelKey].push($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo[modelName]);
                                $scope.CustomerOrderModel.SaveserviceInfo(index);

                            }
                            $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo[modelName] = '';


                        }
                     
                        /*remove using backspace */
                        var length = $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo[ModelKey].length;
                        if(event.keyCode === 8 && (fieldValue == undefined || fieldValue == '')) {
                            $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo[ModelKey].splice(length-1, 1);
                            $scope.CustomerOrderModel.SaveserviceInfo(index);





                        }
                        
                    }
                    
                    // Remove 
                    $scope.CustomerOrderModel.removeFromMultiSelect = function(index, parentIndex, ModelKey) {
                        /* if($scope.CustomerOrderModel.SOHeaderList[soIndex].SOHeaderInfo.WorkStatus== 'Complete'
                            || $scope.CustomerOrderModel.SOHeaderList[soIndex].SOHeaderInfo.WorkStatus== 'Reviewed'
                            || $scope.CustomerOrderModel.SOHeaderList[soIndex].SOHeaderInfo.WorkStatus== 'Signed Out') */
                        if($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.WorkStatus== 'Complete'
                            || $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.WorkStatus== 'Reviewed'
                            || $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.WorkStatus== 'Signed Out')
                        {
                            Notification.error('Service Order Completed');
                            return;
                        }
                        $scope.CustomerOrderModel.SOHeaderList[parentIndex].SOHeaderInfo[ModelKey].splice(index, 1);
                        $scope.CustomerOrderModel.SaveserviceInfo(parentIndex);



                    }
                    
                    
                    // add remove notes
                    $scope.CustomerOrderModel.addAndRemoveFromNotesMultiSelect = function (event, index, modelName, ModelKey, fieldLabel) {
                        var isAlreadyExist = false;
                        var fieldValue = $scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec[modelName];


                        
                        if((event.keyCode == 13 || event.keyCode == 9) && fieldValue != '' && fieldValue != undefined) {
                            for(var i=0; i<$scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec[ModelKey].length; i++){
                                if($scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec[ModelKey][i] == $scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec[modelName]){
                                    isAlreadyExist = true; 
                                    Notification.error('Same '+ fieldLabel +' Already Exist');


                                }
                            }
                            if(!isAlreadyExist){
                                $scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec[ModelKey].push($scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec[modelName]);
                                $scope.CustomerOrderModel.saveServiceReview(index);

                            }
                            $scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec[modelName] = '';




                        }
                     
                        /*remove using backspace */
                        var length = $scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec[ModelKey].length;
                        if(event.keyCode === 8 && (fieldValue == undefined || fieldValue == '')) {
                            $scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec[ModelKey].splice(length-1, 1);
                            $scope.CustomerOrderModel.saveServiceReview(index);



                        }
                    }
                    
                    $scope.CustomerOrderModel.removeNotesFromMultiSelect = function(index, parentIndex, ModelKey) {
                        $scope.CustomerOrderModel.SOHeaderList[parentIndex].SOReviewRec[ModelKey].splice(index, 1);
                        $scope.CustomerOrderModel.saveServiceReview(parentIndex);


                    }
                    
                    
                    // Remove 
                    $scope.CustomerOrderModel.isServiceOrderDisabled = function(index) {
                    	if($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.ClaimStatus =='Ready to Submit'){
                    		return true;
                    	}else if($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.WorkStatus == 'Complete'|| 
							$scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.WorkStatus == 'Reviewed' ||
							$scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.WorkStatus == 'Signed Out' || 
							$scope.CustomerOrderModel.coHeaderDetails.OrderStatus == 'Closed'){
							return true;
						}
						return false;
                    }


                    $scope.CustomerOrderModel.ServiceFieldsFilter = {
                        SOCategory : [
                            {
                                Field : "Type__c",
                                Value : "Internal Expense",
                        		FilterObject :"Category__c"
                            }
                        ]
                    };
                    
                    $scope.$on('autoCompleteSelectCallback', function (event, args) {
                        debug(args);
                        if($scope.CustomerOrderModel.isWizardMode){
                            debug('wizard Mode response')
                        }else{
                            var obejctType = args.ObejctType.toUpperCase();
                            var searchResult = args.SearchResult;
                            var validationKey = args.ValidationKey;
                            var index = args.Index;
                            debug('index '+ index);


                            if(!isNaN(index)){
	                            if($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.CategoryNameStr == $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.CategoryName){
	                                $scope.CustomerOrderModel.SaveserviceInfo(index);
	                                return;
	                            } 


	                            else if(searchResult == null){
	                                Notification.error("No matching " + args.ObejctType + " records found!");
	                                $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.CategoryName="";
	                                $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.CategoryId=null;
	                                return;
	                            }


	                            var objectsMapping = [{
	                                    CATEGORY : {
	                                        Id : "CategoryId",
	                                        Name : "CategoryName",
	                                        selectMethod : null
	                                    }
	                                }
	                            ];
	

	                            if (objectsMapping[0][obejctType] != null){
	                                $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo[objectsMapping[0][obejctType]["Id"]] = searchResult.originalObject.Value;
	                                $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo[objectsMapping[0][obejctType]["Name"]] = searchResult.originalObject.Name;
	                            }
	                        }
                            //$scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.validateFieldWithKey(validationKey);

                            /*if ($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.FeeFormValidationModal[validationKey] == null || $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.FeeFormValidationModal[validationKey].isError == false) {
                                if (objectsMapping[0][obejctType].selectMethod != null) {
                                    objectsMapping[0][obejctType].selectMethod(searchResult);
    
                                }
                            }*/
                        }
                    });
                    

                    //$scope.CustomerOrderModel.pinnedItems = ['Unit', 'Concern', 'Cause', 'Correction', 'Promised By', 'Estimated Hours', 'Transaction Type', 'Category', 'Stock'];


                    
                    $scope.CustomerOrderModel.pinnedItemsMapping = {'Cause': ['KitHeaderCause','ManualCause'],
                                                                    'Concern' : ['KitHeaderConcern', 'ManualConcern'],
                                                                    'Correction' : ['KitHeaderCorrection', 'ManualCorrection'],
                                                                    'Estimated Hours' : ['EstimatedHours'],
                                                                    'Transaction Type' : ['TransactionType'],




                                                                    'Category' : ['CategoryNameStr'],
                                                                    'Stock' : ['Stock']


                                                                }
                  
                  $scope.CustomerOrderModel.addRemovePinnedItem = function(value){
                        var array = $scope.CustomerOrderModel.pinnedItems;
                        var isExist = false;
                        array.forEach(function(result, index) {
                            if(result === value) {
                              //Remove from array
                              array.splice(index, 1);
                              isExist = true;


                            }    
                        });
                        if(!isExist){
                            $scope.CustomerOrderModel.pinnedItems.push(value);


                        }
                        
                        if(array.length > 3){
                            array.splice(0, 1);

                        }
                        $scope.CustomerOrderModel.SavepinnedItemsToServer();




                  }                             
                  
                  $scope.CustomerOrderModel.checkItemIsPinned = function(value){
                        var array = $scope.CustomerOrderModel.pinnedItems;
                        var isExist = false;
                        array.forEach(function(result, index) {
                            if(result === value) {



                              isExist = true;


                            }    
                        });
                        return isExist;




                  }             
                  $scope.CustomerOrderModel.MerchSelected = function(SoHeaderIndex,SoKitHeaderIndex,SoLineItemIndex ){

                  
                    debug($scope.CustomerOrderModel.SoItems_editRow);



                  }               
                  
                  
                  $scope.CustomerOrderModel.showSONameEditMode = function(index, sectioninfo){
                    if($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.WorkStatus == 'Reviewed' 
                    	|| $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.WorkStatus == 'Complete'
                    	|| $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.WorkStatus == 'Signed Out'){
                        return;
                    }
                      $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.isSONameEdit = true; 
                      if(sectioninfo=="SectionList"){
                       setTimeout(function(){ angular.element('#SO_Section_Name_Edit_'+index).focus(); }, 100);
                      }
                      else{
                       setTimeout(function(){ angular.element('#SO_Header_Name_Edit_'+index).focus(); }, 100);
                      }
                     
                  }
                    
                  $scope.CustomerOrderModel.UpdateSOName = function(index){
                     $scope.CustomerOrderModel.serviceOrderList[index].Name = $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.Name;
                     $scope.CustomerOrderModel.getServiceOrderList();
                     $scope.CustomerOrderModel.populateLeftSideHeadingLables();
                      if($scope.CustomerOrderModel.serviceOrderList[index].Name!= null && $scope.CustomerOrderModel.serviceOrderList[index].Name != ''){
                             $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.isSONameEdit = false;
                             $scope.CustomerOrderModel.saveSONameToServer($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.Name, $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.Id);
                       }
                       else
                       {
                            Notification.error('Please Enter Service Order Name');
                            setTimeout(function(){ 
                                angular.element('#SO_Header_Name_Edit_'+index).focus();
                                angular.element('#SO_Header_Name_Edit_'+index).css("border", "1px solid #d9534f");  

                             }, 100); 
                       }
                     
                     for(i=0; i < $scope.CustomerOrderModel.SectionList.length; i ++){
                                if($scope.CustomerOrderModel.SectionList[i].relatedSection ==   $scope.CustomerOrderModel.SelectedSection['relatedSection']) {
                                    $scope.CustomerOrderModel.SelectedSection = $scope.CustomerOrderModel.SectionList[i];


                                }                           
                        }
                  }
                    
                  $scope.CustomerOrderModel.selectalltext=function(index, sectioninfo){
                   if(sectioninfo=="SectionList"){
                        angular.element('#SO_Section_Name_Edit_'+index).select();
                   }
                  else{
                         angular.element('#SO_Header_Name_Edit_'+index).select();
                      }
                  }


                  
                  $scope.CustomerOrderModel.SavepinnedItemsToServer = function(){
                        var pinnedItemsJson = {PinnedItemList: $scope.CustomerOrderModel.pinnedItems};
                        debug(pinnedItemsJson);


                        
                        SOHeaderService.savePinnedItems(JSON.stringify(pinnedItemsJson))
                        .then(function (successfulSearchResult){
                            debug('pinned items saved');
                            debug(successfulSearchResult);
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                        });
                    }



                    $scope.CustomerOrderModel.PrintPriview = function(soHeaderId){
                        var myWindow = window.open("{!$Page.SOHeaderPrintPreview}?id="+soHeaderId, "", "width=1200, height=600");

                    }


                    $scope.CustomerOrderModel.invoicePrintPriview = function(customerInvoiceId){
                         var myWindow = window.open("{!$Page.PrintCustomerOrderInvoice}?id="+customerInvoiceId, "", "width=1200, height=600");
                    }
                    

                    $scope.CustomerOrderModel.PrintPriviewMerchandise = function(coHeaderId){
                        if ($scope.CustomerOrderModel.CurrentUserLocale == 'en_AU') {
                               isAustralianMarket = true;
                       }else{
                               isAustralianMarket = false;
                       }
                       var myWindow = window.open("{!$Page.PrintPreviewMerchandies}?id="+coHeaderId ,  "", "width=1200, height=600");
                        
                    }
                    
                    
                     $scope.CustomerOrderModel.SaveEstimatedHours = function(event, index){
                        if(event.keyCode == 9) {
                            $scope.CustomerOrderModel.SaveserviceInfo(index);


                        }
                     }



                    $scope.CustomerOrderModel.isEmptyProvider = function(index) {
                        if($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.selectedProvider == undefined ||
                            JSON.stringify($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.selectedProvider) == JSON.stringify({})) {
                                return true;
                        } else {
                            return false;
                        }
                    }

                    $scope.CustomerOrderModel.SaveserviceInfo = function(index, allowInWizard){
	                    
	                     /*  var isPromisedByInvalidValid = $scope.CustomerOrderModel.validatePromisedByDate(index);
	                      if(isPromisedByInvalidValid){
						  	return;
	                      } */
                      	
                        /* Added by Tarun */
                        if(allowInWizard == undefined && $scope.CustomerOrderModel.isWizardMode){
                            debug('auto save prevented');
                            return;
                        }
                        
                        if($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.TransactionType != 'Third-Party') {
                            $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.ProviderId = null;
                            $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.selectedProvider = {};
                        }
                        
                        if($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.TransactionType !='Internal') {
                            $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.CategoryNameStr = '';
                            $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.CategoryId = null;
                            $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.CategoryName = '';
                        }
                        
                        $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.PromisedBy = $scope.CustomerOrderModel.getSFformatDate($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.selectedDate,
                                                                                                                                        $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.selectedTime);
                        debug($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo);
                        SOHeaderService.saveSOHeaderInfo($scope.CustomerOrderModel.coHeaderId, JSON.stringify($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo))
                        .then(function (successfulSearchResult){
                            //Notification.success('Service Order Saved Successfully');

                               /*
                               if($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.PromisedBy != null
                                    && successfulSearchResult.PromisedBy != null 
                                    && $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.PromisedBy != successfulSearchResult.PromisedBy){
                                    Notification.error('Promised By is Invalid');   

                               }    
                               $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.EstimatedHours = successfulSearchResult.EstimatedHours;
                               $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.selectedTime = $scope.CustomerOrderModel.getTimeFromSFformat(successfulSearchResult.PromisedBy);
                               $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.selectedDate = $scope.CustomerOrderModel.getDateFromSFformat(successfulSearchResult.PromisedBy);
                               $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.IsPromisedByAmPm = successfulSearchResult.IsPromisedByAmPm;
                               */  
//                             $scope.CustomerOrderModel.resetServiceOrderData();
//                             $scope.CustomerOrderModel.setServiceOrderData();
                                 debug('auto save response');
                                 debug(successfulSearchResult);
                                 $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.CategoryNameStr = successfulSearchResult.CategoryName;
                                 $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.CategoryId = successfulSearchResult.CategoryId;
                                 $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.CategoryName = successfulSearchResult.CategoryName;
                                 $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.ClaimStatus = successfulSearchResult.ClaimStatus;
                                 $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.AvailableClaimStatusList = successfulSearchResult.AvailableClaimStatusList;
                                if(allowInWizard != undefined && allowInWizard){   
                                    debug('allow callback in Wizard');
                                
                                   $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.EstimatedHours = successfulSearchResult.EstimatedHours;
                                   $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.selectedTime = $scope.CustomerOrderModel.getTimeFromSFformat(successfulSearchResult.PromisedBy);
                                   $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.selectedDate = $scope.CustomerOrderModel.getDateFromSFformat(successfulSearchResult.PromisedBy);
                                   $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.IsPromisedByAmPm = successfulSearchResult.IsPromisedByAmPm;
    
                                   $scope.CustomerOrderModel.resetServiceOrderData();
                                   $scope.CustomerOrderModel.setServiceOrderData();
                                   $scope.WizardModel.WizardSOHeader = angular.copy($scope.CustomerOrderModel.SOHeaderList[index]);
                               }
                               
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                        });
                    }

                    $scope.CustomerOrderModel.saveSignInfo = function(index){ 
                        debug($scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec.OdometerOnDeparture);
                        if($scope.CustomerOrderModel.SOHeaderList[index].SOSignInRec.Odometer == ''){
                            Notification.error('Service Order SignIn should be filled');
                            return;

                        }
                        else if(isNaN($scope.CustomerOrderModel.SOHeaderList[index].SOSignInRec.Odometer)){
                            Notification.error('Service Order SignIn should be number only');
                            return;
                        }else if($scope.CustomerOrderModel.SOHeaderList[index].SOSignInRec.Odometer <= 0){
                            Notification.error('Service Order SignIn should be greter than 0');
                            return;

                        }
                        else if($scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec.OdometerOnDeparture != '' && 
                                $scope.CustomerOrderModel.SOHeaderList[index].SOSignInRec.Odometer > $scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec.OdometerOnDeparture){
                            Notification.error('Service Order SignIn can not be greter than Departure odometer reading');
                            return;

                        }
                        SOHeaderService.saveSOSignIn($scope.CustomerOrderModel.coHeaderId, JSON.stringify($scope.CustomerOrderModel.SOHeaderList[index].SOSignInRec))
                            .then(function (successfulSearchResult){
                                Notification.success('Service Order SignIn Saved Successfully');
                                debug('save SignIn header');
                                debug(successfulSearchResult);
                                $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.Status = successfulSearchResult.SOList[index].SOHeaderInfo.Status;

                            },
                                function (errorSearchResult) {
                                    alert(errorSearchResult);
                                responseData = errorSearchResult;


                            });
                    }
                    
                    $scope.CustomerOrderModel.changeSOStatusToComplete = function(index){
                        SOHeaderService.saveSOStatusToComplete($scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.Id, $scope.CustomerOrderModel.coHeaderId)
                        .then(function (successfulSearchResult){
                            debug('changeSOStatusToComplete');
                            debug(successfulSearchResult);
                            $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.Status = successfulSearchResult.SOList[index].SOHeaderInfo.Status;
                            $scope.bindCheckOutList(successfulSearchResult.coInvoiceItemRecs);
                        },
                            function (errorSearchResult) {
                            responseData = errorSearchResult;
                        });
                    }
                    
                    
                    $scope.CustomerOrderModel.saveOdometerDeparture = function(index){ 
                        debug($scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec.OdometerOnDeparture);
                        if(isNaN($scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec.OdometerOnDeparture) || $scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec.OdometerOnDeparture < $scope.CustomerOrderModel.SOHeaderList[index].SOSignInRec.Odometer){
                            Notification.error('Service Order SignIn should be number only and greater or equal to sign in odometer reading');

                        }
                        $scope.CustomerOrderModel.saveServiceReview(index);

                        
                    }
                    
                    $scope.CustomerOrderModel.saveServiceReview = function(index, allowSave){
                        if($scope.CustomerOrderModel.isWorkWizardMode && allowSave == undefined){
                            debug('auto save prevented');
                            return;
                        }
                        SOHeaderService.saveSOReviewInfo($scope.CustomerOrderModel.coHeaderId, JSON.stringify($scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec))
                            .then(function (successfulSearchResult){
                                //Notification.success('Service Order Review Saved Successfully');
                                debug('save Service Order Review');
                                debug(successfulSearchResult);
                                $scope.CustomerOrderModel.SOHeaderList[index].SOReviewRec.OdometerOnDeparture = successfulSearchResult.SOList[index].SOReviewRec.OdometerOnDeparture;
                                $scope.CustomerOrderModel.SOHeaderList[index].SOHeaderInfo.Status = successfulSearchResult.SOList[index].SOHeaderInfo.Status;

                            },
                                function (errorSearchResult) {
                                responseData = errorSearchResult;


                            });
                    }
                    $scope.CustomerOrderModel.saveSONameToServer = function(SOName, SOHeaderId){
                        SOHeaderService.saveSOName($scope.CustomerOrderModel.coHeaderId, SOName, SOHeaderId)
                            .then(function (successfulSearchResult){
                                Notification.success('Service Order Name Saved Successfully');
                                debug('save SignIn header');
                                debug(successfulSearchResult);


                                
                            },
                                function (errorSearchResult) {
                                responseData = errorSearchResult;


                            });
                    }

                });
                    


                    
                    
                    
                CusOrder.service("CustomerInfoService", function ($q) {
                    this.EditCustomerDetails = function (customerId) {
                    	customerId = encodeString(customerId);
                        var deferred = $q.defer();
        
                        // make AJAX request to the remote service
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.getCustomer}',
                            customerId,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var customer = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                customer = customer.replace(re, '');
                                deferred.resolve(JSON.parse(customer));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
        
                    this.customerInfo = function (customerId) {
                    	customerId = encodeString(customerId);
                        var deferred = $q.defer();
                        // make AJAX request to the remote service
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.getRecordById}',
                            customerId,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var customer = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                customer = customer.replace(re, '');
                                deferred.resolve(JSON.parse(customer));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
        
                    this.getCOHeaderDetails = function (CoheaderId) {
                    	CoheaderId = encodeString(CoheaderId);
                        var deferred = $q.defer();
        
                        // make AJAX request to the remote service
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.getCOHeaderDetails}',
                            CoheaderId,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var customerOrder = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                customerOrder = customerOrder.replace(re, '');
                                deferred.resolve(JSON.parse(customerOrder));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
        
                    this.removeCOLineItem = function (COLineItemId, COHeaderId) {
                    	COLineItemId = encodeString(COLineItemId);
                    	COHeaderId = encodeString(COHeaderId);
                        var deferred = $q.defer();
                        // make AJAX request to the remote service
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.deleteCOLineItem}',
                            COLineItemId, COHeaderId,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var customer = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                customer = customer.replace(re, '');
                                deferred.resolve(JSON.parse(customer));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
                    
                    
                    
                    this.splitCOKHItem = function (COKHId, COHeaderId) {
                    	COKHId = encodeString(COKHId);
                    	COHeaderId = encodeString(COHeaderId);
                        var deferred = $q.defer();
                        // make AJAX request to the remote service
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.splitCOKHItem}',
                            COKHId, COHeaderId,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var customer = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                customer = customer.replace(re, '');
                                deferred.resolve(JSON.parse(customer));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
                    
                    this.removeLineItemsInMerchGrid = function (lineItemId, COHeaderId) {
                    	lineItemId = encodeString(lineItemId);
                    	COHeaderId = encodeString(COHeaderId);
                        var deferred = $q.defer();
                        // make AJAX request to the remote service
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.removeLineItemsInMerchGrid}',
                            lineItemId, COHeaderId,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var customer = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                customer = customer.replace(re, '');
                                deferred.resolve(JSON.parse(customer));
                            } 
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
        
        
                    this.AddDeposit = function (depositModel) {
                    	depositModel = encodeString(depositModel);
                        var deferred = $q.defer();
                        
                        // make AJAX request to the remote service
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.saveCODeposit}',
                            depositModel,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var deposits = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                deposits = deposits.replace(re, '');
                                deferred.resolve(JSON.parse(deposits));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
        
                    this.UpdateChekoutItems = function (CheckoutListJson, coHeaderId) {
                    	CheckoutListJson = encodeString(CheckoutListJson);
                    	coHeaderId = encodeString(coHeaderId);
                        var deferred = $q.defer();
        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.updateCOInvoiceItem}', CheckoutListJson, coHeaderId,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var Checkout = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                Checkout = Checkout.replace(re, '');
                                deferred.resolve(JSON.parse(Checkout));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
        
                    this.AddPayment = function (PaymentModel) {
                    	PaymentModel = encodeString(PaymentModel);
                        var deferred = $q.defer();
                        // make AJAX request to the remote service
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.saveCOInvoicePayment }', PaymentModel,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var Payment = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                Payment = Payment.replace(re, '');
                                deferred.resolve(JSON.parse(Payment));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
                    
                    this.removeCustomer = function (coHeaderId) {
						coHeaderId = encodeString(coHeaderId);

                        var deferred = $q.defer();
            
                        CustomerOrderCtrl.addCustomer(coHeaderId, null, function (result, event) {
                            if (event.type == 'exception') {
                                //showPopupNotification(event.message, "error");
                                deferred.reject(event.message);


                            } else {
                                var responseData = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                responseData = responseData.replace(re, '');
            
                                deferred.resolve(JSON.parse(responseData));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
            
                    }
        
                    this.FinaliseInvoice = function (checkOutItems, coHeaderId, checkoutMode) {
                        checkOutItems = encodeString(checkOutItems);
                        coHeaderId = encodeString(coHeaderId);
                        checkoutMode = encodeString(checkoutMode);
                        var deferred = $q.defer();
                        // make AJAX request to the remote service
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.closedInvoiceAction }', checkOutItems, coHeaderId, checkoutMode,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
        
                                var Payment = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
        
                                Payment = Payment.replace(re, '');
                                deferred.resolve(JSON.parse(Payment));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
                    this.FinaliseOrder = function (checkOutItems, coHeaderId, checkoutMode){
                        checkOutItems = encodeString(checkOutItems);
                        coHeaderId = encodeString(coHeaderId);
                        checkoutMode = encodeString(checkoutMode);
                        var deferred = $q.defer();
                        // make AJAX request to the remote service
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.closedOrderAction }', checkOutItems, coHeaderId, checkoutMode,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
        
                                var Payment = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
        
                                Payment = Payment.replace(re, '');
                                deferred.resolve(JSON.parse(Payment));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                        
                    } 
                    
        
                    this.InvoiceDetails = function (InvoiceHeaderId) {
                    	InvoiceHeaderId = encodeString(InvoiceHeaderId);
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.getInvoiceHistoryWrapperList}', InvoiceHeaderId,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var invoiceDetail = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                invoiceDetail = invoiceDetail.replace(re, '');
                                deferred.resolve(JSON.parse(invoiceDetail));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
                    
                    
                    this.createSpecialOrder = function (partId, coli, voHeaderId, coHeaderId, itemsPageSortAttrsJSON , customersPageSortAttrsJSON , stocksPageSortAttrsJSON ) {
                       
                        partId = encodeString(partId);
                        coli = encodeString(coli);
                        voHeaderId = encodeString(voHeaderId);
                        coHeaderId = encodeString(coHeaderId);
                        itemsPageSortAttrsJSON = encodeString(itemsPageSortAttrsJSON);
                        customersPageSortAttrsJSON = encodeString(customersPageSortAttrsJSON);
                        stocksPageSortAttrsJSON = encodeString(stocksPageSortAttrsJSON);
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.addVOHeaderToCOLI}', 
                            partId, coli, voHeaderId, coHeaderId, itemsPageSortAttrsJSON , customersPageSortAttrsJSON , stocksPageSortAttrsJSON,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var invoiceDetail = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                invoiceDetail = invoiceDetail.replace(re, '');
                                deferred.resolve(JSON.parse(invoiceDetail));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
                    
                      //Create special order for service oreder
                     this.createSpecialOrderServiceOrder = function (partId, coli, voHeaderId, coHeaderId, itemsPageSortAttrsJSON , customersPageSortAttrsJSON , stocksPageSortAttrsJSON ) {
                        partId = encodeString(partId);
                        coli = encodeString(coli);
                        voHeaderId = encodeString(voHeaderId);
                        coHeaderId = encodeString(coHeaderId);
                        itemsPageSortAttrsJSON = encodeString(itemsPageSortAttrsJSON);
                        customersPageSortAttrsJSON = encodeString(customersPageSortAttrsJSON);
                        stocksPageSortAttrsJSON = encodeString(stocksPageSortAttrsJSON);


                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.addVOHeaderToCOLIServiceOrder}', 
                            partId, coli, voHeaderId, coHeaderId, itemsPageSortAttrsJSON , customersPageSortAttrsJSON , stocksPageSortAttrsJSON,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var invoiceDetail = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                invoiceDetail = invoiceDetail.replace(re, '');
                                deferred.resolve(JSON.parse(invoiceDetail));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
                    
                    
                     
                    this.updateCOKHLineItems = function (coKHItems, CoHeaderId) {
                    	coKHItems = encodeString(coKHItems);
                    	CoHeaderId = encodeString(CoHeaderId);
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.updateCOKHLineItems}', coKHItems, CoHeaderId,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var merchandiseList = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                merchandiseList = merchandiseList.replace(re, '');
                                deferred.resolve(JSON.parse(merchandiseList));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
                    
                    
                    this.updateCOKHLineItemsRecalculation = function (coKHItems, CoHeaderId, CoKHLineItem) {
                    	coKHItems = encodeString(coKHItems);
                    	CoHeaderId = encodeString(CoHeaderId);
                    	CoKHLineItem = encodeString(CoKHLineItem);
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.updateCOKHLineItemsRecalculation}', coKHItems, CoHeaderId, CoKHLineItem,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var merchandiseList = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                merchandiseList = merchandiseList.replace(re, '');
                                deferred.resolve(JSON.parse(merchandiseList));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
                    
                    
                    this.getGridTotal = function (coHeaderId, gridId, gridName, isAustralianMarket) {
                    	coHeaderId = encodeString(coHeaderId);
                    	gridId = encodeString(gridId);
                    	gridName = encodeString(gridName);
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.getGridTotal}', coHeaderId, gridId, gridName, isAustralianMarket,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var merchandiseList = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                merchandiseList = merchandiseList.replace(re, '');
                                deferred.resolve(JSON.parse(merchandiseList));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
                    
                    // Create new Service Order
                      this.createSOHeader = function (CoHeaderId) {
                      	CoHeaderId = encodeString(CoHeaderId);
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.createSOHeader}', CoHeaderId,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var invoiceDetail = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                invoiceDetail = invoiceDetail.replace(re, '');
                                deferred.resolve(JSON.parse(invoiceDetail));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
                });
                
                CusOrder.service("SOHeaderService", function ($q) {
                    this.getSOMasterData = function(COHeaderId) {
                    	COHeaderId = encodeString(COHeaderId);
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.getSOMasterData}',COHeaderId,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var SOMasterData = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                SOMasterData = SOMasterData.replace(re, '');
                                deferred.resolve(JSON.parse(SOMasterData));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }

                    this.deleteServiceOrder = function(COHeaderId,soHeaderId) {
                    	COHeaderId = encodeString(COHeaderId);
                    	soHeaderId = encodeString(soHeaderId);
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.deleteServiceOrder}',COHeaderId,soHeaderId,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);
                            } else {
                                var deleteSoHeaderInfo = decodeString(result);
                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                deleteSoHeaderInfo = deleteSoHeaderInfo.replace(re, '');
                                deferred.resolve(JSON.parse(deleteSoHeaderInfo));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
                    

                    this.getSOHeaderDetails = function (COHeaderId, gridName) {
                    	COHeaderId = encodeString(COHeaderId);
                    	gridName = encodeString(gridName);
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.getSOHeaderDetails}', COHeaderId, gridName,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var SOHeaderDetail = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                SOHeaderDetail = SOHeaderDetail.replace(re, '');
                                deferred.resolve(JSON.parse(SOHeaderDetail));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
                    

                    this.editDeductibleAmount  = function (deductibleJson ) {
                    	
                       	deductibleJson = encodeString(deductibleJson);


                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.addDeductibleAmount}', 
                            deductibleJson,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var invoiceDetail = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                invoiceDetail = invoiceDetail.replace(re, '');
                                deferred.resolve(JSON.parse(invoiceDetail));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }





                    this.saveSOSignIn = function(COHeaderId, signInInfo) {
                        COHeaderId = encodeString(COHeaderId);
                        signInInfo = encodeString(signInInfo);
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(  

                            '{!$RemoteAction.CustomerOrderCtrl.saveSOSignIn}',COHeaderId, signInInfo,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {

                                var signInInfo = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                signInInfo = signInInfo.replace(re, '');
                                deferred.resolve(JSON.parse(signInInfo));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
                    
                    
                    this.saveSOReviewInfo = function(COHeaderId, SoReviewInfo) {
                        COHeaderId = encodeString(COHeaderId);
                        SoReviewInfo = encodeString(SoReviewInfo);
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(

                            '{!$RemoteAction.CustomerOrderCtrl.saveSOReviewInfo}',COHeaderId, SoReviewInfo,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {

                                var SOReviewInfo = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                SOReviewInfo = SOReviewInfo.replace(re, '');
                                deferred.resolve(JSON.parse(SOReviewInfo));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
                    
                    




                    this.saveSOHeaderInfo = function (COHeaderId, SOHeaderInfo) {
                        COHeaderId = encodeString(COHeaderId);
                        SOHeaderInfo = encodeString(SOHeaderInfo);
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            
                            '{!$RemoteAction.CustomerOrderCtrl.saveSOHeaderInfo}', COHeaderId, SOHeaderInfo,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var SOHeaderDetailInfo = decodeString(result);
                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                SOHeaderDetailInfo = SOHeaderDetailInfo.replace(re, '');
                                deferred.resolve(JSON.parse(SOHeaderDetailInfo));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }


                    
                    
                    this.savePinnedItems = function(pinnedItemJson) {
                        pinnedItemJson = encodeString(pinnedItemJson);
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.savePinItems}',pinnedItemJson,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                deferred.resolve(decodeString(result));


                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
                    

                    
                    this.saveSOName = function(coHeaderId, soName, soId) {
                        coHeaderId = encodeString(coHeaderId);
                        soName = encodeString(soName);
                        soId = encodeString(soId);
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.saveSOName}',coHeaderId, soName, soId,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                deferred.resolve(decodeString(result));


                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;

                    }
                    
                    this.saveSOStatusToComplete = function(soHeaderId, coHeaderId) {
                        soHeaderId = encodeString(soHeaderId);
                        coHeaderId = encodeString(coHeaderId);
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.changeSOHeaderStatusToComplete}',soHeaderId, coHeaderId,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var SOHeaderDetailInfo = decodeString(result);
                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                SOHeaderDetailInfo = SOHeaderDetailInfo.replace(re, '');
                                deferred.resolve(JSON.parse(SOHeaderDetailInfo));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;

                    }


                      
                    this.addLineItems= function( lineItemId,  soHeaderId,  coHeaderId,customerId){

                      lineItemId = encodeString(lineItemId);
                      soHeaderId = encodeString(soHeaderId);
                      coHeaderId = encodeString(coHeaderId);
                      customerId = encodeString(customerId);
                      var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.addLineItems}', lineItemId,  soHeaderId,  coHeaderId,customerId,

                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var SOHeaderDetailInfo = decodeString(result);
                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                SOHeaderDetailInfo = SOHeaderDetailInfo.replace(re, '');
                                deferred.resolve(JSON.parse(SOHeaderDetailInfo));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;

                    
                    }  


        
                    
                 this.saveCOU = function(couJSONString, customerId) {
                           couJSONString = encodeString(couJSONString);
                           customerId = encodeString(customerId);
                           var deferred = $q.defer();
                           Visualforce.remoting.Manager.invokeAction(
                               '{!$RemoteAction.CustomerOrderCtrl.saveCOU}',couJSONString,customerId,
                                function (result, event) {
                                if (event.type == 'exception') {
                                    deferred.reject(event.message);



                                }else {
                                    var saveCouInfo = decodeString(result);



                                    var find = '\'';
                                    var re = new RegExp(find, 'g');
                                    saveCouInfo = saveCouInfo.replace(re, '');
                                    deferred.resolve(JSON.parse(saveCouInfo));




                               }
                               }, {
                                   escape : true


                               });
                       return deferred.promise;
                   }
                   
                   
                   
                   this.splitSOKHItem= function( lineItemId, coHeaderId){
					 lineItemId = encodeString(lineItemId);
					 coHeaderId = encodeString(coHeaderId);

                     var deferred = $q.defer();
                       Visualforce.remoting.Manager.invokeAction(
                           '{!$RemoteAction.CustomerOrderCtrl.splitSOKHItem}', lineItemId, coHeaderId,
                           function (result, event) {
                           if (event.type == 'exception') {
                               deferred.reject(event.message);


                           } else {
                               var SOHeaderDetail = decodeString(result);


                               var find = '\'';
                               var re = new RegExp(find, 'g');
                               SOHeaderDetail = SOHeaderDetail.replace(re, '');
                               deferred.resolve(JSON.parse(SOHeaderDetail));
                           }
                       }, {
                           escape : true


                       });

                       return deferred.promise;
                   } 
                   
                   
                   this.removeLineItems= function( lineItemId, coHeaderId, soHeaderId){
                     lineItemId = encodeString(lineItemId);
                     coHeaderId = encodeString(coHeaderId);
                     soHeaderId = encodeString(soHeaderId);
                     var deferred = $q.defer();
                       Visualforce.remoting.Manager.invokeAction(
                           '{!$RemoteAction.CustomerOrderCtrl.removeLineItems}', lineItemId, coHeaderId, soHeaderId, 
                           function (result, event) {
                           if (event.type == 'exception') {
                               deferred.reject(event.message);


                           } else {
                               var SOHeaderDetail = decodeString(result);


                               var find = '\'';
                               var re = new RegExp(find, 'g');
                               SOHeaderDetail = SOHeaderDetail.replace(re, '');
                               deferred.resolve(JSON.parse(SOHeaderDetail));
                           }
                       }, {
                           escape : true


                       });
                       return deferred.promise;
                   } 
                 
                   
                   this.updateSOLineItems= function( lineItemJSON, coHeaderId){

					 lineItemJSON = encodeString(lineItemJSON);
					 coHeaderId = encodeString(coHeaderId);


                     var deferred = $q.defer();
                       Visualforce.remoting.Manager.invokeAction(
                           '{!$RemoteAction.CustomerOrderCtrl.updateSOLineItems}', lineItemJSON, coHeaderId,
                           function (result, event) {
                           if (event.type == 'exception') {
                               deferred.reject(event.message);


                           } else {
                               var SOHeaderDetail = decodeString(result);


                               var find = '\'';



                               var re = new RegExp(find, 'g');
                               SOHeaderDetail = SOHeaderDetail.replace(re, '');

                               deferred.resolve(JSON.parse(SOHeaderDetail));
                           }      

                    },{
                           escape : true


                       })



                     return deferred.promise; 
                  }

                  
                     this.updateSOKHLineItems = function( soKHItemJSON,coHeaderId){
                     	 soKHItemJSON = encodeString(soKHItemJSON);
                     	 coHeaderId = encodeString(coHeaderId);
                         var deferred = $q.defer();
                           Visualforce.remoting.Manager.invokeAction(
                               '{!$RemoteAction.CustomerOrderCtrl.updateSOKHLineItems}', soKHItemJSON, coHeaderId,
                               function (result, event) {
                               if (event.type == 'exception') {
                                   deferred.reject(event.message);



                               } else {
                                   var SOHeaderDetail = decodeString(result);



                                   var find = '\'';
                                   var re = new RegExp(find, 'g');
                                   SOHeaderDetail = SOHeaderDetail.replace(re, '');

    
                                   deferred.resolve(JSON.parse(SOHeaderDetail));




                               }      
                            },{
                                   escape : true


                               })

                        return deferred.promise; 



                  }
                  
                  
                   this.getVendorOrderByVendorId = function( vendorId){
                   		 vendorId = encodeString(vendorId);
                         var deferred = $q.defer();
                           Visualforce.remoting.Manager.invokeAction(
                               '{!$RemoteAction.CustomerOrderCtrl.getVendorOrderByVendorId}',vendorId,
                               function (result, event) {
                               if (event.type == 'exception') {
                                   deferred.reject(event.message);



                               } else {
                                   var SOHeaderDetail = decodeString(result);



                                   var find = '\'';
                                   var re = new RegExp(find, 'g');
                                   SOHeaderDetail = SOHeaderDetail.replace(re, '');

    
                                   deferred.resolve(JSON.parse(SOHeaderDetail));




                               }      
                            },{
                                   escape : true


                               })

                        return deferred.promise; 



                  }
                  
                    this.moveLineItem = function(sectionFrom, sectionTo, idToMove,coheader){
                    	 sectionFrom = encodeString(sectionFrom);
                    	 sectionTo = encodeString(sectionTo);
                    	 idToMove = encodeString(idToMove);
                    	 coheader = encodeString(coheader);
                         var deferred = $q.defer();
                           Visualforce.remoting.Manager.invokeAction(
                               '{!$RemoteAction.CustomerOrderCtrl.moveLineItem}',sectionFrom, sectionTo, idToMove,coheader,
                               function (result, event) {
                               if (event.type == 'exception') {
                                   deferred.reject(event.message);



                               } else {
                                   var SOHeaderDetail = decodeString(result);


                                   var find = '\'';
                                   var re = new RegExp(find, 'g');
                                   SOHeaderDetail = SOHeaderDetail.replace(re, '');
                                   deferred.resolve(JSON.parse(SOHeaderDetail));
                               }      
                            },{
                                   escape : true


                               })

                        return deferred.promise; 
                  }                  

                    
                    this.getProviderInformation  = function (providerId ) {
                    	providerId = encodeString(providerId);
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.getProviderInfo}', providerId
                           ,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var invoiceDetail = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                invoiceDetail = invoiceDetail.replace(re, '');
                                deferred.resolve(JSON.parse(invoiceDetail));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }    

                });
                
                
                CusOrder.service("WizardService", function ($q) {
                    this.getWizardInfo = function(SOHeaderId, wizardkey) {
                    	SOHeaderId = encodeString(SOHeaderId);
                    	wizardkey = encodeString(wizardkey);
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.getWizardInfo}', SOHeaderId, wizardkey, 
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var WizardInfo = decodeString(result);


                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                WizardInfo = WizardInfo.replace(re, '');
                                deferred.resolve(JSON.parse(WizardInfo));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
                    
                    this.saveClaimResponse = function(SOHeaderId, ClaimResponseJson, isSaveExit) {
                    	SOHeaderId = encodeString(SOHeaderId);
                    	ClaimResponseJson = encodeString(ClaimResponseJson);
                    	isSaveExit = encodeString(isSaveExit);
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.saveClaimResponse}', SOHeaderId, ClaimResponseJson, isSaveExit,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                var ClaimResponseInfo = decodeString(result);
                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                ClaimResponseInfo = ClaimResponseInfo.replace(re, '');
                                deferred.resolve(JSON.parse(ClaimResponseInfo));
                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
                    
                    this.sendOnSignInWizard = function(custJsonStr, Notes, soHeaderId, customerName) {
                    	debug("custJsonStr : "+JSON.stringify(custJsonStr));
                    	debug("soHeaderId : "+JSON.stringify(soHeaderId));
                    	custJsonStr = encodeString(custJsonStr);
                    	Notes = encodeString(Notes);
                    	soHeaderId = encodeString(soHeaderId);
                    	customerName = encodeString(customerName);
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.sendOnSignInWizard}', custJsonStr, Notes, soHeaderId, customerName,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                deferred.resolve(decodeString(result));  


                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    } 
                    
                    this.changeStatus = function(soHeaderId, newWorkStatus, wizardType) {
                    	soHeaderId = encodeString(soHeaderId);
                    	newWorkStatus = encodeString(newWorkStatus);
                    	wizardType = encodeString(wizardType);
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.changeStatus}', soHeaderId, newWorkStatus, wizardType,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);


                            } else {
                                deferred.resolve(decodeString(result));  


                            }
                        }, {
                            escape : true


                        });
                        return deferred.promise;
                    }
                    
                    this.saveWizardDetails = function(soHeaderId, wizardkey, wizardJsonToSave, deleteRecordsJson) {
                    	soHeaderId = encodeString(soHeaderId);
                    	wizardkey = encodeString(wizardkey);
                    	wizardJsonToSave = encodeString(wizardJsonToSave);
                    	deleteRecordsJson = encodeString(deleteRecordsJson);
                       var deferred = $q.defer();
                       Visualforce.remoting.Manager.invokeAction(
                           '{!$RemoteAction.CustomerOrderCtrl.saveWizardDetails}', soHeaderId, wizardkey,wizardJsonToSave,deleteRecordsJson,
                           function (result, event) {
                           if (event.type == 'exception') {
                               deferred.reject(event.message);
						   } else {
                               var WizardInfo = decodeString(result);


                               var find = '\'';
                               var re = new RegExp(find, 'g');
                               WizardInfo = WizardInfo.replace(re, '');
                               deferred.resolve(JSON.parse(WizardInfo));
                           }
                       }, {
                           escape : true


                       });
                       return deferred.promise;
                   }  
                   
                   
                   this.saveCustomerApprovalInfo = function(soHeaderId, JSONString) {
                   	   soHeaderId = encodeString(soHeaderId);
                   	   JSONString = encodeString(JSONString);
                       var deferred = $q.defer();
                       Visualforce.remoting.Manager.invokeAction(
                           '{!$RemoteAction.CustomerOrderCtrl.saveCustomerApprovalInfo}', soHeaderId, JSONString,
                           function (result, event) {
                           if (event.type == 'exception') {
                               deferred.reject(event.message);


                           } else {
                               var WizardInfo = decodeString(result);


                               var find = '\'';
                               var re = new RegExp(find, 'g');
                               WizardInfo = WizardInfo.replace(re, '');
                               deferred.resolve(JSON.parse(WizardInfo));
                           }
                       }, {
                           escape : true


                       });
                       return deferred.promise;
                   }  
                   
                   
                   this.getCustomerApprovalInfo = function(soHeaderId, sectionkey, approvalCount) {
                   	   soHeaderId = encodeString(soHeaderId);
                   	   sectionkey = encodeString(sectionkey);
                       var deferred = $q.defer();
                       Visualforce.remoting.Manager.invokeAction(
                           '{!$RemoteAction.CustomerOrderCtrl.getCustomerApprovalInfo}', soHeaderId, sectionkey, approvalCount,
                           function (result, event) {
                           if (event.type == 'exception') {
                               deferred.reject(event.message);


                           } else {
                               var WizardInfo = decodeString(result);


                               var find = '\'';
                               var re = new RegExp(find, 'g');
                               WizardInfo = WizardInfo.replace(re, '');
                               deferred.resolve(JSON.parse(WizardInfo));
                           }
                       }, {
                           escape : true


                       });
                       return deferred.promise;
                   }  
                    
                 this.submitClaimRecords = function(soHeaderId) {
                       soHeaderId = encodeString(soHeaderId);
                       var deferred = $q.defer();
                       Visualforce.remoting.Manager.invokeAction(
                           '{!$RemoteAction.CustomerOrderCtrl.submitClaimRecords}', soHeaderId ,
                           function (result, event) {
                           if (event.type == 'exception') {
                               deferred.reject(event.message);


                           } else {
                               deferred.resolve(decodeString(result));


                           }
                       }, {
                           escape : true


                       });
                       return deferred.promise;
                   }  
                    
                 });
                 
                 
                 CusOrder.service('FileUploadService', function ($q) {
                    this.uploadAttachment = function (attachmentName, atatchmentbody, parentRecordId, source) {
                        attachmentName = encodeString(attachmentName);
                        atatchmentbody = encodeString(atatchmentbody);
                        parentRecordId = encodeString(parentRecordId);
                        source = encodeString(source);
                        var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.uploadAttachment}', 
                            attachmentName, atatchmentbody, parentRecordId, source,
                            function (result, event) {
                                if (event.type == 'exception') {
                                    deferred.reject(event.message);




                                } else {
                                    var WizardInfo = decodeString(result);


                                    var find = '\'';
                                    var re = new RegExp(find, 'g');
                                    WizardInfo = WizardInfo.replace(re, '');
                                    deferred.resolve(JSON.parse(WizardInfo));
                                }
                            }, {
                                buffer : true,
                                escape : true,


                                timeout : 120000
                            });
                            return deferred.promise;
                    }
                    this.removeAttachment = function(attachmentId, soHeaderId) {
                       attachmentId = encodeString(attachmentId);
                       soHeaderId = encodeString(soHeaderId);
                       var deferred = $q.defer();
                       Visualforce.remoting.Manager.invokeAction(
                           '{!$RemoteAction.CustomerOrderCtrl.removeAttachment}', attachmentId, soHeaderId,
                           function (result, event) {
                           if (event.type == 'exception') {
                               deferred.reject(event.message);


                           } else {
                               var removeAttachment = decodeString(result);
                               var find = '\'';
                               var re = new RegExp(find, 'g');
                               removeAttachment = removeAttachment.replace(re, '');
                               deferred.resolve(JSON.parse(removeAttachment));
                           }
                       }, {
                           escape : true


                       });
                       return deferred.promise;
                   }  
                   
                   this.PrintPreviewDetails = function (PrintPreviewId) {
                       PrintPreviewId = encodeString(PrintPreviewId);
                       var deferred = $q.defer();
       
                       // make AJAX request to the remote service
                       Visualforce.remoting.Manager.invokeAction(
                           '{!$RemoteAction.CustomerOrderCtrl.getPrintingInfo}',PrintPreviewId,
                           function (result, event) {
                           if (event.type == 'exception') {
                               deferred.reject(event.message);   


                           } else {
                               var PrintPreview = decodeString(result);


                               var find = '\''; 
                               var re = new RegExp(find, 'g');
                               PrintPreview = PrintPreview.replace(re, '');
                               deferred.resolve(JSON.parse(PrintPreview));
                           }
                       }, {
                           escape : true


                       });
                       return deferred.promise;
                   }
                
                });
            </script>
        </head>
        
        <body ng-controller="mainCtrl" ng-init="LoadCustomerOrder()" ng-cloak="ng-cloak">
            <c:BPGlobalHeader />
            <div class="content">
                <div class="col-lg-2 col-md-2 sidePanel" ng-class="{'deActice-SidePanel' : CustomerOrderModel.isWizardMode}">
                    <div class="orderNumber row">
                        <span>ORDER #:  {{CustomerOrderModel.coHeaderDetails.OrderName}}</span>
                    </div>
                    <div class="sidepaneluserinfo row">
                        <div class="userimg">
                            <div style="float:left;background-color: #373c40; border-radius: 5px; padding: 1px; margin-right: 5px;">
                                    <img  src="{!URLFOR($Resource.Images, 'star.png')}" style="height:35px; width:35px; padding: 5px;"/>
                            </div>
                        </div>
                        <div class="userNameblock">
                            <p> 
                            <span> 
                                <a href="" ng-mouseover="CustomerOrderModel.showCustomerInfoOverlay($event, CustomerOrderModel.Customer.Value);" 
                                     ng-mouseleave="CustomerOrderModel.hideCustomerInfoOverlay();" id="CO_workflow_sidepanel_cust_name_link">
                                     {{CustomerOrderModel.Customer.Name}} 

                                 </a>
                            </span>
                            </p>
                            <!-- <p>Last Visited 04/06/15</p> -->
                        </div>
                    </div>
                    <div class="clearfix"></div>
                    <div class="row statusRow">
                        <span class="userStatus"></span>
                        <span class="userStatus"></span>
                        <span class="divider"></span>
                      <!-- <div class="Plr12 MB24" style="clear:both;">
                                      <i class="fa fa-motorcycle FC7"></i>
                                      <i class="fa fa-motorcycle FC7"></i>
                                      <i class="fa fa-wrench FC7"></i>
                                      <span class="userType">Gamification</span>
                                   </div> -->
                                    
                    </div>
                    <!-- 
                    <div class="row ownerInfo">
                        <img src="{!URLFOR($Resource.Images, 'profile_default.jpg')}" style="height:30px; width:30px"/>
                        <span class="Name">{{CustomerOrderModel.coHeaderDetails.OwnerName}}</span>
                    </div> 
                    -->
                    
                    <div class="leftPanelLinks">
                             <a class="row T10 mainSectionLink" ng-class="{'active' : CustomerOrderModel.activeSidepanelink =='#CustomerSection'}" 
                            href="#CustomerSection" ng-click="CustomerOrderModel.sidepanelLink($event, 'Customer')" ><span class="alphabetLetter">{{CustomerOrderModel.LeftSideHeadingLables.Info}}</span>Info</a>
                            
                           <div ng-repeat="serviceOrder in CustomerOrderModel.serviceOrderList ">
                                 <a class="row T10 mainSectionLink" href="{{serviceOrder.SectionID}}" 
                                    ng-class="{'active' : CustomerOrderModel.activeSidepanelink ==serviceOrder.SectionID}"  
                                    ng-click="CustomerOrderModel.sidepanelLink($event, 'Customer')" >
                                    <span class="alphabetLetter">{{CustomerOrderModel.LeftSideHeadingLables['ServiceOrder'+$index]}}</span>{{serviceOrder.Name}}


                                </a>
                                 <a class="row T10 subSectionLink subSectionwc" href="#ServiceInfoSection{{$index}}" 
                                    ng-click="CustomerOrderModel.sidepanelLink($event, 'Customer', true, false)" >
                                    <span class="Servicegray">Work :</span> 
                                    <span class="userStatus feeuserstatus ng-scope">
                                        {{CustomerOrderModel.SOHeaderList[$index].SOHeaderInfo.WorkStatus}}
                                    </span>
                                 </a>
                                 <a  class="row T10 subSectionLink subSectionwc" href="#ServiceInfoSection{{$index}}"
                                    ng-if="CustomerOrderModel.SOHeaderList[$index].SOHeaderInfo.TransactionType == 'Third-Party'"
                                    ng-click="CustomerOrderModel.sidepanelLink($event, 'Customer', false, true)" >
                                    <span class="Servicegray">Claim :</span>
                                    <span class="userStatus feeuserstatus ng-scope" style="color:#E80000">
                                        {{CustomerOrderModel.SOHeaderList[$index].SOHeaderInfo.ClaimStatus}}
                                    </span>
                                 </a>
                                 <a class="row T10 subSectionLink"   href="#ServiceInfoSection{{$index}}" ng-click="CustomerOrderModel.sidepanelLink($event, 'Checkout')">
                                <span class="alphabetLetter"></span>Info</a>
                                 <a class="row T10 subSectionLink" href="#ServiceSigninSection{{$index}}" ng-click="CustomerOrderModel.sidepanelLink($event, 'Checkout')">
                                <span class="alphabetLetter"></span>Sign-In</a>
                                 <a class="row T10 subSectionLink"   href="#ServiceItemSection{{$index}}" ng-click="CustomerOrderModel.sidepanelLink($event, 'Checkout')">
                                <span class="alphabetLetter"></span>Items</a>
                                 <a class="row T10 subSectionLink"   href="#ServiceHLSection{{$index}}" ng-click="CustomerOrderModel.sidepanelLink($event, 'Checkout')">
                                <span class="alphabetLetter"></span>Hours Logged</a>
                                 <a class="row T10 subSectionLink"   href="#ServiceCustomerApprovalSection{{$index}}" ng-click="CustomerOrderModel.sidepanelLink($event, 'Checkout')">
                                  <span class="alphabetLetter"></span>Customer Approvals</a>
                                 <a class="row T10 subSectionLink"   href="#ServiceSRSection{{$index}}" ng-click="CustomerOrderModel.sidepanelLink($event, 'Checkout')"
                                    ng-if="CustomerOrderModel.SOHeaderList[$index].SOHeaderInfo.Status == 'Complete' || CustomerOrderModel.SOHeaderList[$index].SOHeaderInfo.Status == 'Reviewed'">
                                <span class="alphabetLetter"></span>Service Review</a>

                                 <!--
                                 <a class="row T10 subSectionLink"   href="#ServiceIPSection{{$index}}" ng-click="CustomerOrderModel.sidepanelLink($event, 'Checkout')">
                                <span class="alphabetLetter"></span>Internal Approvals</a>
                                 <a class="row T10 subSectionLink"   href="#ServiceCPSection{{$index}}" ng-click="CustomerOrderModel.sidepanelLink($event, 'Checkout')">
                                <span class="alphabetLetter"></span>Customer Approvals </a>
                                     <a class="row T10 subSectionLink"   href="#ServiceCHSection{{$index}}" ng-click="CustomerOrderModel.sidepanelLink($event, 'Checkout')">
                                <span class="alphabetLetter"></span>Claim History </a>
                                     <a class="row T10 subSectionLink"   href="#ServiceCPASection{{$index}}" ng-click="CustomerOrderModel.sidepanelLink($event, 'Checkout')">
                                <span class="alphabetLetter"></span>Customer Payable Against </a>

                                -->
                            </div>
                        <a class="row T10 mainSectionLink" ng-show="CustomerOrderModel.MerchandiseItems.length > 0 || CustomerOrderModel.MerchandiseGhostItems.length > 0" ng-class="{'active' : CustomerOrderModel.activeSidepanelink =='#MerchandiseSection'}" 
                            href="#MerchandiseSection" ng-click="CustomerOrderModel.sidepanelLink($event, 'Merchandise')" ><span class="alphabetLetter">{{CustomerOrderModel.LeftSideHeadingLables.Merchandise}}</span>Merchandise</a>                    
                        <a class="row T10 subSectionLink" ng-show="CustomerOrderModel.MerchandiseItems.length > 0 || CustomerOrderModel.MerchandiseGhostItems.length > 0" href="#MerchandiseSection" ng-click="CustomerOrderModel.sidepanelLink($event, 'Merchandise')">
                            <span class="alphabetLetter"></span>Items</a>
<!--                         <a class="row T10 subSectionLink" ng-show="CustomerOrderModel.MerchandiseItems.length > 0 || CustomerOrderModel.MerchandiseGhostItems.length > 0" href="#MerchandiseSuggestedItems" ng-click="CustomerOrderModel.sidepanelLink($event, 'Merchandise')"> -->
<!--                             <span class="alphabetLetter"></span>Suggested Items</a> -->
<!--                         <a class="row T10 subSectionLink" ng-show="CustomerOrderModel.MerchandiseItems.length > 0 || CustomerOrderModel.MerchandiseGhostItems.length > 0" href="#MerchandiseApprovals" ng-click="CustomerOrderModel.sidepanelLink($event, 'Merchandise')"> -->
<!--                             <span class="alphabetLetter"></span>Approvals</a> -->
                            
                        <a class="row T10 mainSectionLink" ng-show="CustomerOrderModel.SpecialOrder.length > 0" ng-class="{'active' : CustomerOrderModel.activeSidepanelink =='#SpecialOrderSection'}" 
                            href="#SpecialOrderSection" ng-click="CustomerOrderModel.sidepanelLink($event, 'SpecialOrder')" ><span class="alphabetLetter"> {{CustomerOrderModel.LeftSideHeadingLables.Special_Orders}}</span>Special Orders</a>
                        
                        
                        <a class="row T10 mainSectionLink"   ng-class="{'active' : CustomerOrderModel.activeSidepanelink =='#DepositSection'}" 
                            href="#DepositSection" ng-click="CustomerOrderModel.sidepanelLink($event, 'Deposit')" ng-show = "CustomerOrderModel.Customer.Name !=null" ><span class="alphabetLetter">{{CustomerOrderModel.LeftSideHeadingLables.Deposits}}</span>Deposits</a>
                        <a class="row T10 mainSectionLink" ng-show="CustomerOrderModel.CheckOutItems.length > 0" ng-class="{'active' : CustomerOrderModel.activeSidepanelink =='#CheckoutSection'}" 
                            href="#CheckoutSection" ng-click="CustomerOrderModel.sidepanelLink($event, 'Checkout')" ><span class="alphabetLetter">{{CustomerOrderModel.LeftSideHeadingLables.Checkout}}</span>Checkout</a>
                        <a class="row T10 subSectionLink"  ng-show="CustomerOrderModel.CheckOutItems.length > 0"  href="#CheckoutSection" ng-click="CustomerOrderModel.sidepanelLink($event, 'Checkout')">
                            <span class="alphabetLetter"></span>Items</a>
                        <a class="row T10 subSectionLink" ng-show="CustomerOrderModel.CheckOutItems.length > 0"  href="#CheckoutPaymentSection" ng-click="CustomerOrderModel.sidepanelLink($event, 'Checkout')">
                            <span class="alphabetLetter"></span>Payments</a>
                        <a class="row T10 subSectionLink" ng-show="CustomerOrderModel.CheckOutItems.length > 0"  href="#CheckoutFinalizeSection" ng-click="CustomerOrderModel.sidepanelLink($event, 'Checkout')">
                            <span class="alphabetLetter"></span>Finalize Order</a>
                            
                        <a class="row T10 mainSectionLink" ng-show="CustomerOrderModel.InvoiceHistory.length > 0" ng-class="{'active' : CustomerOrderModel.activeSidepanelink =='#InvoiceHistory'}" 
                            href="#InvoiceHistory" ng-click="CustomerOrderModel.sidepanelLink($event, 'InvoiceHistory')" >
                            <span class="alphabetLetter">{{CustomerOrderModel.LeftSideHeadingLables.Invoice_History}}</span>Invoice History</a>
                    </div>
                    <!-- Section Totals -->
                    <div class="sideBarTotals">
                      <div class="C1 orderleftPanelLinks">
                        <div class="ordertotal">
                        <a class= "T10 subSectionLink ">Order Total</a>
                        <a class= "T10 subSectionLink text-right">{{CustomerOrderModel.calculateOrderTotal() | currency}}</a>
                        </div>
                        <div class="ordertotal">
                        <a class= "T10 subSectionLink ">Deposits</a>
                        <a class= "T10 subSectionLink text-right">{{CustomerOrderModel.calculateLeftPanelDeposits() | currency}}</a>
                        </div>
                      <div class="ordertotal">
                        <a class= "T10 subSectionLink ">INVOICED</a>
                        <a class= "T10 subSectionLink text-right">{{CustomerOrderModel.calculateInvoiceHistoryTotal() | currency}}</a>
                        </div>
                        
                        </div>
                      <div class="mainSectionLink totalDue C1">
                        <a class="T2">Total Due:</a>
                        <a class="T2 text-right"> {{CustomerOrderModel.calculateLeftPanelTotalDue() >= 0 ? '$' :'-$'}}
                                       {{CustomerOrderModel.calculateLeftPanelTotalDue() >= 0 ? CustomerOrderModel.calculateLeftPanelTotalDue() : -1 * CustomerOrderModel.calculateLeftPanelTotalDue()}}</a>
                     </div>
                    </div>
                </div>
                <div class="col-lg-10 col-md-10 mainSection" style="margin-top: 98px;">
                    <div class=" sectionHeader row fixedRow" ng-class="{'deActice-Header' : CustomerOrderModel.isWizardMode}">
                        <div class="col-lg-6 col-md-6" ng-show="CustomerOrderModel.activeSidepanelink =='#CustomerSection'">
                            <div class="fixedHeaderText">
                                <span class="headerlabel">
                                <i class="fa fa-angle-right" style="width:10px; padding: 0 3px;"
                                    ng-show="!CustomerOrderModel.displaySections.Customer"
                                    ng-Click="CustomerOrderModel.displaySections.Customer = true">
                                </i> 
                                <i class="fa fa-angle-down" style="width:10px;"
                                    ng-show="CustomerOrderModel.displaySections.Customer"
                                    ng-Click="CustomerOrderModel.displaySections.Customer = false">
                                </i> 
                                <span class="divider">|</span>
                                <span class = "headdingFirstText">{{CustomerOrderModel.LeftSideHeadingLables.Info}}</span>
                                <span class="T2">Info</span>
                                </span>
                                <span class="ActionIcons pull-left ">
                               	<!-- <div class="dropdown selectDropdown checkboxDropdown">
                                  <button class="btn dropdown-toggle" type="button" data-toggle="dropdown">Actions
                                  <span class="caret"></span></button>
                            	</div> -->



                                </span> 
                            </div>
                        </div>
                        
                        
                       <div class="col-lg-6 col-md-6" ng-repeat="serviceOrder in CustomerOrderModel.serviceOrderList"
                            ng-init="serviceOrderHeaderIndex = $index" 
                            ng-show="CustomerOrderModel.activeSidepanelink ==serviceOrder.SectionID">
                            <div class="fixedHeaderText">
                                <span class="headerlabel">
                                 <i class="fa fa-angle-right" style="width:10px; padding: 0 3px;"
                                    ng-show="!CustomerOrderModel.displaySections.ServiceOrder[$index].display"
                                    ng-Click="CustomerOrderModel.displaySections.ServiceOrder[$index].display = true">
                                </i> 
                                <i class="fa fa-angle-down" style="width:10px;"
                                    ng-show="CustomerOrderModel.displaySections.ServiceOrder[$index].display"
                                    ng-Click="CustomerOrderModel.displaySections.ServiceOrder[$index].display = false">
                                </i> 
                                <span class="divider">|</span>
                                <span class="headdingFirstText"> {{CustomerOrderModel.LeftSideHeadingLables['ServiceOrder'+$index]}} </span>
                                    <span title="{{CustomerOrderModel.SOHeaderList[$index].SOHeaderInfo.Name}}"   class="T2 edittext" ng-click="CustomerOrderModel.showSONameEditMode($index,'HeaderList')"  ng-show="!CustomerOrderModel.SOHeaderList[$index].SOHeaderInfo.isSONameEdit">{{CustomerOrderModel.SOHeaderList[$index].SOHeaderInfo.Name}}</span>
                                     <input type="text" id="SO_Header_Name_Edit_{{$index}}" ng-blur="CustomerOrderModel.UpdateSOName($index)"  ng-show="CustomerOrderModel.SOHeaderList[$index].SOHeaderInfo.isSONameEdit"
                                      ng-model="CustomerOrderModel.SOHeaderList[$index].SOHeaderInfo.Name" ng-focus="CustomerOrderModel.selectalltext($index,'HeaderList')" class="serviceLabeledit"/>
                                </span>

                                <span class="ActionIcons pull-left">
                                   <div class="dropdown selectDropdown checkboxDropdown">
                                      <button class="btn dropdown-toggle" type="button" data-toggle="dropdown">Actions
                                      <span class="caret"></span></button>
                                       <ul class="dropdown-menu" ng-if = "CustomerOrderModel.isDeleteServiceOrder($index)">
                                         <li><a  ng-click="CustomerOrderModel.deleteSoHeaderInfo(CustomerOrderModel.SOHeaderList[$index].SOHeaderInfo.Id)">Remove Item</a></li>
                                      </ul>
                                    </div>
                                </span>
                                <span class="ActionIcons pull-left">
                                    <div class="dropdown selectDropdown checkboxDropdown" id="SoHeaderWorkDropdown{{$index}}">
                                        <button class="btn dropdown-toggle" type="button" data-toggle="dropdown">Work
                                        <span class="caret"></span></button>
                                        <ul class="dropdown-menu">
                                            <li ng-repeat="workStatus in CustomerOrderModel.SOHeaderList[$index].SOHeaderInfo.AvailableWorkStatusList"
                                                ng-click="CustomerOrderModel.changeWorkStatus(workStatus, $parent.$index)"><a>{{workStatus.AvailableStatus}}</a></li>
                                            <li ng-show="CustomerOrderModel.SOHeaderList[$index].SOHeaderInfo.AvailableWorkStatusList.length == 0"><a>No Action Available</a></li>
                                        </ul>
                                    </div>
                                </span>
                                
                                
                                <span class="ActionIcons pull-left" ng-if="CustomerOrderModel.SOHeaderList[$index].SOHeaderInfo.TransactionType == 'Third-Party'">
                                    <div class="dropdown selectDropdown checkboxDropdown" id="SoHeaderClaimDropdown{{$index}}">
                                        <button class="btn dropdown-toggle" type="button" data-toggle="dropdown">Claim
                                        <span class="caret"></span></button>
                                        <ul class="dropdown-menu">
                                            <li ng-repeat="claimStatus in CustomerOrderModel.SOHeaderList[$index].SOHeaderInfo.AvailableClaimStatusList"
                                                ng-click="CustomerOrderModel.changeClaimStatus(claimStatus, $parent.$index)"><a>{{claimStatus.AvailableStatus}}</a></li>
                                            <li ng-show="CustomerOrderModel.SOHeaderList[$index].SOHeaderInfo.AvailableClaimStatusList.length == 0"><a>No Action Available</a></li>
                                        </ul>
                                    </div>
                                </span>

                               <!--  <span class="ActionIcons ">
                                <i class="fa fa-th" ng-if = "!CustomerOrderModel.isDeleteServiceOrder($index)"></i>
                                 <div class="actionDropdown dropdown" ng-if = "CustomerOrderModel.isDeleteServiceOrder($index)">
                                       <i class="fa fa-th dropdown-toggle" style = "color:#000" type="button" data-toggle="dropdown"></i>
                                       <ul class="dropdown-menu">
                                         <li><a ng-click="CustomerOrderModel.deleteSoHeaderInfo(CustomerOrderModel.SOHeaderList[$index].SOHeaderInfo.Id)">Remove Item</a></li>
                                       </ul>
                                 </div>

                                <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Checkout Section"></i>
                                </span>  -->

                                
                                 <span class="T3  pull-right total" >
                                 
                                 <a id="CO_active_Services_Payments_total_balance_due_h3_a"
                                    ng-mouseover="CustomerOrderModel.calculateTotalOverlay($event, CustomerOrderModel.SOHeaderList[$index].SOHeaderInfo.Id, 'serviceOrder')" 
                                    ng-mouseleave="CustomerOrderModel.hidePriceInfoOverlay()" >
                                     ${{CustomerOrderModel.SOHeaderList[$index].SOHeaderInfo.Total| number:2}}
                                  </a>
                                    
                        
                                </span>
                            </div>
                            <!-- 
                             <div class="pinneditems">

                                <ul>
                                    <li ng-class-even="'C2'" ng-repeat="pinItem in CustomerOrderModel.pinnedItems" ng-init="pinnedItemIndex = $index">
                                        <span ng-if="pinItem == 'Unit'">
                                            <i class="fa fa-thumb-tack"></i>
                                            Unit: {{CustomerOrderModel.SOHeaderList[serviceOrderHeaderIndex].SOHeaderInfo.selectedCOU.ModelName}}, Vin:{{CustomerOrderModel.SOHeaderList[serviceOrderHeaderIndex].SOHeaderInfo.selectedCOU.VIN}}

                                        </span>
                                        <span ng-if="pinItem == 'Cause' || pinItem == 'Concern' || pinItem == 'Correction'">
                                            <i class="fa fa-thumb-tack"></i>

                                            {{pinItem}}:
                                            <span ng-repeat="kit in CustomerOrderModel.SOHeaderList[serviceOrderHeaderIndex].SOHeaderInfo[CustomerOrderModel.pinnedItemsMapping[pinItem][0]] track by $index">{{kit}},</span>
                                            <span ng-repeat="manual in CustomerOrderModel.SOHeaderList[serviceOrderHeaderIndex].SOHeaderInfo[CustomerOrderModel.pinnedItemsMapping[pinItem][1]] track by $index">{{manual}},</span>

                                        </span>
                                        <span ng-if="pinItem == 'Promised By'">
                                            <i class="fa fa-thumb-tack"></i>

                                            {{pinItem}}:
                                            <span>{{CustomerOrderModel.SOHeaderList[serviceOrderHeaderIndex].SOHeaderInfo.selectedDate}}  {{CustomerOrderModel.SOHeaderList[serviceOrderHeaderIndex].SOHeaderInfo.selectedTime}}</span>

                                        </span>
                                        <span ng-if="pinItem == 'Estimated Hours' || pinItem == 'Transaction Type' || pinItem == 'Category' || pinItem == 'Stock'">
                                            <i class="fa fa-thumb-tack"></i>

                                            {{pinItem}}:
                                            <span>{{CustomerOrderModel.SOHeaderList[serviceOrderHeaderIndex].SOHeaderInfo[CustomerOrderModel.pinnedItemsMapping[pinItem][0]]}}
                                                <span ng-if="pinItem == 'Estimated Hours'">Hours</span>


                                            </span>
                                        </span>
                                        <span ng-if="pinItem == 'Provider'">
                                            <i class="fa fa-thumb-tack"></i>
                                            Name: {{CustomerOrderModel.SOHeaderList[serviceOrderHeaderIndex].SOHeaderInfo.Provider.ProviderName}}, Email: {{CustomerOrderModel.SOHeaderList[serviceOrderHeaderIndex].SOHeaderInfo.Provider.ProviderEmail}}, 
                                                Phone: {{CustomerOrderModel.SOHeaderList[serviceOrderHeaderIndex].SOHeaderInfo.Provider.ProviderPhone}}
                                        </span>
                                    </li>
                                 </ul>
                            </div>
                             -->
                      
                        </div>
                        
                        
                        
                        <div class="col-lg-6 col-md-6"  ng-show="CustomerOrderModel.activeSidepanelink =='#MerchandiseSection'"  >
                            <div class="fixedHeaderText">
                                <span class="headerlabel">
                                <i class="fa fa-angle-right" style="width:10px; padding: 0 3px;"
                                    ng-show="!CustomerOrderModel.displaySections.Merchandise"
                                    ng-Click="CustomerOrderModel.displaySections.Merchandise = true">
                                </i> 

                                <i class="fa fa-angle-down" style="width:10px;"
                                    ng-show="CustomerOrderModel.displaySections.Merchandise"
                                    ng-Click="CustomerOrderModel.displaySections.Merchandise = false">
                                </i> 

                                <span class="divider ">|</span>
                                <span class = "headdingFirstText">{{CustomerOrderModel.LeftSideHeadingLables.Merchandise}}</span>
                                <span class="T2">Merchandise</span>
                                </span>
                                <span class="ActionIcons pull-left">
                                 <!-- <div class="dropdown selectDropdown checkboxDropdown">
                                      <button class="btn dropdown-toggle" type="button" data-toggle="dropdown">Actions
                                      <span class="caret"></span></button>
                                </div> -->
                                </span> 
                                <span class="T3  pull-right total" >
                                
                                 <a id="CO_Merchandise_total_price_row_h3_a" 
                                    ng-mouseover="CustomerOrderModel.calculateTotalOverlay($event, null, 'merchandise')" 
                                    ng-mouseleave="CustomerOrderModel.hidePriceInfoOverlay()" >${{CustomerOrderModel.MerchandiseTotal}} </a>
                                
                                </span>
                                
                            </div>
                        </div>
                        <div class="col-lg-6 col-md-6" ng-show="CustomerOrderModel.activeSidepanelink =='#SpecialOrderSection'">
                            <div class="fixedHeaderText">
                                <span class="headerlabel">
                                <i class="fa fa-angle-right" style="width:10px; padding: 0 3px;"
                                    ng-show="!CustomerOrderModel.displaySections.SpecialOrder"
                                    ng-Click="CustomerOrderModel.displaySections.SpecialOrder = true">
                                </i> 
                                <i class="fa fa-angle-down" style="width:10px;"
                                    ng-show="CustomerOrderModel.displaySections.SpecialOrder"
                                    ng-Click="CustomerOrderModel.displaySections.SpecialOrder = false">
                                </i> 
                                <span class="divider">|</span>
                                <span class ="headdingFirstText">{{CustomerOrderModel.LeftSideHeadingLables.Special_Orders}}</span>
                                <span class="T2"> Special Orders</span>
                                </span>
                                <span class="ActionIcons pull-left ">
                                <div class="dropdown selectDropdown checkboxDropdown">
                                      <button class="btn dropdown-toggle" type="button" data-toggle="dropdown">Actions
                                      <span class="caret"></span></button>
                                </div>
                                </span> 
                            </div>
                        </div>
                        <div class="col-lg-6 col-md-6" ng-show="CustomerOrderModel.activeSidepanelink =='#DepositSection' && CustomerOrderModel.Customer.Name !=null">
                            <div class="fixedHeaderText">
                                <span class="headerlabel">
                                <i class="fa fa-angle-right" style="width:10px; padding: 0 3px;"
                                    ng-show="!CustomerOrderModel.displaySections.Deposit"
                                    ng-Click="CustomerOrderModel.displaySections.Deposit = true">
                                </i> 
                                <i class="fa fa-angle-down" style="width:10px;"
                                    ng-show="CustomerOrderModel.displaySections.Deposit"
                                    ng-Click="CustomerOrderModel.displaySections.Deposit = false">
                                </i> 
                                <span class="divider">|</span>
                                <span class = "headdingFirstText">{{CustomerOrderModel.LeftSideHeadingLables.Deposits}}</span>
                                <span class="T2"> Deposits</span>
                                </span>
                                <span class="ActionIcons pull-left">
                                <div class="dropdown selectDropdown checkboxDropdown">
                                      <button class="btn dropdown-toggle" type="button" data-toggle="dropdown">Actions
                                      <span class="caret"></span></button>
                                </div>
                                </span> 
                                    <span class="T3  pull-right total" >


                                    <a id="CO_Deposits_block_total_price_row_h3_a" ng-mouseleave="CustomerOrderModel.hidePriceInfoOverlay()"
                                 ng-mouseover="CustomerOrderModel.calculateDepositTotalOverlay($event)" class="ng-binding"> ${{CustomerOrderModel.calculateDepositTotal()}}</a>
                                    
                                    </span>
                            </div>
                        </div>
                        <div class="col-lg-6 col-md-6" ng-show="CustomerOrderModel.activeSidepanelink =='#CheckoutSection'">
                            <div class="fixedHeaderText">
                                <span class="headerlabel">
                                <i class="fa fa-angle-right" style="width:10px; padding: 0 3px;"
                                    ng-show="!CustomerOrderModel.displaySections.Checkout"
                                    ng-Click="CustomerOrderModel.displaySections.Checkout = true">
                                </i> 
                                <i class="fa fa-angle-down" style="width:10px;"
                                    ng-show="CustomerOrderModel.displaySections.Checkout"
                                    ng-Click="CustomerOrderModel.displaySections.Checkout = false">
                                </i> 
                                <span class="divider">|</span>
                                <span class = "headdingFirstText">{{CustomerOrderModel.LeftSideHeadingLables.Checkout}}</span>
                                <span class="T2">Checkout</span>




                                </span>
                                <span class="ActionIcons pull-left">
                                 <div class="dropdown selectDropdown checkboxDropdown">
                                      <!-- <button class="btn dropdown-toggle" type="button" data-toggle="dropdown">Actions
                                      <span class="caret"></span></button> -->
                                </div>
                                </span> 
                                 <span class="T3  pull-right total" >
                                        
                                        <a id="CO_active_invoice_Payments_total_balance_due_h3_a" 
                                        ng-mouseleave="CustomerOrderModel.hidePriceInfoOverlay()" 
                                        ng-mouseover="CustomerOrderModel.calculateBalanceDueTotalOverlay($event)">
                                                   {{CustomerOrderModel.calculateBalanceDue() >= 0 ? '$' :'-$'}}
                                    {{CustomerOrderModel.calculateBalanceDue() >= 0 ? CustomerOrderModel.calculateBalanceDue() : -1 * CustomerOrderModel.calculateBalanceDue()}}
                                                    </a>
                                 </span>
                                
                            </div>
                        </div>



                        <div class="col-lg-6 col-md-6" ng-show="CustomerOrderModel.activeSidepanelink =='#InvoiceHistory'">
                            <div class="fixedHeaderText">
                                <span class="headerlabel">
                                <i class="fa fa-angle-right" style="width:10px; padding: 0 3px;"
                                    ng-show="!CustomerOrderModel.displaySections.InvoiceHistory"
                                    ng-Click="CustomerOrderModel.displaySections.InvoiceHistory = true">
                                </i> 
                                <i class="fa fa-angle-down" style="width:10px;"
                                    ng-show="CustomerOrderModel.displaySections.InvoiceHistory"
                                    ng-Click="CustomerOrderModel.displaySections.InvoiceHistory = false">
                                </i> 
                                <span class="divider">|</span>
                                <span class = "headdingFirstText">{{CustomerOrderModel.LeftSideHeadingLables.Invoice_History}}</span>
                                <span class="T2"> Invoice History</span>
                                </span>
                                <span class="ActionIcons pull-left">
                                <div class="dropdown selectDropdown checkboxDropdown">
                                      <button class="btn dropdown-toggle" type="button" data-toggle="dropdown">Actions
                                      <span class="caret"></span></button>
                                </div>



                                </span> 
                            </div>
                        </div>
                    
                    
                        <div class="col-lg-6 col-md-6 fixedContent">
                                <i class="fa fa-refresh fa-2x fa-fw"
                                    ng-class="{'fa-spin' : CustomerOrderModel.isrefresh}"
                                    ng-click="CustomerOrderModel.refreshCustomerOrder();"></i>
<!--                             <button type="button" class="flatBtn" ng-click="CustomerOrderModel.editCustomerDetails()">EDIT</button> -->
                                <div class="fa-icons pull-right">
                                <i class="fa fa-floppy-o" ></i>

                                <i class="fa fa-cog"></i>

                            </div>

                            <div class="col-lg-10 col-md-9 searchToAdd  pull-right">
                                <div class="input-group" ng-class="{'activeSearchDiv' : CustomerOrderModel.searchDivActive}">
                                    <div class="input-group-btn">
                                        <button type="button" class="btn C5 LabelBtn">
                                        <span class="T5" style="color: #939CA9;">TO:</span>
                                        <span style="color: #FFFFFF;">{{CustomerOrderModel.SelectedSection.item}}</span>
                                        </button>
                                        <button type="button" class="btn C5 dropdown-toggle caretBtn" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <span class="caret"></span>
                                        <span class="sr-only">Toggle Dropdown</span>
                                        </button>
                                        <ul class="dropdown-menu">
                                        
                                           <li ng-repeat="section in CustomerOrderModel.SectionList" ng-click="CustomerOrderModel.UpdateSelectedSection($event,$index)">
                                            
                                            <a href="#" ng-if = "section.item == 'Deposit' && CustomerOrderModel.Customer.Name !=null ">{{section.item}}</a>
                                            <a href="#" ng-if = "section.item != 'Deposit'">{{section.item}}</a>
                                            </li>
                                            <li role="separator" class="divider"></li>
                                            <li><a href="#">ADVANCED SEARCH</a></li>
                                           
                                        </ul>
                                    </div>
                                    <!-- /btn-group -->
                                    <div class="inner-addon right-addon" ng-show="!CustomerOrderModel.isSearchToAddVisible()">
                                         <i class="fa fa-search fa-flip-horizontal"></i>
                                        <input type="text" placeholder="Search To add" ng-disabled = "!CustomerOrderModel.isSearchToAddVisible()"
                                            style="height: 30px; width: 100%; border: none; padding-left: 5px; outline: none; font-size: 12px;"/>
                                    </div>
                                    <div class="inner-addon right-addon" ng-show="CustomerOrderModel.isSearchToAddVisible()">
                                        <i class="fa fa-search fa-flip-horizontal"></i>
                                      <angucomplete id="CO_SearchToAdd" placeholder="Search To add" pause="200"  
                                       selectedobject="CustomerOrderModel"   searchfields="Name" titlefield="Name" descriptionField="Info" 
                                        otherdesc="Description" minlength="2" inputclass="form-control form-control-small" matchclass="highlight" />
                                        <!-- <input class="header-search form-control"  placeholder="search to Add Related" type="text" /> -->
                                    </div>
                                </div>
                                <!-- /input-group -->
                            </div>
                        




                           <!--  <div class="btn-group">
                                <a data-toggle="dropdown" class="newLink">NEW</a>
                                <ul class="newDropdown dropdown-menu keep_open">
                                   <li><a ng-click="CustomerOrderModel.createKit()">Kit</a></li>
                                </ul>
                            </div> -->
                        </div>
                    </div>
                
                <div class="contentWrapper" ng-show="!CustomerOrderModel.isWizardMode">
                    
                    <div id="CustomerSection" >
                        <div class="main_section row" ng-show="CustomerOrderModel.displaySections.Customer">
<!--                             <p class="actionRow T2"> -->
<!--                                 <span class="sectionText">General</span> -->
<!--                                 <span class="actionText">Actions</span> -->
<!--                                 <span class="ActionIcons"> -->
<!--                                 <i class="fa fa-th"></i> -->
<!--                                 <i class="fa fa-question-circle"></i> -->
<!--                                 </span>  -->
<!--                             </p> -->
                            <div class="row rowGeneral" >


                            <div class="content ">


                            <div class="col-lg-12 col-md-12 Pl24 MB48"  >
                               <div class="col-lg-7 col-md-7 Plr12">
                                  <p class="T3 MB24 F12 FC2"> Customer</p>
                                  <div class="col-md-6 Plr0">
                                     <div class="col-lg-4 col-md-5 Plr0 MB12  ">
                                        <img class="Profile_pic" src="{!URLFOR($Resource.Images, 'profile_default.jpg')}" style="height:100px;width:100%"/>
                                     </div>
                                     <div class="col-lg-8 col-md-7 Plr12 MB12 ">
                                         <div ng-if="CustomerOrderModel.Customer.Name==null" >
                                            <span class="T1_SubHeading"  >
                                                <a href="" ng-click="AddToSearch('Customer:')" id="CO_workflow_sidepanel_add_cust_link">Add Customer</a>
                                            </span>
                                         </div> 
                                         <div  ng-if="CustomerOrderModel.Customer.Name !=null">
                                            <p class="T1 " > 
                                                <a href="" ng-mouseover="CustomerOrderModel.showCustomerInfoOverlay($event, CustomerOrderModel.Customer.Value);" 
                                                     ng-mouseleave="CustomerOrderModel.hideCustomerInfoOverlay();" id="CO_workflow_sidepanel_cust_name_link">
                                                     {{CustomerOrderModel.Customer.Name}} 

                                                 </a>   
                                            </p>
<!--                                             <p class="T7"> -->
<!--                                                 <span ng-if="ViewCustomer.CustomerInfo.CustomerInfo.Type == 'Individual' && ViewCustomer.CustomerInfo.CustomerInfo.Nickname != ''"> -->
<!--                                                 "{{ViewCustomer.CustomerInfo.CustomerInfo.Nickname}}" -->
<!--                                                 </span> -->
<!--                                             </p> -->
                                        </div>
                                        <!-- <div style="float:left;background-color: #373c40; border-radius: 5px; padding: 1px; margin-right: 5px;">
                                           <img src="{!URLFOR($Resource.Images, 'star.png')}" style="height:35px; width:35px; padding: 5px;"/>
                                        </div>
                                        <p class="T7" style="margin-left:20px;padding-top:10px ;padding-left:24px"> Gamification</p> -->
                                     </div>
                                    
                                    <!-- <div class="col-lg-4 col-md-5 Plr12 MB24"  style="clear:both;">
                                        <i class="fa fa-motorcycle FC7"></i>
                                        <i class="fa fa-motorcycle FC7"></i>
                                        <i class="fa fa-wrench FC7"></i>
                                     </div>
                                    <div class="col-lg-8 col-md-7 Plr0 MB24 " ng-if="CustomerOrderModel.Customer.Name !=null" >
                                        <span class="T7 F9">Last Visited 04/06/2015</span>
                                     </div> -->
                                     
                                     <div class="col-md-12 Plr12 Mrg20 " style="Padding:0px" ng-repeat="cust in  CustomerOrderModel.CustomerInfoDetails" ng-if="CustomerOrderModel.Customer.Name !=null">
                                        <div style="float:left;width:30%">
                                        <label class="ng-binding T7">{{cust.label}}</label></div>
                                        <div class="mycustvalue"  style="float:left;width:70%" >
                                        <span class="ng-binding  T3_1 PL20" style="width: 100%; word-wrap: break-word; word-break:break-word;" >{{cust.value}}</span>
                                        </div>
                                     </div>
                                  </div>
                                  <div class="col-md-6 Plr12">
                                     <div class="C2 col-md-12 P5 MB12" ng-if="CustomerOrderModel.COUList.length" 
                                        ng-repeat="COU in CustomerOrderModel.COUList" 
                                        style="margin-bottom:10px;">
                                        <i class="fa fa-motorcycle col-md-1 Plr5 FC7"></i>
                                         <div class="T7 col-md-10 Plr10 " ng-if="COU.ModelName"
                                            ng-mouseover="CustomerOrderModel.openCOUpopup($event, COU.Id);" 
                                            ng-mouseleave="CustomerOrderModel.hideCOUPopUp();">
                                            <span>{{COU.ModelMakeName}}</span>  
                                            <i class="fa fa-registered" style="margin-left:2px"></i>
                                            {{COU.ModelName}}
                                         </div>
                                         <div class="T7 col-md-10 Plr10 " ng-if="!COU.ModelName"
                                            ng-mouseover="CustomerOrderModel.openCOUpopup($event, COU.Id);" 
                                            ng-mouseleave="CustomerOrderModel.hideCOUPopUp();">
                                            <i class="fa fa-registered" style="margin-left:2px"></i>
                                           {{COU.Name}}
                                         </div>
                                     </div>
                                    
                                     <div class="C2 col-md-12 P5 MB12" ng-if="!CustomerOrderModel.COUList.length" style="margin-bottom:10px;">
                                        
                                        <p class="T7 col-md-10 Plr10">NO OWNED UNIT</p>
                                     </div>
                                    
                                  </div>
                               </div>
                               <div class="col-lg-5 col-md-5 Plr12">
                                  <!-- <div class="col-md-6 Plr0 MB24">
                                     <p class="T3 MB24 F12"> Owner</p>
                                     <div class="col-md-4 Plr0 MB12  ">
                                        
                                         <img src="{!URLFOR($Resource.Images, 'profile_default.jpg')}" class="Profile_pic"  style="height:80px;width:100%"/>
                                     </div>
                                     <div class="col-md-8 Plr12 MB12 ">
                                        <p class="T1 Lh25 F16" style="margin-bottom:1px;"> {{CustomerOrderModel.coHeaderDetails.OwnerName}}</p>
                                        <div style="float:left;background-color: #373c40; border-radius: 5px; padding: 1px; margin-right: 5px;">
                                           <img  src="{!URLFOR($Resource.Images, 'star.png')}" style="height:25px; width:25px; padding: 5px;"/>
                                        </div>
                                        <p class="T7" style="padding-top:10px ;padding-left:24px"> Gamification</p>
                                     </div>
                                  </div> -->
                                  <!-- <div class="col-md-6 Plr0 MB24">
                                     <p class="T3 MB24"> Assignee</p>
                                     <div class="col-md-4 Plr0 MB12  ">
                                        <img class="Profile_pic" src="{!URLFOR($Resource.Images, 'profile_default.jpg')}" style="height:80px;width:100%"/>
                                     </div>
                                     <div class="col-md-8 Plr12 MB12 ">
                                        <p class="T1 Lh25 F16" style="margin-bottom:1px;  ">{!$User.FirstName} {!$User.LastName}</p>
                                        <div style="float:left;background-color: #373c40; border-radius: 5px; padding: 1px;margin-right: 5px;">
                                           <img src="{!URLFOR($Resource.Images, 'star.png')}" style="height:25px; width:25px; padding: 5px;"/>
                                         </div>
                                          <p class="T7" style="padding-top:10px ;padding-left:24px"> Gamification</p>
                                        </div>
                                       
                                     </div>  -->
                                     
                                     
                                      <div class="col-md-12 MB24 Plr0 ">
                                         <span class="T3 col-md-2 Plr0">Status</span>
                                         <label class="FC10 T3" style="color:green" ng-show="CustomerOrderModel.coHeaderDetails.OrderStatus == 'Open' " > {{CustomerOrderModel.coHeaderDetails.OrderStatus}} </label>
                                         <label class="FC10 T3" style="color:green" ng-show="!CustomerOrderModel.coHeaderDetails.OrderStatus " > Open </label>
                                          <label class="FC10 T3"  style="color:red" ng-show="CustomerOrderModel.coHeaderDetails.OrderStatus == 'Closed'"  > {{CustomerOrderModel.coHeaderDetails.OrderStatus}} </label>
                                      </div>
                                      <div class="col-md-12  Plr0 ">
                                         <span class="T3 col-md-12 Plr0 MB12">Dates</span>
                                         <div class="col-md-12 Plr0 MB6">
                                            <label class="col-md-2 T7 Plr0">Created:</label>
                                            <span class="col-md-9 T7 Plr0">{{CustomerOrderModel.coHeaderDetails.CreatedDate}}</span>
                                         </div>
                                         <div class="col-md-12 Plr0 MB6">
                                            <label class="col-md-2 T7 Plr0">Modified:</label>
                                            <span class="col-md-9 T7 Plr0">{{CustomerOrderModel.coHeaderDetails.ModifiedDate}}</span>
                                         </div>
<!--                                          <div class="col-md-12 Plr0 MB6"> -->
<!--                                             <label class="col-md-2 T7 Plr0">Fullfil:</label> -->
<!--                                             <span class="col-md-9 T7 Plr0">Merch 04 - Red Bandana,24/Apr/15</span> -->
<!--                                          </div> -->
                                        
                                      </div>
                                    </div>
                            </div>
                            
                                <div class="col-lg-12 col-md-12 T3 addnewItem " id="CO_notanyitemadded" 
                                    ng-if="CustomerOrderModel.MerchandiseItems.length == 0 && CustomerOrderModel.SOHeaderList == 0">
                                  <a id="CO_notanyitemadded" ng-click="setFocusWithMerchandise()">
                                      You haven't added anything yet! Add something.
                                  </a>
                             </div>
                            
                            
                           </div> 
                            
                            </div>
                        </div>
                    </div>
                    
                    
                    <div ng-repeat="SOHeader in CustomerOrderModel.SOHeaderList" ng-init="SoHeaderIndex = $index">
                       <div class="sectionHeader row ServiceHeader" >
                            <div class="col-lg-5 col-lg-5 PL14">
                                <div class="fixedHeaderText">
                                    <span class="headerlabel">
                                     <i class="fa fa-angle-right" style="width:10px; padding: 0 3px;"
                                        ng-show="!CustomerOrderModel.displaySections.ServiceOrder[$index].display"
                                        ng-Click="CustomerOrderModel.displaySections.ServiceOrder[$index].display = true">


                                    </i> 
                                    <i class="fa fa-angle-down" style="width:10px;"
                                        ng-show="CustomerOrderModel.displaySections.ServiceOrder[$index].display"
                                        ng-Click="CustomerOrderModel.displaySections.ServiceOrder[$index].display = false">


                                    </i> 
                                    <span class="divider">|</span>
                                    <span class="headdingFirstText"> {{CustomerOrderModel.LeftSideHeadingLables['ServiceOrder'+$index]}} </span>

                                    <span class="T2 edittext" ng-click="CustomerOrderModel.showSONameEditMode($index,'SectionList')"  ng-show="!SOHeader.SOHeaderInfo.isSONameEdit">{{SOHeader.SOHeaderInfo.Name}}</span>
                                     <input type="text" id="SO_Section_Name_Edit_{{$index}}" ng-blur="CustomerOrderModel.UpdateSOName($index)"  ng-show="SOHeader.SOHeaderInfo.isSONameEdit" 
                                        ng-model="SOHeader.SOHeaderInfo.Name" ng-focus="CustomerOrderModel.selectalltext($index,'SectionList')" class="serviceLabeledit"/>
                                    </span>

                                      
                                    <span class="ActionIcons pull-left ">
                                        <div class="dropdown selectDropdown checkboxDropdown">
                                            <button class="btn dropdown-toggle" type="button" data-toggle="dropdown">Actions
                                            <span class="caret"></span></button>
                                            <ul class="dropdown-menu" ng-if = "CustomerOrderModel.isDeleteServiceOrder($index)">
                                                <li><a  ng-click="CustomerOrderModel.deleteSoHeaderInfo(CustomerOrderModel.SOHeaderList[$index].SOHeaderInfo.Id)">Remove Item</a></li>
                                            </ul>
                                        </div>
                                    </span>
                                    
                                    <span class="ActionIcons pull-left">
                                        <div class="dropdown selectDropdown checkboxDropdown">
                                            <button class="btn dropdown-toggle" type="button" data-toggle="dropdown">Work
                                            <span class="caret"></span></button>
                                            <ul class="dropdown-menu">
                                                <li ng-repeat="workStatus in SOHeader.SOHeaderInfo.AvailableWorkStatusList"
                                                    ng-click="CustomerOrderModel.changeWorkStatus(workStatus, SoHeaderIndex)"><a>{{workStatus.AvailableStatus}}</a></li>
                                                <li ng-show="SOHeader.SOHeaderInfo.AvailableWorkStatusList.length == 0"><a>No Action Available</a></li>
                                            </ul>
                                        </div>
                                    </span>
                                    
                                    
                                    <span class="ActionIcons pull-left" ng-if="SOHeader.SOHeaderInfo.TransactionType == 'Third-Party'">
                                        <div class="dropdown selectDropdown checkboxDropdown">
                                            <button class="btn dropdown-toggle" type="button" data-toggle="dropdown">Claim
                                            <span class="caret"></span></button>
                                            <ul class="dropdown-menu">
                                                <li ng-repeat="claimStatus in SOHeader.SOHeaderInfo.AvailableClaimStatusList"
                                                    ng-click="CustomerOrderModel.changeClaimStatus(claimStatus, $parent.$index)"><a>{{claimStatus.AvailableStatus}}</a></li>
                                                <li ng-show="SOHeader.SOHeaderInfo.AvailableClaimStatusList.length == 0"><a>No Action Available</a></li>
                                            </ul>
                                        </div>
                                    </span>
                                    <span class="T3  pull-right total" >
                                     <a id="CO_active_Services_Payments_total_balance_due_h3_a" 
                                        ng-mouseover="CustomerOrderModel.calculateTotalOverlay($event, SOHeader.SOHeaderInfo.Id, 'serviceOrder')" 
                                        ng-mouseleave="CustomerOrderModel.hidePriceInfoOverlay()" >
                                        ${{SOHeader.SOHeaderInfo.Total | number:2}}

                                      </a>
                                    </span>
                                </div>
                            </div>
                        </div>
                       <div id="ServiceOrderSection{{$index}}"  >
                        <div class="main_section_COU row" ng-show="CustomerOrderModel.displaySections.ServiceOrder[$index].display">
                         
                        <div class="pinneditems">
                            <ul>
                                <li ng-class-even="'C2'" ng-repeat="pinItem in CustomerOrderModel.pinnedItems">
                                    <span ng-if="pinItem == 'Unit'">
                                        <i class="fa fa-thumb-tack"></i>
                                        Unit: {{SOHeader.SOHeaderInfo.selectedCOU.ModelName}}, Vin:{{SOHeader.SOHeaderInfo.selectedCOU.VIN}}
                                    </span>
                                    <span ng-if="pinItem == 'Cause' || pinItem == 'Concern' || pinItem == 'Correction'">
                                        <i class="fa fa-thumb-tack"></i>
                                        {{pinItem}}:
                                        <span ng-repeat="kit in SOHeader.SOHeaderInfo[CustomerOrderModel.pinnedItemsMapping[pinItem][0]] track by $index">{{kit}},</span>
                                        <span ng-repeat="manual in SOHeader.SOHeaderInfo[CustomerOrderModel.pinnedItemsMapping[pinItem][1]] track by $index">{{manual}},</span>
                                    </span>
                                    <span ng-if="pinItem == 'Promised By'">
                                        <i class="fa fa-thumb-tack"></i>
                                        {{pinItem}}:
                                        <span>{{SOHeader.SOHeaderInfo.selectedDate}}  {{SOHeader.SOHeaderInfo.selectedTime}}</span>
                                    </span>
                                    <span ng-if="pinItem == 'Estimated Hours' || pinItem == 'Transaction Type' || pinItem == 'Category' || pinItem == 'Stock'">
                                        <i class="fa fa-thumb-tack"></i>
                                        {{pinItem}}:
                                        <span>{{SOHeader.SOHeaderInfo[CustomerOrderModel.pinnedItemsMapping[pinItem][0]]}} 
                                            <span ng-if="pinItem == 'Estimated Hours'">Hours</span>
                                        </span>
                                    </span>
                                    <span ng-if="pinItem == 'Provider'">
                                        <i class="fa fa-thumb-tack"></i>
                                        Name: {{SOHeader.SOHeaderInfo.selectedProvider.Name}}, Email: {{SOHeader.SOHeaderInfo.selectedProvider.Email}}, 
                                            Phone: {{SOHeader.SOHeaderInfo.selectedProvider.Phone}}
                                    </span>
                                    <span ng-if="pinItem == 'Deductible'">
                                        <i class="fa fa-thumb-tack"></i>
                                        Deductible Amount: {{SOHeader.DeductibleItem.DeductibleAmount}}
                                    </span>
                                </li>
                             </ul>
                        </div>
                        
                        <div class="main_section_COU_Header row MB24" id="ServiceInfoSection{{$index}}" >
                             <p class="actionRow T2">
                                 <span class="sectionText">Info</span>
                                 <!-- <span class="actionText">Actions</span> -->
                                 <span class="ActionIcons">
	                                 <!-- <i class="fa fa-th"></i> -->
	                                 <i class="fa fa-question-circle" data-toggle="tooltip"
	                                             title="Service Order Info Section"></i>
                                 </span> 
                             </p>
                             <div class="gid_container_Customer" id="CO_InfoGrid_gid_container">
                                 <div class="col-md-12 InfoMT">
                                    <div class="col-md-2 col-md-offset-1"><p class="T3">Unit</p></div>
                                        <div class="col-md-9">
                                            <div class="lightbox pull-left">

                                                <!-- <div class="starimgdiv">
                                                    <img class="starimg" src="{!URLFOR($Resource.Images, 'star.png')}" />

                                                    <div class="itemicon" style="display:none;">
                                                        <i class="fa fa-motorcycle FC7" style="flot:left;"></i>
                                                        <i class="fa fa-registered " style="margin-left:2px;flot:left;"></i>


                                                    </div>
                                                </div> -->
                                                <div class="infotext" style="left: 0;">
                                                    <p class="infoname">Model: {{SOHeader.SOHeaderInfo.selectedCOU.ModelName}}</p>
                                                    <p class="infoemail">Color: {{SOHeader.SOHeaderInfo.selectedCOU.Color}}</p>
                                                    <p class="infono">VIN: {{SOHeader.SOHeaderInfo.selectedCOU.VIN}}</p>
                                                    <p>Plate: {{SOHeader.SOHeaderInfo.selectedCOU.Plate}}</p>




                                                </div>
                                            </div>
                                            <div class="pull-left COUList">

                                                <button type="button" class="btn dropdown-toggle caretBtn" data-toggle="dropdown" 
                                                    ng-disabled="CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex)"
                                                    aria-haspopup="true" aria-expanded="false">
                                                    <span class="caret"></span>
                                                    <span class="sr-only">Toggle Dropdown</span>
                                                </button>
                                                <ul class="dropdown-menu">
                                                    <li ng-repeat="COU in CustomerOrderModel.COUList"
                                                        ng-click="CustomerOrderModel.setCurrentCOU(COU.Id, $parent.$index)">

                                                        <a>{{COU.ModelName}}</a>

                                                    </li>
                                                    <li ng-if="CustomerOrderModel.COUList.length != 0" class="divider" role="separator"></li>
                                                    <li ng-click="CustomerOrderModel.openAddCustomerOwnedUnitPopup($event, SoHeaderIndex)"><a>Add a Customer Unit</a></li>


                                                </ul>
                                            </div>
                                            <div class="icon_list">
                                                 <i class="fa fa-question-circle"  data-toggle="tooltip"  data-original-title="Service Order Info Unit Section"></i>
                                                 <i class="fa fa-thumb-tack"  
                                                    ng-class="{'active-pin' : CustomerOrderModel.checkItemIsPinned('Unit')}"
                                                    ng-click = "CustomerOrderModel.addRemovePinnedItem('Unit')"> </i>
                                             </div> 
                                        </div>
                                        
                                    </div>
                                 
                                 <div class="col-md-12 InfoMT serviceNeedSection">
                                     <div class="col-md-2 col-md-offset-1"><p class="T3">Service Needed</p></div>
                                     <div class="col-md-9">
                                        <p class="T7 servicelabel">Concern</p>
                                         <div class="multiselect">
                                             <div ng-repeat="kitConcern in SOHeader.SOHeaderInfo.KitHeaderConcern">
                                                 <span> 
                                                     {{kitConcern}}
                                                     <i class="fa fa-lock"></i>
                                                 </span>
                                             </div>
                                             <div ng-repeat="concern in SOHeader.SOHeaderInfo.ManualConcern">
                                                 <span> 
                                                     {{concern}}
                                                     <i class="fa fa-times" ng-click="CustomerOrderModel.removeFromMultiSelect($index, $parent.$index, 'ManualConcern')" 
                                                        ng-show="!(CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex))"></i>
                                                 </span>
                                             </div>
                                             
                                             <input type="text" class="mytxtbox form-control" id="txtconcern" ng-model="SOHeader.SOHeaderInfo.NewConcern" 
                                                 ng-attr-tabindex="{{CustomerOrderModel.tabIndexValue + ($index * 12) + 1}}" 
                                                 ng-disabled="CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex)"
                                                 placeholder="Add Item" rel="Concern" ng-keydown="CustomerOrderModel.addAndRemoveFromMultiSelect($event, $index, 'NewConcern', 'ManualConcern', 'Concern');" />


                                         </div>
                                         <div class="icon_list">
                                             <i class="fa fa-question-circle"  data-toggle="tooltip" data-original-title="Service Order Info Concern Section"></i>
                                             <i class="fa fa-thumb-tack" 
                                                ng-class="{'active-pin' : CustomerOrderModel.checkItemIsPinned('Concern')}"
                                                ng-click = "CustomerOrderModel.addRemovePinnedItem('Concern')"></i>
                                         </div> 
                                     </div>
                                     
                                     <div class="col-md-3"><p class="T3 text-center">&nbsp;</p></div>
                                     <div class="col-md-9">
                                        <p class="T7 servicelabel PT15">Cause</p>
                                         <div class="multiselect">
                                            <div ng-repeat="kitCause in SOHeader.SOHeaderInfo.KitHeaderCause">
                                                 <span> 
                                                     {{kitCause}}
                                                     <i class="fa fa-lock"></i>
                                                 </span>
                                             </div>
                                             <div ng-repeat="cause in SOHeader.SOHeaderInfo.ManualCause">
                                                 <span> 
                                                     {{cause}} 
                                                     <i class="fa fa-times" ng-click="CustomerOrderModel.removeFromMultiSelect($index, $parent.$index, 'ManualCause')"
                                                        ng-show="!(CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex))"></i>
                                                 </span>
                                             </div>
                                             <input type="text" class="mytxtbox form-control" id="txtconcern" ng-model="SOHeader.SOHeaderInfo.NewCause" 
                                                 ng-attr-tabindex="{{CustomerOrderModel.tabIndexValue + ($index * 12) + 2}}"
                                                 ng-disabled="CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex)" 
                                                 placeholder="Add Item" rel="Concern" ng-keydown="CustomerOrderModel.addAndRemoveFromMultiSelect($event, $index, 'NewCause', 'ManualCause', 'Cause');" />


                                         </div>
                                         <div class="icon_list">
                                             <i class="fa fa-question-circle" data-toggle="tooltip"  data-original-title="Service Order Info Cause Section"></i>
                                             <i class="fa fa-thumb-tack"
                                                ng-class="{'active-pin' : CustomerOrderModel.checkItemIsPinned('Cause')}"
                                                ng-click = "CustomerOrderModel.addRemovePinnedItem('Cause')"></i>
                                         </div> 
                                     </div>
                                     
                                     <div class="col-md-3"><p class="T3 text-center">&nbsp;</p></div>
                                     <div class="col-md-9">
                                        <p class="T7 servicelabel PT15">Correction</p>
                                         <div class="multiselect">
                                            <div ng-repeat="KitCorrection in SOHeader.SOHeaderInfo.KitHeaderCorrection">
                                                 <span> 
                                                     {{KitCorrection}}
                                                     <i class="fa fa-lock"></i>
                                                 </span>
                                             </div>
                                             <div ng-repeat="correction in SOHeader.SOHeaderInfo.ManualCorrection">
                                                 <span> 
                                                     {{correction}}
                                                     <i class="fa fa-times" ng-click="CustomerOrderModel.removeFromMultiSelect($index, $parent.$index, 'ManualCorrection')" 
                                                        ng-show="!(CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex))"></i>
                                                 </span>
                                             </div>
                                             <input type="text" class="mytxtbox form-control" id="txtconcern" ng-model="SOHeader.SOHeaderInfo.NewCorrection" 
                                                 ng-attr-tabindex="{{CustomerOrderModel.tabIndexValue + ($index * 12) + 3}}" 
                                                 ng-disabled="CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex)"
                                                 placeholder="Add Item" rel="Concern" ng-keydown="CustomerOrderModel.addAndRemoveFromMultiSelect($event, $index, 'NewCorrection', 'ManualCorrection', 'Correction');" />


                                         </div>
                                         <div class="icon_list">
                                             <i class="fa fa-question-circle" data-toggle="tooltip"  data-original-title="Service Order Info Correction Section"></i>
                                             <i class="fa fa-thumb-tack"
                                                ng-class="{'active-pin' : CustomerOrderModel.checkItemIsPinned('Correction')}"
                                                ng-click = "CustomerOrderModel.addRemovePinnedItem('Correction')"></i>
                                         </div> 
                                     </div>
                                 </div>
                                 
                                 <div class="col-md-12 InfoMT">
                                     <div class="col-md-2 col-md-offset-1"><p class="T3">Promised By</p></div>
                                     <div class="col-md-9">
                                        <div class="pull-left Plr0">

                                            <p class="input-group">
                                              <input type="text" ui-date="dateOptions" ui-date-format="mm/dd/yy" class="form-control"
                                                ng-model="SOHeader.SOHeaderInfo.selectedDate" style="width: 200px;" 
                                                ng-change="CustomerOrderModel.validatePromisedByDate($index)"
                                                ng-disabled="CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex)"
                                                readonly="readonly"
                                                ng-attr-tabindex="{{CustomerOrderModel.tabIndexValue + ($index * 12) + 4}}" />
                                                
                                                <!-- ng-change="CustomerOrderModel.validatePromisedByDate($index)" -->
                                            </p>
                                        </div>  
                                        <div class="pull-left Plr0" style="margin: 0 5px;">
                                            <div class="dropdown timePickerDropdown">
                                              <button class="btn dropdown-toggle" type="button" data-toggle="dropdown"
                                                ng-attr-tabindex="{{CustomerOrderModel.tabIndexValue + ($index * 12) + 5}}"
                                                ng-disabled="CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex)"
                                                ng-class="{'btn-primary' : SOHeader.SOHeaderInfo.IsPromisedByAmPm =='' || SOHeader.SOHeaderInfo.IsPromisedByAmPm == null}">
                                                {{SOHeader.SOHeaderInfo.selectedTime}}
                                              <span class="caret"></span></button>
                                              <ul class="dropdown-menu">
                                                <li ng-repeat="time in CustomerOrderModel.timePickerList"
                                                    ng-click = "SOHeader.SOHeaderInfo.selectedTime = time; SOHeader.SOHeaderInfo.IsPromisedByAmPm = ''; CustomerOrderModel.validatePromisedByDate($parent.$index)"><a>{{time}}</a></li>
                                              </ul>
                                            </div>


                                        </div>  
                                        
                                        <div class="pull-left Plr0">
                                              <button class="btn" type="button" 
                                                ng-attr-tabindex="{{CustomerOrderModel.tabIndexValue + ($index * 12) + 6}}"
                                                ng-click="CustomerOrderModel.toggleIsPromisedByAmPm($index, 'AM')"
                                                ng-disabled="CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex)"
                                                ng-class="{'btn-primary' : SOHeader.SOHeaderInfo.IsPromisedByAmPm =='AM'}">AM</button>
                                              <button class="btn" type="button" 
                                                ng-attr-tabindex="{{CustomerOrderModel.tabIndexValue + ($index * 12) + 7}}"
                                                ng-click="CustomerOrderModel.toggleIsPromisedByAmPm($index, 'PM')"
                                                ng-disabled="CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex)"
                                                ng-class="{'btn-primary' : SOHeader.SOHeaderInfo.IsPromisedByAmPm =='PM'}">PM</button>


                                        </div>  
                                        <div class="icon_list">
                                             <i class="fa fa-question-circle"  data-toggle="tooltip" data-original-title="Service Order Info Promised By Section"></i>
                                             <i class="fa fa-thumb-tack"
                                                ng-class="{'active-pin' : CustomerOrderModel.checkItemIsPinned('Promised By')}"
                                                ng-click = "CustomerOrderModel.addRemovePinnedItem('Promised By')"></i>
                                         </div>                          
                                     </div>
                                 </div>
                                 
                                 
                                 <div class="col-md-12 InfoMT">
                                     <div class="col-md-2 col-md-offset-1"><p class="T3">Estimated Hours</p></div>
                                     <div class="col-md-9">
                                        <p class="T7 pull-left" style="width: 10%;">
                                            <number-only-input input-value="SOHeader.SOHeaderInfo.EstimatedHours" 
                                                ng-disabled="CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex)"
                                                tab-index="{{CustomerOrderModel.tabIndexValue + ($index * 12) + 8}}"
                                                disable-attr = "CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex)"
                                                ng-keydown="CustomerOrderModel.SaveEstimatedHours($index);"/>

                                        </p>    
                                        <div class="icon_list">
                                            <i class="fa fa-question-circle" data-toggle="tooltip" data-original-title="Service Order Info Estimated Hours Section"></i>
                                            <i class="fa fa-thumb-tack" 
                                                ng-class="{'active-pin' : CustomerOrderModel.checkItemIsPinned('Estimated Hours')}"
                                                ng-click = "CustomerOrderModel.addRemovePinnedItem('Estimated Hours')"></i>
                                        </div>                               
                                     </div>
                                 </div>  
                                 
                                 <div class="col-md-12 InfoMT">
                                     <div class="col-md-2 col-md-offset-1"><p class="T3">Transaction Type</p></div>
                                     <div class="col-md-9">
                                        <select class="form-control pull-left" style="width:300px;" 
                                            ng-attr-tabindex="{{CustomerOrderModel.tabIndexValue + ($index * 12) + 9}}"
                                            ng-options="item.Id as item.Type for item in CustomerOrderModel.MasterData.TTList"
                                            ng-model="SOHeader.SOHeaderInfo.TransactionTypeId"
                                            ng-change="CustomerOrderModel.changeProviderList($index)"  
                                            ng-disabled="CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex) || SOHeader.SOGridItems.length != 0">
<!-- ng-disabled="CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex) || SOHeader.SOGridItems.length != 0" -->
                                        </select>
                                        
                                        <div class="icon_list">
                                            <i class="fa fa-question-circle" data-toggle="tooltip" data-original-title="Service Order Info Transaction Type Section"></i>
                                            <i class="fa fa-thumb-tack"
                                                ng-class="{'active-pin' : CustomerOrderModel.checkItemIsPinned('Transaction Type')}"
                                                ng-click = "CustomerOrderModel.addRemovePinnedItem('Transaction Type')"></i>
                                        </div>                              
                                     </div>
                                 </div>
                                 
                                   
                                 <div class="col-md-12 InfoMT" ng-if="SOHeader.SOHeaderInfo.TransactionType == 'Third-Party'">
                                     <div class="col-md-2 col-md-offset-1"><p class="T3">Provider</p></div>
                                     <div class="col-md-9">
                                        <div class="lightbox pull-left providerBox">

                                            <div ng-if="!(CustomerOrderModel.isEmptyProvider($parent.$index))"> 
                                                <!-- <div class="starimgdiv">
                                                    <img class="starimg" src="{!URLFOR($Resource.Images, 'star.png')}" />
                                                    <div class="itemicon" style="display:none;">
                                                        <i class="fa fa-motorcycle FC7" style="flot:left;"></i>
                                                        <i class="fa fa-registered " style="margin-left:2px;flot:left;"></i>
                                                    </div>
                                                </div> -->
                                                <div class="infotext" style="left: 0;">
                                                    <p class="infoname">Name: {{SOHeader.SOHeaderInfo.selectedProvider.Name}}</p>
                                                    <p class="infoemail">Email: {{SOHeader.SOHeaderInfo.selectedProvider.Email}}</p>
                                                    <p class="infono">Phone: {{SOHeader.SOHeaderInfo.selectedProvider.Phone}}</p>
                                                    <p class="infono">&nbsp;</p>

                                                </div>
                                            </div>
                                            <div ng-if="CustomerOrderModel.isEmptyProvider($parent.$index)">
                                                <div class="select-provider"> Select a Vendor </div>
                                            </div>
                                        </div>
                                        
                                        <div class="pull-left COUList ProviderList">
                                            <button type="button" class="btn dropdown-toggle caretBtn" data-toggle="dropdown" 
                                                ng-disabled="CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex) || SOHeader.SOGridItems.length != 0"
                                                aria-haspopup="true" aria-expanded="false">
                                                <span class="caret"></span>
                                                <span class="sr-only">Toggle Dropdown</span>
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li ng-repeat="provider in CustomerOrderModel.MasterData.ProviderList"
                                                        ng-click="CustomerOrderModel.setCurrentProvider(provider.Id, $parent.$index);  CustomerOrderModel.getProviderInfo(provider.Id)">
                                                    <a>{{provider.Name}}</a>
                                                </li>
                                                <li ng-if="CustomerOrderModel.MasterData.ProviderList.length == 0"> None </li>
                                                <!-- <li ng-if="CustomerOrderModel.COUList.length != 0" class="divider" role="separator"></li>
                                                <li ng-click="CustomerOrderModel.openAddCustomerOwnedUnitPopup($event, SoHeaderIndex)"><a>Add a Customer Unit</a></li> -->
                                            </ul>
                                        </div>

                                        <div class="icon_list">
                                            <i class="fa fa-question-circle" data-toggle="tooltip" data-original-title="Service Order Info Provider Section"></i>
                                            <i class="fa fa-thumb-tack"
                                                ng-class="{'active-pin' : CustomerOrderModel.checkItemIsPinned('Provider')}"
                                                ng-click = "CustomerOrderModel.addRemovePinnedItem('Provider')"></i>                                  
                                        </div>    
                                      </div>
                                 </div>
                                 
                                 
                                 <div class="col-md-12 InfoMT" ng-if="SOHeader.SOHeaderInfo.TransactionType == 'Third-Party'">
                                     <div class="col-md-2 col-md-offset-1"><p class="T3">Deductible</p></div>
                                     <div class="col-md-9">
                                        <div class="form-group large MB PDZero col-md-2">
                                            <input type="text" class="form-control"
                                                id="DeductibleAmount{{$index}}"
                                                placeholder="Deductible Amount"
                                                maxlength="255"
                                                ng-keydown="CustomerOrderModel.editDeductible($event,SOHeader.DeductibleItem,$index)"
                                                ng-model = "SOHeader.DeductibleItem.DeductibleAmount"
                                                ng-attr-tabindex="{{CustomerOrderModel.tabIndexValue + ($index * 12) + 11}}" 
                                                ng-disabled = "SOHeader.DeductibleItem.DeductibleStatus == 'Paid' ||  SOHeader.DeductibleItem.DeductibleStatus == 'CheckOut'"/>
                                        </div>
                                        <div class="col-md-2" >
                                            <span class="pull-left Plr0" ng-if = "SOHeader.DeductibleItem.DeductibleStatus == 'Paid'">
                                                <div class="dropdown selectDropdown checkboxDropdown">
                                                    <button class="btn dropdown-toggle" type="button" data-toggle="dropdown">Paid
                                                        <span class="caret"></span>
                                                    </button>
                                                    <ul class="dropdown-menu" >
                                                        <li> <a ng-click ="SOHeader.DeductibleItem.DeductibleStatus = 'Adjust'; setDeductibleFocus($index)" >Adjust</a></li>
                                                    </ul>
                                                </div>
                                             </span>
                                             <span class="pull-left Plr0" ng-if = "SOHeader.DeductibleItem.DeductibleStatus != 'Paid' && SOHeader.DeductibleItem.DeductibleStatus != null">
                                                <div class="dropdown selectDropdown checkboxDropdown">
                                                    <button class=" btn dropdown-toggle btn btn-primary" type="button" data-toggle="dropdown" style="background: #337ab7;">Owing
                                                        <span class="caret"></span>
                                                    </button>
                                                    <ul class="dropdown-menu" >
                                                        <li><a ng-click ="SOHeader.DeductibleItem.DeductibleStatus = 'Adjust'; setDeductibleFocus($index)">Adjust</a></li>
                                                        <li><a href="#CheckoutSection" >CheckOut</a></li>
                                                    </ul>
                                                </div>
                                             </span>
                                        </div>
                                        <div class="icon_list">
                                            <i class="fa fa-question-circle" data-toggle="tooltip" data-original-title="Deductible Amount"></i>
                                            <i class="fa fa-thumb-tack"
                                                ng-class="{'active-pin' : CustomerOrderModel.checkItemIsPinned('Deductible')}"
                                                ng-click = "CustomerOrderModel.addRemovePinnedItem('Deductible')"></i>                                  
                                        </div>
                                    </div>
                                 </div>
                                 
                                 <div class="col-md-12 InfoMT" ng-if="SOHeader.SOHeaderInfo.TransactionType == 'Internal'">
                                     <div class="col-md-2 col-md-offset-1"><p class="T3">Category</p></div>
                                     <div class="col-md-9">
                                        <div class="lightbox pull-left">
                                            <autocomplete id="{{$index}}"
                                                    tab-index="{{CustomerOrderModel.tabIndexValue + ($index * 12) + 9}}"
                                                    rel-value="feeCategoryName"
                                                    placeholder="{!$Label.Category_Object_Display_Label}"
                                                    type="{!$Label.Category_Object_Display_Label}"
                                                    titlefield="Name" validationkey="CategoryName"
                                                    disable-attr = "CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex)"
                                                    typesearchmodal="SOHeader.SOHeaderInfo.CategoryNameStr" 
                                                    filter-param = "CustomerOrderModel.ServiceFieldsFilter.SOCategory"/>

                                        </div>
                                        <div class="icon_list">
                                              <i class="fa fa-question-circle" data-toggle="tooltip" data-original-title="Service Order Info Category Section"></i>
                                              <i class="fa fa-thumb-tack"
                                                ng-class="{'active-pin' : CustomerOrderModel.checkItemIsPinned('Category')}"
                                                ng-click = "CustomerOrderModel.addRemovePinnedItem('Category')"></i>
                                          </div>                                 
                                     </div>
                                 </div>
                                
                                 <div class="col-md-12 InfoMT">
                                     <div class="col-md-2 col-md-offset-1"><p class="T3">Stock</p></div>
                                     <div class="col-md-9">
                                        <p class="T7 pull-left" ng-if="CustomerOrderModel.getOutstandingItems(SoHeaderIndex) == 0">No outstanding items</p>      
                                        <p class="T7 pull-left" ng-if="CustomerOrderModel.getOutstandingItems(SoHeaderIndex) != 0">{{CustomerOrderModel.getOutstandingItems(SoHeaderIndex)}} items outstanding</p>      
                                        <div class="icon_list">
                                            <i class="fa fa-question-circle" data-toggle="tooltip" data-original-title="Service Order Info Stock Section"></i>
                                            <i class="fa fa-thumb-tack" 
                                                ng-class="{'active-pin' : CustomerOrderModel.checkItemIsPinned('Stock')}"
                                                ng-click = "CustomerOrderModel.addRemovePinnedItem('Stock')"></i>
                                         </div>                               
                                     </div>
                                 </div>
                                 
                                 <div class="col-md-7">
<!--                                     <button class="btn btn-default greenBtn pull-right"  -->
<!--                                        ng-attr-tabindex="{{CustomerOrderModel.tabIndexValue + ($index * 12) + 10}}" -->
<!--                                        ng-click="CustomerOrderModel.SaveserviceInfo($index)" type="button" tabindex="18"> Save </button> -->




                                 </div>
                                 
                             </div>
                        </div>
                             
                            <div class="main_section_COU_Header row" id="ServiceSigninSection{{$index}}">
                                <p class="actionRow T2">
                                    <span class="sectionText">Sign-In </span>
                                    <!-- <span class="actionText">Actions</span> -->
                                    <span class="ActionIcons">
	                                    <!-- <i class="fa fa-th"></i> -->
	                                    <i class="fa fa-question-circle" data-toggle="tooltip"
	                                                title="Service Order Sign-In  Section"></i>
                                    </span> 
                                </p>   
                            </div>                               
                             <div class="gid_container_Customer row MB24" id="CO_CheckOutGrid_gid_container">
                                <div class="option_field col-md-12 SignIncontainer">
                                    <!-- <div class="lable_fields col-md-1 PDZero">
                                        <span class="form_lable_icons text pull-right"> 100 </span>

                                    </div> -->
                                    <div class="lable_fields col-md-2 ">
                                        <p>Odometer On Arrival </p>

                                    </div>
                                    <div class="form_fields">
                                        <div class="form-group large MB PDZero col-md-1">
                                            <input type="text" class="form-control"
                                                placeholder="Mileage In"
                                                maxlength="255"
                                                ng-model="SOHeader.SOSignInRec.Odometer"
                                                ng-blur="CustomerOrderModel.saveSignInfo($index)"
                                                ng-disabled="CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex)"
                                                ng-attr-tabindex="{{CustomerOrderModel.tabIndexValue + ($index * 12) + 11}}" />



                                        </div>
                                    </div>
                                </div> 
                             </div>
                              <div class="main_section_COU_Header row" id="ServiceItemSection{{$index}}">
                                <p class="actionRow T2">
                                    <span class="sectionText">Items 
                                        <i class="fa fa-plus cou_plus_icon " ng-click="setFocus()"
                                            ng-if="!(CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex))"></i>
                                    </span>
                                    <!-- <span class="actionText">Actions</span> -->
                                    <span class="ActionIcons">
	                                    <!-- <i class="fa fa-th"></i> -->
	                                    <i class="fa fa-question-circle" data-toggle="tooltip"
	                                                title="Service Order Items  Section"></i>
                                    </span> 
                                </p>
                            </div> 
                            
                            <!-- Start Grid -->  
                           
                             <div class="gid_container_Customer" id="CO_ItemGrid_gid_container">
                              
                                <table class="table" id="CM_Owned_ItemGrid">

                                            <col width="2%"  />
                                            <col width="2%"  />
                                            <col width="3%"  />
                                            <!-- <col width="5%"  /> -->
                                            <col width="38%"  />
                                            <col width="7%"  />
                                            <col width="1%"  />
                                            <col width="7%"  />
                                            <col width="1%"  />
                                            <col width="7%" />
                                            <col width="10%"  />
                                            <col width="10%"  />
                                            <col width="10%"  />
                                            <col width="2%"  />
                                            <thead>
                                            <tr  class="tableHeader T3 C2">
                                                <th></th>
                                                <th></th>
                                                <th></th>
                                                <!-- <th></th> -->
                                                <th>Item/Description</th>
                                                <th class="text-center">Need</th>
                                                <th></th>
                                                <th class="text-center">Commited</th>
                                                <th></th>
                                                <th class="text-center">Order</th>
                                                <th class="text-center">STATUS</th>
                                                <th class="text-center">Price</th>
                                                <th class="text-center">Subtotal</th>
                                                <th></th>
                                            </tr>       

                                            </thead>  
                                            <tbody ng-repeat="SOKHitem  in SOHeader.SOGridItems" class="parentBody" ng-init="SoKitHeaderIndex = $index">
                                                <tr  ng-click="CustomerOrderModel.updateServiceOrderLineItem(SoHeaderIndex, SoKitHeaderIndex ,null,$event, true)" 
                                                 ng-class="{'C2':CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[$index].IsEvenRow==true}" 
                                                 ng-show="SOKHitem.SOKH.Id !=null && !CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[$index].isEdit"  >
                                                    <td class="HG50"></td>
                                                    <td><i class="fa fa-link FC7" style="font-size: 24px;"></i></td>
                                                    <td>
                                                        <img src="{!URLFOR($Resource.Images, 'sparkplug.png')}" style="height: 26px;width: 26px;"/>
                                                    </td>
                                                    <!-- <td>
                                                    	<div class="lable_fields">
                                                       		<span class="form_lable_icons text"> 100 </span>
                                                     	</div> 
                                                    </td>  -->
                                                    <td>{{SOKHitem.SOKH.ItemDescription}}</td> 
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td class="text-center">{{SOKHitem.SOKH.FixedPrice | currency }}</td>  
                                                    <td class="text-center">
                                                        <span>{{SOKHitem.SOKH.FixedPrice | currency}}</span>
                                                        <i class="fa fa-lock FC7" ng-show="SOKHitem.SOKH.IsFixedPrice"></i>
                                                        <i class="fa fa-pencil FC7" ng-show="SOKHitem.SOKH.isFixedKitHeaderSO"></i>
                                                    </td> 
                                                    <td></td>   
                                                </tr>
                                                <tr ng-class="{'C2':CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[$index].IsEvenRow==true,'Editable_row':CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[$index].isEdit}"
                                                 ng-show="SOKHitem.SOKH.Id !=null && CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[$index].isEdit" class="Editable_row"  >
                                                    <td class="HG50"></td>
                                                    <td><i class="fa fa-link FC7" style="font-size: 24px;"></i></td>
                                                    <td>
                                                        <img src="{!URLFOR($Resource.Images, 'sparkplug.png')}" style="height: 26px;width: 26px;"/>
                                                    </td>
                                                    <!-- <td>
                                                    	<div class="lable_fields">
                                                       		<span class="form_lable_icons text"> 100 </span>
                                                     	</div> 
                                                    </td>  -->
                                                    <td>{{SOKHitem.SOKH.ItemDescription}}</td>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td ng-if="SOKHitem.SOKH.IsFixedPrice" class="text-center">{{SOKHitem.SOKH.FixedPrice | currency}}</td>
                                                    <td ng-if="!SOKHitem.SOKH.IsFixedPrice">
                                                        <number-only-input input-value="SOKHitem.SOKH.FixedPrice" id-val="SOLI_Header_Price_Edit_{{$index}}" 
                                                            ng-keydown="CustomerOrderModel.editRowTabOutServiceOrderLineItem(SoHeaderIndex,SoKitHeaderIndex,null,$event)"

                                                            />
<!--                                                            <input type="text" ng-model="SOKHitem.SOKH.FixedPrice"  -->
<!--                                                            ng-keydown="CustomerOrderModel.editRowTabOutServiceOrderLineItem(SoHeaderIndex,SoKitHeaderIndex,null,$event)"/> -->

                                                        </td>
                                                    <td class="text-center">
                                                        <span>{{SOKHitem.SOKH.FixedPrice | currency}}</span>
                                                        <i class="fa fa-lock FC7" ng-show="SOKHitem.SOKH.IsFixedPrice"></i>
                                                        <i class="fa fa-pencil FC7" ng-show="SOKHitem.SOKH.isFixedKitHeaderSO"></i>

                                                    </td> 
                                                    <td></td>   

                                                </tr>
                                                <tr class="edit_panel sample-show-hide T7" id="merch_item_row{{$index}}_edit"  ng-show="SOKHitem.SOKH.Id !=null && CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[SoKitHeaderIndex].isEdit" >
                                                        <td style="backgroung-color:#fff"></td>
                                                        <td ng-class="{'BL': SOKHitem.SOKH.hasChildren}" style="background:#fff"></td>
                                                        <td style="background:#fff"></td>
                                                        <!-- <td style="background:#fff"></td> -->
                                                        <td colspan="9" class="edit-service-item" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}" style="padding-left:0px; padding-right:0px;">
                                                           <div class="edit_box serviceitemedit col-md-12 " id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit_box">
                                                              <div class="its-heading" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit_box_its-heading">

                                                                 <i class="fa fa-angle-down"></i>
                                                                  <span>Actions (2 Actions Available)</span>  
                                                              </div>
                                                              <div class="edit-body" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body">
                                                                  <form>
                                                                      <div class="radio" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_radio1">
                                                                        <label>
                                                                          <p class="chk_tick edit-service-chek"
                                                                          ng-class="{'chked' : CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[SoKitHeaderIndex].optionSelected == 0 }" 
                                                                          ng-click="CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[SoKitHeaderIndex].optionSelected = 0">
                                                                            <i class="fa fa-check-square chksqure"></i>
                                                                        </p>

                                                                        <span>Remove From Order</span>
                                                                        </label>
                                                                     </div>
                                                                     <div class="radio" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{SoKitHeaderIndex}}_edit-body_radio1" 
                                                                        ng-if="SOKHitem.SOKH.hasChildren">
                                                                        <label>
                                                                          <p class="chk_tick edit-service-chek" 
                                                                          ng-class="{'chked' : CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[SoKitHeaderIndex].optionSelected == 1 }" 
                                                                          ng-click="CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[SoKitHeaderIndex].optionSelected = 1">
                                                                            <i class="fa fa-check-square chksqure"></i>
                                                                        </p>
                                                                        <span>Break up Kit (will lose custom kit pricing)</span>
                                                                        </label>
                                                                      </div>
                                                                       <div class="radio" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_radio1"
                                                                        ng-if="SOKHitem.SOKH.hasChildren">
                                                                            <label ng-click="CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[SoKitHeaderIndex].optionSelected = 3"
                                                                             >
                                                                          <p class="chk_tick edit-service-chek"
                                                                            ng-class="{'chked' : CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[SoKitHeaderIndex].optionSelected == 3 }">
                                                                            <i class="fa fa-check-square chksqure"></i>
                                                                        </p>
                                                                        <span class = "width-88">Move To </span>    
                                                                            <span class="select_box_container">
                                                                               <select class="form-control" 
                                                                                    ng-options= "section.Id as section.Name    for  section in  CustomerOrderModel.AllSectionList | filter:getSectionToMove(SOHeader.SOHeaderInfo.Id)" 
                                                                                    ng-model="CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[SoKitHeaderIndex].MoveTosection">
                                                                                </select>   
                                                                            </span>
                                                                        </label>
                                                                      </div>
                                                                      <a href="" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_gobtn" 
                                                                        class="btn btn-default editform_btn" role="button"
                                                                        ng-click="CustomerOrderModel.serviceItemGoAction(CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[SoKitHeaderIndex].optionSelected, SOKHitem.SOKH.Id,Solitem.Id,SoKitHeaderIndex,SoHeaderIndex,null)">Apply</a>                                

                                                                  </form>
                                                              </div>
                                                           </div>
                                                        </td>
                                                    </tr>
                                                    <tr ng-repeat-start="Solitem in SOKHitem.SOKH.SOLIList" ng-init="SoLineItemIndex = $index"
                                                        ng-show="!CustomerOrderModel.SoItems_editRow[$parent.$parent.$index].HeaderItems_editRow[$parent.$index].SOLI_editRow[$index].isEdit"
                                                        ng-click="CustomerOrderModel.updateServiceOrderLineItem($parent.$parent.$index,$parent.$index,$index,$event, true)" 
                                                        ng-class="{'C2': CustomerOrderModel.SoItems_editRow[$parent.$parent.$index].HeaderItems_editRow[$parent.$index].SOLI_editRow[$index].IsEvenRow==true}">
                                                        <td class="HG50" ng-class="{'BGFF': SOKHitem.SOKH.hasChildren}"></td>
                                                        <td ng-class="{'BL BGFF': SOKHitem.SOKH.hasChildren}">
                                                            <i ng-class="{'fa fa-link FC7 servicesitem': SOKHitem.SOKH.hasChildren}" >


                                                            </i>
                                                        </td>
                                                        <td ng-class="{'BGFF': SOKHitem.SOKH.hasChildren}">
                                                            <img src="{!URLFOR($Resource.Images, 'sparkplug.png')}" ng-if="Solitem.IsPart" style="height: 26px;width: 26px;"/>
                                                            <img src="{!URLFOR($Resource.Images, 'hammer.png')}" ng-if="Solitem.IsLabour" style="height: 26px;width: 26px;"/>
                                                            <img src="{!URLFOR($Resource.Images, 'dollor.png')}" ng-if="Solitem.IsFee" style="height: 26px;width: 26px;border-radius: 13px;"/>  

                                                        </td>
                                                        <!-- <td ng-class="{'BGFF': SOKHitem.SOKH.hasChildren}">
                                                        	<div class="lable_fields">
                                                        		<span class="form_lable_icons text"> 100 </span>
                                                            </div>
                                                         </td> --> 

                                                         <td ng-if="Solitem.IsPart">
                                                            <a ng-mouseover="CustomerOrderModel.openpartpopup($event, Solitem.PartId);" ng-mouseleave="CustomerOrderModel.hidePartPopUp();">{{Solitem.ItemDesc}}</a>

                                                         </td>
                                                         <td ng-if="!Solitem.IsPart">{{Solitem.ItemDesc}}</td>
                                                         <td class="text-center">{{Solitem.QtyNeeded}}</td>
                                                         <td></td>
                                                         <td class="text-center" >{{Solitem.IsPart ? Solitem.StockCommited:"" }}</td>
                                                         <td></td>
                                                         <td class="text-center"  > {{Solitem.IsPart ? Solitem.QtyOrder:"" }} </td>
                                                         <td class="text-center" ng-class="{'Requiredtd' : Solitem.Status =='Required' || Solitem.Status =='RETURN', 'blueColor' : Solitem.Status =='Invoiced', 'greenColor' : Solitem.Status =='Ordered'}">{{Solitem.IsPart ? Solitem.Status : Ready }} </td>
                                                         <td class="text-center">{{Solitem.KitPrice | currency}}</td>
                                                         <td class="text-center">
                                                            <span ng-if="Solitem.SubTotal == null">{{(Solitem.QtyNeeded * Solitem.KitPrice) | currency}}</span>
                                                            <span ng-if="Solitem.SubTotal != null">{{Solitem.SubTotal | currency}}</span>
                                                            <i class="fa fa-lock FC7" ng-show="Solitem.IsFixedPrice"></i>
                                                            <i class="fa fa-pencil FC7" ng-show="Solitem.isFixedKitHeaderLineItemSO"></i>

                                                         </td>
                                                         <td style="background-color: #FFF;"></td>


                                                   </tr>
                                                   <!--  -->
                                                    <tr ng-show="CustomerOrderModel.SoItems_editRow[$parent.$parent.$index].HeaderItems_editRow[$parent.$index].SOLI_editRow[$index].isEdit"
                                                        ng-class="{'C2': CustomerOrderModel.SoItems_editRow[$parent.$parent.$index].HeaderItems_editRow[$parent.$index].SOLI_editRow[$index].IsEvenRow==true}">
                                                        <td class="HG50" ng-class="{'BGFF': SOKHitem.SOKH.hasChildren}"></td>
                                                        <td ng-class="{'BL BGFF': SOKHitem.SOKH.hasChildren}">  
                                                            <i ng-class="{'fa fa-link FC7 servicesitem': SOKHitem.SOKH.hasChildren}" >


                                                            </i>
                                                        </td>
                                                        <td ng-class="{'BGFF': SOKHitem.SOKH.hasChildren}">
                                                            <img src="{!URLFOR($Resource.Images, 'sparkplug.png')}" ng-if="Solitem.IsPart" style="height: 26px;width: 26px;"/>
                                                            <img src="{!URLFOR($Resource.Images, 'hammer.png')}" ng-if="Solitem.IsLabour" style="height: 26px;width: 26px;"/>
                                                            <img src="{!URLFOR($Resource.Images, 'dollor.png')}" ng-if="Solitem.IsFee" style="height: 26px;width: 26px;border-radius: 13px;"/>

                                                        </td>
                                                        <!-- <td ng-class="{'BGFF': SOKHitem.SOKH.hasChildren}">
                                                        	<div class="lable_fields">
                                                        		<span class="form_lable_icons text"> 100 </span>
                                                            </div>
                                                         </td> --> 

                                                         <td ng-if="Solitem.IsPart">
                                                            <a ng-mouseover="CustomerOrderModel.openpartpopup($event, Solitem.PartId);" ng-mouseleave="CustomerOrderModel.hidePartPopUp();">{{Solitem.ItemDesc}}</a>
                                                            <span class="Infonotification" ng-if="Solitem.Status=='Ordered'" > 


                                                                 Special Order generated
                                                            </span>
                                                             <span class="notification" ng-if="Solitem.AvailablePart == 0 && Solitem.Status !='Ordered'" > 
                                                                 {{Solitem.QtyNeeded > Solitem.StockCommited ? 'Action Required (not enough stock)' : ''}}

                                                            </span>
                                                            <span class="AvalaibleQtyNotification"  ng-if="Solitem.AvailablePart > 0 && Solitem.Status=='Required'">
                                                                    {{Solitem.AvailablePart}} More Available Click To Add Save

                                                            </span>
                                                            <span class="Infonotification" ng-if="Solitem.Status=='In Stock'" > 



                                                                 &nbsp;
                                                            </span>
                                                         </td>
                                                         <td ng-if="!Solitem.IsPart">{{Solitem.ItemDesc}}</td>

                                                         
                                                         <td ng-if="!(Solitem.IsFixedPrice || SOKHitem.SOKH.hasChildren)">
                                                            <number-only-input input-value="Solitem.QtyNeeded" id-val="SOLI_Qty_Needed_Edit_{{$index}}" 
                                                                ng-keydown="CustomerOrderModel.solieditRowBlur(SoHeaderIndex,SoKitHeaderIndex,SoLineItemIndex,$event, false , 'SOLI_Qty_Needed_Edit_'+SoHeaderIndex+'_'+SoKitHeaderIndex+'_'+SoLineItemIndex)"/>

                                                         </td>
                                                         <td ng-if="(Solitem.IsFixedPrice || SOKHitem.SOKH.hasChildren)" class="text-center">{{Solitem.QtyNeeded}}</td>

                                                         
                                                         <td><span ng-if="!Solitem.IsFixedPrice  && Solitem.IsPart">=</span></td>

                                                         
                                                         <td class="text-center">
                                                            <div ng-if="SOKHitem.SOKH.hasChildren">
                                                                <span ng-if="Solitem.IsPart">
                                                                     {{Solitem.StockCommited}}

                                                                </span>
                                                                <span ng-if="Solitem.IsLabour || Solitem.IsFee"></span>  

                                                            </div>
                                                            <div ng-if="!SOKHitem.SOKH.hasChildren">
                                                                <div ng-if="Solitem.IsPart && !Solitem.IsFixedPrice  && Solitem.QtyNeeded >= 0">
                                                                    <number-only-input input-value="Solitem.StockCommited" include-zero="true" id-val="SOLI_Qty_Needed_Edit_{{SoHeaderIndex}}_{{SoKitHeaderIndex}}_{{SoLineItemIndex}}" />

                                                                </div>
                                                                <div ng-if="!(Solitem.IsPart && !Solitem.IsFixedPrice)">
                                                                     {{Solitem.StockCommited}}



                                                                </div>
                                                            </div>
                                                         </td>
<!--                                                         <td class="text-center" ng-if="(Solitem.IsPart && Solitem.IsFixedPrice) && SOKHitem.SOKH.hasChildren"> {{Solitem.StockCommited}}</td> -->
<!--                                                         <td class="text-center" ng-if="Solitem.IsLabour || Solitem.IsFee"></td> -->
                                                         <td><span ng-if="!Solitem.IsFixedPrice && Solitem.IsPart">+</span></td>
                                                         <td class="text-center">{{Solitem.IsPart ? Solitem.QtyOrder:"" }}</td>
                                                         <td class="text-center" ng-class="{'Requiredtd' : Solitem.Status =='Required' || Solitem.Status =='RETURN' , 'blueColor' : Solitem.Status =='Invoiced', 'greenColor' : Solitem.Status =='Ordered'}">{{Solitem.IsPart ? Solitem.Status : Ready }}</td>
                                                         <td ng-if="!Solitem.IsFixedPrice">
                                                            <number-only-input input-value="Solitem.KitPrice" id-val="SOLI_Price_Edit_{{$index}}" 
                                                                ng-keydown="CustomerOrderModel.editRowTabOutServiceOrderLineItem(SoHeaderIndex,SoKitHeaderIndex,SoLineItemIndex,$event)"/>

                                                         </td>
                                                         <td ng-if="Solitem.IsFixedPrice" class="text-center">{{Solitem.KitPrice | currency}}</td>
                                                         <td class="text-center">
                                                            <span ng-if="Solitem.SubTotal == null">{{(Solitem.QtyNeeded * Solitem.KitPrice) | currency}}</span>
                                                            <span ng-if="Solitem.SubTotal != null">{{Solitem.SubTotal | currency }}</span>
                                                            <i class="fa fa-lock FC7" ng-show="Solitem.IsFixedPrice"></i>
                                                            <i class="fa fa-pencil FC7" ng-show="Solitem.isFixedKitHeaderLineItemSO"></i>

                                                         </td>
                                                         <td style="background-color: #FFF;"></td>



                                                   </tr>
                                                        
                                                  <tr class=""  
                                                    ng-show="CustomerOrderModel.SoItems_editRow[$parent.$parent.$index].HeaderItems_editRow[$parent.$index].SOLI_editRow[$index].isEdit && !Solitem.IsLabour && !Solitem.IsFee">
                                                             <td style="background:#fff"></td>
                                                             <td style="background:#fff" ng-class="{'BL': SOKHitem.SOKH.hasChildren}"></td>
                                                             <td style="background:#fff"></td>
                                                             <!-- <td style="background:#fff"></td> -->
                                                             <td class="available_td" colspan="9" style="padding-left:0px;padding-right:0px;">


                                                                     <div class="show_Availableline" ng-if="Solitem.AvailablePart > 0">  
                                                                           AVAILABLE INVENTORY: {{Solitem.AvailablePart}} 

                                                                     </div>
                                                                     <div class="show_Availableline bgRed" ng-if="Solitem.AvailablePart <= 0">  
                                                                           AVAILABLE INVENTORY: {{Solitem.AvailablePart}} - OUT OF STOCK


                                                                     </div>
                                                              </td>
                                                              <td style="background:#fff"></td>

                                                    </tr>
                                                     <tr  ng-show="CustomerOrderModel.SoItems_editRow[$parent.$parent.$index].HeaderItems_editRow[$parent.$index].SOLI_editRow[$index].isEdit"   ng-repeat-end="ng-repeat-end" class="edit_panel sample-show-hide T7" id="merch_item_row{{$index}}_edit">
                                                        <td style="backgroung-color:#fff"></td>
                                                        <td ng-class="{'BL': SOKHitem.SOKH.hasChildren}" style="background:#fff"></td>
                                                        <td style="background:#fff"></td>
                                                        <!-- <td style="background:#fff"></td> -->
                                                        <td colspan="9" class="edit-service-item" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}" style="padding-left:0px; padding-right:0px;">
                                                           <div class="edit_box serviceitemedit col-md-12 " id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit_box"
                                                                 ng-show="CustomerOrderModel.SoItems_editRow[$parent.$parent.$index].HeaderItems_editRow[$parent.$index].SOLI_editRow[$index].isEdit">
                                                              <div class="its-heading" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit_box_its-heading">

                                                                 <i class="fa fa-angle-down"></i>
                                                                  <span>Actions (2 Actions Available)</span> 

                                                              </div>
                                                              <div class="edit-body" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body">

                                                                  <form>
                                                                      <div class="radio" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_radio1" ng-if="!(Solitem.IsPart && Solitem.Status =='Ordered')">
                                                                        <label ng-click="CustomerOrderModel.changeServiceOrderKitItemsSelectedOption(SoHeaderIndex,SoKitHeaderIndex,SoLineItemIndex,0)">

                                                                          <p class="chk_tick edit-service-chek"
                                                                          ng-class="{'chked' : CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[SoKitHeaderIndex].SOLI_editRow[SoLineItemIndex].optionSelected == 0 }" >
                                                                            <i class="fa fa-check-square chksqure"></i>
                                                                        </p>
                                                                        <span>Remove From Order </span>
                                                                        </label>
                                                                     </div>
                                                                     <div class="radio" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_radio1" 
                                                                        ng-if="SOKHitem.SOKH.hasChildren && Solitem.Status !='Ordered'">
                                                                        <label ng-click="CustomerOrderModel.changeServiceOrderKitItemsSelectedOption(SoHeaderIndex,SoKitHeaderIndex,SoLineItemIndex,1)">

                                                                          <p class="chk_tick edit-service-chek" 
                                                                          ng-class="{'chked' : CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[SoKitHeaderIndex].SOLI_editRow[SoLineItemIndex].optionSelected == 1 }"> 
                                                                            <i class="fa fa-check-square chksqure"></i>
                                                                        </p>
                                                                        <span>Break up Kit</span>
                                                                        </label>
                                                                      </div>
                                                                     <div class="radio" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_radio1"
                                                                        ng-if="!SOKHitem.SOKH.hasChildren && !Solitem.IsLabour && !Solitem.IsFee && Solitem.Status !='RETURN'">
                                                                        <label ng-click="CustomerOrderModel.changeServiceOrderKitItemsSelectedOption(SoHeaderIndex,SoKitHeaderIndex,SoLineItemIndex,2)">

                                                                          <p class="chk_tick edit-service-chek"
                                                                            ng-class="{'chked' : CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[SoKitHeaderIndex].SOLI_editRow[SoLineItemIndex].optionSelected == 2 }">
                                                                            <i class="fa fa-check-square chksqure"></i>

                                                                        </p>
                                                                        <span>Special Order</span>
                                                                            <span class="select_box_container">

                                                                                <select class="form-control" 
                                                                                    ng-options="VOHeaderList.VOId as VOHeaderList.VOName for  VOHeaderList in CustomerOrderModel.VendorOrderListByVendorId"
                                                                                    ng-model="CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[SoKitHeaderIndex].SOLI_editRow[SoLineItemIndex].radioValue"
                                                                                   >
                                                                                </select>
                                                                            </span>
                                                                        </label>
                                                                      </div>
                                                                       <div class="radio" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_radio1"
                                                                        ng-if="!SOKHitem.SOKH.hasChildren" >

                                                                            <label ng-click="CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[SoKitHeaderIndex].SOLI_editRow[SoLineItemIndex].optionSelected = 3">

                                                                          <p class="chk_tick edit-service-chek"
                                                                            ng-class="{'chked' : CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[SoKitHeaderIndex].SOLI_editRow[SoLineItemIndex].optionSelected == 3 }">
                                                                            <i class="fa fa-check-square chksqure"></i>
                                                                        </p>
                                                                        <span class = "width-88">Move To </span>    
                                                                            <span class="select_box_container">
                                                                               <select class="form-control" 
                                                                                    ng-options= "section.Id as section.Name    for  section in  CustomerOrderModel.AllSectionList | filter:getSectionToMove(SOHeader.SOHeaderInfo.Id)" 
                                                                                    ng-model="CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[SoKitHeaderIndex].SOLI_editRow[SoLineItemIndex].MoveTosection">
                                                                                </select>   
                                                                            </span>
                                                                        </label>
                                                                      </div>  
                                                                      <a href="" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_gobtn" 
                                                                        class="btn btn-default editform_btn" role="button"
                                                                        ng-click="CustomerOrderModel.serviceItemGoAction(CustomerOrderModel.SoItems_editRow[SoHeaderIndex].HeaderItems_editRow[SoKitHeaderIndex].SOLI_editRow[SoLineItemIndex].optionSelected, SOKHitem.SOKH.Id,Solitem.Id,SoKitHeaderIndex,SoHeaderIndex,SoLineItemIndex)">Apply</a>                                

                                                                  </form>
                                                              </div>
                                                           </div>
                                                        </td>
                                                    </tr>
                                                               
                                                   <!--  -->
                                               
                                            </tbody>
                                        </table>
                             
                             

                             </div>
                             <!-- End Grid -->
                             
                             <!-- Added by Tarun -->
                             
                             <div class="main_section_COU_Header row" id="ServiceHLSection{{$index}}">
                                <p class="actionRow T2" style="display:inline;">
                                    <span class="sectionText">Attachments </span>
                                    <!-- <span class="actionText">Actions</span> -->
                                    <span class="ActionIcons">
                                        <!-- <div class="actionDropdown dropdown" 
                                            ng-if="SOHeader.SOHeaderInfo.IsCompletedLinkShown && !(CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex))">
                                          <i class="fa fa-th dropdown-toggle" type="button" data-toggle="dropdown"></i>
                                          <ul class="dropdown-menu">
                                            
                                          </ul>
                                        </div>
                                        <i class="fa fa-th" ng-if="!(SOHeader.SOHeaderInfo.IsCompletedLinkShown && !(CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex)))"></i> -->
                                        <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Service Order Attachments"></i>
                                    </span> 
                                </p>
                            </div>  
                            
                            <div class="gid_container_Customer" id="CO_CheckOutGrid_gid_container">
                                <table class="table" id="CM_Owned_UnitsGrid"
                                    ng-if="SOHeader.AttachmentList.length != 0">
                                    <col width="2%"  />
                                    <col width="2%"  />
                                    <col width="6%"  />
                                    <col width="20%"  />
                                    <col width="50%"  />
                                    <col width="20%"  />
                                    
                                    <tr class="tableHeader T3 C2" ng-click="CustomerOrderModel.editAttachmentItem(SoHeaderIndex, null)">
                                        <th></th>
                                        <th></th>
                                        <th></th>
                                        <th>UPLOADED</th>
                                        <th>FILE NAME</th>
                                        <th>SOURCE</th>
                                    </tr>
                                    
                                  <tbody ng-repeat="Attachment in SOHeader.AttachmentList">
                                      
                                      <!-- Display rows -->
                                      <tr class="clickable_row" id="row1" rel="owned_unit_row{{$index}}_edit" ng-class-even="'C2'"
                                        ng-click = "CustomerOrderModel.editAttachmentItem(SoHeaderIndex, $index);">

                                          <td style="background:#fff"></td>
                                          <td></td>
                                          <td id="CM_Owned_Units_block_grid_container_tbody_tr_td_1_{{$index}}" > 
                                                <a class="edite_btn"> </a>
                                          </td>
                                          
                                          <td id="CM_Owned_Units_block_grid_container_tbody_tr_td_3_{{$index}}" class="T7 " >
                                                {{Attachment.UploadedDate}}
                                          </td>
                                          <td id="CM_Owned_Units_block_grid_container_tbody_tr_td_4_{{$index}}" class="T7">
                                                <a href="/servlet/servlet.FileDownload?file={{Attachment.AttachmentId}}" target="_blank">{{Attachment.AttachmentName}} </a>
                                          </td>
                                          
                                          <td id="CM_Owned_Units_block_grid_container_tbody_tr_td_5_{{$index}}" class="T7">
                                                {{Attachment.Source}} 
                                          </td>
                                      </tr>

                                      <tr ng-show="CustomerOrderModel.Attachment_editRow[$parent.$index].SOHeader_Attachment_editRow[$index].isEdit" class="edit_panel sample-show-hide T7" id="merch_item_row{{$index}}_edit">
                                          <td style="backgroung-color:#fff"></td>
                                          <td style="backgroung-color:#fff"></td>
                                          <td style="backgroung-color:#fff"></td>
                                          <td colspan="5" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}">
                                             <div class="edit_box col-lg-9 col-md-9" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit_box" 
                                                ng-show="CustomerOrderModel.Attachment_editRow[$parent.$index].SOHeader_Attachment_editRow[$index].isEdit">
                                                <div class="its-heading" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit_box_its-heading">
                                                    <img src="{!URLFOR($Resource.icon_images, 'images/edit_icon.png')}" styleClass="img_action"/>
                                                    <span>Actions (1 Actions Available)</span>
                                                </div>
                                                <div class="edit-body" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body">
                                          
                                                    <form>
                                                        <div class="radio" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_radio1">
                                                          <label>
                                                            <p class="chk_tick edit-service-chek"
                                                                   ng-class="{'chked' : CustomerOrderModel.Attachment_editRow[$parent.$index].SOHeader_Attachment_editRow[$index].radioValue == 0 }" >
                                                                <i class="fa fa-check-square chksqure"></i>


                                                            </p>
                                                            <span>Remove From Order </span>
                                                          </label>
                                                          
                                                          
<!--                                                           <label> -->
<!--                                                             <input type="radio" name="optionsRadios" ng-model="CustomerOrderModel.HoursLogged_editRow[$parent.$index].SOHeader_HoursLogged_editRow[$index].radioValue"  -->
<!--                                                                id="optionsRadios2" value="0" /> -->
<!--                                                             <span>Edit</span> -->
<!--                                                           </label> -->
                                                        </div>
                                                        <a href="" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_gobtn" class="btn btn-default editform_btn attachmenteditform_btn" role="button"
                                                          ng-click = "CustomerOrderModel.editAttachmentApplyAction(Attachment.AttachmentId, SOHeader.SOHeaderInfo.Id, SoHeaderIndex, $index)">Apply</a>                                
                                          
                                                    </form>
                                                </div>
                                               
                                             </div>
                                             
                                          </td>
                                      </tr>
                                  </tbody>
                                </table>
                                
                                <div>
                                    <div class="dropletcontainer" >
                                        <section class="col-md-12 browse_section P0" >
                                            <section class="droplet smalldroplet"  >
                                                <droplet class ="browse_droplet" ng-model="FileUpload.interface" ng-class="{'uploading' : FileUpload.interface.isUploading() }">
                                                    <p class="bigfont drag-container">
                                                        <i aria-hidden="true" class="fa fa-cloud-upload"></i>  Drop files here to upload, or
                                                        <div class ="browse_but">
                                                            <label for="files" style="max-width: 112px;"> 
                                                                <droplet-upload-single ng-model="FileUpload.interface" service-model ="CustomerOrderModel.SelectedSection.Name"  style="height: 0;position: absolute;width: 0;height: 30px;width: 0px;padding-left: 95px;padding-top: 0px; margin: 11px; width: 93px; opacity:0; outline: none; margin-left:0;">
                                                                </droplet-upload-single>
                                                                <span class="btn bigfont">browse</span>
                                                            </label> 
                                                        </div>
                                                    </p> 
                                                </droplet>
                                            </section>
                                        </section>
                                    </div>
                                </div>
                                <div class="clearfix" > </div>
                             </div>
                             
                             
                            <!--  Added by tarun --> 
                             
                             
                             <div class="main_section_COU_Header row" id="ServiceHLSection{{$index}}">
                                <p class="actionRow T2" style="display:inline;">
                                    <span class="sectionText">Hours Logged 
                                        <i class="fa fa-plus cou_plus_icon " ng-click="CustomerOrderModel.createLogHoursPopup(SOHeader.SOHeaderInfo.Id, $index)"
                                            ng-if="!(CustomerOrderModel.isServiceOrderDisabled(SoHeaderIndex))"></i>
                                    </span>
                                    <!-- <span class="actionText">Actions</span> -->
                                    <span class="ActionIcons">
                                        <!-- <div class="actionDropdown dropdown" 
                                            ng-if="false">
                                          <i class="fa fa-th dropdown-toggle" type="button" data-toggle="dropdown"></i>
                                          <ul class="dropdown-menu">
                                            <li><a ng-click="CustomerOrderModel.changeSOStatusToComplete(SoHeaderIndex)">Mark as Completed</a></li>

                                          </ul>
                                        </div>
                                        <i class="fa fa-th" ng-if="true"></i> -->
                                        <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Service Order Hours Logged Section"></i>
                                    </span> 
                                </p>
                            </div>  
               
                             <div class="gid_container_Customer" id="CO_CheckOutGrid_gid_container">
                                <table class="table" id="CM_Owned_UnitsGrid">

                                    <col width="2%"  />
                                    <col width="2%"  />
                                    <col width="6%"  />
                                    <col width="15%"  />
                                    <col width="15%"  />
                                    <col width="8%" />
                                    <col width="30%"  />
                                    <col width="10%"  />
                                    <col width="2%"  />
                                    <tr  class="tableHeader T3 C2"
                                        ng-click="CustomerOrderModel.editHoursLoggedItem(SoHeaderIndex, null)">
                                      <th></th>
                                      <th></th>
                                      <th></th>
                                      <th>LOG</th>
                                      <th>EMPLOYEE</th>
                                      <th>HOURS</th>
                                      <th class="text-center">NOTES</th>



                                      <th>CREATED</th>
                                      <th></th>
                                    </tr>
                                  <tbody ng-repeat="HoursLogged in SOHeader.HoursLoggedList">
                                      <!-- Display rows -->
                                      <tr class="clickable_row" id="row1" rel="owned_unit_row{{$index}}_edit" ng-class-even="'C2'"
                                        ng-click="CustomerOrderModel.editHoursLoggedItem(SoHeaderIndex, $index);">
                                          <td style="background:#fff"></td>
                                          <td></td>
                                          <td id="CM_Owned_Units_block_grid_container_tbody_tr_td_1_{{$index}}" >
                                              <a href="" class="edite_btn" rel="row1_edit">
                                                  <img src="{!URLFOR($Resource.Images, 'user-3.png')}" class="first_img" /> 
                                              </a>
                                          </td>
                                          <td id="CM_Owned_Units_block_grid_container_tbody_tr_td_3_{{$index}}" class="T7 " >


                                            {{HoursLogged.Log}}
                                          </td>
                                          <td id="CM_Owned_Units_block_grid_container_tbody_tr_td_4_{{$index}}" class="T7">


                                            {{HoursLogged.EmployeeName}}
                                          </td>
                                          <td id="CM_Owned_Units_block_grid_container_tbody_tr_td_5_{{$index}}" class="T7">{{HoursLogged.TimeSpent_H}} </td>
                                          <td id="CM_Owned_Units_block_grid_container_tbody_tr_td_6_{{$index}}"  class="T7" style="width:350px;" >
                                            <p data-toggle="tooltip" class="text-center hour-notestext" tooltip="tooltip"
                                                title="{{HoursLogged.Notes}}"><span ng-if ="HoursLogged.NotesRequired == true ">
                                                <i class="fa fa-exclamation " aria-hidden="true" style="color:red; margin-right:7px;"/>
                                                </span>{{HoursLogged.Notes}}</p>
                                          </td>
                                          <td id="CM_Owned_Units_block_grid_container_tbody_tr_td_7_{{$index}}"  class="T7">{{HoursLogged.CreatedDate}}</td>
                                          <td style="background:#fff"></td>
                                      </tr>
                                      <tr ng-show="CustomerOrderModel.HoursLogged_editRow[$parent.$index].SOHeader_HoursLogged_editRow[$index].isEdit" class="edit_panel sample-show-hide T7" id="merch_item_row{{$index}}_edit">
                                          <td style="backgroung-color:#fff"></td>
                                          <td style="backgroung-color:#fff"></td>
                                          <td style="backgroung-color:#fff"></td>
                                          <td colspan="5" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}">
                                             <div class="edit_box col-lg-9 col-md-9" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit_box" 
                                                ng-show="CustomerOrderModel.HoursLogged_editRow[$parent.$index].SOHeader_HoursLogged_editRow[$index].isEdit">
                                                <div class="its-heading" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit_box_its-heading">
                                                    <img src="{!URLFOR($Resource.icon_images, 'images/edit_icon.png')}" styleClass="img_action"/>
                                                    <span>Actions (1 Actions Available)</span>
                                                </div>
                                                <div class="edit-body" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body">
                                          
                                                    <form>
                                                        <div class="radio" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_radio1">
                                                          <label>
                                                            <p class="chk_tick edit-service-chek"
                                                                   ng-class="{'chked' : CustomerOrderModel.HoursLogged_editRow[$parent.$index].SOHeader_HoursLogged_editRow[$index].radioValue == 0 }" >
                                                                <i class="fa fa-check-square chksqure"></i>


                                                            </p>
                                                            <span>Edit </span>
                                                          </label>
                                                          
                                                          
<!--                                                           <label> -->
<!--                                                             <input type="radio" name="optionsRadios" ng-model="CustomerOrderModel.HoursLogged_editRow[$parent.$index].SOHeader_HoursLogged_editRow[$index].radioValue"  -->
<!--                                                                id="optionsRadios2" value="0" /> -->
<!--                                                             <span>Edit</span> -->
<!--                                                           </label> -->
                                                        </div>
                                                        <a href="" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_gobtn" class="btn btn-default editform_btn" role="button"
                                                          ng-click="CustomerOrderModel.editHoursLoggedGoAction(SoHeaderIndex, $index)">Go</a>                                
                                          
                                                    </form>
                                                </div>
                                               
                                             </div>
                                             
                                          </td>
                                      </tr>
                                      <!-- action editable Row -->
                                  </tbody>
                                </table>
                             </div>
                             

                             <div class="main_section_COU_Header row" id="ServiceSRSection{{$index}}"
                             	ng-if="SOHeader.SOHeaderInfo.WorkStatus == 'Complete' ||
                             			SOHeader.SOHeaderInfo.WorkStatus == 'Reviewed' ||
                                     	SOHeader.SOHeaderInfo.WorkStatus == 'Signed Out'">
                                <p class="actionRow T2" style="display:inline;">
                                    <span class="sectionText">Service Review </span>
                                    <!-- <span class="actionText">Actions</span> -->
                                    <span class="ActionIcons">
                                        <!-- <i class="fa fa-th"></i> -->
                                        <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Service Order Service Review  Section"></i>
                                    </span>  
                                </p>
                            </div>  
                             
                             <div class="gid_container_Customer row MB24 serviceReviewcontainer" id="CO_CheckOutGrid_gid_container"
                             	ng-if="SOHeader.SOHeaderInfo.WorkStatus == 'Complete' ||
                             			SOHeader.SOHeaderInfo.WorkStatus == 'Reviewed' ||
                                     	SOHeader.SOHeaderInfo.WorkStatus == 'Signed Out'">
                                <div class="option_field col-md-12 SignIncontainer ">
                                    <!-- <div class="lable_fields col-md-1 PDZero">
                                        <span class="form_lable_icons text pull-right"> 100 </span>

                                    </div> -->
                                    <div class="lable_fields col-md-2 ">
                                        <p>Odometer On Departure</p>

                                    </div>
                                    <div class="form_fields">
                                        <div class="form-group large MB PDZero col-md-3">
                                            <input type="text" class="form-control"
                                                placeholder="Mileage In"
                                                maxlength="255"
                                                ng-model="SOHeader.SOReviewRec.OdometerOnDeparture"
                                                ng-blur="CustomerOrderModel.saveOdometerDeparture($index)"
                                                ng-disabled="SOHeader.SOHeaderInfo.WorkStatus == 'Reviewed' ||
                                                			SOHeader.SOHeaderInfo.WorkStatus == 'Signed Out' || 
                                                			CustomerOrderModel.coHeaderDetails.OrderStatus == 'Closed'"
                                                ng-attr-tabindex="{{CustomerOrderModel.tabIndexValue + ($index * 12) + 12}}" />

                                                
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-2 col-md-offset-1"><p class="T3 text-center">Notes For Customer</p></div>
                                <div class="col-md-9" style="padding-left: 7px;">
                                     <div class="multiselect">
                                        <div ng-repeat="kitNotes in SOHeader.SOReviewRec.KitHeaderNotes">
                                             <span> 
                                                 {{kitNotes}}
                                                 <i class="fa fa-lock"></i>
                                             </span>
                                         </div>
                                         <div ng-repeat="notes in SOHeader.SOReviewRec.ManualNotes">
                                             <span> 
                                                 {{notes}} 
                                                 <i class="fa fa-times" ng-click="CustomerOrderModel.removeNotesFromMultiSelect($index, $parent.$index, 'ManualNotes')"
                                                 	ng-if="!(SOHeader.SOHeaderInfo.WorkStatus == 'Reviewed' ||
                                                			SOHeader.SOHeaderInfo.WorkStatus == 'Signed Out' || 
                                                			CustomerOrderModel.coHeaderDetails.OrderStatus == 'Closed')"></i>
                                             </span>
                                         </div>
                                         <input type="text" class="mytxtbox form-control" id="txtconcern" ng-model="SOHeader.SOReviewRec.NewNote" 
                                             ng-attr-tabindex="{{CustomerOrderModel.tabIndexValue + ($index * 12) + 13}}" 
                                             ng-disabled="SOHeader.SOHeaderInfo.WorkStatus == 'Reviewed' ||
                                                			SOHeader.SOHeaderInfo.WorkStatus == 'Signed Out' || 
                                                			CustomerOrderModel.coHeaderDetails.OrderStatus == 'Closed'"
                                             placeholder="Add Item" rel="Concern" ng-keydown="CustomerOrderModel.addAndRemoveFromNotesMultiSelect($event, $index, 'NewNote', 'ManualNotes', 'Notes');" />
                                     </div>
                                 </div>
                                
                                
                             </div>
                               
                                 <div class="main_section_COU_Header row" id="ServiceCustomerApprovalSection{{$index}}">
                                <p class="actionRow T2" style="display:inline;">
                                    <span class="sectionText">Customer Approval
                                        <i class="fa fa-plus cou_plus_icon " ng-click="CustomerOrderModel.openCustomerApproval($index)"
                                            ></i>
                                    </span>
                                    <!-- <span class="actionText">Actions</span> -->
                                    <span class="ActionIcons">
                                        <!-- <i class="fa fa-th" ></i> -->
                                        <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Service Order Hours Logged Section"></i>
                                    </span> 
                                </p>
                             </div> 
                             <div class="gid_container_Customer" id="CO_CheckOutGrid_gid_container">
                                <table class="table" id="Service_Order_Customer_Approval">
                                    <col width="2%"  />
                                    <col width="2%"  />
                                    <col width="6%"  />
                                    <col width="15%"  />
                                    <col width="15%"  />
                                    <col width="15%" />
                                    <col width="33%"  />
                                    <col width="10%"  />
                                    <col width="2%"  />
                                  
                                    <tr  class="tableHeader T3 C2"
                                        ng-click="CustomerOrderModel.editHoursLoggedItem(SoHeaderIndex, null)">
                                      <th></th>
                                      <th></th>
                                      <th></th>
                                      <th>APPROVAL</th>
                                      <th>DATE</th>
                                      <th>SOURCE</th>
                                      <th>NOTES</th>
                                      <th>STATUS</th>
                                      <th></th>
                                    </tr>
                                   <tbody ng-repeat="CustomerApproval in SOHeader.CustomerApprovalList"> 
                                    <tr ng-class-even="'C2'" class="clickable_row">
                                         <td style="background:#fff"></td>
                                         <td></td>
                                         <td>
                                              <a href="" class="edite_btn" rel="row1_edit">
                                                  <img src="{!URLFOR($Resource.Images, 'user-3.png')}" class="first_img" /> 
                                              </a>
                                         </td>

                                        <td><a ng-click="CustomerOrderModel.openPendingCustomerApproval(SoHeaderIndex, CustomerApproval.SectionKey, CustomerApproval.ApprovalCount, CustomerApproval.Status)"
                                                style="cursor: pointer;">
                                                {{CustomerApproval.ApprovalId}}
                                            </a>
                                        </td>
                                        <td>{{CustomerApproval.ApprovalDate}}</td>
                                        <td>{{CustomerApproval.SectionName}}</td>
                                        <td>{{CustomerApproval.Notes}}</td>
                                        <td ng-class="{'Requiredtd' : CustomerApproval.Status =='Pending' , 'greenColorBold' : CustomerApproval.Status =='Approved'}">{{CustomerApproval.Status}}</td>
                                        <td style="background:#fff"></td>
                                    </tr>
                                   </tbody>
                                 </table>        
                             </div> 
                            
                              <div class="col-lg-3 col-md-3 col-lg-offset-9 col-md-offset-9">
                                    <button class="btn C11 T4 addmoreinfoBtn active_btn" 
                                              ng-click="CustomerOrderModel.PrintPriview(SOHeader.SOHeaderInfo.Id)" ng-attr-tabindex="{{CustomerOrderModel.tabIndexValue + ($index * 12) + 100}}"
                                              style="margin: auto; width: 80%;">Print Service Order


                                    </button>

                              </div>
                          </div>
                      </div> 


                    </div>
              
                    <div class="sectionHeader row"  ng-show="CustomerOrderModel.MerchandiseItems.length > 0 || CustomerOrderModel.MerchandiseGhostItems.length > 0" >
                        <div class="col-lg-4 col-lg-5 PL14">
                            <div class="fixedHeaderText">
                                <span class="headerlabel">
                                <i class="fa fa-angle-right" style="width:10px; padding: 0 3px;"
                                    ng-show="!CustomerOrderModel.displaySections.Merchandise"
                                    ng-Click="CustomerOrderModel.displaySections.Merchandise = true">
                                </i> 
                                <i class="fa fa-angle-down" style="width:10px;"
                                    ng-show="CustomerOrderModel.displaySections.Merchandise"
                                    ng-Click="CustomerOrderModel.displaySections.Merchandise = false">
                                </i> 
                                <span class="divider">|</span>
                                <span class = "headdingFirstText">{{CustomerOrderModel.LeftSideHeadingLables.Merchandise}}</span>
                                <span class="T2"> Merchandise</span>
                                </span>
                                <span class="ActionIcons pull-left">
                                <!-- <div class="dropdown selectDropdown checkboxDropdown">
                                      <button class="btn dropdown-toggle" type="button" data-toggle="dropdown">Actions
                                      <span class="caret"></span></button>
                                </div> -->
                                </span> 
                                <span class="T3  pull-right total">
                                    <a id="CO_Merchandise_total_price_row_h3_a" 
                                        ng-mouseover="CustomerOrderModel.calculateTotalOverlay($event, null, 'merchandise')" 
                                        ng-mouseleave="CustomerOrderModel.hidePriceInfoOverlay()">${{CustomerOrderModel.MerchandiseTotal}} </a>
                                </span>
                            </div>
                        </div>
                    </div>
                
                    <div id="MerchandiseSection"   >
                    
                         <div class="main_section_COU row" ng-show="CustomerOrderModel.displaySections.Merchandise &&  ( CustomerOrderModel.MerchandiseItems.length > 0 || CustomerOrderModel.MerchandiseGhostItems.length > 0)"   >
                            <div class="main_section_COU_Header row" >
                                <p class="actionRow T2">
                                    <span class="sectionText">Items <i class="fa fa-plus cou_plus_icon " ng-click="AddToSearch('Merchandise:')"></i></span>
                                    <!-- <span class="actionText">Actions</span> -->
                                    <span class="ActionIcons">
	                                    <!-- <i class="fa fa-th"></i> -->
	                                    <i class="fa fa-question-circle" data-toggle="tooltip"
	                                                title="Merchandise Items Section"></i>
                                    </span> 
                                </p>
                            </div>
                                
                                 <div class="gid_container_Customer" id="CO_Merchandise_block_grid_container">
                                    <table class="table" id="CustomerOrder_MerchandiseItemGrid">
                                        	<col width="2%"  />
                                            <col width="2%"  />
                                            <col width="3%"  />
                                            <!-- <col width="5%"  /> -->
                                            <col width="38%"  />
                                            <col width="7%"  />
                                            <col width="1%"  />
                                            <col width="7%"  />
                                            <col width="1%"  />
                                            <col width="7%" />
                                            <col width="10%"  />
                                            <col width="10%"  />
                                            <col width="10%"  />
                                            <col width="2%"  />
                                        <thead>
                                            <tr class="tableHeader T3 C2">
                                                <th></th>
                                                <th></th>
                                                <th></th>
                                                <!-- <th></th> -->
                                                <th>Item/Description</th>
                                                <th class="text-center">Need</th>

                                                <th></th>
                                                <th class="text-center">Commited</th>

                                                <th></th>
                                                <th class="text-center">Order</th>
                                                <th class="text-center">STATUS</th>
                                                <th class="text-center">Price</th>
                                                <th class="text-center">Subtotal</th>



                                                <th></th>
                                            </tr>       
                                        </thead>  
                                        
                                        
                                        <tbody ng-repeat="COKHitem  in CustomerOrderModel.MerchandiseItems" class="parentBody" ng-init="COKitHeaderIndex = $index">
                                                <tr ng-show="COKHitem.Id != null && !CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].isEdit"
                                                    ng-click="CustomerOrderModel.editMerchItem($event, COKitHeaderIndex, null, true)"
                                                    ng-class="{'C2' : CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].rowNumber % 2 == 0 }" id="editMerchandicseItem">
                                                    <td class="HG50"></td>
                                                    <td><i class="fa fa-link FC7" style="font-size: 24px;"></i></td>

                                                    <td>
                                                        <img src="{!URLFOR($Resource.Images, 'sparkplug.png')}" style="height: 26px;width: 26px;"/>

                                                    </td>
                                                    <!-- <td>
                                                    	<div class="lable_fields">
	                                                       	<span class="form_lable_icons text"> 100 </span>
                                                     	</div> 
                                                    </td>  -->
                                                    <td>{{COKHitem.ItemDescription}}</td> 
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td class="text-center">{{COKHitem.Price | currency}}</td>  
                                                    <td class="text-center">
                                                        <span>{{COKHitem.Price | currency}}</span>
                                                        <i class="fa fa-lock FC7" ng-show="COKHitem.IsFixedPrice"></i>
                                                        <i class="fa fa-pencil FC7" ng-show="COKHitem.IsFixedKitHeaderCO"></i>

                                                    </td> 
                                                    <td></td>   

                                                </tr>
                                                <tr ng-show="COKHitem.Id != null && CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].isEdit" class="Editable_row"
                                                    ng-class="{'C2' : CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].rowNumber % 2 == 0 }" ng-click="CustomerOrderModel.editMerchItem($event, COKitHeaderIndex, null, true)" id="editMerchItem">
                                                    <td class="HG50"></td>
                                                    <td><i class="fa fa-link FC7" style="font-size: 24px;"></i></td>

                                                    <td>
                                                        <img src="{!URLFOR($Resource.Images, 'sparkplug.png')}" style="height: 26px;width: 26px;"/>

                                                    </td>
                                                    <!-- <td>
                                                    	<div class="lable_fields">
                                                       		<span class="form_lable_icons text"> 100 </span>
                                                     	</div> 
                                                    </td>  -->
                                                    <td>{{COKHitem.ItemDescription}}</td>
                                                    <td></td> 
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td ng-if="COKHitem.IsFixedPrice" class="text-center">{{COKHitem.Price | currency}}</td>
                                                    <td ng-if="!COKHitem.IsFixedPrice">
                                                        <number-only-input input-value="COKHitem.Price" id-val="SOLI_Header_Price_Edit_{{$index}}" 
                                                            ng-keydown="CustomerOrderModel.editRowTabOut($event, COKitHeaderIndex, null)"/>
<!--                                                            <input type="text" ng-model="COKHitem.Price"  -->
<!--                                                            ng-keydown="CustomerOrderModel.editRowTabOutServiceOrderLineItem(SoHeaderIndex,SoKitHeaderIndex,null,$event)"/> -->

                                                        </td>
                                                    <td class="text-center">
                                                        <span>{{COKHitem.Price | currency}}</span>
                                                        <i class="fa fa-lock FC7" ng-show="COKHitem.IsFixedPrice"></i>
                                                        <i class="fa fa-pencil FC7" ng-show="COKHitem.IsFixedKitHeaderCO"></i>

                                                    </td> 
                                                    <td></td>   

                                                </tr>
                                                <tr class="edit_panel sample-show-hide T7" id="merch_item_row{{$index}}_edit"  
                                                    ng-show="COKHitem.Id !=null && CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].isEdit" 
                                                    ng-class="{'C2' : CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].rowNumber % 2 == 0 }" ng-click="CustomerOrderModel.editMerchItem($event, COKitHeaderIndex, null, true)">
                                                        <td style="backgroung-color:#fff"></td>
                                                        <td ng-class="{'BL': COKHitem.hasChildren}" style="background:#fff"></td>
                                                        <td style="background:#fff"></td>
                                                        <!-- <td style="background:#fff"></td> -->
                                                        <td colspan="9" class="edit-service-item" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}" style="padding-left:0px; padding-right:0px;">
                                                           <div class="edit_box serviceitemedit col-md-12 " id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit_box">
                                                              <div class="its-heading" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit_box_its-heading">

                                                                 <i class="fa fa-angle-down"></i>
                                                                  <span>Actions (2 Actions Available)</span>  

                                                              </div>
                                                              <div class="edit-body" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body">

                                                                  <form>
                                                                      <div class="radio" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_radio1">
                                                                        <label ng-click="CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].radioValue = 0">

                                                                          <p class="chk_tick edit-service-chek"
                                                                          ng-class="{'chked' : CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].radioValue == 0 }" >
                                                                            <i class="fa fa-check-square chksqure"></i>

                                                                        </p>
                                                                        <span>Remove From Order</span>
                                                                        </label>
                                                                     </div>
                                                                     <div class="radio" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{SoKitHeaderIndex}}_edit-body_radio1" 
                                                                        ng-if="COKHitem.hasChildren && COKHitem.CanItSplit">
                                                                        <label ng-click="CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].radioValue = 1">
                                                                          <p class="chk_tick edit-service-chek" 
                                                                          ng-class="{'chked' : CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].radioValue == 1 }" >
                                                                            <i class="fa fa-check-square chksqure"></i>
                                                                        </p>
                                                                        <span>Break up Kit (will lose custom kit pricing)</span>
                                                                        </label>
                                                                      </div>
                                                                      
                                                                      <div class="radio" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_radio1"
                                                                        ng-if="COKHitem.hasChildren">
                                                                        <label ng-click="CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].radioValue = 3"
                                                                            ng-disabled="COlitem.isSpecialOrder">
                                                                          <p class="chk_tick edit-service-chek"
                                                                            ng-class="{'chked' : CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].radioValue == 3 }">
                                                                            <i class="fa fa-check-square chksqure"></i>
                                                                        </p>
                                                                        <span class = "width-88">Move To </span>
                                                                            <span class="select_box_container">
                                                                               <select class="form-control" 
                                                                                    ng-options= "section.Id as section.Name    for  section in  CustomerOrderModel.AllSectionList | filter:getSectionToMove('Merchandise')" 
                                                                                    ng-model="CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].MoveTosection"
                                                                                    ng-disabled="COlitem.isSpecialOrder" >
                                                                                </select> 
                                                                            </span>
                                                                        </label>
                                                                      </div>
                                                                      <a href="" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_gobtn" 
                                                                        class="btn btn-default editform_btn" role="button"
                                                                        ng-click="CustomerOrderModel.MerchandiseGoAction(CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].radioValue,
                                                                                COKHitem.Id, null, COKitHeaderIndex, null)">Apply</a>                                
                                                                  </form>
                                                              </div>
                                                           </div>
                                                        </td>
                                                    </tr>
                                                 
                                                    
                                                    <tr ng-repeat-start="COlitem in COKHitem.COLIList" ng-init="COLineItemIndex = $index"
                                                        ng-show="!CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].lineItems[COLineItemIndex].isEdit"
                                                        ng-click="CustomerOrderModel.editMerchItem($event, COKitHeaderIndex, COLineItemIndex, true)"
                                                        ng-class="{'C2' : CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].lineItems[COLineItemIndex].rowNumber % 2 == 0 }" id="editRowCoKit">
                                                        <td class="HG50" ng-class="{'BGFF': COKHitem.hasChildren}"></td>
                                                        <td ng-class="{'BL BGFF': COKHitem.hasChildren}">
                                                            <i ng-class="{'fa fa-link FC7 servicesitem': COKHitem.hasChildren}" >

                                                            </i>
                                                        </td>
                                                        <td>
                                                            <img src="{!URLFOR($Resource.Images, 'sparkplug.png')}" ng-if="COlitem.IsPart" style="height: 26px;width: 26px;"/>
                                                            <img src="{!URLFOR($Resource.Images, 'dollor.png')}" ng-if="COlitem.IsFee" style="height: 26px;width: 26px;border-radius: 13px;"/>  

                                                        </td>
                                                        <!-- <td ng-class="{'BGFF': COKHitem.hasChildren}">
                                                        	<div class="lable_fields">
                                                        		<span class="form_lable_icons text"> 100 </span>
                                                            </div>
                                                         </td> --> 
                                                         <td ng-if="!COlitem.IsPart">



                                                            {{COlitem.Item}}
                                                         </td>
                                                         <td ng-if="COlitem.IsPart">
                                                            <a ng-mouseover="CustomerOrderModel.openpartpopup($event, COlitem.partId);" ng-mouseleave="CustomerOrderModel.hidePartPopUp();">{{COlitem.Item}}</a>
                                                            <span class="Infonotification" ng-if="COlitem.Status=='Ordered'" > 
                                                                 Special Order generated
                                                            </span>
                                                             <span class="notification" ng-if="COlitem.AvaliablePartsQty < 0 && COlitem.Status !='Ordered'" > 
                                                                 {{COlitem.Qty > COlitem.QtyCommitted ? 'Action Required (not enough stock)' : ''}}

                                                            </span>
                                                            <span class="AvalaibleQtyNotification"  ng-if="COlitem.AvaliablePartsQty > 0 && COlitem.Status=='Required'">
                                                                    {{COlitem.AvaliablePartsQty}} More Available Click To Add Save

                                                            </span>
                                                            <span class="Infonotification" ng-if="COlitem.Status=='In Stock'" > 
                                                                 &nbsp;
                                                            </span>
                                                         </td>
                                                         <td class="text-center">{{COlitem.Qty}}</td>
                                                         <td></td>
                                                         <td class="text-center" >{{COlitem.IsPart ? COlitem.QtyCommitted: "" }}</td>
                                                         <td></td>
                                                         <td class="text-center"  > {{COlitem.IsPart ? COlitem.QtyOrder:"" }} </td>
                                                         <td class="text-center" ng-class="{'Requiredtd' : COlitem.Status =='Required' || COlitem.Status =='RETURN', 'blueColor' : COlitem.Status =='Invoiced', 'greenColor' : COlitem.Status =='Ordered'}">{{COlitem.Status}} </td>
                                                         <td class="text-center">{{COlitem.Price | currency}}</td>
                                                         <td class="text-center">
                                                            <span ng-if="COlitem.SubTotal == null">{{(COlitem.Qty * COlitem.Price) | currency}}</span>
                                                            <span ng-if="COlitem.SubTotal != null">{{COlitem.SubTotal | currency }}</span>
                                                            <i class="fa fa-lock FC7" ng-show="COlitem.IsFixedPrice"></i>
                                                            <i class="fa fa-pencil FC7" ng-show="COlitem.IsFixedPriceForCO"></i>

                                                         </td>
                                                         <td style="background-color: #FFF;"></td>

                                                   </tr>
                                                    <tr ng-show="CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].lineItems[COLineItemIndex].isEdit"
                                                        ng-class="{'C2' : CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].lineItems[COLineItemIndex].rowNumber % 2 == 0 }" ng-click="CustomerOrderModel.editMerchItem($event, COKitHeaderIndex, null, true)">
                                                        <td class="HG50" ng-class="{'BGFF': COKHitem.hasChildren}"></td>
                                                        <td ng-class="{'BL BGFF': COKHitem.hasChildren}">   
                                                            <i ng-class="{'fa fa-link FC7 servicesitem': COKHitem.hasChildren}" >


                                                            </i>
                                                        </td>
                                                        <td ng-class="{'BGFF': COKHitem.hasChildren}">
                                                            <img src="{!URLFOR($Resource.Images, 'sparkplug.png')}" ng-if="COlitem.IsPart" style="height: 26px;width: 26px;"/>
                                                            <img src="{!URLFOR($Resource.Images, 'dollor.png')}" ng-if="COlitem.IsFee" style="height: 26px;width: 26px;border-radius: 13px;"/>  

                                                        </td>
                                                        <!-- <td ng-class="{'BGFF': COKHitem.hasChildren}">
                                                        	<div class="lable_fields">
                                                        		<span class="form_lable_icons text"> 100 </span>
                                                            </div>
                                                        </td>  -->

                                                         <td><a ng-mouseover="CustomerOrderModel.openpartpopup($event, COlitem.partId);" ng-mouseleave="CustomerOrderModel.hidePartPopUp();">{{COlitem.Item}}</a></td>


                                                         <td ng-if="!(COlitem.IsFixedPrice || COKHitem.hasChildren)">
                                                            <number-only-input input-value="COlitem.Qty" id-val="SOLI_Qty_Needed_Edit_{{$index}}"  include-negative="true"
                                                                ng-keydown="CustomerOrderModel.editRowBlur($event, COKitHeaderIndex, COLineItemIndex, 'COLI_Qty_Needed_Edit_'+COKitHeaderIndex+'_'+COLineItemIndex)"/>

                                                         </td>
                                                         <td ng-if="(COlitem.IsFixedPrice || COKHitem.hasChildren)" class="text-center">{{COlitem.Qty}}</td>

                                                         
                                                         <td><span ng-if="!COlitem.IsFixedPrice  && COlitem.IsPart">=</span></td>

                                                         
                                                         <td class="text-center">
                                                            <div ng-if="COKHitem.hasChildren">
                                                                <span ng-if="COlitem.IsPart">
                                                                     {{COlitem.QtyCommitted}}

                                                                </span>
                                                                <span ng-if="COlitem.IsFee"></span> 

                                                            </div>
                                                            <div ng-if="!COKHitem.hasChildren">
                                                                <div ng-if="COlitem.IsPart && !COlitem.IsFixedPrice && COlitem.Qty > 0">
                                                                    <number-only-input input-value="COlitem.QtyCommitted"  include-zero="true"
                                                                id-val="COLI_Qty_Needed_Edit_{{COKitHeaderIndex}}_{{COLineItemIndex}}"   
                                                                 ng-keydown="CustomerOrderModel.editRowBlurCommited($event, COKitHeaderIndex, COLineItemIndex, 'COLI_Qty_Needed_Edit_'+COKitHeaderIndex+'_'+COLineItemIndex)"/>


                                                                </div>
                                                                <div ng-if="!(COlitem.IsPart && !COlitem.IsFixedPrice)">
                                                                    {{COlitem.QtyCommitted}}



                                                                </div>
                                                            </div>
                                                         </td>
<!--                                                         <td class="text-center" ng-if="COlitem.IsPart && COlitem.IsFixedPrice"> {{COlitem.QtyCommitted}}</td> -->
<!--                                                         <td class="text-center" ng-if="COlitem.IsFee"></td> -->
                                                         <td><span ng-if="!COlitem.IsFixedPrice && COlitem.IsPart">+</span></td>
                                                         <td class="text-center">{{COlitem.IsPart ? COlitem.QtyOrder:"" }}</td>
                                                         <td class="text-center" ng-class="{'Requiredtd' : COlitem.Status =='Required', 'blueColor' : COlitem.Status =='Invoiced', 'greenColor' : COlitem.Status =='Ordered'}">{{COlitem.IsPart ? COlitem.Status : "Ready" }}</td>
                                                         <td ng-if="!COlitem.IsFixedPrice">
                                                            <number-only-input input-value="COlitem.Price" id-val="COLI_Price_Edit_{{$index}}" 
                                                                ng-keydown="CustomerOrderModel.editRowTabOut($event, COKitHeaderIndex, COLineItemIndex)"/>

                                                         </td>
                                                         <td ng-if="COlitem.IsFixedPrice" class="text-center">{{COlitem.Price | currency}}</td>
                                                         <td class="text-center">
                                                            <span ng-if="COlitem.SubTotal == null">{{(COlitem.Qty * COlitem.Price) | currency}}</span>
                                                            <span ng-if="COlitem.SubTotal != null">{{COlitem.SubTotal | currency }}</span>
                                                            <i class="fa fa-lock FC7" ng-show="COlitem.IsFixedPrice"></i>
                                                            <i class="fa fa-pencil FC7" ng-show="COlitem.IsFixedPriceForCO"></i>

                                                         </td>
                                                         <td style="background-color: #FFF;"></td>


                                                   </tr>
                                                        
                                                  <tr ng-show="CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].lineItems[COLineItemIndex].isEdit && !COlitem.IsLabour && !COlitem.IsFee" ng-click="CustomerOrderModel.editMerchItem($event, COKitHeaderIndex, null, true)">
                                                             <td style="background:#fff"></td>
                                                             <td style="background:#fff" ng-class="{'BL': COKHitem.hasChildren}"></td>
                                                             <td style="background:#fff"></td>
                                                             <!-- <td style="background:#fff"></td> -->
                                                             <td class="available_td" colspan="9" style="padding-left:0px;padding-right:0px;">
                                                                     <div class="show_Availableline" ng-if="COlitem.AvaliablePartsQty > 0">  
                                                                           AVAILABLE INVENTORY: {{COlitem.AvaliablePartsQty}} 

                                                                     </div>
                                                                     <div class="show_Availableline bgRed" ng-if="COlitem.AvaliablePartsQty <= 0">  
                                                                           AVAILABLE INVENTORY: {{COlitem.AvaliablePartsQty}} - OUT OF STOCK
                                                                     </div>
                                                              </td> 
                                                              <td style="background:#fff"></td>
                                                    </tr>
                                                  <tr ng-repeat-end="ng-repeat-end" class="edit_panel sample-show-hide T7" id="merch_item_row{{$index}}_edit"
                                                      ng-show="CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].lineItems[COLineItemIndex].isEdit" ng-click="CustomerOrderModel.editMerchItem($event, COKitHeaderIndex, null, true)">
                                                        <td style="backgroung-color:#fff"></td>
                                                        <td ng-class="{'BL': COKHitem.hasChildren}" style="background:#fff"></td>
                                                        <td style="background:#fff"></td>
                                                        <!-- <td style="background:#fff"></td> -->
                                                        <td colspan="9" class="edit-service-item" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}" style="padding-left:0px; padding-right:0px;">
                                                           <div class="edit_box serviceitemedit col-md-12 " id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit_box">
                                                              <div class="its-heading" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit_box_its-heading">

                                                                 <i class="fa fa-angle-down"></i>
                                                                  <span>Actions (2 Actions Available)</span> 

                                                              </div>
                                                              <div class="edit-body" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body">

                                                                  <form>
                                                                      <div class="radio" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_radio1" ng-if="COlitem.Status !='Ordered'">
                                                                        <label ng-click="CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].lineItems[COLineItemIndex].radioValue = 0">
                                                                          <p class="chk_tick edit-service-chek"
                                                                          ng-class="{'chked' : CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].lineItems[COLineItemIndex].radioValue == 0 }" >
                                                                            <i class="fa fa-check-square chksqure"></i>
                                                                        </p>
                                                                        <span>Remove From Order </span>
                                                                        </label>
                                                                     </div>
                                                                     <div class="radio" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_radio1" 

                                                                        ng-if="COKHitem.hasChildren">
                                                                        <label ng-click="CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].lineItems[COLineItemIndex].radioValue = 1">

                                                                          <p class="chk_tick edit-service-chek" 
                                                                          ng-class="{'chked' : CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].lineItems[COLineItemIndex].radioValue == 1 }"> 
                                                                            <i class="fa fa-check-square chksqure"></i>
                                                                        </p>
                                                                        <span>Break up Kit</span>
                                                                        </label>
                                                                      </div>
                                                                     <div class="radio" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_radio1"
                                                                        ng-if="!COKHitem.hasChildren && !COlitem.IsLabour && !COlitem.IsFee && COlitem.Status !='RETURN'">
                                                                        <label ng-click="CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].lineItems[COLineItemIndex].radioValue = 2"
                                                                            ng-disabled="COlitem.isSpecialOrder">

                                                                          <p class="chk_tick edit-service-chek"
                                                                            ng-class="{'chked' : CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].lineItems[COLineItemIndex].radioValue == 2 }">
                                                                            <i class="fa fa-check-square chksqure"></i>
                                                                        </p>
                                                                        <span>Special Order</span>
                                                                            <span class="select_box_container">
                                                                                <select class="form-control" 
                                                                                    ng-options="VOHeaderList.VOId as VOHeaderList.VOName for  VOHeaderList in CustomerOrderModel.VendorOrderListByVendorIdForMerchandise"
                                                                                    ng-model="CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].lineItems[COLineItemIndex].optionSelected"
                                                                                    ng-disabled="COlitem.isSpecialOrder" >
                                                                                </select>
                                                                            </span>
                                                                        </label>
                                                                      </div>
                                                                      <div class="radio" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_radio1"
                                                                        ng-if="!COKHitem.hasChildren">
                                                                        <label ng-click="CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].lineItems[COLineItemIndex].radioValue = 3">
                                                                          <p class="chk_tick edit-service-chek"
                                                                            ng-class="{'chked' : CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].lineItems[COLineItemIndex].radioValue == 3 }">
                                                                            <i class="fa fa-check-square chksqure"></i>
                                                                        </p>
                                                                        <span class = "width-88">Move To </span>
                                                                            <span class="select_box_container">
                                                                               <select class="form-control" 
                                                                                    ng-options= "section.Id as section.Name    for  section in  CustomerOrderModel.AllSectionList | filter:getSectionToMove('Merchandise')" 
                                                                                    ng-model="CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].lineItems[COLineItemIndex].MoveTosection" >
                                                                                </select> 
                                                                            </span>
                                                                        </label>
                                                                      </div>
                                                                      <a href="" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_gobtn" 
                                                                        class="btn btn-default editform_btn" role="button"
                                                                        ng-click="CustomerOrderModel.MerchandiseGoAction(CustomerOrderModel.MerchandiseItems_editRow[COKitHeaderIndex].lineItems[COLineItemIndex].radioValue, 
                                                                                    COKHitem.Id, COlitem.CoLineItemId, COKitHeaderIndex, COLineItemIndex)">Apply</a>                                                                  </form>
                                                              </div>
                                                           </div>
                                                        </td>
                                                    </tr>
                                        
                                            </tbody>
                                            
                                          
                                            
                                            
                                            
                                            
                                            
                                            
                                            
                                           <!-- 
                                            
                                            
                                            
                                        <tbody  ng-repeat="merchItem in CustomerOrderModel.MerchandiseItems" >
                                            <tr class="clickable_row T7" id="row1" rel="merch_item_row{{$index}}_edit"  ng-click="CustomerOrderModel.editMerchItem($event, $index)"
                                                ng-blur = "CustomerOrderModel.editMerchItem($event, $index)"
                                                ng-show="!CustomerOrderModel.MerchandiseItems_editRow[$index].isEdit" ng-class-even="'C2'">
                                                <td style="background-color:#fff"></td>
                                                <td id="CO_Merchandise_block_grid_container_tbody_tr_td_1_{{$index}}">
                                                    <a href="" class="edite_btn" rel="row1_edit">
                                                        <img src="{!URLFOR($Resource.Images, 'star.png')}" class="first_img" /> 
                                                    </a>
                                                </td>
                                                
                                                <td id="CO_Merchandise_block_grid_container_tbody_tr_td_2_{{$index}}">

                                                    <a href="" class="edite_btn" rel="row1_edit" ng-show="merchItem.AvaliablePartsQty ==0 && merchItem.Status !='Ordered'">
                                                        <img src="{!URLFOR($Resource.icon_images, 'images/edit_icon.png')}" Class="img_action" Style="margin-top: 10px;"/>
                                                    </a>
                                                </td>
                                                <td id="CO_Merchandise_block_grid_container_tbody_tr_td_3_{{$index}}">

                                                    <u>{{merchItem.Item}}</u>
                                                    <span class="Infonotification" ng-if="merchItem.Status=='Ordered'" > 
                                                         Special Order generated
                                                    </span>
                                                     <span class="notification" ng-if="merchItem.AvaliablePartsQty ==0 && merchItem.Status !='Ordered'" > 
                                                         {{merchItem.Qty > merchItem.QtyCommitted ? 'Action Required (not enough stock)' : ''}}
                                                    </span>
                                                    <span class="AvalaibleQtyNotification"  ng-if="merchItem.AvaliablePartsQty != 0 && merchItem.Status=='Required'">
                                                            {{merchItem.AvaliablePartsQty}} More Available Click To Add Save
                                                    </span>
                                                    <span class="Infonotification" ng-if="merchItem.Status=='In Stock'" > 
                                                         &nbsp;
                                                    </span>
                                                </td>
                                                <td id="CO_Merchandise_block_grid_container_tbody_tr_td_4_{{$index}}">{{merchItem.Qty | number:2}}</td>
                                                <td id="CO_Merchandise_block_grid_container_tbody_tr_td_5_{{$index}}">{{merchItem.QtyCommitted | number:2}}</td>
                                                <td id="CO_Merchandise_block_grid_container_tbody_tr_td_9_{{$index}}">{{merchItem.Qty - merchItem.QtyCommitted | number:2}}</td>
                                                <td id="CO_Merchandise_block_grid_container_tbody_tr_td_6_{{$index}}" ng-class="{'Requiredtd' : merchItem.Status =='Required' || merchItem.Status =='Ordered'}">
                                                    <span ng-if="merchItem.Status == 'In Stock'">Ready</span>
                                                    <span ng-if="merchItem.Status == 'Required'">Need to Order</span>
                                                    <span ng-if="merchItem.Status == 'Ordered'">Ordered</span>
                                                    <span ng-if="merchItem.Status == 'Received'">Ready</span>
                                                    <span ng-if="merchItem.Status == 'Invoiced'">{{merchItem.Invoice}}</span>
                                                </td>
                                                <td id="CO_Merchandise_block_grid_container_tbody_tr_td_7_{{$index}}" class="T3"> ${{merchItem.Price | number:2}}</td>
                                                <td id="CO_Merchandise_block_grid_container_tbody_tr_td_8_{{$index}}" class="T3"> ${{merchItem.SubTotal | number:2}}</td>
                                                <td style="background-color:#fff"></td>  
                                        
                                                
                                            </tr>
                                            <tr ng-show="CustomerOrderModel.MerchandiseItems_editRow[$index].isEdit" 
                                                class="Editable_row T7">
                                                <td style="background-color:#fff"></td>
                                                <td id="CO_Merchandise_block_grid_container_tbody_edittr_td_1_{{$index}}">
                                                    <a href="" class="edite_btn" rel="row1_edit">
                                                        <img src="{!URLFOR($Resource.Images, 'star.png')}" class="first_img" /> 
                                                    </a>
                                                </td>
                                                <td id="CO_Merchandise_block_grid_container_tbody_edittr_td_2_{{$index}}">
                                                    <a href="" class="edite_btn" rel="srow1_edit" ng-show="merchItem.AvaliablePartsQty ==0 && merchItem.Status !='Ordered'">
                                                         <img src="{!URLFOR($Resource.icon_images, 'images/edit_icon.png')}" Class="img_action" Style="margin-top: 10px;"/>
                                                   </a>
                                                </td>

                                                <td id="CO_Merchandise_block_grid_container_tbody_edittr_td_3_{{$index}}"><u>{{merchItem.Item}}</u>
                                                     <span class="Infonotification" ng-if="merchItem.Status=='Ordered'" > 
                                                         Special Order generated
                                                    </span>
                                                     <span class="notification" ng-if="merchItem.AvaliablePartsQty ==0 && merchItem.Status !='Ordered'" > 
                                                         {{merchItem.Qty > merchItem.QtyCommitted ? 'Action Required (not enough stock)' : ''}}
                                                    </span>
                                                    <span class="AvalaibleQtyNotification"  ng-if="merchItem.AvaliablePartsQty != 0 && merchItem.Status=='Required'">
                                                            {{merchItem.AvaliablePartsQty}} More Available Click To Add Save
                                                    </span>
                                                    <span class="Infonotification" ng-if="merchItem.Status=='In Stock'" > 
                                                         &nbsp;
                                                    </span>
                                                </td> 
                                                <td id="CO_Merchandise_block_grid_container_tbody_edittr_td_4_{{$index}}" ng-if="merchItem.isSpecialOrder || merchItem.Invoice !=''">{{merchItem.Qty | number:2}}</td>
                                                <td id="CO_Merchandise_block_grid_container_tbody_edittr_td_4_{{$index}}" ng-if="!merchItem.isSpecialOrder &&  merchItem.Invoice ==''">
                                                    <number-only-input input-value="merchItem.Qty" id-val="merchandise_quantity_{{$index}}" ng-keydown="CustomerOrderModel.editRowBlur($event, $index, 'merchandise_quantity_Committed_'+$index)"/> 
                                                    <span style="float:left; margin:5px;">=</span>

                                                </td>

                                                
                                                <td id="CO_Merchandise_block_grid_container_tbody_edittr_td_5_{{$index}}" ng-if="merchItem.isSpecialOrder || merchItem.Invoice !='' ">{{merchItem.QtyCommitted | number:2}}</td>
                                                <td id="CO_Merchandise_block_grid_container_tbody_edittr_td_5_{{$index}}" ng-if="!merchItem.isSpecialOrder &&  merchItem.Invoice =='' ">
                                                    <number-only-input input-value="merchItem.QtyCommitted" id-val="merchandise_quantity_Committed_{{$index}}" /> 
                                                    <span style="float:left; margin:5px;">+</span>

                                                </td>

                                                <td id="CO_Merchandise_block_grid_container_tbody_tr_td_9_{{$index}}">{{merchItem.Qty - merchItem.QtyCommitted | number:2}}</td>
                                               
                                    
                                                <td id="CO_Merchandise_block_grid_container_tbody_edittr_td_6_{{$index}}"  ng-class="{'Requiredtd' : merchItem.Status =='Required'  || merchItem.Status =='Ordered'}">
                                                    <span ng-if="merchItem.Status == 'In Stock'">Ready</span>
                                                                <span ng-if="merchItem.Status == 'Required'">Need to Order</span>
                                                                <span ng-if="merchItem.Status == 'Ordered'">Ordered</span>
                                                                <span ng-if="merchItem.Status == 'Received'">Ready</span>
                                                                <span ng-if="merchItem.Status == 'Invoiced'">{{merchItem.Invoice}}</span>
                                                </td>
                                                <td id="CO_Merchandise_block_grid_container_tbody_edittr_td_7_{{$index}}" ng-if="merchItem.isSpecialOrder || merchItem.Invoice !=''" style="font-weight: bold;"> ${{merchItem.Price | number:2}}</td>
                                                <td id="CO_Merchandise_block_grid_container_tbody_edittr_td_7_{{$index}}" ng-if="!merchItem.isSpecialOrder &&  merchItem.Invoice =='' ">
                                                    <price-only-input-customer-order input-value="merchItem.Price" id-val="merchandise_Price_{{$index}}"
                                                        ng-keydown="CustomerOrderModel.editRowTabOut($event, $index)"/></td>

                                                <td id="CO_Merchandise_block_grid_container_tbody_edittr_td_8_{{$index}}" class="T3">${{merchItem.SubTotal | number:2}} </td>
                                             
                                            <td style="background-color:#fff"></td>
                                            </tr>
                                            <tr ng-show="CustomerOrderModel.MerchandiseItems_editRow[$index].isEdit" class="edit_panel sample-show-hide T7" id="merch_item_row{{$index}}_edit">
                                              <td style="backgroung-color:#fff"></td>
                                              <td colspan="7" id="CO_Merchandise_block_grid_container_tbody_expandtr_td_1_{{$index}}">

                                                 <div id="CO_Merchandise_block_grid_container_tbody_expandtr_edit_box_{{$index}}" class="edit_box col-lg-9 col-md-9" ng-show="CustomerOrderModel.MerchandiseItems_editRow[$index].isEdit">
                                                    <div class="its-heading" id="CO_Merchandise_block_grid_container_tbody_expandtr_edit_box_its-heading_{{$index}}">

                                                        <img src="{!URLFOR($Resource.icon_images, 'images/edit_icon.png')}" styleClass="img_action"/>
                                                        <span>{{merchItem.Status == 'Required'  || merchItem.Status  == 'Ordered' ? 'Actions (2 Actions Available)' : 'Actions (1 Actions Available)'}}</span>
                                                    </div>



                                                    <div id="CO_Merchandise_block_grid_container_tbody_expandtr_edit_box_its-heading_edit-body_{{$index}}" class="edit-body">

                                                        <form>
                                                            <div class="radio" id="CO_Merchandise_block_grid_container_tbody_expandtr_edit_box_its-heading_edit-body_{{$index}}_radio_1">
                                                              <label ng-click="CustomerOrderModel.MerchandiseItems_editRow[$index].radioValue = 1">
                                                                <p class="chk_tick edit-service-chek"
                                                                       ng-class="{'chked' : CustomerOrderModel.MerchandiseItems_editRow[$index].radioValue == 1 }" >
                                                                    <i class="fa fa-check-square chksqure"></i>

                                                                </p>
                                                                <span>Remove From Order </span>

                                                              </label>
<!--                                                               <label> -->
<!--                                                                 <input type="radio" name="optionsRadios" id="optionsRadios2" value="1" ng-disabled="merchItem.isSpecialOrder"  -->
<!--                                                                 ng-model= "CustomerOrderModel.MerchandiseItems_editRow[$index].radioValue"/> -->
<!--                                                                 <span>Remove From Order</span> -->
<!--                                                               </label> 
                                                            </div>



                                                            <div class="radio" id="CO_Merchandise_block_grid_container_tbody_expandtr_edit_box_its-heading_edit-body_{{$index}}_radio_2" ng-if="merchItem.Status == 'Required' || merchItem.Status == 'Ordered'">

                                                              <label ng-click="CustomerOrderModel.MerchandiseItems_editRow[$index].radioValue = 2">
                                                                <p class="chk_tick edit-service-chek"
                                                                       ng-class="{'chked' : CustomerOrderModel.MerchandiseItems_editRow[$index].radioValue == 2 }" >
                                                                    <i class="fa fa-check-square chksqure"></i>

                                                                </p>
<!--                                                                 <input type="radio" name="optionsRadios" id="optionsRadios2" value="2" ng-disabled="merchItem.isSpecialOrder" -->
<!--                                                                 ng-model= "CustomerOrderModel.MerchandiseItems_editRow[$index].radioValue"/> 
                                                                <span>Special Order :</span> 
                                                                <span class="select_box_container">
                                                                    <select class="form-control" ng-disabled="merchItem.isSpecialOrder" 
                                                                        ng-class="{'red_border' : CustomerOrderModel.MerchandiseItems_editRow[$index].isError == true}"
                                                                        ng-options="item.VOHeaderId as item.VOHeaderName for item in merchItem.VOHeaderList" 
                                                                        ng-model="CustomerOrderModel.MerchandiseItems_editRow[$index].optionSelected"
                                                                        ng-change="CustomerOrderModel.MerchandiseItems_editRow[$index].radioValue = 2">
                                                                    </select>
                                                                    
                                                                </span>
                                                                
                                                              </label>
                                                            </div>


                                                           <a href="" id="CO_Merchandise_block_grid_container_tbody_expandtr_edit_box_its-heading_edit-body_{{$index}}_go_btn" class="btn btn-default editform_btn" role="button"

                                                            ng-click="CustomerOrderModel.MerchandiseGoAction($index)" ng-disabled="merchItem.isSpecialOrder">Go</a>                                
                                                        </form>
                                                    </div>

                                                 </div>
                                                 
                                              </td>
                                              <td style="backgroung-color:#fff"></td>   
                                            </tr>
                                        </tbody>
                                            <tr class="clickable_row T7 disabledTr" id="row1" 
                                                ng-repeat="merchghostItem in CustomerOrderModel.MerchandiseGhostItems" 
                                                ng-if="CustomerOrderModel.MerchandiseGhostItems">
                                                
                                                <td style="backgroung-color:#fff"></td>
                                                <td id="CO_Merchandise_block_grid_container_ghost_row_tr_td_1{{$index}}">
                                                    <a href="" class="Ghost_row edite_btn" rel="row1_edit">
                                                        <img src="{!URLFOR($Resource.Images, 'star.png')}" class="first_img" /> 
                                                    </a>
                                                </td>
                                                <td id="CO_Merchandise_block_grid_container_ghost_row_tr_td_2{{$index}}" class="Ghost_row">
                                                    <a href="" class="edite_btn" rel="row1_edit">
                                                        <img src="{!URLFOR($Resource.icon_images, 'images/edit_icon.png')}" Class="img_action" Style="margin-top: 10px;"/>
                                                    </a>
                                                </td>
                                                <td id="CO_Merchandise_block_grid_container_ghost_row_tr_td_3{{$index}}" class="Ghost_row">
                                                    <u>{{merchghostItem.Item}}</u>
                                                </td >
                                                <td  id="CO_Merchandise_block_grid_container_ghost_row_tr_td_4{{$index}}" class="Ghost_row">{{merchghostItem.Qty | number:2}}</td>
                                                <td  id="CO_Merchandise_block_grid_container_ghost_row_tr_td_5{{$index}}" class="Ghost_row">{{merchghostItem.QtyCommitted | number:2}}</td>
                                                <td id="CO_Merchandise_block_grid_container_tbody_tr_td_9_{{$index}}">{{merchghostItem.Qty - merchghostItem.QtyCommitted | number:2}}</td>

                                                <td  id="CO_Merchandise_block_grid_container_ghost_row_tr_td_6{{$index}}" class="Ghost_row" ng-class="{'Requiredtd' : merchItem.Status =='Required'}">{{merchItem.Status}}</td>
                                                <td  id="CO_Merchandise_block_grid_container_ghost_row_tr_td_7{{$index}}" class="Ghost_row T3">${{merchghostItem.Price | number:2}}</td>
                                                <td  id="CO_Merchandise_block_grid_container_ghost_row_tr_td_8{{$index}}" class="Ghost_row T3">${{merchghostItem.SubTotal | number:2}}</td>


<!--                                                 <td  id="CO_Merchandise_block_grid_container_ghost_row_tr_td_9{{$index}}" class="Ghost_row"><u>{{merchghostItem.Invoice}}</u>{{merchghostItem.FulfillDate}}</td> 
                                                <td style="backgroung-color:#fff"></td>
                                           </tr>
                                           
                                            --> 
                                    </table>
                                </div>
                            <div class="col-lg-3 col-md-3 col-lg-offset-9 col-md-offset-9">
                                    <button class="btn C11 T4 addmoreinfoBtn active_btn" 
                                              ng-click="CustomerOrderModel.PrintPriviewMerchandise(CustomerOrderModel.coHeaderId)" ng-attr-tabindex="{{CustomerOrderModel.tabIndexValue + ($index * 12) + 101}}"
                                              style="margin: auto; width: 80%;">Print Merchandise Order


                                    </button>
                              </div>
                        </div>
                    </div>
                
            
                    <div class="sectionHeader row" ng-show="CustomerOrderModel.SpecialOrder.length > 0" >
                        <div class="col-lg-4 col-lg-5 PL14">
                            <div class="fixedHeaderText">
                                <span class="headerlabel">
                                <i class="fa fa-angle-right" style="width:10px; padding: 0 3px;"
                                    ng-show="!CustomerOrderModel.displaySections.SpecialOrder"
                                    ng-Click="CustomerOrderModel.displaySections.SpecialOrder = true">
                                </i> 
                                <i class="fa fa-angle-down" style="width:10px;"
                                    ng-show="CustomerOrderModel.displaySections.SpecialOrder"
                                    ng-Click="CustomerOrderModel.displaySections.SpecialOrder = false">
                                </i> 
                                <span class="divider">|</span>
                                <span class = "headdingFirstText">{{CustomerOrderModel.LeftSideHeadingLables.Special_Orders}}</span>
                                <span class="T2"> Special Orders</span>
                                </span>
                                <span class="ActionIcons pull-left">
                                <div class="dropdown selectDropdown checkboxDropdown">
                                      <button class="btn dropdown-toggle" type="button" data-toggle="dropdown">Actions
                                      <span class="caret"></span></button>
                                </div>
                                </span> 
                               
                            </div>
                        </div>
                    </div>
                    <div id="SpecialOrderSection">

                    

                         <div class="main_section_COU row" ng-show="CustomerOrderModel.displaySections.SpecialOrder && CustomerOrderModel.SpecialOrder.length >0 ">
                            <div class="main_section_COU_Header row" >
                                <p class="actionRow T2">
                                    <span class="sectionText">Special Orders <i class="fa fa-plus cou_plus_icon " ng-click="AddToSearch('Special Orders:')"></i></span>

                                    <!-- <span class="actionText">Actions</span> -->
                                    <span class="ActionIcons">
                                    <!-- <i class="fa fa-th"></i> -->
                                    <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Special Order Section"></i>
                                    </span> 
                                </p>
                            </div>
                                
                                 <div class="gid_container_Customer" id="CO_Merchandise_block_grid_container">
                                    <table class="table" id="CustomerOrder_SpecialOrderItemGrid">
                                            <col width="2%"  />
                                            <col width="2%"  />
                                            <col width="3%"  />
                                            <!-- <col width="5%"  /> -->
                                            <col width="33%"  />
                                            <col width="7%"  />
                                            <col width="10%"  />
                                            <col width="12%"  />
                                            <col width="9%" />
                                            <col width="12%"  />
                                            <col width="8%"  />
                                            <col width="2%"  />
                                        <thead>
                                            <tr class="tableHeader T3 C2">
                                               <th></th>
                                               <th></th>
                                               <th></th>
                                               <!-- <th></th> -->
                                               <th>ITEM/DESC</th>
                                               <th class="text-center">QTY REQ</th>
                                               <th class="text-center">STATUS</th>
                                               <th class="text-center">PO</th>
                                               <th class="text-center">PO STATUS</th>
                                               <th class="text-center">EXPECTED DELIVERY</th>
                                               <th class="text-center">ETA</th>
                                               <th></th>
                                            </tr> 
                                        </thead>  
                                        
                                        
                                    <tbody ng-repeat="specialOrderItem  in CustomerOrderModel.SpecialOrder" ng-init="specialorderindex = $index" class="parentBody">
                                                <tr ng-click="CustomerOrderModel.editSpecialOrderItem($index,$event)">
                                                    <td class="HG50"></td>
                                                    <td></td>
                                                    <td>
                                                        <img src="{!URLFOR($Resource.Images, 'sparkplug.png')}" style="height: 26px;width: 26px;"/>

                                                    </td>
                                                    <!-- <td>
                                                    	<div class="lable_fields">
                                                       		<span class="form_lable_icons text"> 100 </span>
                                                     	</div> 
                                                    </td> -->
                                                    <td><a ng-mouseover="CustomerOrderModel.openpartpopup($event, specialOrderItem.PartId);" ng-mouseleave="CustomerOrderModel.hidePartPopUp();">{{specialOrderItem.Item}}</a>
                                                    </td>
                                                    <td class="text-center">{{specialOrderItem.QtyNeeded}}</td> 
                                                    <td class="text-center" ng-class="{'Requiredtd' : specialOrderItem.Status =='Required', 'blueColor' : specialOrderItem.Status =='Invoiced', 'greenColor' : specialOrderItem.Status =='Ordered'}">{{specialOrderItem.Status}}</td>
                                                    <td class="text-center">{{specialOrderItem.PONumber}}</td>
                                                    <td class="text-center"> {{specialOrderItem.POStatus}}</td>
                                                    <td class="text-center">{{specialOrderItem.ExpectedDelivery}}</td>
                                                    <td class="text-center">3 Days</td>
                                                    <td></td>
                                                </tr>
                                                
                                                <tr class="edit_panel sample-show-hide T7" id="merch_item_row{{$index}}_edit"  
                                                    ng-show="CustomerOrderModel.SpecialOrder_editRow[$index].isEdit" ng-class="{'C2' : CustomerOrderModel.SpecialOrder_editRow[specialorderindex].rowNumber % 2 == 0 }" ng-click="CustomerOrderModel.editSpecialOrderItem($index,$event)">
                                                        <td style="backgroung-color:#fff"></td>
                                                        <td ng-class="{'BL': specialOrderItem.hasChildren}" style="background:#fff"></td>
                                                        <td style="background:#fff"></td>
                                                        <!-- <td style="background:#fff"></td> -->
                                                        <td colspan="7" class="edit-service-item" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}" style="padding-left:0px; padding-right:0px;">
                                                           <div class="edit_box serviceitemedit col-md-12 " id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit_box">
                                                              <div class="its-heading" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit_box_its-heading">

                                                                 <i class="fa fa-angle-down"></i>
                                                                  <span>Actions (1 Action Available)</span>  

                                                              </div>
                                                              <div class="edit-body" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body">

                                                                  <form>
                                                                      <div class="radio" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_radio1">
                                                                        <label>

                                                                          <p class="chk_tick edit-service-chek chked">
                                                                            <i class="fa fa-check-square chksqure"></i>

                                                                        </p>
                                                                        <span>Add to PO</span>
                                                                        <span class="select_box_container">
                                                                                 <select class="form-control" 
                                                                                    ng-options="VOHeaderList.VOId as VOHeaderList.VOName for  VOHeaderList in CustomerOrderModel.VendorOrderListByVendorIdForSpecialOrder"
                                                                                    ng-model="CustomerOrderModel.SpecialOrder_editRow[specialorderindex].optionSelected"
                                                                                    >
                                                                                </select>
                                                                            </span>
                                                                        </label>
                                                                     </div>
                                                                     <a href="" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_gobtn" 
                                                                        class="btn btn-default editform_btn" role="button"   ng-click="CustomerOrderModel.createNewSpecialorder(specialOrderItem.PartId , specialOrderItem.COLineItemId , CustomerOrderModel.SpecialOrder_editRow[specialorderindex].optionSelected);">Apply</a>                                
                                                                  </form>
                                                              </div>
                                                           </div>
                                                        </td>
                                                        <td></td>
                                                    </tr>
                                            </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
<!--                
old SpecialorderSection
     <div id="SpecialOrderSection" >
                        <div class="main_section_COU row" ng-show="CustomerOrderModel.displaySections.SpecialOrder && CustomerOrderModel.SpecialOrder.length >0 ">
                            <div class="main_section_COU_Header row" >
                                <p class="actionRow T2">
                                    <span class="sectionText">Special Orders</span>
                                    <span class="actionText">Actions</span>
                                    <span class="ActionIcons">
                                    <i class="fa fa-th"></i>
                                    <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Special Order Section"></i>
                                    </span> 
                                </p>
                            </div>
                            
                            <div class="gid_container_Customer" id="special_orders">
                                <table class="table" id="CustomerOrder_SpecialOrderGrid">
                                       <col width="1%"  />
                                       <col width="4%"  />
                                       <col width="4%"  />
                                       <col width="27%" />
                                       <col width="10%"  />
                                       <col width="10%" />
                                       <col width="10%" />
                                       <col width="10%"  />
                                       <col width="14%" />
                                       <col width="10%"  />
                                        <col width="1%"  />

                                       <tr class="tableHeader T3 C2" ng-click="CustomerOrderModel.closeEditSpecialOrderRow()">
                                           <th></th>
                                           <th></th>
                                           <th></th>
                                           <th>ITEM/DESC</th>
                                           <th class="text-center">QTY REQ</th>
                                           <th class="text-center">STATUS</th>
                                           <th class="text-center">PO</th>
                                           <th class="text-center">PO STATUS</th>
                                           <th class="text-center">EXPECTED DELIVERY</th>
                                           <th class="text-center">ETA</th>
                                           <th></th>
                                       </tr>
                                        
                                        <tbody  ng-repeat="merchItem in CustomerOrderModel.SpecialOrder" >
                                                <tr ng-show="!CustomerOrderModel.SpecialOrder_editRow[$index].isEdit"
                                                    ng-click="CustomerOrderModel.editSpecialOrderItem($index)"
                                                    class="clickable_row T7" ng-class-even="'C2'" id="row1">
                                                    
                                                    <td style="background-color:#fff"></td>
                                                    <td id="CustomerOrder_SpecialOrderGrid_tbody_tr_td_1_{{$index}}">
                                                        <a href="" class="edite_btn" rel="row1_edit">
                                                            <img src="{!URLFOR($Resource.Images, 'star.png')}" class="first_img" /> 
                                                        </a>
                                                         <img src="{!URLFOR($Resource.icon_images, 'images/hashimg.png')}" />
                                                    </td>
                                                    <td id="CustomerOrder_SpecialOrderGrid_tbody_tr_td_2_{{$index}}">

                                                        <a href="" class="edite_btn" rel="row1_edit" ng-show="merchItem.Status =='Required'">
                                                            <img src="{!URLFOR($Resource.icon_images, 'images/editicon.png')}" />


                                                        </a>
                                                    </td>
                                                    <td id="CustomerOrder_SpecialOrderGrid_tbody_tr_td_3_{{$index}}"><u>{{merchItem.Item}}</u></td>
                                                    <td class="text-center" id="CustomerOrder_SpecialOrderGrid_tbody_tr_td_4_{{$index}}">{{merchItem.QtyNeeded}}</td>


                                                    <td class="text-center" id="CustomerOrder_SpecialOrderGrid_tbody_tr_td_5_{{$index}}" ng-class="{'Requiredtd': merchItem.Status =='Required'}">{{merchItem.Status}}</td>
                                                    <td class="text-center" id="CustomerOrder_SpecialOrderGrid_tbody_tr_td_6_{{$index}}">
                                                        <span>{{merchItem.PONumber}}</span>
                                                    </td>
                                                    <td class="text-center"  id="CustomerOrder_SpecialOrderGrid_tbody_tr_td_7_{{$index}}">
                                                        <span>{{merchItem.POStatus}}</span>
                                                    </td>
                                                    <td class="text-center" id="CustomerOrder_SpecialOrderGrid_tbody_tr_td_8_{{$index}}">
                                                        <span>{{merchItem.ExpectedDelivery}}</span>
                                                    </td>
                                                    <td class="text-center" id="CustomerOrder_SpecialOrderGrid_tbody_tr_td_9_{{$index}}">
                                                        <span>3 Days</span>
                                                    </td>
                                                    <td style="background-color:#fff"></td>
                                                </tr>
                                                <tr ng-show="CustomerOrderModel.SpecialOrder_editRow[$index].isEdit" class="Editable_row T7">
                                                   <td style="background-color:#fff"></td>
                                                    <td id="CustomerOrder_SpecialOrderGrid_tbody_tr_td_1_{{$index}}">
                                                        <a href="" class="edite_btn" rel="row1_edit">
                                                            <img src="{!URLFOR($Resource.Images, 'star.png')}" class="first_img" /> 
                                                        </a>
                                                         <img src="{!URLFOR($Resource.icon_images, 'images/hashimg.png')}" />
                                                    </td>
                                                    <td id="CustomerOrder_SpecialOrderGrid_tbody_tr_td_2_{{$index}}">

                                                        <a href="" class="edite_btn" rel="row1_edit" ng-show="merchItem.Status =='Required'">
                                                            <img src="{!URLFOR($Resource.icon_images, 'images/editicon.png')}" />


                                                        </a>
                                                    </td>
                                                    <td id="CustomerOrder_SpecialOrderGrid_tbody_tr_td_3_{{$index}}"><u>{{merchItem.Item}}</u></td>
                                                    <td class="text-center" id="CustomerOrder_SpecialOrderGrid_tbody_tr_td_4_{{$index}}">{{merchItem.QtyNeeded}}</td>


                                                    <td class="text-center" id="CustomerOrder_SpecialOrderGrid_tbody_tr_td_5_{{$index}}" ng-class="{'Requiredtd': merchItem.Status =='Required'}">
                                                        {{merchItem.Status}}
                                                    </td>
                                                    <td class="text-center" id="CustomerOrder_SpecialOrderGrid_tbody_tr_td_6_{{$index}}">
                                                        <span ng-if="merchItem.Status=='Ordered'">{{merchItem.VONumber}}</span>
                                                    </td>
                                                    <td class="text-center" id="CustomerOrder_SpecialOrderGrid_tbody_tr_td_7_{{$index}}"> 
                                                        <span ng-if="merchItem.Status=='Ordered'">{{merchItem.VOStatus}}</span>
                                                    </td>
                                                    <td class="text-center" id="CustomerOrder_SpecialOrderGrid_tbody_tr_td_8_{{$index}}">
                                                        <span ng-if="merchItem.Status=='Ordered'">{{merchItem.ExpectedDeliveryDate}}</span>
                                                    </td>
                                                    <td class="text-center" id="CustomerOrder_SpecialOrderGrid_tbody_tr_td_9_{{$index}}">
                                                        <span ng-if="merchItem.Status=='Ordered'">3 Days</span>
                                                    </td>
                                                    <td style="background-color:#fff"></td>
                                                </tr>
                                                <tr ng-show="CustomerOrderModel.SpecialOrder_editRow[$index].isEdit" class="edit_panel sample-show-hide T7" id="merch_item_row{{$index}}_edit">
                                                    <td style="backgroung-color:#fff"></td>
                                                  <td colspan="7" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}">

                                                     <div class="edit_box col-lg-9 col-md-9" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit_box"  ng-show="CustomerOrderModel.SpecialOrder_editRow[$index].isEdit">
                                                        <div class="its-heading" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit_box_its-heading">

                                                            <img src="{!URLFOR($Resource.icon_images, 'images/edit_icon.png')}" styleClass="img_action"/>
                                                            <span>Actions (2 Actions Available)</span>
                                                        </div>
                                                        <div class="edit-body" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body">

                                                            <form>
                                                                <div class="radio" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_radio1">

                                                                  <label>
                                                                    <input type="radio" name="optionsRadios" id="optionsRadios2" value="1" />
                                                                    <span>Lorem ipsum dolor</span>
                                                                  </label>
                                                                </div>
                                                                <div class="radio" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_radio2">

                                                                  <label>
                                                                    <input type="radio" name="optionsRadios" id="optionsRadios2" value="2" />
                                                                    <span>Lorem ipsum dolor</span>
                                                                  </label>
                                                                </div>
                                                                <a href="" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_gobtn" class="btn btn-default editform_btn" role="button">Go</a>                                

                                                            </form>
                                                        </div>
                                                       
                                                     </div>
                                                     
                                                  </td>
                                                </tr>
                                            </tbody>
                                        </table>
                                     </div>
                        </div>
                    </div>


                     -->






















                     <div class="sectionHeader row" ng-show = "CustomerOrderModel.Customer.Name !=null">
                        <div class="col-lg-4 col-lg-5 PL14">
                            <div class="fixedHeaderText">
                                <span class="headerlabel">
                                <i class="fa fa-angle-right" style="width:10px; padding: 0 3px;"
                                    ng-show="!CustomerOrderModel.displaySections.Deposit"
                                    ng-Click="CustomerOrderModel.displaySections.Deposit = true">
                                </i> 
                                <i class="fa fa-angle-down" style="width:10px;"
                                    ng-show="CustomerOrderModel.displaySections.Deposit"
                                    ng-Click="CustomerOrderModel.displaySections.Deposit = false">
                                </i> 
                                <span class="divider">|</span>
                                <span class ="headdingFirstText">{{CustomerOrderModel.LeftSideHeadingLables.Deposits}}</span>
                                <span class="T2"> Deposits</span>
                                </span>
                               <span class="ActionIcons pull-left ">
                                <div class="dropdown selectDropdown checkboxDropdown">
                                      <button class="btn dropdown-toggle" type="button" data-toggle="dropdown">Actions
                                      <span class="caret"></span></button>
                                </div>
                                </span>  
                                <span class="T3  pull-right total" >
                                
                                <a id="CO_Deposits_block_total_price_row_h3_a" ng-mouseleave="CustomerOrderModel.hidePriceInfoOverlay()"
                                 ng-mouseover="CustomerOrderModel.calculateDepositTotalOverlay($event)" class="ng-binding"> ${{CustomerOrderModel.calculateDepositTotal()}}</a>
                                
                                </span>
                            </div>
                        </div>
                    </div>
                
                   <div id="DepositSection" ng-show = "CustomerOrderModel.Customer.Name !=null">
                        <div class="main_section_COU row" ng-show="CustomerOrderModel.displaySections.Deposit">
                           <!-- <p class="actionRow T2">
                                <span class="sectionText">Deposits</span>
                                <span class="actionText">Actions</span>
                                <span class="ActionIcons">
                                <i class="fa fa-th"></i>  
                                <i class="fa fa-question-circle"></i>
                                </span> 
                            </p> -->
                            <div class="col-lg-9 col-md-9">
                                <div id="CO_Deposits_block_deposit_header_deposit_option1" class="deposit_option" ng-class="{'selected_option' : CustomerOrderModel.deposit_method == 'Cash'}">
                                    <label>
                                        <p class="chk_tick" ng-attr-tabindex="100" ng-class="{'chked' : CustomerOrderModel.deposit_method == 'Cash'}" ng-click="CustomerOrderModel.deposit_method = 'Cash'">
                                            <i class="fa fa-check-square chksqure"></i>
                                        </p>
                                        <!-- <input type="radio" id="deposits" name="deposits" value="Cash" ng-model="CustomerOrderModel.deposit_method"/> -->
                                        <span class="paymentLabel">Cash</span>
                                    </label>
                                </div>
                                <div id="CO_Deposits_block_deposit_header_deposit_option2" class="deposit_option" ng-class="{'selected_option' : CustomerOrderModel.deposit_method == 'Cheque'}">
                                    <label>
                                        <p ng-attr-tabindex="100" class="chk_tick" ng-class="{'chked' : CustomerOrderModel.deposit_method == 'Cheque'}" ng-click="CustomerOrderModel.deposit_method = 'Cheque'">
                                            <i class="fa fa-check-square chksqure"></i>
                                        </p>
                                        <!-- <input type="radio" id="deposits" name="deposits" value="Cheque" ng-model="CustomerOrderModel.deposit_method"/> -->
                                        <span class="paymentLabel">Cheque</span>
                                    </label>
                                </div>
                                <div id="CO_Deposits_block_deposit_header_deposit_option3" class="deposit_option" ng-class="{'selected_option' : CustomerOrderModel.deposit_method == 'Giftcard'}">
                                    <label>
                                        <p  ng-attr-tabindex="101" class="chk_tick" ng-class="{'chked' : CustomerOrderModel.deposit_method == 'Giftcard'}" ng-click="CustomerOrderModel.deposit_method = 'Giftcard'">
                                            <i class="fa fa-check-square chksqure"></i>
                                        </p>
                                        <!-- <input type="radio" id="deposits" name="deposits" value="Giftcard" ng-model="CustomerOrderModel.deposit_method"/> -->
                                        <span class="paymentLabel">Giftcard</span>
                                    </label>
                                </div>
                                <div id="CO_Deposits_block_deposit_header_deposit_option4" class="deposit_option" ng-class="{'selected_option' : CustomerOrderModel.deposit_method == 'Credit'}">
                                    <label>
                                        <span class="chk_tick" ng-class="{'chked' : CustomerOrderModel.deposit_method == 'Credit'}" ng-click="CustomerOrderModel.deposit_method = 'Credit'">
                                            <i class="fa fa-check-square chksqure"></i>
                                        </span>
                                        <!-- <input type="radio" id="deposits" name="deposits" value="Credit" ng-model="CustomerOrderModel.deposit_method"/> -->
                                        <span class="paymentLabel">Credit</span>
                                    </label>
                                </div>
                                <div id="CO_Deposits_block_deposit_header_deposit_option5" class="deposit_option" ng-class="{'selected_option' : CustomerOrderModel.deposit_method == 'Debit'}">
                                    <label>
                                        <span class="chk_tick" ng-class="{'chked' : CustomerOrderModel.deposit_method == 'Debit'}" ng-click="CustomerOrderModel.deposit_method = 'Debit'">
                                            <i class="fa fa-check-square chksqure"></i>
                                        </span>
                                        <!-- <input type="radio" id="deposits" name="deposits" value="Debit" ng-model="CustomerOrderModel.deposit_method"/> -->
                                        <span class="paymentLabel">Debit</span>
                                    </label>
                                </div>
                            </div>
                             <div class="col-lg-3 col-md-3" id="CO_Deposits_block_deposit_header_amount_block" style="margin-bottom:10px;">
                                
                                 <div class="pull-right" style="margin:6px 0 0; font-size: 12px; color:#fff;"><i class="fa fa-question-circle question_mark"></i></div>
                                <div id="CO_Deposits_block_deposit_header_amount_block_pricebox" class="pricebox pull-left">
                                    
                                    <div class="input-group" style="float:right; width: 200px;">
                                        <span class="input-group-addon">$</span>
                                        <input id="CO_Deposits_block_deposit_header_amount_block_pricebox_text" type="text" class="form-control" ng-class="{'text_box_error' : CustomerOrderModel.isDepositAmountError}"
                                               ng-disabled="CustomerOrderModel.isReverseDeposit || CustomerOrderModel.coHeaderDetails.OrderStatus == 'Closed'" ng-model="CustomerOrderModel.deposit_Amount"  style="width: 50%;" />
                                        <div id="CO_Deposits_block_deposit_header_amount_block_pricebox_error_msg" class="error_msg" ng-if="CustomerOrderModel.isDepositAmountError">
                                            <a title="{{CustomerOrderModel.isDepositAmountErrorMsg}}" data-toggle="tooltip"></a>
                                            <div class="reomve_btn" ng-click="CustomerOrderModel.isDepositAmountError = false;  ">
                                                <span class="fa-stack fa-lg" style="  width: 1.2em; height: 1.2em; line-height: 1.2em;">
                                                    <i class="fa fa-circle fa-stack-1x"></i>
                                                    <i class="fa fa-times fa-stack-1x fa-inverse" style="color: #707070;"></i>
                                                </span>
                                            </div>
                                        </div>
                                        <button id="CO_Deposits_block_deposit_header_amount_block_pricebox_addbtn" class="btn" 
                                            style="margin-left:5px;background-color: #727983; color: #fff; text-transform: uppercase;" 
                                            ng-disabled="CustomerOrderModel.coHeaderDetails.OrderStatus == 'Closed'"
                                            ng-click="CustomerOrderModel.addDeposit();">Add</button>  
                                    </div>
                                    <!-- <input type="text" ng-disabled="CustomerOrderModel.isReverseDeposit" ng-model="CustomerOrderModel.deposit_Amount"/>  -->
                                    
                                </div>
                            </div>
                        
                        <div class="gid_container_Customer" id="CO_deposit_block_gid_container">
                                 <table class="table" id="CO_deposit_block_gid_container_table">   
                                    <col width="1%"  />
                                    <col width="3%"  />
                                    <col width="15%"  />
                                    <col width="62%" />
                                    <col width="16%"  />
                                    <col width="3%" />
                                    <tr class="tableHeader T3 C2" id="CO_final_invlice_block_gid_container_table_tableHeader" >
                                        <th></th>
                                        <th></th>
                                        <th>DATE</th>
                                        <th>PAYMENT METHOD</th>
                                        <th>AMOUNT</th>
                                        <th></th>
                                    </tr>
                                    <tbody ng-repeat="deposit in CustomerOrderModel.Deposits">
                                        <tr class="T7" ng-class-even="'C2'" >
                                            <td style="background-color:#fff"></td>
                                            <td id="CO_Deposits_block_gid_container_table_tbody_tr_td_1_{{$index}}">
                                                <a href="" class="edite_btn" rel="row1_edit" ng-click="CustomerOrderModel.editDepositItem($index)">
<!--                                                    <img src="{!URLFOR($Resource.icon_images, 'images/hashimg.png')}" class="first_img"/> -->
                                                    <i class="fa fa-caret-right" ng-show="!CustomerOrderModel.Deposits_editRow[$index].isEdit" style="font-size: 14px; padding-top: 8px;"></i>
                                                    <i class="fa fa-caret-down" ng-show="CustomerOrderModel.Deposits_editRow[$index].isEdit" style="font-size: 14px; padding-top: 8px;"></i>
                                                </a>
                                            </td>
                                            <td id="CO_Deposits_block_gid_container_table_tbody_tr_td_2_{{$index}}">{{deposit.CreatedDate}}</td>
                                            <td id="CO_Deposits_block_gid_container_table_tbody_tr_td_3_{{$index}}"><u>{{deposit.PaymentMethod == 'Invoice' ? deposit.COInvoiceNumber : deposit.PaymentMethod}}</u></td>
                                            <td id="CO_Deposits_block_gid_container_table_tbody_tr_td_4_{{$index}}" ng-class="{'Requiredtd' : deposit.Amount < 0}">

                                                {{deposit.Amount | currency}}
                                            </td>
                                            <td style="background-color:#fff"></td>
                                        </tr>
                                        <tr class="small_edit_panel sample-show-hide" ng-show="CustomerOrderModel.Deposits_editRow[$index].isEdit">
                                              <td colspan="7" id="CO_Deposits_block_gid_container_table_tbody_expandtr_td_1_{{$index}}">
                                                 <div class="edit_box col-lg-11 col-md-11" style="height: 80px;" id="CO_Deposits_block_gid_container_table_tbody_expandtr_td_1_{{$index}}_edit_box" ng-show="CustomerOrderModel.Deposits_editRow[$index].isEdit">
                                                    <div class="reference_heading col-lg-10 col-md-10" style="padding-top: 10px; padding-left: 55px;"
                                                        id="CO_Deposits_block_gid_container_table_tbody_expandtr_td_1_{{$index}}_edit_box_reference_heading">
                                                        <span>Reference Number</span>
                                                    </div>
                                                    <div class="edit-body col-lg-10 col-md-10" style="padding-left: 55px;"
                                                         id="CO_Deposits_block_gid_container_table_tbody_expandtr_td_1_{{$index}}_edit_box_edit-body">
                                                       {{deposit.DepositName}}
                                                    </div>
                                                    <a href="" class="faq_link col-lg-2 col-md-2" id="CO_Deposits_block_gid_container_table_tbody_expandtr_td_1_{{$index}}_edit_box_faq_link"
                                                        style="padding-right: 0px; text-align: right;">
                                                        <button id="CO_Deposits_block_gid_container_table_tbody_expandtr_td_1_{{$index}}_edit_box_faq_link_btn" 
                                                                class="btn C11 T4 addmoreinfoBtn" ng-hide="deposit.Amount < 0" style="margin: auto; width: 90%;"
                                                                ng-click="CustomerOrderModel.ReverseDeposit(deposit);">Reverse Deposit</button>
                                                    </a>
                                                 </div>
                                            </td>
                                       </tr>
                                    </tbody>
                                </table>
                            </div> 
                        </div>
                    </div>
                
                    <div class="sectionHeader row"  ng-show="CustomerOrderModel.CheckOutItems.length > 0 ">
                        <div class="col-lg-4 col-lg-5 PL14">
                            <div class="fixedHeaderText">
                                <span class="headerlabel">
                                <i class="fa fa-angle-right" style="width:10px; padding: 0 3px;"
                                    ng-show="!CustomerOrderModel.displaySections.Checkout"
                                    ng-Click="CustomerOrderModel.displaySections.Checkout = true">
                                </i> 
                                <i class="fa fa-angle-down" style="width:10px;"
                                    ng-show="CustomerOrderModel.displaySections.Checkout"
                                    ng-Click="CustomerOrderModel.displaySections.Checkout = false">
                                </i> 
                                <span class="divider">|</span>
                                <sapn class ="headdingFirstText">{{CustomerOrderModel.LeftSideHeadingLables.Checkout}} </sapn>
                                <span class="T2">Checkout</span>
                                </span>
                              <span class="ActionIcons pull-left ">
                                <div class="dropdown selectDropdown checkboxDropdown">
                                      <!-- <button class="btn dropdown-toggle" type="button" data-toggle="dropdown">Actions
                                      <span class="caret"></span></button> -->
                                </div>
                                </span> 
                                 <span class="T3  pull-right total" >
                                 
                                 <a id="CO_active_invoice_Payments_total_balance_due_h3_a" 
                                 ng-mouseleave="CustomerOrderModel.hidePriceInfoOverlay()" 
                                 ng-mouseover="CustomerOrderModel.calculateBalanceDueTotalOverlay($event)">
                                                   {{CustomerOrderModel.calculateBalanceDue() >= 0 ? '$' :'-$'}}
                                    {{CustomerOrderModel.calculateBalanceDue() >= 0 ? CustomerOrderModel.calculateBalanceDue() : -1 * CustomerOrderModel.calculateBalanceDue()}}
                                                    </a>
                                    
                        
                                </span>
                            </div>
                        </div>
                    </div>
                
                    <div id="CheckoutSection"  >
                        
                         
                    
                        
                        
                        <div class="main_section_COU row" ng-show="CustomerOrderModel.displaySections.Checkout && CustomerOrderModel.CheckOutItems.length > 0 ">
                            <div class="row checkout_mode" ng-if="CustomerOrderModel.checkoutModeContainerShown()">
                                <i class="fa fa-user modeIcon" aria-hidden="true"
                                	ng-if="CustomerOrderModel.checkoutModeVisible('Customer')"
                                    ng-class="{'activeCheckoutmode' : CustomerOrderModel.checkOutMode == 'Customer'}"
                                    ng-click="CustomerOrderModel.changeCheckoutMode('Customer')"></i>
                                <i class="fa fa-paper-plane modeIcon" aria-hidden="true" 
                                	ng-if="CustomerOrderModel.checkoutModeVisible('Third-Party')"
                                    ng-class="{'activeCheckoutmode' : CustomerOrderModel.checkOutMode == 'Third-Party'}"
                                    ng-click="CustomerOrderModel.changeCheckoutMode('Third-Party')"></i>
                                <i class="fa fa-home modeIcon" aria-hidden="true"
                                	ng-if="CustomerOrderModel.checkoutModeVisible('Internal')"
                                    ng-class="{'activeCheckoutmode' : CustomerOrderModel.checkOutMode == 'Internal'}"
                                    ng-click="CustomerOrderModel.changeCheckoutMode('Internal')"></i>
                            </div>
                            <div class="row checkout_mode_name">
                                <p>{{CustomerOrderModel.checkOutMode}} Checkout</p>
                            </div>
                        
                            
                            <div class="main_section_COU_Header row" >
                                <p class="actionRow T2">
                                    <span class="sectionText">Items</span>
                                    <!-- <span class="actionText">Actions</span> -->
                                    <span class="ActionIcons">
	                                    <!-- <i class="fa fa-th"></i> -->
	                                    <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Checkout Items Section"></i>
                                    </span> 
                                </p>
                            </div>
                             <div class="gid_container_Customer" id="CO_CheckOutGrid_gid_container">
                                     <table class="table" id="CO_CheckOutGrid_gid_container_table">
                                        <col width="1%" />
                                        <col width="3%" />
                                        <col width="5%" />
                                        <col width="5%" />
                                        <col width="40%" />
                                        <col width="15%" />
                                        <col width="15%" />
                                        <col width="15" />

                                        <col width="1%" />
                                       <tr class="tableHeader T3 C2" id="CO_final_invlice_block_gid_container_table_tableHeader" >
                                            <th></th>
                                            <th></th>
                                            <th></th>
                                            <th></th>
                                            <th>ITEM/DESC</th>
                                            <th>QTY</th>
                                            <th>PRICE</th>
                                            <th>TOTAL</th>
                                            <th></th>
                                        </tr>
                                       <tbody>
                                           <tr ng-repeat="CheckOutItem in CustomerOrderModel.CheckOutItems" class="T7" ng-class-even="'C2'" 
                                           		ng-class="{'disabledCheckOut' : (CustomerOrderModel.checkOutMode != CheckOutItem.CheckoutType) || CustomerOrderModel.EnableCheckout(CheckOutItem,$Index) }" >
                                               <td style="background-color:#fff"></td>
                                               <td id="CO_CheckOutGrid_gid_container_table_tbody_tr_td_1_{{$index}}"
                                               		 style="padding-top:12px;padding-bottom:12px" >
                                                        <span class="chk_tick" 
                                                        	ng-click="AddRemoveItems($index)"  
                                                        	ng-class="{'chked' : CheckOutItem.IsActive, 
                                                        				'disabledChk' : (CustomerOrderModel.checkOutMode != CheckOutItem.CheckoutType) || CustomerOrderModel.EnableCheckout(CheckOutItem,$Index) }">
                                                            <i class="fa fa-check-square chksqure"></i>
                                                        </span>
                                               </td>
                                               <td>
                                               		<span class="chkoutmodeicon" ng-if="CheckOutItem.CheckoutType == 'Customer'">
                                               			<i class="fa fa-user" aria-hidden="true"></i>
                                               		</span>

                                               		<span class="chkoutmodeicon" ng-if="CheckOutItem.CheckoutType == 'Third-Party'">
                                               			<i class="fa fa-paper-plane" aria-hidden="true"></i>
                                               		</span>

                                               		<span class="chkoutmodeicon" ng-if="CheckOutItem.CheckoutType == 'Internal'">
                                               			<i class="fa fa-home" aria-hidden="true"></i>
                                               		</span>



                                               	</td>
                                               	<td>

                                               		<span ng-if="CheckOutItem.ItemType == 'Part'">
                                               			<img src="{!URLFOR($Resource.Images, 'sparkplug.png')}" style="height: 26px;width: 26px;"/>
                                               		</span>
                                               		


                                               		<span ng-if="CheckOutItem.ItemType == 'Kit'">
                                               			<i class="fa fa-link  Plr5 FC7 F18"></i>
                                               		</span>
                                               		


                                               		<span ng-if="CheckOutItem.ItemType == 'Fee'">
                        		     					<img src="{!URLFOR($Resource.Images, 'dollor.png')}"  style="height: 26px;width: 26px;border-radius: 13px;"/>
			                                  		</span>
			                                  		


			                                  		<span ng-if="CheckOutItem.ItemType == 'Labor'">
			                                  			<img src="{!URLFOR($Resource.Images, 'hammer.png')}"  style="height: 26px;width: 26px;"/>
			                                  		</span>
			                                  		


			                                  		<span ng-if="CheckOutItem.ItemType == 'Work'">
			                                  			<span class="workIcon Plr5 FC7 F18">W</span>
			                                  		</span>
			                                  		


			                                  		<span ng-if="CheckOutItem.ItemType == 'Claim'">
			                                  			<span class="claimIcon Plr5 FC7 F18">C</span>
			                                  		</span> 
			                                    
                                               	</td>



                                               <td id="CO_CheckOutGrid_gid_container_table_tbody_tr_td_2_{{$index}}"><u>{{CheckOutItem.Item}}</u></td>
                                               <td id="CO_CheckOutGrid_gid_container_table_tbody_tr_td_3_{{$index}}">{{CheckOutItem.Qty | number:2}}</td>
                                               
                                               <td id="CO_CheckOutGrid_gid_container_table_tbody_tr_td_4_{{$index}}">
                                               <span ng-if="CheckOutItem.Price != null">{{CheckOutItem.Price | currency}}</span></td>
                                               <td id="CO_CheckOutGrid_gid_container_table_tbody_tr_td_5_{{$index}}">
                                               		<span ng-show="!CustomerOrderModel.IsTaxIncludingPricing">{{(CheckOutItem.Total + CheckOutItem.TaxAmount) | currency}}</span>
                                               		<span ng-show="CustomerOrderModel.IsTaxIncludingPricing">{{CheckOutItem.Total | currency}}</span>		
                                               </td>
                                            <td style="background-color:#fff"></td>
                                           </tr>   

                                   </tbody>
                               </table>  
                             </div>
                            
                            <div class="main_section_COU_Header row" id="CheckoutPaymentSection"
                            	ng-if="CustomerOrderModel.checkOutMode == 'Customer'">
                                <p class="actionRow T2">
                                    <span class="sectionText">Payments</span>
                                    <!-- <span class="actionText">Actions</span> -->
                                    <span class="ActionIcons">
	                                    <!-- <i class="fa fa-th"></i> -->
	                                    <i class="fa fa-question-circle" data-toggle="tooltip"
	                                                title="Checkout Payment Section"></i>
                                    </span> 
                                </p>
                                
                                
                                
                                 <!-- 
                                 <div class="col-lg-9 col-md-9">
                                        <div id="CO_Deposits_block_deposit_header_deposit_option1" class="deposit_option" ng-class="{'selected_option' : CustomerOrderModel.Payment_method == 'Cash'}">
                                            <label>
                                                <span class="chk_tick" ng-class="{'chked' : CustomerOrderModel.Payment_method == 'Cash'}" ng-click="CustomerOrderModel.Payment_method = 'Cash'">
                                                    <i class="fa fa-check-square chksqure"></i>
                                                </span>
                                                <input type="radio" id="deposits" name="deposits" value="Cash" ng-model="CustomerOrderModel.Payment_method"/>
                                                <span class="paymentLabel">Cash</span>
                                            </label>
                                        </div>
                                        <div id="CO_Deposits_block_deposit_header_deposit_option2" class="deposit_option" ng-class="{'selected_option' : CustomerOrderModel.Payment_method == 'Cheque'}">
                                            <label>
                                                <span class="chk_tick" ng-class="{'chked' : CustomerOrderModel.Payment_method == 'Cheque'}" ng-click="CustomerOrderModel.Payment_method = 'Cheque'">
                                                    <i class="fa fa-check-square chksqure"></i>
                                                </span>
                                                <input type="radio" id="deposits" name="deposits" value="Cheque" ng-model="CustomerOrderModel.Payment_method"/>
                                                <span class="paymentLabel">Cheque</span>
                                            </label>
                                        </div>
                                        
                                        <div id="CO_Deposits_block_deposit_header_deposit_option2" class="deposit_option" ng-class="{'selected_option' : CustomerOrderModel.Payment_method == 'Deposit'}">
                                            <label>
                                                <span class="chk_tick" ng-class="{'chked' : CustomerOrderModel.Payment_method == 'Deposit'}" ng-click="CustomerOrderModel.Payment_method = 'Deposit'">
                                                    <i class="fa fa-check-square chksqure"></i>
                                                </span>
                                                <input type="radio" id="deposits" name="deposits" value="Cheque" ng-model="CustomerOrderModel.Payment_method"/>
                                                <span class="paymentLabel">Deposits:{{CustomerOrderModel.calculateDepositTotal() - CustomerOrderModel.calculateDepositUsed() | currency}}</span>
                                            </label>
                                        </div>
                                        
                                        <div id="CO_Deposits_block_deposit_header_deposit_option3" class="deposit_option" ng-class="{'selected_option' : CustomerOrderModel.Payment_method == 'Giftcard'}">
                                            <label>
                                                <span class="chk_tick" ng-class="{'chked' : CustomerOrderModel.Payment_method == 'Giftcard'}" ng-click="CustomerOrderModel.Payment_method = 'Giftcard'">
                                                    <i class="fa fa-check-square chksqure"></i>
                                                </span>
                                                <input type="radio" id="deposits" name="deposits" value="Giftcard" ng-model="CustomerOrderModel.Payment_method"/>
                                                <span class="paymentLabel">Giftcard</span>
                                            </label>
                                        </div>
                                        <div id="CO_Deposits_block_deposit_header_deposit_option4" class="deposit_option" ng-class="{'selected_option' : CustomerOrderModel.Payment_method == 'Credit'}">
                                            <label>
                                                <span class="chk_tick" ng-class="{'chked' : CustomerOrderModel.Payment_method == 'Credit'}" ng-click="CustomerOrderModel.Payment_method = 'Credit'">
                                                    <i class="fa fa-check-square chksqure"></i>
                                                </span>
                                                <input type="radio" id="deposits" name="deposits" value="Credit" ng-model="CustomerOrderModel.Payment_method"/>
                                                <span class="paymentLabel">Credit</span>
                                            </label>
                                        </div>
                                        <div id="CO_Deposits_block_deposit_header_deposit_option5" class="deposit_option" ng-class="{'selected_option' : CustomerOrderModel.Payment_method == 'Debit'}">
                                            <label>
                                                <span class="chk_tick" ng-class="{'chked' : CustomerOrderModel.Payment_method == 'Debit'}" ng-click="CustomerOrderModel.Payment_method = 'Debit'">
                                                    <i class="fa fa-check-square chksqure"></i>
                                                </span>
                                                <input type="radio" id="deposits" name="deposits" value="Debit" ng-model="CustomerOrderModel.Payment_method"/>
                                                <span class="paymentLabel">Debit</span>
                                            </label>
                                        </div>
                                    </div>
                                     -->
                                    
                                    
                                     <div class="payment_Option pull-left">
                                        <div class ="pull-left payment_ActibveOption">
                                        <p ng-if = "CustomerOrderModel.Payment_method == 'Cash'"><i class="fa fa-money" aria-hidden="true"></i><span>Cash</span></p>
                                        <p ng-if = "CustomerOrderModel.Payment_method == 'Debit'"><i class="fa fa-credit-card" aria-hidden="true"></i><span>debit</span></p>
                                        <p ng-if = "CustomerOrderModel.Payment_method == 'Cheque'"><i class="fa fa-credit-card" aria-hidden="true"></i><span>cheque</span></p>
                                        <p ng-if = "CustomerOrderModel.Payment_method == 'Visa'"><i class="fa fa-cc-visa" aria-hidden="true"></i><span>visa</span></p>
                                        <p ng-if = "CustomerOrderModel.Payment_method == 'Mastercard'"><i class="fa fa-cc-mastercard" aria-hidden="true"></i><span>mastercard</span></p>
                                        <p ng-if = "CustomerOrderModel.Payment_method == 'Amex'"><i class="fa fa-cc-amex" aria-hidden="true"></i><span>amex</span></p>
                                        <p ng-if = "CustomerOrderModel.Payment_method == 'Gift Card'"><i class="fa fa-gift" aria-hidden="true"></i><span>gift card</span></p>
                                        <p ng-if = "CustomerOrderModel.Payment_method == 'Charge Account'"><i class="fa fa-university" aria-hidden="true"></i><span>charge account</span></p>
                                        <p ng-if = "CustomerOrderModel.Payment_method == 'Use Deposit'"><i class="fa fa-usd" aria-hidden="true"></i><span>use deposit</span></p>
                                        
                                        </div>
                                        <div class="dropdown selectDropdown checkboxDropdown pull-left">
                                          <button class="btn dropdown-toggle" type="button" data-toggle="dropdown">
                                          <span class="caret"></span></button>
                                          <ul class="dropdown-menu payment_DropDown" style="overflow: visible;">
                                            <div class="column_fixHeight pull-left" id="TypeFixedHeight">
                                            <li>
	                                            <a ng-class="{'payment_Active' : CustomerOrderModel.Payment_method == 'Cash'}" 
	                                            	ng-click = "CustomerOrderModel.paymentOption('Cash')"> 
	                                            	<p><i class="fa fa-money F25" aria-hidden="true"></i></p><span class = "T3">Cash</span>
	                                            </a>

	                                            <a ng-class="{'payment_Active' : CustomerOrderModel.Payment_method == 'Debit'}" 
	                                            	ng-click = "CustomerOrderModel.paymentOption('Debit')"> 
	                                            	<p><i class="fa fa-credit-card" aria-hidden="true"></i></p><span class = "T3">debit</span>
	                                            </a>

	                                            <a ng-class="{'payment_Active' : CustomerOrderModel.Payment_method == 'Cheque'}" 
	                                            	ng-click = "CustomerOrderModel.paymentOption('Cheque')"> 
	                                            	<p><i class="fa fa-credit-card" aria-hidden="true"></i></p><span class = "T3">cheque</span>
	                                            </a>

                                            </li> 
                                            <li>
                                            	<a ng-class="{'payment_Active' : CustomerOrderModel.Payment_method == 'Visa'}" 
                                            		ng-click = "CustomerOrderModel.paymentOption('Visa')"> 
                                            			<p><i class="fa fa-cc-visa" aria-hidden="true"></i></p><span class = "T3">visa</span>
                                            	</a>

                                             	<a ng-class="{'payment_Active' : CustomerOrderModel.Payment_method == 'Mastercard'}" 
                                             		ng-click = "CustomerOrderModel.paymentOption('Mastercard')">
                                             		<p> <i class="fa fa-cc-mastercard" aria-hidden="true"></i></p><span class = "T3">mastercard</span>
                                             	</a>

                                              	<a ng-class="{'payment_Active' : CustomerOrderModel.Payment_method == 'Amex'}" 
                                              		ng-click = "CustomerOrderModel.paymentOption('Amex')">
                                              			<p> <i class="fa fa-cc-amex" aria-hidden="true"></i></p><span class = "T3">amex</span>
                                              	</a>

                                            </li> 
                                            <li>
                                            	<a ng-class="{'payment_Active' : CustomerOrderModel.Payment_method == 'Gift Card'}" 
                                            		ng-click = "CustomerOrderModel.paymentOption('Gift Card')">
                                            			<p><i class="fa fa-gift F25" aria-hidden="true"></i></p><span class = "T3">gift card</span>
                                            	</a>

                                             	<a ng-class="{'payment_Active' : CustomerOrderModel.Payment_method == 'Charge Account'}" 
                                             		ng-click = "CustomerOrderModel.paymentOption('Charge Account')"> 
                                             		<p><i class="fa fa-university" aria-hidden="true"></i></p><span class = "T3">charge account</span>
                                             	</a>

                                              	<a ng-class="{'payment_Active' : CustomerOrderModel.Payment_method == 'Use Deposit'}" 
                                              		ng-click = "CustomerOrderModel.paymentOption('Use Deposit')">
                                              			<p> <i class="fa fa-usd" aria-hidden="true"></i></p><span class = "T3">use deposit</span>
                                              	</a>

                                            </li> 
                                           </div>
                                          </ul>
                                        </div>
                                </div>
								</div>
                                
                                    
									<div class="gid_container_Customer row MLR0">
                                    <div class="col-lg-3 col-md-3" id="CO_Deposits_block_deposit_header_amount_block" style="padding-left: 43px;">
                                        
                                        <!--  <div class="pull-right" style="margin:6px 0 0; font-size: 12px; color:#fff;"></div>-->
                                        <div id="CO_Deposits_block_deposit_header_amount_block_pricebox" class="pricebox pull-left">
                                            
                                            <div class="input-group" style="float:right; width: 200px;">
                                                <span class="input-group-addon">$</span>
                                                <input id="CO_Deposits_block_deposit_header_amount_block_pricebox_text" type="text" class="form-control" ng-class="{'text_box_error' : CustomerOrderModel.isPaymentAmountError}"
                                                       ng-disabled="CustomerOrderModel.isReversePayment || CustomerOrderModel.coHeaderDetails.OrderStatus == 'Closed'" 
                                                       ng-model="CustomerOrderModel.Payment_Amount"  style="width: 50%;"  ng-focus="CustomerOrderModel.payment_TotalAmount = true" ng-blur = "CustomerOrderModel.payment_TotalAmount = false" />
                                                <div id="CO_Deposits_block_deposit_header_amount_block_pricebox_error_msg" class="error_msg" ng-if="CustomerOrderModel.isPaymentAmountError">
                                                    <span ng-bind="CustomerOrderModel.isPaymentAmountErrorMsg">Please Enter Amount</span>
                                                    <!-- <div class="reomve_btn" ng-click="CustomerOrderModel.isPaymentAmountError = false;  ">
                                                        <span class="fa-stack fa-lg" style="  width: 1.2em; height: 1.2em; line-height: 1.2em;">
                                                            <i class="fa fa-circle fa-stack-1x"></i>
                                                            <i class="fa fa-times fa-stack-1x fa-inverse" style="color: #707070;"></i>
                                                        </span>
                                                    </div> -->
                                                </div>
                                                
                                                <button class="btn" id="CO_Deposits_block_deposit_header_amount_block_pricebox_addbtn_Payments"
                                                     ng-click="CustomerOrderModel.addPayment();" 
                                                     ng-disabled="CustomerOrderModel.coHeaderDetails.OrderStatus == 'Closed'"
                                                     style="margin-left:5px;background-color: #727983; color: #fff; text-transform: uppercase;">Add</button>  
                                            </div>
                                            <!-- <input type="text" ng-disabled="CustomerOrderModel.isReverseDeposit" ng-model="CustomerOrderModel.deposit_Amount"/>  -->
                                            
                                        </div>
										 <div class ="pull-left payment_TotalAmount" ng-show="CustomerOrderModel.payment_TotalAmount" >
                                                   <p class ="Requiredtd">{{CustomerOrderModel.calculateBalanceDue() >= 0 ? '$' :'-$'}}
                                    				{{CustomerOrderModel.calculateBalanceDue() >= 0 ? CustomerOrderModel.calculateBalanceDue() : -1 * CustomerOrderModel.calculateBalanceDue()}} <span>Owing</span></p>
                                         </div>
                                    </div>
                                    
                                    
<!--                                        <div class="pull-right"  Style="Margin-right:10px"> -->
<!--                                            <div  class="T1 Sub_total_right"> -->
<!--                                                BALANCE DUE : $ {{CustomerOrderModel.calculateBalanceDue() }} -->
<!--                                            </div> -->
<!--                                        </div> -->
                            </div>  
                            
                             <div class="gid_container_Customer" id="CO_Payment_block_gid_container">
                                         <table class="table" id="CO_deposit_block_gid_container_table"
                                         	ng-if="CustomerOrderModel.Payment.length != 0">   
                                            <col width="1%"  />	
                                            <col width="3%"  />
                                            <col width="15%"  />
                                            <col width="62%" />
                                            <col width="16%"  />
                                            <col width="3%" />
                                            <tr class="tableHeader T3 C2" id="CO_final_invlice_block_gid_container_table_tableHeader" 
                                            	ng-click="CustomerOrderModel.closeEditPaymentRow()">
                                                <th></th>
                                                <th></th>
                                                <th>DATE</th>
                                                <th>PAYMENT METHOD</th>
                                                <th>AMOUNT</th>
                                                <th></th>
                                            </tr>
                                            <tbody ng-repeat="Payment in CustomerOrderModel.Payment">
                                                <tr class="T7" ng-class-even="'C2'" 
                                                	ng-click="CustomerOrderModel.editPaymentItem($index)">
                                                    <td style="background-color:#fff"></td>
                                                    <td id="CO_Deposits_block_gid_container_table_tbody_tr_td_1_{{$index}}">
                                                        <a href="" class="edite_btn" rel="row1_edit">
        <!--                                                    <img src="{!URLFOR($Resource.icon_images, 'images/hashimg.png')}" class="first_img"/> -->
                                                            <i class="fa fa-caret-right" ng-show="!CustomerOrderModel.Payments_editRow[$index].isEdit" style="font-size: 14px; padding-top: 8px;"></i>
                                                            <i class="fa fa-caret-down" ng-show="CustomerOrderModel.Payments_editRow[$index].isEdit" style="font-size: 14px; padding-top: 8px;"></i>
                                                        </a>
                                                    </td>
                                                    <td id="CO_Deposits_block_gid_container_table_tbody_tr_td_2_{{$index}}">{{Payment.CreatedDate}}</td>
                                                    <td id="CO_Deposits_block_gid_container_table_tbody_tr_td_3_{{$index}}"><u>{{Payment.PaymentMethod == 'Invoice' ? Payment.COInvoiceNumber : Payment.PaymentMethod}}</u></td>
                                                    <td id="CO_Deposits_block_gid_container_table_tbody_tr_td_4_{{$index}}" ng-class="{'Requiredtd' : Payment.Amount < 0}">

                                                        {{Payment.Amount | currency}}
                                                    </td>
                                                    <td style="background-color:#fff"></td>
                                                </tr>
                                                
                                                
                                                
                                                <tr ng-show="CustomerOrderModel.Payments_editRow[$index].isEdit" class="edit_panel sample-show-hide T7" id="merch_item_row{{$index}}_edit">
		                                          <td style="backgroung-color:#fff"></td>
		                                          <td style="backgroung-color:#fff"></td>
		                                          <td colspan="5" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}">
		                                             <div class="edit_box col-lg-9 col-md-9" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit_box" 
		                                                ng-show="CustomerOrderModel.Payments_editRow[$index].isEdit">
		                                                <div class="its-heading" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit_box_its-heading">
		                                                    <img src="{!URLFOR($Resource.icon_images, 'images/edit_icon.png')}" styleClass="img_action"/>
		                                                    <span>{{Payment.Amount >= 0 ? 'Actions (1 Actions Available)' : 'Actions (No Actions Available)'}}</span>
		                                                </div>

		                                                <div class="edit-body" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body">
		                                          

		                                                    <form ng-if="Payment.Amount >= 0">
		                                                        <div class="radio" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_radio1">
		                                                          <label>

		                                                            <p class="chk_tick edit-service-chek"
		                                                                   ng-class="{'chked' : CustomerOrderModel.Payments_editRow[$index].radioValue == 0 }" >
		                                                                <i class="fa fa-check-square chksqure"></i>
		
		
		                                                            </p>



		                                                            <span>Reverse Payment - {{Payment.COInvoicePaymentNumber}}</span>
		                                                          </label>
		                                                        </div>


		                                                        <a href="" id="CustomerOrder_SpecialOrderGrid_tbody_expandtr_td_1_{{$index}}_edit-body_gobtn" class="btn btn-default editform_btn" role="button"
		                                                          ng-click="CustomerOrderModel.paymentGoAction($index, Payment)">Go</a>                                
		                                          
		                                                    </form>
		                                                </div>
		                                               
		                                             </div>
		                                             
		                                          </td>
		                                      </tr>
                                                
                                                <!-- 
                                                
                                                <tr class="small_edit_panel sample-show-hide" ng-show="CustomerOrderModel.Payments_editRow[$index].isEdit">
                                                      <td colspan="7" id="CO_Deposits_block_gid_container_table_tbody_expandtr_td_1_{{$index}}">
                                                         <div class="edit_box col-lg-11 col-md-11" style="height: 80px;" id="CO_Deposits_block_gid_container_table_tbody_expandtr_td_1_{{$index}}_edit_box" ng-show="CustomerOrderModel.Payments_editRow[$index].isEdit">
                                                            <div class="reference_heading col-lg-10 col-md-10" style="padding-top: 10px; padding-left: 55px;"
                                                                id="CO_Deposits_block_gid_container_table_tbody_expandtr_td_1_{{$index}}_edit_box_reference_heading">
                                                                <span>Reference Number</span>
                                                            </div>
                                                            <div class="edit-body col-lg-10 col-md-10" style="padding-left: 55px;"
                                                                 id="CO_Deposits_block_gid_container_table_tbody_expandtr_td_1_{{$index}}_edit_box_edit-body">
                                                                {{Payment.COInvoicePaymentNumber}}
                                                            </div>
                                                            <a href="" class="faq_link col-lg-2 col-md-2" id="CO_Deposits_block_gid_container_table_tbody_expandtr_td_1_{{$index}}_edit_box_faq_link"
                                                                style="padding-right: 0px; text-align: right;">
                                                                <button id="CO_Deposits_block_gid_container_table_tbody_expandtr_td_1_{{$index}}_edit_box_faq_link_btn" 
                                                                        class="btn C11 T4 addmoreinfoBtn" ng-hide="Payment.Amount < 0" style="margin: auto; width: 90%;"
                                                                        ng-click="CustomerOrderModel.ReversePayment(Payment);">Reverse Payment</button>
                                                            </a>
                                                         </div>
                                                    </td>
                                               </tr>
                                               
                                                -->
                                            </tbody>
                                        </table>
                                    </div> 
                            
                            <div class="main_section_COU_Header row" id="CheckoutFinalizeSection">
                                <p class="actionRow T2">
                                    <span class="sectionText">Finalize </span>
                                    <!-- <span class="actionText">Actions</span> -->
                                    <span class="ActionIcons">
	                                    <!-- <i class="fa fa-th"></i> -->
	                                    <i class="fa fa-question-circle" data-toggle="tooltip"
	                                                title="Finalize Order Section"></i>
                                    </span> 
                                </p>
                                <div>
                                    <div class="col-lg-3 col-md-3 col-lg-offset-9 col-md-offset-9 finalizeInvoiceBtnSection"
                                        ng-show="!CustomerOrderModel.EnableFinaliseOrder()">
                                       <button id="CO_active_invoice_not_Invoiced_gid_container_finalize_btn" 
                                           class="btn T4 addmoreinfoBtn" ng-class="{'active_btn' : CustomerOrderModel.EnableFinaliseInvoice(), 'C5': !CustomerOrderModel.EnableFinaliseInvoice()}"  
                                               ng-disabled='!CustomerOrderModel.EnableFinaliseInvoice()' 
                                               ng-click="FinaliseInvoice()"
                                               style="margin: auto; width: 80%;">FINALIZE INVOICE 
                                               <i class="fa fa-angle-right" style="font-size: 15px; margin-left: 5px;"></i>
                                       </button>
                                   </div>

                                   <div class="col-lg-3 col-md-3 col-lg-offset-9 col-md-offset-9 finalizeInvoiceBtnSection"
                                        ng-show="CustomerOrderModel.EnableFinaliseOrder()">
                                       <button id="CO_active_invoice_not_Invoiced_gid_container_finalize_btn" 
                                           class="btn T4 addmoreinfoBtn" ng-class="{'active_btn' : CustomerOrderModel.EnableFinaliseInvoice(), 'C5': !CustomerOrderModel.EnableFinaliseInvoice()}"  
                                               ng-disabled='!CustomerOrderModel.EnableFinaliseInvoice()' 
                                               style="margin: auto; width: 80%;" ng-click="FinaliseOrder()">FINALIZE ORDER 
                                               <i class="fa fa-angle-right" style="font-size: 15px; margin-left: 5px;"></i>
                                       </button>
       
                                   </div>                            
                                </div>
                               
                            </div>  
                          </div>
                      </div> 
                            
                    <div class="sectionHeader row"  ng-show="CustomerOrderModel.InvoiceHistory.length > 0">

                        <div class="col-lg-4 col-lg-5 PL14">
                            <div class="fixedHeaderText">
                                <span class="headerlabel">
                                <i class="fa fa-angle-right" style="width:10px; padding: 0 3px;"
                                    ng-show="!CustomerOrderModel.displaySections.InvoiceHistory"
                                    ng-Click="CustomerOrderModel.displaySections.InvoiceHistory = true">
                                </i> 

                                <i class="fa fa-angle-down" style="width:10px;"
                                    ng-show="CustomerOrderModel.displaySections.InvoiceHistory"
                                    ng-Click="CustomerOrderModel.displaySections.InvoiceHistory = false">
                                </i> 

                                <span class="divider">|</span>
                                <sapn class ="headdingFirstText">{{CustomerOrderModel.LeftSideHeadingLables.Invoice_History}}</sapn>
                                <span class="T2"> Invoice History</span>
                                </span>
                                <span class="ActionIcons pull-left ">
                                <div class="dropdown selectDropdown checkboxDropdown">
                                      <button class="btn dropdown-toggle" type="button" data-toggle="dropdown">Actions
                                      <span class="caret"></span></button>
                                </div>
                                </span> 
                            </div>
                        </div>

                    </div>
                
                    <div id="InvoiceHistory" >
                        <div class="main_section_COU row" ng-show="CustomerOrderModel.displaySections.InvoiceHistory && CustomerOrderModel.InvoiceHistory.length > 0">
                            <div class="main_section_COU_Header row" >
                                <p class="actionRow T2">
                                    <span class="sectionText">Invoice History</span>
                                    <!-- <span class="actionText">Actions</span> -->
                                    <span class="ActionIcons">
                                    <!-- <i class="fa fa-th"></i> -->
                                    <i class="fa fa-question-circle" data-toggle="tooltip"
                                                title="Invoice Histroy Section"></i>
                                    </span> 
                                </p>
                            </div>
                                
                            <div class="gid_container_Customer" id="CO_final_invlice_block_gid_container">
                                 <table class="table" id="CO_final_invlice_block_gid_container_table">
                                    <col width="1%"  />
                                    <col width="5%"  />
                                    <col width="28%"  />
                                    <col width="22%"  />
                                    <col width="12%" />
                                    <col width="12%"  />
                                    <col width="12%" />
                                    <col width="12%" />
                                    <col width="1%"  />
                                    <tr class="tableHeader T3 C2" id="CO_final_invlice_block_gid_container_table_tableHeader" >
                                        <th></th>
                                        <th></th>
                                        <th>INVOICE</th>
                                        <th>DATE</th>
                                        <th># ITEMS</th>
                                        <th>SUB TOTAL</th>
                                        <th>TAXES</th>
                                        <th>TOTAL</th>
                                        <th></th>  
                                    </tr>
                                    <tbody ng-repeat="InvoiceObj in CustomerOrderModel.InvoiceHistory">
                                        <tr class="T7" ng-class-even="'C2'">
                                            <td style="background-color:#fff"></td>
                                            <td>
                                           		<span class="chkoutmodeicon" ng-if="InvoiceObj.CheckoutType == 'Customer'">
                                           			<i class="fa fa-user" aria-hidden="true"></i>
                                           		</span>

                                           		<span class="chkoutmodeicon" ng-if="InvoiceObj.CheckoutType == 'Third-Party'">
                                           			<i class="fa fa-paper-plane" aria-hidden="true"></i>
                                           		</span>

                                           		<span class="chkoutmodeicon" ng-if="InvoiceObj.CheckoutType == 'Internal'">
                                           			<i class="fa fa-home" aria-hidden="true"></i>
                                           		</span>
                                           	</td>


                                            <td id="CO_final_invlice_block_gid_container_table_tbody_tr_td_1_{{$index}}"  style="padding-top:16px;padding-bottom:16px;">
                                                <u><a ng-mouseover="CustomerOrderModel.showInvoiceDetail (InvoiceObj.COInvoiceHeaderId,$event)"
                                                    ng-mouseleave="CustomerOrderModel.hideInvoiceDetail()">
                                                    {{InvoiceObj.InvoiceNumber}}
                                                </a></u>
                                            </td>
                                            <td id="CO_final_invlice_block_gid_container_table_tbody_tr_td_2_{{$index}}">{{InvoiceObj.ClosedInvoiceDate}}</td>
                                            <td id="CO_final_invlice_block_gid_container_table_tbody_tr_td_3_{{$index}}">{{InvoiceObj.NumberOfItems}}</td>
                                            <td id="CO_final_invlice_block_gid_container_table_tbody_tr_td_4_{{$index}}">{{InvoiceObj.SubTotal | currency}}</td>
                                            <td id="CO_final_invlice_block_gid_container_table_tbody_tr_td_5_{{$index}}">{{InvoiceObj.Tax | currency}}</td>
                                            <td id="CO_final_invlice_block_gid_container_table_tbody_tr_td_6_{{$index}}">{{InvoiceObj.Total | currency}}</td>
                                            <td style="background-color:#fff"></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div> 
                        </div>
                    </div>
                
                    <div style="height:500px; background: #E6EBEC; margin: 0 -15px;" />
                    
                </div>
                
                <c:ServiceOrderWizard />
  
                </div>
                
			<div class="ConfirmBox-overlay payment_ConfirmBox" id="payment_ConfirmBox">
                <div>
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" aria-label="Close" ng-click = "CustomerOrderModel.payment_Response(false)">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            <h4 class="modal-title">Confirm Action</h4>
                        </div>
                        <div class="modal-body">
                            <p>You are adding a payment which is greater than the balance owing.</p>
                            <p class = "col-md-12 P0">Balance is {{CustomerOrderModel.calculateBalanceDue() >= 0 ? '$' :'-$'}}
                                    	  {{CustomerOrderModel.calculateBalanceDue() >= 0 ? CustomerOrderModel.calculateBalanceDue() : -1 * CustomerOrderModel.calculateBalanceDue()}}, Payment is {{CustomerOrderModel.Payment_Amount | currency}} </p>
                            Are you sure, you want to continue?
                        </div>
                        <div class="modal-footer">   
                            <button type="button" class="btn btn-primary" ng-click = "CustomerOrderModel.payment_Response(true)">Continue</button>
                            <button type="button" class="btn btn-default" ng-click = "CustomerOrderModel.payment_Response(false)">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            </div>
            
        </body>
    </html>
</apex:page>