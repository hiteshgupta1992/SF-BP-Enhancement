<apex:page standardStylesheets="false" showHeader="false" sidebar="false" controller="PreviewGridRecordsCtrl" readOnly="true">
    <html ng-app="prevRecords">
        <head>
        	<apex:stylesheet value="{!URLFOR($Resource.Bootstrap, 'dist/css/bootstrap.css')}"/>
        	<apex:includeScript value="{!$Resource.Standard_Jquery}"/>
			<apex:includeScript value="{!URLFOR($Resource.Bootstrap, 'dist/js/bootstrap.min.js') }" />
            <apex:includeScript value="{!$Resource.angular}"/>
            <apex:includeScript value="{!URLFOR($Resource.AngularNotification, 'angular-ui-notification.min.js') }" /> 
			<apex:stylesheet value="{!URLFOR($Resource.Font_awesome, 'css/font-awesome.css')}"/>
            
            <style>
                /* To Do */
                .F18 {
				    font-size: 18px;
				}
				.Plr5 {
				    padding: 0 5px;
				}
				.FC7 {
				    color: #727983;
				}
				#myTable{
					margin: 30px 0;
				}
				#myTable td{
					max-width: 200px;
				}
            </style>
        </head>
        
        <script type="text/javascript">
        	function encodeString(inputString){
	            if(inputString == null) {
	                return inputString;
	            }
	            var outputString = window.btoa(inputString);
	            return outputString;
	        }
	        
	        function decodeString(inputString){
	            if(inputString == null) {
	                return inputString;
	            }
	            var outputString = window.atob(inputString);
	            return outputString;
	        }
	        
	        function debug(logString){
	            console.log(logString);
	        }
	        
			var PrevRecords = angular.module('prevRecords', ['ui-notification']);
			PrevRecords.filter('tel', function () {
			    return function (tel) {
			        if (!tel) { return ''; }
			
			        var value = tel.toString().trim().replace(/^\+/, '');
			
			        if (value.match(/[^0-9]/)) {
			            return tel;
			        }
			
			        var country, city, number;
			
			        switch (value.length) {
			            case 10: // +1PPP####### -> C (PPP) ###-####
			                country = 1;
			                city = value.slice(0, 3);
			                number = value.slice(3);
			                break;
			
			            case 11: // +CPPP####### -> CCC (PP) ###-####
			                country = value[0];
			                city = value.slice(1, 4);
			                number = value.slice(4);
			                break;
			
			            case 12: // +CCCPP####### -> CCC (PP) ###-####
			                country = value.slice(0, 3);
			                city = value.slice(3, 5);
			                number = value.slice(5);
			                break;
			
			            default:
			                return tel;
			        }
			
			        if (country == 1) {
			            country = "";
			        }
			
			        number = number.slice(0, 3) + '-' + number.slice(3);
			
			        return (country + " (" + city + ") " + number).trim();
			    };
			});
			PrevRecords.controller('prevRecordsCtrl', function ($scope, PreviewRecordsService, Notification) {
				$scope.PreviewPage = {};
				$scope.PreviewPage.filterId = "{!JSENCODE(URLENCODE($CurrentPage.parameters.filterId))}" ? "{!JSENCODE(URLENCODE($CurrentPage.parameters.filterId))}" : null;
				$scope.PreviewPage.filterFormJson = {};
				
				// Some constants
				$scope.PreviewPage.showcolumnsTotal = true;
				var MAX_RECORDS = 2000;
				$scope.PreviewPage.displayObjectTypeToNameMap = {1 : 'Customers',
																 2 : 'Vendors',
																 3 : 'Parts',
																 4 : 'Kits',
																 5 : 'Fees',
																 6 : 'Labor Codes',
																 7 : 'Users',
																 8 : 'Customer Orders',
																 9 : 'Customer Invoices',
																 10 : 'Vendor Orders',
																 11 : 'Vendor Receivings',
																 12 : 'Vendor Invoices',
																 13 : 'Item Categories',
																 14 : 'Price Levels',
																 15 : 'Sales Taxes',
																 16 : 'Sublets',
																 17 : 'Customer Payments'
																};	
				
				$scope.PreviewPage.gridData = [];
				$scope.lastUniqueFieldValue = '';
				
				// Grouping models
				$scope.PreviewPage.aggregateFieldNames = [];		// Used internally: field record key for aggragate fields (total value fields)
				$scope.PreviewPage.gridGroupAggregateResult = {};	// Array will hold aggragate values with group values: [{"Active" : {"GroupName" : "Active", "Total_Price" : 200}}]
               	$scope.PreviewPage.gridGroupFieldValues = [];		// Array to hold values of group field like: Active, Inactive in case of status
               	$scope.PreviewPage.gridGroupedResult = [];			// Array will hold the records in grouped format: ["Active" : [{"Id":"asd", "Name" : "SN"}, {"Id":"asd2", "Name" : "SN2"}]]
               	$scope.PreviewPage.recordIdsIncluded = "";
				
				// Load grid data:
				$scope.PreviewPage.loadGridData = function() {
					if($scope.PreviewPage.filterId != null && $scope.PreviewPage.filterId != "") {
						// Load filter JSON data
						$scope.PreviewPage.getFilterJSONData();
					}
				}
				
				// Get the filter JSON data
				$scope.PreviewPage.getFilterJSONData = function() {
					PreviewRecordsService.getFilterJSONData($scope.PreviewPage.filterId).then(function(successfulSearchResult) {
						debug(successfulSearchResult);
						if(successfulSearchResult != null) {
							$scope.PreviewPage.filterFormJson = JSON.parse(successfulSearchResult.FieldFilterJson);
							$scope.PreviewPage.objectsList = successfulSearchResult.ObjectList;
							$scope.PreviewPage.gridSortAttrs = JSON.parse(successfulSearchResult.SortJson).Sorting;
							$scope.PreviewPage.aggregateFieldNames = JSON.parse(successfulSearchResult.SummaryFieldsJSON);
							$scope.PreviewPage.ExportGroupField = successfulSearchResult.ExportGroupField;
							$scope.PreviewPage.columns = JSON.parse(successfulSearchResult.DisplayHiddenColumn);
							
							// Load grid data based on filters
							$scope.PreviewPage.gridData = [];
		                	var ObjectsList;
				           	if($scope.PreviewPage.filterFormJson.Type.Objects.length != 0){
				           		ObjectsList = angular.copy($scope.PreviewPage.filterFormJson.Type.Objects);
				           	}else{
				           		ObjectsList = angular.copy($scope.PreviewPage.objectsList);
				           	}
				           	ObjectsList = ObjectsList.remove('Any');
				           	//ObjectsList = ['Parts'];
		                	$scope.PreviewPage.objectsReportingDataCall(ObjectsList);
						}
					}, function(errorSearchResult) {
		                $scope.PreviewPage.filterList.FilterType = errorSearchResult;
		                Notification.error("Error occurred while fetching the records.");
		            });
				}
				
				// Method runs recursively to get data based on objects
				$scope.PreviewPage.objectsReportingDataCall = function(objectsList) {
		       		if( objectsList.length != 0 ) {
		       			$scope.PreviewPage.getReportingData(objectsList[0], null, objectsList);
		       		} else {
		       			return;
		       		}
		        }
		        
				// Get the reporting grid data
				$scope.PreviewPage.getReportingData = function(selectedObjName, uniqueValueFieldLastValue, ObjectsList) {
					PreviewRecordsService.getReportData(JSON.stringify($scope.PreviewPage.filterFormJson),
														selectedObjName,
														uniqueValueFieldLastValue
													).then(function(reportResult) {
						$scope.PreviewPage.gridData = $scope.PreviewPage.gridData.concat(reportResult.ResultData[reportResult.ResultData.RecordsVariableName]);
						
						if(!reportResult.IsProcessCompleted && $scope.PreviewPage.gridData.length < MAX_RECORDS){
							$scope.PreviewPage.getReportingData(objectName, reportResult.UniqueFieldName, ObjectsList);
						} else {
							if($scope.PreviewPage.gridData.length >= MAX_RECORDS){
								$scope.PreviewPage.showcolumnsTotal = false;
								ObjectsList = [];
							}
							if(ObjectsList.length > 1) {
			            		ObjectsList.splice(0, 1);
			            		$scope.PreviewPage.objectsReportingDataCall(ObjectsList);
			            		
			            	} else {
			            		debug('All Calls Completed');
			            		debug($scope.PreviewPage.gridData);
			            		debug($scope.PreviewPage.aggregateFieldNames);
			            		// Group records
			            		$scope.PreviewPage.groupRecords();
			            		
			            		// Sort records
			            		$scope.PreviewPage.sortGroupedRecords();
			            		
			            		debug($scope.PreviewPage.gridGroupAggregateResult);
				            	debug($scope.PreviewPage.gridGroupFieldValues);
				            	debug($scope.PreviewPage.gridGroupedResult);
			            	}
			            	return true;
						}
					}, function(errorSearchResult) {
		                // ERROR
		                Notification.error("Error occurred while fetching the records.");
		            });
				}
				
				// Method to group records
				$scope.PreviewPage.groupRecords = function() {
					angular.forEach($scope.PreviewPage.gridData, function(value, key) {
						var obj = value;
						
						// Grouping data set funtionality:
						var groupedFieldName;
						if($scope.PreviewPage.ExportGroupField != null && $scope.PreviewPage.ExportGroupField != "") {
							var obj1Id = value.Id;
							groupedFieldName = $scope.PreviewPage.ExportGroupField;
							
							if($scope.PreviewPage.recordIdsIncluded.indexOf(obj1Id) == -1) {
					    		$scope.PreviewPage.recordIdsIncluded += ' ' + obj1Id;
					    		if($scope.PreviewPage.gridGroupAggregateResult[obj[groupedFieldName]] == undefined) {
					    			$scope.PreviewPage.gridGroupFieldValues.push(obj[groupedFieldName]);
					    			$scope.PreviewPage.gridGroupAggregateResult[obj[groupedFieldName]] = {};
					    		}
					    		angular.forEach($scope.PreviewPage.aggregateFieldNames.visible, function(value, key) {
					    			if($scope.PreviewPage.gridGroupAggregateResult[obj[groupedFieldName]][value.RecordKey] == null) {
					    				$scope.PreviewPage.gridGroupAggregateResult[obj[groupedFieldName]][value.RecordKey] = 0;
					    			}
									$scope.PreviewPage.gridGroupAggregateResult[obj[groupedFieldName]][value.RecordKey] += obj[value.RecordKey];
								});
				    			$scope.PreviewPage.gridGroupAggregateResult[obj[groupedFieldName]]["GroupName"] = obj[groupedFieldName];
				    			
				    			// Push records as per grouping
				    			if($scope.PreviewPage.gridGroupedResult[obj[groupedFieldName]] == undefined) {
					    			$scope.PreviewPage.gridGroupedResult[obj[groupedFieldName]] = [];
					    		}
				    			//$scope.PreviewPage.gridGroupedResult[obj[groupedFieldName]].push(obj);
				    			groupedFieldName = obj[groupedFieldName];
					    	}
						} else {
							var obj1Id = value.Id;
							groupedFieldName = 'All';
				            if($scope.PreviewPage.recordIdsIncluded.indexOf(obj1Id) == -1) {
					    		$scope.PreviewPage.recordIdsIncluded += ' ' + obj1Id;
					    		
					    		if($scope.PreviewPage.gridGroupAggregateResult[groupedFieldName] == undefined) {
					    			$scope.PreviewPage.gridGroupFieldValues.push(groupedFieldName);
					    			$scope.PreviewPage.gridGroupAggregateResult[groupedFieldName] = {};
					    		}
				            	angular.forEach($scope.PreviewPage.aggregateFieldNames.visible, function(value, key) {
					    			if($scope.PreviewPage.gridGroupAggregateResult[groupedFieldName][value.RecordKey] == null) {
					    				$scope.PreviewPage.gridGroupAggregateResult[groupedFieldName][value.RecordKey] = 0;
					    			}
									$scope.PreviewPage.gridGroupAggregateResult[groupedFieldName][value.RecordKey] += obj[value.RecordKey];
								});
				    			$scope.PreviewPage.gridGroupAggregateResult[groupedFieldName]["GroupName"] = groupedFieldName;
				    			
				    			// Push records as per grouping
				    			if($scope.PreviewPage.gridGroupedResult[groupedFieldName] == undefined) {
					    			$scope.PreviewPage.gridGroupedResult[groupedFieldName] = [];
					    		}
				    		}
						}
						
						// Update Type field value as per object type number
						if(obj.Type != null) {
							obj.Type = $scope.PreviewPage.displayObjectTypeToNameMap[obj.Type];
						}
						$scope.PreviewPage.gridGroupedResult[groupedFieldName].push(obj);
					});
				}
				
				// Method to sort grouped records individually
				$scope.PreviewPage.sortGroupedRecords = function() {
					angular.forEach($scope.PreviewPage.gridGroupFieldValues, function(value, key) {
			            $scope.PreviewPage.gridGroupedResult[value].sort($scope.dynamicSortMultiple($scope.PreviewPage.gridSortAttrs));
					});
				}
				
				// Delete raw current filter data for preview purpose
				$scope.PreviewPage.deleteRawFilterData = function() {
					PreviewRecordsService.deleteRawFilterData($scope.PreviewPage.filterId).then(function(successfulSearchResult) {
						
					});
				}
				
				$scope.dynamicSort = function(propertyObject) { 
				    return function (obj1,obj2) {
				    	if(propertyObject.Type == "Number" || propertyObject.Type == "Currency" || propertyObject.Type == "Icon") {
				    		var obj1Val = parseFloat(obj1[propertyObject.ExportSort]);
				    		var obj2Val = parseFloat(obj2[propertyObject.ExportSort]);
				    		
				    		if(propertyObject.SortDirection == 'DESC'){
				    			obj1Val = isNaN(obj1Val) ? -1 : obj1Val;
				    			obj2Val = isNaN(obj2Val) ? -1 : obj2Val;
				    			
				    			return (obj1Val < obj2Val) ? 1 
				    					: (obj1Val > obj2Val) ? -1 : 0; 
					    	}else{
					    		obj1Val = isNaN(obj1Val) ? Number.MAX_VALUE : obj1Val;
				    			obj2Val = isNaN(obj2Val) ? Number.MAX_VALUE : obj2Val;
				    			
					    		return (obj1Val < obj2Val) ? -1 
					    				: (obj1Val > obj2Val) ? 1 : 0;
					    	}
				    	} else if(propertyObject.Type == "Date") {
				    		var obj1Val = new Date(obj1[propertyObject.ExportSort]);
				    		var obj2Val = new Date(obj2[propertyObject.ExportSort]);
				    		
				    		if(propertyObject.SortDirection == 'DESC'){
				    			obj1Val = isNaN(obj1Val) ? -1 : obj1Val;
				    			obj2Val = isNaN(obj2Val) ? -1 : obj2Val;
				    			
				    			return (obj1Val < obj2Val) ? 1 
				    					: (obj1Val > obj2Val) ? -1 : 0; 
					    	}else{
					    		obj1Val = isNaN(obj1Val) ? Number.MAX_VALUE : obj1Val;
				    			obj2Val = isNaN(obj2Val) ? Number.MAX_VALUE : obj2Val;
				    			
					    		return (obj1Val < obj2Val) ? -1 
					    				: (obj1Val > obj2Val) ? 1 : 0;
					    	}
				    	} else {
				    		var obj1Val = (obj1[propertyObject.ExportSort] != null) ? obj1[propertyObject.ExportSort].toLowerCase() : obj1[propertyObject.ExportSort];
					    	var obj2Val = (obj2[propertyObject.ExportSort] != null) ? obj2[propertyObject.ExportSort].toLowerCase() : obj2[propertyObject.ExportSort];
					    	if(propertyObject.SortDirection == 'DESC'){
					    		return (obj1Val == null || obj1Val == '') ? 1
					    				: ((obj2Val == null || obj2Val == '') ? -1
					    				: ((obj1Val < obj2Val) ? 1
					            		: ((obj1Val > obj2Val) ? -1 : 0)
		
					            		));
					    	}else{
					    		return (obj1Val == null || obj1Val == '') ? -1
					    				: ((obj2Val == null || obj2Val == '') ? 1
					    				: ((obj1Val < obj2Val) ? -1
					            		: ((obj1Val > obj2Val) ? 1 : 0)
		
					            		));
					    	}
				    	}
				    }
				}
				
				$scope.dynamicSortMultiple = function() {
				    /*
				     * save the arguments object as it will be overwritten
				     * note that arguments object is an array-like object
				     * consisting of the names of the properties to sort by
				     */
				    var props = arguments[0];
				    debug(props);
				    return function (obj1, obj2) {
				        var i = 0, result = 0, numberOfProperties = props.length;
				        /* try getting a different result from 0 (equal)
				         * as long as we have extra properties to compare
				         */
				        while(result === 0 && i < numberOfProperties) {
				            result = $scope.dynamicSort(props[i])(obj1, obj2);
				            i++;
				        }
				        return result;
				    }
				}
			});
			
			// Service Starts	
			PrevRecords.service("PreviewRecordsService", function ($q) {
				// Get the report data based on filters
				this.getReportData = function(filterJSON, selectedObjName, uniqueValueFieldLastValue)
				{	
					filterJSON = encodeString(filterJSON);
					selectedObjName = encodeString(selectedObjName);
					uniqueValueFieldLastValue = encodeString(uniqueValueFieldLastValue);
					var deferred = $q.defer();
					Visualforce.remoting.Manager.invokeAction(
						'{!$RemoteAction.PreviewGridRecordsCtrl.getReportData}', filterJSON, selectedObjName, uniqueValueFieldLastValue,
						function (result, event) {
						   if (event.type == 'exception') {
								deferred.reject(event.message);
							} else {
								var gridData = decodeString(result);
								var find = '\'';
								var re = new RegExp(find, 'g');
								gridData = gridData.replace(re, '');
								deferred.resolve(JSON.parse(gridData));
							}
						}, {
							escape : true
					});
					return deferred.promise;
				}
				
				// Get the filter data for preview records display
				this.getFilterJSONData = function (filterId) {
					filterId = encodeString(filterId);
					var deferred = $q.defer();
					// make AJAX request to the remote service
					Visualforce.remoting.Manager.invokeAction(
						'{!$RemoteAction.PreviewGridRecordsCtrl.getFilterJSONData }', filterId,
						function (result, event) {
						if (event.type == 'exception') {
							deferred.reject(event.message);
						} else {
							var filterData = decodeString(result);
							var find = '\'';
							var re = new RegExp(find, 'g');
							filterData = filterData.replace(re, '');
							deferred.resolve(JSON.parse(filterData));
						}
					}, {
						escape : true
					});
					return deferred.promise;
				}
				
				// Get the filter data for preview records display
				this.deleteRawFilterData = function (filterId) {
					filterId = encodeString(filterId);
					var deferred = $q.defer();
					// make AJAX request to the remote service
					Visualforce.remoting.Manager.invokeAction(
						'{!$RemoteAction.PreviewGridRecordsCtrl.deleteRawFilterData }', filterId,
						function (result, event) {
						if (event.type == 'exception') {
							deferred.reject(event.message);
						} else {
							var filterData = decodeString(result);
							deferred.resolve(filterData);
						}
					}, {
						escape : true
					});
					return deferred.promise;
				}
			});
		</script>
		
        <body ng-controller="prevRecordsCtrl" ng-init="PreviewPage.loadGridData();">
           	<div class="container" style="overflow-x: auto;" ng-if="PreviewPage.gridGroupFieldValues.length != 0">
           		<div class="tableContainer" ng-repeat="groupval in PreviewPage.gridGroupFieldValues">
           		
           			<h4 ng-if="PreviewPage.ExportGroupField != '' && PreviewPage.ExportGroupField != null">{{PreviewPage.ExportGroupField}}: {{groupval}}</h4>
	            	<table class="table table-striped" id="myTable">
	                     <thead>
	                         <tr>
	                             <th class="draggable" ng-repeat="col in PreviewPage.columns.DisplayedColumns">
	                                 <span class="colLabel" ng-bind="col.Label"></span>
	                             </th>
	                         </tr>        
	                     </thead>    
	                     <tbody class="parentBody">
	                         <tr data-ng-repeat="data in PreviewPage.gridGroupedResult[groupval]">
	                             <td ng-repeat="col in PreviewPage.columns.DisplayedColumns">
	                             	<span ng-if="col.Type == 'Icon' && data[col.RecordKey] == 1"
	                             		data-toggle="tooltip" title="Customer">
	                                     <i class="fa fa-users  Plr5 FC7"></i>
	                                 </span> 
	                                 
	                                 <span ng-if="col.Type == 'Icon'" ng-bind="data[col.RecordKey]">
	                                 </span>
	                                 
	                                 <span ng-if="col.Type == 'Number'" ng-bind="data[col.RecordKey] | number:2">
	                                 </span>
	                                 
	                                 <span ng-if="col.Type == 'Currency'" ng-bind="data[col.RecordKey] | currency">
	                                 </span>
	                                 
	                                 <span ng-if="col.Type == 'Date' ||col.Type == 'Text' || col.Type == 'Email' || col.Type == 'Link'"
	                                 	ng-bind="data[col.RecordKey]">
	                                 </span>
	                                 
	                                 <span ng-if="col.Type == 'Phone'" ng-bind="data[col.RecordKey] | tel">
	                                 </span>
	                                 
	                                 <span ng-if="col.Type == 'Boolean'" ng-bind="data[col.RecordKey] ? 'Yes' : 'No'">
	                                 </span>
	                               </td>
	                         </tr> 
	                         <tr ng-if="PreviewPage.showcolumnsTotal">
	                         	<td ng-repeat="col in PreviewPage.columns.DisplayedColumns">
	                         		{{PreviewPage.gridGroupAggregateResult[groupval][col.RecordKey] | number:2}}
	                         	</td>	
	                         </tr>
	                     </tbody> 
	                 </table>
	        	</div>
        	</div>
        
        	<div class="gridLoadingDiv" style="position: fixed; top: 32%; left: 40%;" ng-if="PreviewPage.gridGroupFieldValues.length == 0">
           			<!-- <img src="https://www.criminalwatchdog.com/images/assets/loading.gif" style="width: 200px; height: 200px; margin-left: 40%; margin-top: 100px;"/> -->
           			<img src="{!URLFOR($Resource.Images, '/loading.gif')}" title="Please Wait..." style="width: 200px; height: 200px; margin-left: 40%; margin-top: 100px;"/>
           	</div>
        </body>
    </html>
</apex:page>