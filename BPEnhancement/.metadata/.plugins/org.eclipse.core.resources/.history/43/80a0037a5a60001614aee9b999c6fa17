<apex:page standardStylesheets="false" showChat="false"
		showHeader="false" sidebar="false"
		Controller="VendorOrderReceivingCtrl">

	<html ng-app="vendorOrderReceivingApp">
		<head>
			<title>Vendor Order Receiving</title>
		</head>
		
		<c:Css_and_Js />
		<!-- Directive for price fields -->
    	<c:dirNumberInput />
		<c:NewVendorOrderStyle />
		<c:NewDirPagination />
		 <c:VendorInfo />
		<apex:includeScript value="{!$Resource.niceScroll}" />
		<script
			src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.0-beta.6/angular-animate.js">
		</script>
		<apex:includeScript value="{!$Resource.d3}" />
		<c:AutoCompleteSuggestion />
		<c:PopUp />
		<c:NewCOPopup />
		<c:NewPartPopUpOnVendorOrder />
		<c:dirpriceCallBack />
		 
		<style>
			.ConfirmBox-overlayNew {
				display: none;
				width: 400px;
				position: absolute;
				z-index: 1000;
			}
			.modal-backdrop.in {
				height: 2000px !important;
				width: 2000px;
			}
			
			.ConfirmBox-overlayNew {
				display: none;
				width: 400px;
				position: absolute;
				z-index: 1000;
			}
			
			/* .modal-content {
				top: 200px;
				left: 450px;
				width: 400px;
				position: fixed;
			} */
			
			.ConfirmBox-overlayNew .modal-content {
				top: 200px;
				left: 450px;
				width: 400px;
				position: fixed;
			}
			.volineItem_row_clickable .edit_panel .edit_box .edit-body1 .editform_btn1 {
				right: auto;
				top: 120px;
				width: 70px;
				margin-top : 50px;
				margin-left:25px;
			}
			
			.volineItem_row_clickable .firstchild {
				margin-left: 1.5%;
				width: 29%;
			}
			
			.volineItem_row_clickable .secondchild {
				margin-left: 2.0%;
				text-align: center;
				width: 10%;
			}
			
			.volineItem_row_clickable .thirdchild_secondry {
				margin-left: 3%;
				width: 13%;
			}
			
			.volineItem_row_clickable .otherchild {
				width: 12%;
				margin-left: 1%;
			}
			
			.sidePanel .leftPanelLinks .active:after {
				content: none;
			}
			
			.volineItem_row_clickable .Outstandingfirstchild {
				margin-left: 1%;
			}
			
			.volineItem_row_clickable .Outstandingsecondchild {
				margin-left: 5%;
			}
			
			.volineItem_row_clickable .Outstandingthirdchild {
				margin-left: 11%;
			}
			
			.volineItem_row_clickable .Outstandingfourchild {
				margin-left: 9%;
			}
			
			.volineItem_row_clickable .Outstandinglastchild {
				margin-left: 0.3%;
				min-width: 1%;
			}
			
			/* .ownerInfo .Name {
				margin-left: 20px;
			}
			
			*/
			.ownerInfo {
				padding: 5px 10px 5px 20px;
				border-top: 2px solid #ECF0F1;
				color: #939CA9;
				/* border-bottom: 2px solid #ECF0F1; */
			}
			
			/* commented by Pooja */
			/* .sidePanel .leftPanelLinks:hover {
				overflow: auto;
			}
			
			.sidePanel .leftPanelLinks .active:after {
				content: none;
			} */
			
			/* added by Pooja */
			.sidePanel .leftPanelLinks:hover { 
				overflow: auto; 
			}
			                
			.sidePanel .leftPanelLinks .active:after {
				content: none; 
			}
			
		    .sidePanel .leftPanelLinks	{
			    height: 200px;
			    overflow: hidden;
			}
			
			
		    .sidePanel {
				padding: 0;
				color: #939CA9;
			}
			
			.sidePanel .orderNumber {
				height: 48px;
				background-color: #E6EBEC;
				color: #00AEEF;
				font-weight: bold;
				padding: 15px 20px;
				margin-bottom: 20px;
			}
			
			/* .ownerInfo {
				padding: 5px 10px 5px 20px;
				border-top: 2px solid #ECF0F1;
				color: #939CA9;
				border-bottom: 2px solid #ECF0F1;
			}
			*/
			
			.ownerInfo .Name {
				margin-left: 20px;
			}
			
			/* .sidepaneluserinfo, .statusRow {
				margin: 0px 0px 10px 20px !important;
			} */
			
			.sideBarTotals {
				position: fixed;
				bottom: 10px;
				width: 16.6%;
				border-top: 2px solid #ECF0F1;
			}
			
			.orderleftPanelLinks .ordertotal, .totalDue {
				padding: 12px 20px;
			}
			
			.orderleftPanelLinks, .totalDue {
				padding-bottom: 20px;
			}
			
			orderleftPanelLinks .ordertotal a:hover, .totalDue a:hover {
				text-decoration: none;
			}
			
			.orderleftPanelLinks .ordertotal a, .totalDue a {
				width: 48%;
				float: left;
				text-transform: uppercase;
			}
			
			.searchToAdd .activeSearchDiv {
				border: 2px solid #00AEEF;
			}
			
			a.not-active {
				pointer-events: none;
				cursor: default;
				color: inherit;
			}
			.disabledCheckOut{
                 color:#B3B3B3;
             }
			.cou_plus_icon {
				margin-left: 10px;
				color: #939CA9;
			}
			
			.main_section .rowGeneral {
				padding-right: 4%;
			}
			
			.main_section_COU {
				margin-bottom: 48px;
				margin-top: 21px;
			}
			
			.main_section_COU .line {
				border-top: 1px solid #ECF0F1;
				margin: 0px 20px 0px 20px;
			}
			
			.main_section_COU_Header .actionRow .sectionText {
				font-weight: bold;
				color: #00aeef;
				margin-left: 24px;
			}
			
			.main_section_COU_Header {
				border-top: 1px solid #ECF0F1;
				margin: 0px 20px 0px 20px;
				padding-top: 24px;
				border-top: 1px solid #ECF0F1;
			}
			
			.fixedHeaderText {
				padding: 0 5px 0 10px;
				margin-top: 7px;
				width: 500px;
				background: #FFFFFF;
				height: 41px;
				border-top-right-radius: 2px;
				border-top-left-radius: 2px;
				border-top: 1px solid #D1D2D2;
				border-left: 1px solid #D1D2D2;
				border-right: 1px solid #D1D2D2;
			}
			
			.fixedHeaderText .total {
				margin-top: 7px;
			}
			
			.fixedContent {
				padding: 9px;
				position: fixed;
				top: 50px;
				right: 0;
				width: 45%;
				z-index: 99;
			}
			
			.div-padding{
			   padding-left:0px;
			   padding-right:20px;
			}
			
			/** radio button **/
			.chk_tick .chksqure {
				font-size: 0px;
				height: 12px;
				width: 12px;
				margin: 3px;
				border-radius: 2px;
				background: #D8D8D8;
			}
			
			.chked .chksqure {
				font-size: 0px !important;
				height: 12px;
				width: 12px;
				margin: 3px;
				border-radius: 2px;
				background: #71BF3E;
			}
			
			.chk_tick {
				width: 20px !important;
				height: 20px !important;
				border-radius: 4px;
				margin: 10px -15px;
				border: 1px solid #cccccc;
				display: block;
				float: left;
				cursor: pointer;
			}
			
			/**edit row**/
			.gid_container_Customer .table {
				border: 0;
			}
			
			.main_section_COU_Header .actionRow .actionText {
				margin-left: 5px;
				color: #939CA9;
			}
			
			.clickable_row .first_img {
				height: 30px;
			}
			
			.gid_container_Customer .table th {
				border: none;
				padding-top: 10px;
				padding-bottom: 0px;
			}
			
			.gid_container_Customer .table tbody {
				border: none;
			}
			
			.gid_container_Customer .table tbody>tr>td {
				border: none;
				padding-top: 2px;
				padding-bottom: 2px;
				vertical-align: middle;
			}
			
			.gid_container_Customer .table tbody .tddropdown td {
				padding-top: 2px;
				padding-bottom: 2px;
				vertical-align: middle;
			}
			
			.angucomplete-dropdown {
				width: 100%;
				margin-top: 28px;
			}
			
			.gid_container_Customer .tableHeader {
				margin-left: -15px;
				margin-right: -15px;
			}
			
			.gid_container_Customer .S2 {
				margin-left: 12px;
				margin-right: 12px;
			}
			
			.gid_container_Customer table tr.edit_panel {
				background: #fff;
			}
			
			.gid_container_Customer table tr.edit_panel.show_tr {
				display: table-row;
			}
			
			.gid_container_Customer table tr.edit_panel input[type="radio"] {
				float: left;
				position: relative;
			}
			/* 
			.gid_container_Customer table tr.edit_panel td .edit_box .edit-body .editform_btn {
	            position: absolute;
	            right: 20px;
	            top: 87px;
	            width: 50px;
	        } */
	        
			.Vendor_Received__Container  table tr.edit_panel td .edit_box .edit-body .editform_btn	{
				right: auto;
				width: 70px;
				top: 120px;
			}
			
			.Receiving_For_Vendor_Container  table tr.edit_panel td .edit_box .edit-body .editform_btn	{
				right: auto;
				width: 70px;
				top: 120px;
			}
			
			.gid_container_Customer table tr.edit_panel td {
				overflow: hidden;
				height: 0;
				padding-top: 5px;
			}
			
			.gid_container_Customer table tr.edit_panel td .edit_box {
				border: 1px dashed #A8A8A8;
				margin: 10px 5px;
				position: relative;
			}
			
			.gid_container_Customer table tr.edit_panel.animate_tr td {
				border-left: 3px solid #939393;
				height: auto;
				padding: 4px;
			}
			
			.gid_container_Customer table tr.edit_panel td .edit_box.ng-hide {
				height: 0;
			}
			
			.gid_container_Customer table tr.edit_panel td .edit_box {
				transition: all 0.5s ease;
			}
			
			.edit_box {
				transition: .5s linear all;
				height: 130px;
			}
			
			.gid_container_Customer table tr.edit_panel.animate_tr {
				margin-top: 10px;
				transition: all 0.5s ease;
			}
			
			.gid_container_Customer table tr.edit_panel td .edit_box .its-heading {
				position: absolute;
				left: 24px;
				top: -15px;
				min-width: 175px;
				background: #fff;
				min-height: 30px;
				padding: 6px;
				font-size: 14px;
				color: #939CA9;
				font-weight: bold;
			}
			
			.gid_container_Customer .table .clickable_row .edite_btn {
				height: 38px;
				width: 38px;
				float: left;
				padding: 4px;
				margin: 4px 0;
			}
			
			.gid_container_Customer table tr.edit_panel td .edit_box .edit-body {
				margin: 8px;
			}
			
			.gid_container_Customer .table tbody>tr>td i.servicesitem {
				background: #CEC7C7;
				padding: 5px;
				border-radius: 3px;
			}
			
			.gid_container_Customer table tr.edit_panel td .serviceitemedit {
				margin: 10px 0;
			}
			
			.gid_container_Customer table tr.edit_panel td.edit-service-item .serviceitemedit.ng-hide {
				height: 0;
			}
			
			.gid_container_Customer table tr.edit_panel td.edit-service-item .serviceitemedit {
				border: 1px solid #BBE5F9;
				height: 160px;
				transition: all 0.5s ease;
			}
			
			.gid_container_Customer table tr.edit_panel td.edit-service-item .serviceitemedit .its-heading {
				position: static;
			}
			
			.gid_container_Customer table tr.edit_panel td.div-padding {
			   padding-left:0px;
			   padding-right:20px;
			}
			
			.volineItem_row_clickable .edit_panel .edit_box {
				border: 1px solid #BBE5F9;
				height: 160px;
				transition: all 0.5s ease;
			}
			
			.volineItem_row_clickable .edit_panel .edit_box .its-heading1 {
				background: #fff none repeat scroll 0 0;
				color: #939ca9;
				font-size: 14px;
				font-weight: bold;
				left: 24px;
				min-height: 30px;
				min-width: 175px;
				padding: 6px;
				top: -15px;
			}
			
			.volineItem_row_clickable .edit_panel .edit_box .edit-body1 {
			    margin-bottom: 20px;
			    margin-left: -12px;
			    margin-top: -5px;
			    padding-bottom: 10px;
			}
			
			.gid_container_Customer .table tbody  tr  td.BL {
				border-left: 1px solid #999;
			}
			
			.Related_section_Vendor_container .gid_container_Customer table tr.edit_panel td .serviceitemedit .edit-body {
				margin: 15px 26px 15px 0px;
			}
			
			.gid_container_Customer table tr.edit_panel td .serviceitemedit .edit-body .radio label,
			.checkbox label {
				padding: 0;
				height: 30px;
			}
			
			.gid_container_Customer table tr.edit_panel td .edit_box .edit-body .radio label span {
				display: block;
				float: left;
				margin-top: 0px;
				font-size: 14px;
				color: #707070;
			}
			
			.gid_container_Customer table tr.edit_panel td .edit_box .edit-body .radio label span.select_box_container {
				display: block;
				float: left;
				margin-left: 22px;
				margin-top: -4px;
			}
			
			.edit-service-chek {
				margin: 0;
				margin-right: 10px;
			}
			
			.show_Availableline {
				background: #71BF3E;
				color: #fff;
				padding-left: 10px;
			}
			
			.bgRed {
				background: #E80000;
			}
			.vendor_top_spacing {
				margin-top: -20px;
			}
			.packingslip {
				margin-left:0px;
			    margin-top: 10px;
			}
			.btn[disabled] {
		    	background-color: #B7BEC6;
			}
			.actionBtn {
				padding: 2px 5px 0px 6px;
			    color: #FFF;
			    background: #B7BEC6;
			    line-height: 1.16;
			    font-weight: bold;
			    font-size: 12px;
			    text-transform: uppercase;
			}
			
			/* added by Pooja */
			.userNameblock p span {
				color: #337ab7;
			}
			
			.orderleftPanelLinks .ordertotal, .totalDue {
				padding:12px 20px;
			}
			.orderleftPanelLinks, .totalDue {
				padding-bottom:20px;
			}
			.orderleftPanelLinks .ordertotal a:hover, .totalDue a:hover {
				text-decoration:none;
			}
			.totalDue a:hover {
				color:#00AEEF;
			}
			.orderleftPanelLinks .ordertotal a, .totalDue a {
			 	width:48%; 
			 	float:left;    
			 	text-transform: uppercase;
			}
			 
			.fixedContent .fa-floppy-o, .fixedContent .fa-cog {
				color: #000;
			}
			
			#SearchToAddElement > .form-control	{
				border: none;
			    box-shadow: none;
			    height: 32px;
			}
			
			.main_section .actionRow .sectionText {
				font-weight: bold;
			    color: #00AEEF;
			}
			
			.contentWrapper .VOR_Info_Block	{
				margin-bottom: 0px;
			}
			
			.FC2 {
				color: #00AEEF;
			}
			
			.F12 {
				font-size: 12px;
			}
			
			.Profile_pic {
				height: 100px;
			    width: 100%;
			}
			
			.Plr12 .Plr0 .MB12 .Plr12_Plr0_MB12_imgDiv {
				float: left;
			    background-color: #373c40;
			    border-radius: 5px;
			    padding: 1px;
			    margin-right: 5px;
			}
			
			.Plr12 .Plr0 .MB12 .Plr12_Plr0_MB12_imgDiv .Plr12_Plr0_MB12_imgDiv_img {
				height: 35px;
			    width: 35px;
			    padding: 5px;
			}
			
			.Plr12 .Plr0 .MB12 .T7_vendor {
				margin-left: 20px;
			    padding-top: 10px;
			    padding-left: 24px;
			}
			
			.contentWrapper .generalInfoData {
				 float:left;
				 width:40%;
				 margin-top: 8px;
			}
			
			.required_field:after {
				content:" *";
				color:red;
			}
			
			.Mrg20 .mycustvalue	{
				  float:left;
				  width:60%;
			}
			
			.Mrg20 .mycustvalue	.form-control {
				 width: 100%;
			}
			
			.Profile_pic_owner {
				height: 80px;
			    width: 100%;
			}
			
			.Plr12 .MB24 .MB12 .Lh25 {
				margin-bottom: 1px;
			}
			
			.Plr12 .MB24 .MB12 .Plr12_MB24_MB12_imgDiv {
				float: left;
			    background-color: #373c40;
			    border-radius: 5px;
			    padding: 1px;
			    margin-right: 5px;
			}
			
			.Plr12 .MB24 .MB12 .Plr12_MB24_MB12_imgDiv  .Plr12_MB24_MB12_imgDiv_img {
				height: 25px;
			    width: 25px;
			    padding: 5px;
			}
			
			.Plr12 .Plr0 .MB12 .T7_owner {
			    padding-top: 10px;
			    padding-left: 24px;
			}
			
			.invoiceStatus {
			    color: green; 
			}
			
			.VOR_Vendor_Received_Block_grid_container_Empty_Div1_class {
			    padding-left: 44px;
			}
			
			.gid_container_Customer {
			    margin-top: 35px;
			}
			
			.th_cursor_style {
			    cursor: pointer;
			}
			
			.gid_container_Customer .table th {
			    border: none;
			    padding-top: 15px;
			    padding-bottom: 15px;
			}
			
			.fixedHeaderText .headerlabel .fa-angle-right {
			    width: 10px;
			    padding: 0 3px;
			 }
			 
			.fixedHeaderText .headerlabel .fa-angle-down {
			    width: 10px;
			}
			
			.VO_Group_block_grid_container_tbody_tr_td_1_index_class img {
			    /* height: 26px; */
			    width: 26px;
			}
			
			.finalizeInvoiceBtnSection button .fa {
				font-size: 15px;
				margin-left: 5px;
			}
			
			.td_background_style {
				background:#fff;
			}
		</style>
		
		<style>
			.Info_section_part_container .gid_container_Customer table tr.edit_panel td.edit-service-item .serviceitemedit {
				height: 125px;
			}
			
			.Received_section_part_container .gid_container_Customer table tr.edit_panel td.edit-service-item .serviceitemedit {
				height: 130px;
			}
			
			.AddAllItemDropdown	{
				cursor: pointer;
			}
			
			.addnewItem {
			    border: 1px dashed #939598;
			    margin: 20px 0;
			    text-align: center;
			    padding: 20px 0;
			}
			.gid_container_Customer table tr.disabledCheckOut td {
			    color: #B3B3B3;
			}
			
			/* added by pooja */
			.disabledSearchToAddElement .angucomplete-holder .form-control  {
				background: #eee;
				pointer-events: none;
			}
			
			.disabledSearchToAddElement .angucomplete-holder .form-control .anguinput  {
				background: #eee;
			}
			
			.disabledCheckboxReceivingFromInvoice {
				pointer-events: none;
			}
			
			.disabledInputFieldReceivingFromInvoiceTotal {
				background: #eee;
				pointer-events: none;
			}
			
			.disabledInputFieldReceivingFromInvoiceTotal input {
				background: #eee;
			}
			
			/* .disabledEditableRow {
				pointer-events: none;
			} */
			
			.disabledEditableRow td	{
				color: #B3B3B3;
			}
			
			.disabledRemoveAllItemsActionBtn {
				pointer-events: none;
			}
			.dropdown-menu li a{
				cursor: pointer;
			}
		</style>
		<script>
	       
	        var vendorOrderReceivingApp = angular.module('vendorOrderReceivingApp', ['BPGlobalHeader', 'ngDialog', 'searchToAddModule', 'dir.priceInput', 'dir.listPagination', 'ngAnimate', 'ui-notification', 'PartPopUpModule', 'vendorInfo']);
	        
	        vendorOrderReceivingApp.directive('numberOnlyInput', function () {
	            return {
	                restrict: 'EA',
	                template: '<input type="text" class="form-control text-center" ng-model="inputValue" />',
	                scope: {
	                	inputValue: '='
	                },
	                link: function (scope) {
	                    scope.$watch('inputValue', function(newValue,oldValue) {
	                        var arr = String(newValue).split("");
	                        var pieces = String(newValue).split(".");
	                        if (arr.length === 0) return;
	                        if(arr[0] == '-'){
	                        	scope.inputValue = oldValue;
	                        }
	                        else if (isNaN(newValue)) {
	                            scope.inputValue = oldValue;
	                        }
	                        else if(typeof(pieces[1]) != "undefined" && pieces[1].length > 2){
	                            scope.inputValue = oldValue;
	                        }
	                    });
                     }
	            };
	        });
        
            vendorOrderReceivingApp.controller('vendorOrderReceivingController', function ($scope, $sce, $q, $timeout, Notification, vendorOrderReceivingService, ngDialog) {
            // START: Models
            $scope.VORModel = {};
            $scope.VORModel.VOR_Header = {};
            $scope.VORModel.SelectedVendorOrdersList = {};
           	$scope.VORtool = {};
            $scope.VendorOrderModel = {};
            // Help Text
            $scope.VORtool.helpText = { 
		   		Rec : 'Received',
	        };
                    
			$scope.labelDataValue = {
				QtyComitted : 0,
				QtyAvalable : 0,
				Instock : 0,
				QtyOnOrder : 0,
				ReOrderMin : 0,
				ReOrderMax : 0,
				maxPoint : 0,
			};
            
            $scope.VORModel.HoldResult ={};
            $scope.FilterID="";
            $scope.SearchToadd = {};
            $scope.typeToSearch = "";
            $scope.PreferredObject = "Vendor";
            
            // Map variable to hold order of sorting
            var sortOrderMap = {
                "ASC"   :   "DESC",
                "DESC"  :   ""
            };
            
            var timer;
            // Pop Up opening and hiding functions
			$scope.VORModel.showNeededForPopUp = function (event,vrGroupId) {
				$scope.applyCssOnPopUp(event, '.Vendor-Order-popup');
				    vendorOrderReceivingService.getGroupRecDetail(vrGroupId).then(function (vrGroupRecord) {
				    debug(vrGroupRecord);
				    if (vrGroupRecord.length > 0) {
				       $scope.VendorOrderModel.voGroupRecordDetail = vrGroupRecord[0];
				    }
				}, function (errorSearchResult) {
				    $scope.VendorOrderModel.OverlayInfo = errorSearchResult;
				});
			 }
            
			// hide popup
			$scope.VORModel.hideNeededForPopUp = function () {
			    angular.element('.Vendor-Order-popup').hide();
			}
			
			// View CO Header
			$scope.VORModel.viewCOHeader = function (coHeaderId) {
			   debug('coHeaderId : ' + coHeaderId);
			   window.open('/apex/customerOrder?id='+coHeaderId, '_blank');
			}
			
			// Show part Popup
			$scope.VORModel.showPartPopUp = function (event, partId) {
				$scope.applyCssOnPopUp(event, '.Vendor-Order-Part-Popup');
				
				vendorOrderReceivingService.getPartRecord(partId).then(function (partRecord) {
				    if (partRecord.PartDetailRec != undefined) {
				        debug(partRecord.PartDetailRec);
				        $scope.VendorOrderModel.partInfoDetail = partRecord.PartDetailRec;
				    }
				}, function (errorSearchResult) {
				    $scope.VORModel.OverlayInfo = errorSearchResult;
				});
			}   
            
            // Ccs for positioning popup
			$scope.applyCssOnPopUpRight = function (event, className) {
				var targetEle = angular.element(event.target);
				var elementWidth = targetEle.width();
				if (targetEle.width() > targetEle.parent().width()) {
				    elementWidth = targetEle.parent().width() - 15;
				}
				angular.element(className).css('top', targetEle.offset().top - 22);
				angular.element(className).css('left', targetEle.offset().left + elementWidth-400);
				angular.element(className).show();
			}
            
            // Css Popsitioning popup to right side
			$scope.applyCssOnPopUp = function (event, className) {
				var targetEle = angular.element(event.target);
				var elementWidth = targetEle.width();
				if (targetEle.width() > targetEle.parent().width()) {
				    elementWidth = targetEle.parent().width() - 15;
				}
				angular.element(className).css('top', targetEle.offset().top - 22);
				angular.element(className).css('left', event.clientX);
				angular.element(className).show();
			}
			$scope.VORModel.showInfoOverlay = function (event, vendorId) {
                var targetEle = angular.element(event.target);
                var elementWidth = targetEle.width();
                if (targetEle.width() > targetEle.parent().width()) {
                    elementWidth = targetEle.parent().width() - 15;
                }
                angular.element('.Vendor-info-overlay').css('top', targetEle.offset().top - 45);
                angular.element('.Vendor-info-overlay').css('left', event.clientX);
                angular.element('.Vendor-info-overlay').show();
            }
			$scope.VORModel.showVendorInfoOverlay = function (event, vendorId) {
                        debug("vendor id : "+vendorId);
                         $scope.$broadcast('VendorInfoPopUpEvent',  vendorId);
                         $scope.VORModel.showInfoOverlay(event, vendorId);
                }
            $scope.VORModel.hideVendorInfoOverlay = function () {
            	angular.element('.Vendor-info-overlay').hide();
            }

			$scope.applyCssOnPartPopUp = function (event, className) {
				var targetEle = angular.element(event.target);
				var elementWidth = targetEle.width();
				if (targetEle.width() > targetEle.parent().width()) {
				    elementWidth = targetEle.parent().width() - 15;
				}
				angular.element(className).css('top', targetEle.offset().top - 22);
				angular.element(className).css('left', event.clientX);
				 setTimeout(function(){  angular.element(className).show(); }, 1000); 
			}
            
            var timer;
            $scope.VORModel.showCOPopUp = function (event, coHeaderId) {
            debug("VORModel.VORLineItemGroupList==============="+$scope.VORModel.VORLineItemGroupList+", coHeaderId1="+coHeaderId);
            debug("VORModel.VendorOrderLineItemList==============="+$scope.VORModel.VORLineItemGroupList+", coHeaderId2="+coHeaderId);
            debug("VORModel.VORLineItemGroupList==============="+Object.getOwnPropertyNames($scope.VORModel.VORLineItemGroupList[0])+", coHeaderId1="+coHeaderId);
            debug("VORModel.VendorOrderLineItemList==============="+Object.getOwnPropertyNames($scope.VORModel.VORLineItemGroupList[0])+", coHeaderId2="+coHeaderId);
			if(coHeaderId == null || coHeaderId == 'undefined') {
			
			    return;
			}
			
			timer = $timeout(function () {
				$scope.applyCssOnPopUp(event, '.Vendor-Order-CODetail-Popup');
				    vendorOrderReceivingService.getCOHeaderRec(coHeaderId).then(function (coHeaderRecord) {
				        debug(coHeaderRecord);
				        if (coHeaderRecord.length > 0) {
				            $scope.VendorOrderModel.coHeaderInfoDetail = coHeaderRecord[0];
				        }
				    }, function (errorSearchResult) {
				        $scope.VendorOrderModel.OverlayInfo = errorSearchResult;
				    });
				},1000);
            }
    
            $scope.VORModel.hideCOPopUp = function () {
                 $timeout.cancel(timer);
                angular.element('.Vendor-Order-CODetail-Popup').hide();
            }
            
            // hide popup Part
            $scope.VORModel.hidePartPopUp =function(){
             $timeout.cancel(timer);
             angular.element('.Vendor-Order-Part-Popup').hide();
            }
               
            // Pagination and sort related JSON
            $scope.VORModel.setDefaultPageSortAttrs = {};

            // Method to set default page sort attributes JSON
            $scope.VORModel.setDefaultPageSortAttrs = function() {
				$scope.VORModel.vendorOrdersPageSortAttrsJSON = {
				    ChangesCount    :   0,
				    CurrentPage     :   1,
				    PageSize        :   10,
				    Sorting :   [{
				        FieldName       :   "Order",
				        SortDirection   :   "ASC"
				    }]
				};
                try{
                    $scope.VORModel.vendorOrdersPageSortAttrsJSON.PageSize = '{!JSENCODE(TEXT(Related_List_Page_Size))}';
                } catch (ex){}

                $scope.VORModel.groupItemsVOGPageSortAttrsJSON = {
                    ChangesCount    :   0,
                    CurrentPage     :   1,
                    PageSize        :   10,
                    Sorting :   [{
                        FieldName       :   "Order",
                        SortDirection   :   "ASC"
                    }]
                };
                try{

                    $scope.VORModel.groupItemsVOGPageSortAttrsJSON.PageSize = '{!JSENCODE(TEXT(Related_List_Page_Size))}';
                } catch (ex){}
                
                $scope.VORModel.outstandingVOGPageSortAttrsJSON = {
                    ChangesCount    :   0,
                    CurrentPage     :   1,
                    PageSize        :   10,
                    Sorting :   [{
                        FieldName       :   "Order",
                        SortDirection   :   "ASC"
                    }]
                };
                try{

                    $scope.VORModel.outstandingVOGPageSortAttrsJSON.PageSize = '{!JSENCODE(TEXT(Related_List_Page_Size))}';
                } catch (ex){}
			}
            
            // Set default values for validation model
            // Method to set default values for validation model
            $scope.VORModel.setDefaultValidationModel = function() {
				$scope.VORModel.VendorOrderReceivingFormValidationModal = {
				
				    PackagingSlipNumber : {
				        isError : false,
				        ErrorMessage : '',
				        Type : 'Required'
				    },
				    ReceivingFromInvoiceTotal : {
				        isError : false,
				        ErrorMessage : '',
				        Type : 'Required'
				    }
				};
            }
            $scope.VORModel.setDefaultValidationModel();
            // END: Models
            
            $scope.VORModel.hidePanel = function (event, id) {
                var targetelement = angular.element(event.target).closest('h1').find('.fa:first');
                if (targetelement.hasClass('fa-cheVORon-right')) {
                    targetelement.removeClass('fa-cheVORon-right');
                    targetelement.addClass('fa-cheVORon-down');
                } else {
                    targetelement.removeClass('fa-cheVORon-down');
                    targetelement.addClass('fa-cheVORon-right');
                }
                $('#' + id).toggle();
            }
            
            
            $scope.VORModel.calculateSidebarHeight = function() {
               	  var leftPanelLinks =  angular.element(window).height() - ( angular.element(".headerNav").height() + angular.element(".orderNumber").height() + angular.element(".sidepaneluserinfo").height() + angular.element(".statusRow").height() + angular.element(".ownerInfo").height() + angular.element(".sideBarTotals").height() + 83);
                  angular.element(".leftPanelLinks").css("height", leftPanelLinks);
            }
            
            
            $scope.$watch(function() {
            	debug("tooltip watchers")
    			setTimeout(function(){ angular.element('[data-toggle="tooltip"]').tooltip({placement : 'bottom'}); }, 2000);
			});   
            //Load suggestion and items of a vender
            $scope.VORModel.loadVendor = function () {
            
				$scope.VORModel.VOR_Header.VORId = location.search.split('id=')[1] ? location.search.split('id=')[1] : null;
				if($scope.VORModel.VOR_Header.VORId != null && $scope.VORModel.VOR_Header.VORId.trim().length != 15 && $scope.VORModel.VOR_Header.VORId.trim().length != 18){
				    $scope.VORModel.VOR_Header.VORId = null;
				}
				
				$scope.SearchToAddCallback = $scope.VORModel.searchToAddCallback;
				$scope.VORModel.setDefaultPageSortAttrs();
				//condition added by pooja
				if($scope.VORModel.VOR_Header.VendorName == null)	{
					$scope.VORModel.populateLeftSideHeadingLables();
				} 
				$scope.VORModel.loadAllGridDetails(null, null);
				//added by pooja
				setTimeout(function(){ angular.element('[data-toggle="tooltip"]').tooltip({placement : 'bottom'}); }, 2000);
            }
            
            $scope.VORModel.loadAllGridDetails = function(gridName, callBackMethod) {
                // If Vendor receivinig Id is not null: record already exists, then only load grid details
                if ($scope.VORModel.VOR_Header.VORId != null) {
                    var lastEditedPartId = null
                    //Called service to get Vendor Order line
                    vendorOrderReceivingService.getVORDetails(  $scope.VORModel.VOR_Header.VORId,
                                                                gridName, 
                                                                lastEditedPartId,
                                                                $scope.VORModel.vendorOrdersPageSortAttrsJSON,
                                                                $scope.VORModel.groupItemsVOGPageSortAttrsJSON,
                                                                $scope.VORModel.outstandingVOGPageSortAttrsJSON
                                                             )
                    .then(function (successfulResult) {
						debug(successfulResult);
                        $scope.VORModel.populatePageModels(gridName, successfulResult);
                        
                        if(callBackMethod != null && callBackMethod != undefined){
                            callBackMethod();
                        }
                        $scope.VORModel.isrefresh = false;
                         setTimeout(function(){ $scope.VORModel.calculateSidebarHeight(); }, 10); 
                    });
                }
            }
            
            // Add Vendor callback method
            $scope.VORModel.addVendor = function (selectedVendorId) {
                $scope.VORModel.setDefaultPageSortAttrs();
                
                //Called service to get Vendor Order line
                vendorOrderReceivingService.addVendor(selectedVendorId,
                                             $scope.VORModel.VOR_Header.VORId
                                            )
                .then(function (successfulResult) {
                    debug(successfulResult);
                    debug("add vendor");
                    if($scope.VORModel.VOR_Header.VORId == null || $scope.VORModel.VOR_Header.VORId == 'undefined') {
                        var url = '?id=' + successfulResult;
                        window.history.pushState("string", "Title" , url);
                    }
                    
                    $scope.VORModel.VOR_Header.VORId = successfulResult;
                    $scope.VORModel.loadAllGridDetails(null, null);
                });
            }
            
            // Populate new models
            $scope.VORModel.populatePageModels = function (gridName, newResult) {
	            debug(newResult);
	            $scope.VORModel.VOR_Header = (newResult.VOR_Header != null) ? newResult.VOR_Header : {};
	            $scope.VORModel.GroupTotalCost = newResult.GroupTotalCost;
	            $scope.VORModel.VIHistoryList =newResult.VIHistoryList
	            
	            if(gridName==null || gridName.toLowerCase()=='groupitems'){
	                $scope.VORModel.totalGroupItems = newResult.totalGroupItems;
	                $scope.VORModel.VORLineItemGroupList=newResult.VORGroupList;
	                $scope.VORModel.populateVORLineItemGroupListEditableModel($scope.VORModel.VORLineItemGroupList);
	            }
	            
	            if(gridName == null || gridName.toLowerCase() == 'vendororder'){
	                $scope.VORModel.isAllVOSelected = newResult.isAllVOSelected;
	                $scope.VORModel.SelectedVendorOrdersList = newResult.SelectedVendorOrdersList;
	                $scope.VORModel.totalVendorOrders = newResult.totalVendorOrders;
	                $scope.VORModel.vendorOrdersList = newResult.vendorOrdersList;
	                $scope.VORModel.populateVendorOrdersEditableModel($scope.VORModel.vendorOrdersList);
	            }
	
	            if(gridName == null || gridName.toLowerCase() == 'outstanding'){
	                $scope.VORModel.totalOutstandingItems = newResult.totalOutstandingItems;
	                $scope.VORModel.outstandingVOGList = newResult.outstandingVOGList;
	                $scope.VORModel.populateOutstandingItemsEditableModel($scope.VORModel.outstandingVOGList);
	            }
	            
	            $scope.FilterID = $scope.VORModel.VOR_Header.VendorId;
	            
	            if ($scope.VORModel.vendorOrdersList.length == 0) {
	                $scope.SearchableObjects = 'Vendor,Part__c';
	            } else {
	                if (($scope.VORModel.outstandingVOGList.length==0) && ($scope.VORModel.VORLineItemGroupList.length==0)) {
	                    if($scope.VORModel.VOR_Header.VendorId ==null){
	                        $scope.SearchableObjects = 'Vendor';
	                    }
	                    else{
	                        $scope.SearchableObjects = 'Vendor,Part__c';
	                    }
	                    
	                } else {
	                    $scope.SearchableObjects = 'Part__c';
	                }
	            }
	
	            if(gridName == null) {
	                $scope.VORModel.ReceivingForVO_UpdatePaginationControls();
	                $scope.VORModel.OutstandingItems_UpdatePaginationControls();
	                
	                setTimeout(function () {
	                    if(!$scope.$$phase) {
	                        $scope.$digest();
	                    }
	                }, 500);
	            }
	            $scope.VORModel.populateLeftSideHeadingLables();
			}
            var timer;
            $scope.VORModel.openpartpopup = function (event, index) {
                 timer = $timeout(function () {
                        debug("open popup" + index);
                        debug($scope.VORModel);
                        debug($scope.VORModel.VORLineItemGroupList[index]);
                        var partId = $scope.VORModel.VORLineItemGroupList[index].PartId;
                        debug(event.target);
                        $scope.$broadcast('PartPopUpEvent',  partId);
                         $scope.applyCssOnPartPopUp(event, '.PartPopupOnVenderOrder');
                 }, 1000);
                        
            }
            
			$scope.VORModel.populateLeftSideHeadingLables = function(){
			     $scope.VORModel.LeftSideHeadingLables = {};
			     var currentHeadingSequenceIndex = 65;
			     
			     // Info Header
			     $scope.VORModel.LeftSideHeadingLables['Info'] = String.fromCharCode(currentHeadingSequenceIndex++);
			     
			     $scope.VORModel.LeftSideHeadingLables['I_General'] =1
			     
			     $scope.VORModel.LeftSideHeadingLables['I_Receiving_For_Vendor'] =2
			     
			     // Merchandise: Items Header
			     $scope.VORModel.LeftSideHeadingLables['Received'] = String.fromCharCode(currentHeadingSequenceIndex++);;
			     
			     $scope.VORModel.LeftSideHeadingLables['R_Items'] = 1
			     $scope.VORModel.LeftSideHeadingLables['R_Outstanding']  = 2  
			     
			     // Checkout Header
			     if($scope.VORModel.VOR_Header.Status =="In Progress" ){
			         $scope.VORModel.LeftSideHeadingLables['Finalize'] = String.fromCharCode(currentHeadingSequenceIndex++);
			     }
			     
			     // Invoice History Header
			     if($scope.VORModel.VOR_Header.Status =="Invoiced" ||  $scope.VORModel.VOR_Header.Status =="Stocked" ){
			         $scope.VORModel.LeftSideHeadingLables['Invoice_History'] = String.fromCharCode(currentHeadingSequenceIndex++);
			         debug(String.fromCharCode(currentHeadingSequenceIndex++))
			     }
			}
            
            //Populate Esit list for vendor Group
            $scope.VORModel.populateVORLineItemGroupListEditableModel=function(vendorOrdersGroupList) {
                $scope.VORModel.groupItems_editRow =[];
                for (var i = 0; i < vendorOrdersGroupList.length; i++) {
                    voLineItems = vendorOrdersGroupList[i].VendorOrderLineItemList;
                    voLineItems_editRow = [];
                    for (var j = 0; j < voLineItems.length; j++) {
                        voLineItems_editRow.push({
                            isEdit : false,
                            radioValue : 0,
                            optionSelected : 0
                        });
                    }
                    $scope.VORModel.groupItems_editRow.push({
                        isEdit : false,
                        radioValue : 0,
                        optionSelected : 0,
                        voLineItems_editRow : voLineItems_editRow,
                        isChanged:0
                    });
                }
			}
            
            $scope.VORModel.preventDecimal = function($event){
            	console.log($event);
             if ($event.which === 46) return false;
            if ($event.target.value.indexOf('.') != -1) $event.target.value = parseInt($event.target.value, 10);
            
            	console.log($event.target.value.indexOf('.'));
            }
            // Populate edit list for Vendor Orders list
            $scope.VORModel.populateVendorOrdersEditableModel = function(vendorOrdersList) {
                $scope.VORModel.vendorOrderItems_editRow = [];
                
                for (var i = 0; i < vendorOrdersList.length; i++) {
                    voLIGroups = vendorOrdersList[i].VOLIGroups;
                    voliGroups_editRow = [];
                    var isEditableVendorOrder = vendorOrdersList[i].InProgressVRId == null || vendorOrdersList[i].InProgressVRId.substring(0, 15) == $scope.VORModel.VOR_Header.VORId.substring(0, 15);
                    
                    for (var j = 0; j < voLIGroups.length; j++) {
                        voliGroups_editRow.push({
                            isEdit : false,
                            radioValue : 0,
                            optionSelected : 0
                        });
                    }
                    $scope.VORModel.vendorOrderItems_editRow.push({
                        isEdit : false,
                        radioValue : 0,
                        optionSelected : 0,
                        voliGroups_editRow : voliGroups_editRow,
                        isEditable: isEditableVendorOrder
                    });
                }
			}
            
            // Populate edit list for Outstanding Vendor Orders list
            $scope.VORModel.populateOutstandingItemsEditableModel = function(outstandingItemsList) {
                $scope.VORModel.outstandingItems_editRow = [];
                for (var i = 0; i < outstandingItemsList.length; i++) {
                    $scope.VORModel.outstandingItems_editRow.push({
                        isEdit : false,
                        radioValue : 0,
                        optionSelected : 0
                    });
                }
			}
            
            // Method for DOM action: Add
            $scope.VORModel.RelatedList_addAction = function (event, typeToSearch) {
                $scope.VORModel.setFocusToSearchBox(typeToSearch);
			}
            
            // Select callback when a record is selected in search to add autocomplete box
            $scope.VORModel.searchToAddCallback = function (selectedRecord) {
                debug(selectedRecord);
                
                // If selected value is a Vendor, then add the record in related cutomers list
                if (selectedRecord.originalObject.Info == 'Merchandise') {
                     $scope.VORModel.AddItemFromSearch(selectedRecord.originalObject);
                } else if (selectedRecord.originalObject.Info == 'Vendor') {
                    var selectedRecordId = selectedRecord.originalObject.Value;
                    if (selectedRecordId.length == 18) {
                        selectedRecordId = selectedRecordId.substring(0, 15);
                    }
                    $scope.VORModel.addVendor(selectedRecordId);
                }
                $scope.VORModel.resetSearchBox();
            }

            // Set focus on search text box
            // used when to add related records via page level search box
            $scope.VORModel.setFocusToSearchBox = function (typeToSearch) {
                $scope.typeToSearch = typeToSearch;
                $scope.PreferredObject = typeToSearch;
                angular.element('#SearchToaddCutomer').focus();
            }
            
            // Reset the search object in serch autocomplete
            $scope.VORModel.resetSearchBox = function () {
                $scope.typeToSearch = "";
                $scope.PreferredObject = "";
            }
            
			$scope.VORModel.AddItemFromSearch= function(selectedData) {
				var partId= selectedData.Value ;
				var vendorId = $scope.VORModel.VOR_Header.VendorId;
				var VORId = $scope.VORModel.VOR_Header.VORId;
				var isFromSearchToAdd ='true'
				$scope.VORModel.groupItemsVOGPageSortAttrsJSON.FieldName='LastModifiedDate';
				  vendorOrderReceivingService.addToItemSubsection(VORId, partId, vendorId, isFromSearchToAdd,
				             $scope.VORModel.vendorOrdersPageSortAttrsJSON , $scope.VORModel.groupItemsVOGPageSortAttrsJSON, $scope.VORModel.outstandingVOGPageSortAttrsJSON) 
				    .then(function (successfulResult) { 
						
				        if(successfulResult.isFoundPartInOtherVOHeader ==true){
				            $scope.VORModel.HoldResult ={'VORId':VORId,'partId': partId,'vendorId' :vendorId};
				            $scope.VORModel.StockexcessConfirmBoxShow();
				        }else{
				            $scope.VORModel.OnCompleteSearch(successfulResult);
				        }
				    }
				    , function (errorSearchResult) {
				        $scope.VORModel.OverlayInfo = errorSearchResult;
				    });
			}
          
            //Populate on Search Complete
            $scope.VORModel.OnCompleteSearch =function(successfulResult) {
            
	            debug(successfulResult);
	            
	            $scope.VORModel.VORLineItemGroupList = successfulResult.VORGroupList;
	            $scope.VORModel.isAllVOSelected = successfulResult.isAllVOSelected;
	            $scope.VORModel.totalOutstandingItems = successfulResult.totalOutstandingItems;
	            $scope.VORModel.outstandingVOGList = successfulResult.outstandingVOGList;
	            $scope.FilterID = $scope.VORModel.VOR_Header.VendorId;
	    
	                    
	           if ($scope.VORModel.vendorOrdersList.length == 0) {
		       		$scope.SearchableObjects = 'Vendor,Part__c';
		       } else {
		            if (($scope.VORModel.outstandingVOGList.length==0) && ($scope.VORModel.VORLineItemGroupList.length==0)) {
		                if($scope.VORModel.VOR_Header.VendorId ==null){
		                    $scope.SearchableObjects = 'Vendor';
		                }
		                else{
		                    $scope.SearchableObjects = 'Vendor,Part__c';
		                }
		                
		            } else {
		                $scope.SearchableObjects = 'Part__c';
		            }
				}
	            $scope.VORModel.EditRecent(successfulResult);
			}
            
            // Edit Line Item Recent  
            $scope.VORModel.EditRecent =function(successfulResult) {
	            var recentlyEdit = successfulResult.RecentlyEditedVORGroupList; 
	            var voliGroups_editRow = [];
	            
	            debug('-------------'); 
	            debug(recentlyEdit);
	            
	             if(recentlyEdit.length > 0 || recentlyEdit != null || recentlyEdit != 'undefined') {
	                    $scope.VORModel.groupItems_editRow =[];
	                    var vendorOrdersGroupList = $scope.VORModel.VORLineItemGroupList;
	                    
	                    for (var i = 0; i < vendorOrdersGroupList.length; i++) {
	                        voLineItems = vendorOrdersGroupList[i].VendorOrderLineItemList;
	                        voLineItems_editRow = [];
	                        for (var j = 0; j < voLineItems.length; j++) {
	                            voLineItems_editRow.push({
	                                isEdit : false,
	                                radioValue : 0,
	                                optionSelected : 0
	                            });
	                        }
	                         if( recentlyEdit[0].Id == vendorOrdersGroupList[i].Id){
	                                $scope.VORModel.groupItems_editRow.push({
	                                    isEdit : true,
	                                    radioValue : 0,
	                                    optionSelected : 0,
	                                    voLineItems_editRow : voLineItems_editRow,
	                                    isChanged:0
	                                });
	                            }
	                            else{
	                                    $scope.VORModel.groupItems_editRow.push({
	                                    isEdit : false,
	                                    radioValue : 0,
	                                    optionSelected : 0,
	                                    voLineItems_editRow : voLineItems_editRow,
	                                    isChanged:0
	                                });
	                            }
	                        }
				} else {
                  	$scope.VORModel.populatePageModels(null, successfulResult);
                  }
                  debug($scope.VORModel.groupItems_editRow)
			}  
              
            // Function To open & close edit Mode only work for parent rows
            // On Click Vendor Order Row Edit & Expand Row Method
            $scope.VORModel.editVendorOrderReceivedItem = function (event, index) {
	          	if($scope.VORModel.VOR_Header.Status == 'Stocked' || $scope.VORModel.VOR_Header.Status == 'Invoiced' ) {
	          		return;
	          	}
	            a = event;
	            if(event.target.attributes.class != null && (event.target.attributes.class.value.indexOf("chk_tick") != -1 || event.target.attributes.class.value.indexOf("chksqure") != -1)){
	                return;
	            }
	            
	            var isEditModeEnabled = false;
	            var prevEditedRowIndex;
	            var isEditableVendorOrder = $scope.VORModel.vendorOrderItems_editRow[index].isEditable;
	            
	            for (i = 0; i < $scope.VORModel.vendorOrderItems_editRow.length; i++) {
	                if ($scope.VORModel.vendorOrderItems_editRow[i].isEdit == true) {
	                    isEditModeEnabled = true;
	                    prevEditedRowIndex = i;
	                }
	                $scope.VORModel.vendorOrderItems_editRow[i].isEdit = false;
	            }
	            
	            if ( isEditableVendorOrder && (!isEditModeEnabled || (prevEditedRowIndex != null && prevEditedRowIndex != index) )) {
	                $scope.VORModel.vendorOrderItems_editRow[index].isEdit = true;
	            }
            }
            
            // Function To open & close edit Mode only work for child  rows
            // On Click Group Row Edit & Expand Row Method
            $scope.VORModel.editvoGroupItem = function (event, parentindex, index) {
	            var isEditModeEnabled = false;
	            var prevEditedRowIndex;
	            debug("target is:"+event.target.tagName);
	            if(event.target.tagName == 'P' || event.target.tagName == 'I') {
	            	debug("do not close");
	            }
	            else {
	            	debug("close");
	            	if($scope.VORModel.vendorOrderItems_editRow[parentindex].voliGroups_editRow[index].isEdit ==true){
	                        $scope.VORModel.vendorOrderItems_editRow[parentindex].voliGroups_editRow[index].isEdit=false;
	                        debug('logged');
	                        return;
	            	}
	            }
	            if ($scope.VORModel.vendorOrderItems_editRow[parentindex].voliGroups_editRow[index].isEdit == false) {
	                for (i = 0; i < $scope.VORModel.vendorOrderItems_editRow[parentindex].voliGroups_editRow.length; i++) {
	                    if ($scope.VORModel.vendorOrderItems_editRow[parentindex].voliGroups_editRow[i].isEdit == true) {
	                        isEditModeEnabled = true;
	                        prevEditedRowIndex = i;
	                    }
	                    $scope.VORModel.vendorOrderItems_editRow[parentindex].voliGroups_editRow[i].isEdit = false;
	                }
	            }
	            
	            if (!isEditModeEnabled || (prevEditedRowIndex != null && prevEditedRowIndex != index)) {
	                $scope.VORModel.vendorOrderItems_editRow[parentindex].voliGroups_editRow[index].isEdit = true;
	            } else {
	                //$scope.VORModel.saveVolineItems(partId, voLineItem, qtyRequired, parentindex)
	            }
            }
            
            // Function To open & close edit Mode only work for child  rows
            // On Click Group Row Edit & Expand Row Method
            $scope.VORModel.editOutstandingItem = function (event, index) {
            	//added by pooja
            	if( $scope.VORModel.VOR_Header.Status == 'Stocked' ||  $scope.VORModel.VOR_Header.Status == 'Invoiced') {
            		return;
            	}
	            var isEditModeEnabled = false;
	            var prevEditedRowIndex;
	            
	            for (i = 0; i < $scope.VORModel.outstandingItems_editRow.length; i++) {
	                if ($scope.VORModel.outstandingItems_editRow[i].isEdit == true) {
	                    isEditModeEnabled = true;
	                    prevEditedRowIndex = i;
	                }
	                $scope.VORModel.outstandingItems_editRow[i].isEdit = false;
	            }
	            
	            if (!isEditModeEnabled || (prevEditedRowIndex != null && prevEditedRowIndex != index)) {
	                $scope.VORModel.outstandingItems_editRow[index].isEdit = true;
	            } else {
	                //$scope.VORModel.saveVolineItems(partId, voLineItem, qtyRequired, parentindex)
	            }
            }
            
            // Click event method for receiving from invoice checkbox
            $scope.VORModel.onClickReceivingFromInvoice = function(event) {
	            $scope.VORModel.VOR_Header.IsReceivingFromInvoice = !$scope.VORModel.VOR_Header.IsReceivingFromInvoice;
	            if($scope.VORModel.VOR_Header.ReceivingFromInvoiceTotal == null || $scope.VORModel.VOR_Header.ReceivingFromInvoiceTotal == ''){
	                $scope.VORModel.VOR_Header.ReceivingFromInvoiceTotal = 0;
	            }
	            
	            if($scope.VORModel.VOR_Header.IsReceivingFromInvoice){
	                
	            } else {
	                delete $scope.VORModel.VendorOrderReceivingFormValidationModal.ReceivingFromInvoiceTotal;
	            }
	            
	            $scope.VORModel.updateVORHeaderDetails();
            }
            $scope.VORModel.numberOnlyValue = function(e){
            	-1!==$.inArray(e.keyCode,[46,8,9,27,13,110,190])||/65|67|86|88/.test(e.keyCode)&&(!0===e.ctrlKey||!0===e.metaKey)||35<=e.keyCode&&40>=e.keyCode||(e.shiftKey||48>e.keyCode||57<e.keyCode)&&(96>e.keyCode||105<e.keyCode)&&e.preventDefault();
            }
            // Method to update various information of vendor order receiving header
            $scope.VORModel.updateVORHeaderDetails = function() {
                vendorOrderReceivingService.updateVORHeaderDetails( $scope.VORModel.VOR_Header.VORId,
                                                                    $scope.VORModel.VOR_Header
                                                                )
                .then(function (successfulResult) {
               
                    $scope.VORModel.VOR_Header = successfulResult;
                        Notification.success('Updated successfully.');
                }, function (errorSearchResult) {
                    Notification.error('Some error occurred, please refresh the page.');
                });
            }
            
            // On selection of any action for Vendor Orders grid, perform function
            $scope.VORModel.vendorOrderItems_GoAction = function (index, parentGirdIndex) {
	            debug(index +','+ parentGirdIndex)
	            if(parentGirdIndex == null){
	                    var vorId= $scope.VORModel.VOR_Header.VORId;
	                    var     vohId    =$scope.VORModel.vendorOrdersList[index].Id;
	                    var vogId=null
	                    vendorOrderReceivingService.addAllLineItemsToItemSubsection(vorId, 
	                                                                        vohId ,
	                                                                         vogId ,
	                                                                        $scope.VORModel.vendorOrdersPageSortAttrsJSON,
	                                                                        $scope.VORModel.groupItemsVOGPageSortAttrsJSON,
	                                                                        $scope.VORModel.outstandingVOGPageSortAttrsJSON)
	                    .then(function (successfulResult) {
	                        $scope.VORModel.populatePageModels(null, successfulResult);
	                    });
	            } else {
	                  var vorId= $scope.VORModel.VOR_Header.VORId;
	                  var vohId    =null;
	                  var vogId= $scope.VORModel.vendorOrdersList[parentGirdIndex].VOLIGroups[index].Id;
	                  
	                  vendorOrderReceivingService.addAllLineItemsToItemSubsection(vorId, 
	                                                                      vohId ,
	                                                                       vogId ,
	                                                                      $scope.VORModel.vendorOrdersPageSortAttrsJSON,
	                                                                      $scope.VORModel.groupItemsVOGPageSortAttrsJSON,
	                                                                      $scope.VORModel.outstandingVOGPageSortAttrsJSON)
	                          .then(function (successfulResult) {
	                              $scope.VORModel.populatePageModels(null, successfulResult);
	                          });
                 }
			}
            
            // remove group function
            $scope.VORModel.vendorOrderReceivingGroup_GoAction = function (index) {
                        //var partId = $scope.VORModel.outstandingVOGList[index].PartId;
                        $scope.VORModel.VORLineItemGroupList[index]
            }
            
            // On selection of any action for Vendor Orders grid, perform function
            $scope.VORModel.outstandingItems_GoAction = function (index, parentGirdIndex) {
                var partId = $scope.VORModel.outstandingVOGList[index].PartId;
                     
                  var itemsGridNewPN = $scope.VORModel.outstandingVOGPageSortAttrsJSON.CurrentPage;
                        if($scope.VORModel.totalOutstandingItems % $scope.VORModel.outstandingVOGPageSortAttrsJSON.PageSize == 1){
                            $scope.VORModel.outstandingVOGPageSortAttrsJSON.CurrentPage = (itemsGridNewPN > 1) ? (itemsGridNewPN - 1) : 1;
                  }
                debug( $scope.VORModel.outstandingVOGPageSortAttrsJSON.CurrentPage);
                //Called service to get Vendor Order line
                vendorOrderReceivingService.addToItemSubsection($scope.VORModel.VOR_Header.VORId,
                                                                partId, 
                                                                $scope.VORModel.VOR_Header.VendorId,
                                                                false,
                                                                $scope.VORModel.vendorOrdersPageSortAttrsJSON,
                                                                $scope.VORModel.groupItemsVOGPageSortAttrsJSON,
                                                                $scope.VORModel.outstandingVOGPageSortAttrsJSON
                                                            )
                .then(function (successfulResult) {
                    $scope.VORModel.populatePageModels(null, successfulResult);
                });
            }
            
            // Click event method for Select/Deselect all vendor orders checkbox
            $scope.VORModel.onClickSelectAllVO = function(event) {
	            /*$scope.VORModel.currentSelectedVOIndex = null;     
	            $scope.VORModel.currentSelectedVOId = null;
	            if(!$scope.VORModel.isAllVOSelected){
	            	$scope.VORModel.isAllVOSelected = true;  
		            debug(event.target);
		            if( $scope.VORModel.isAllVOSelected == true ){       
			            for(var i=0; i < $scope.VORModel.vendorOrdersList.length; i++){
			            	$scope.VORModel.onClickSelectVO(event,i, $scope.VORModel.vendorOrdersList[i].Id);
			            } 
		            }
	            }else{
	            	return;
	            }*/
                $scope.VORModel.currentSelectedVOIndex = null;     
                $scope.VORModel.currentSelectedVOId = null;
                $scope.VORModel.isAllVOSelected = true;  
                // First popup for confirmation if really want to unselect vendor order from receiving,
                // if any of item is already selected in receiving items grid
                if(!$scope.VORModel.isAllVOSelected){           
                       // Check with TRUE, as the selected box is not toggelled yet
                    // ToDo: Loop through items grid if any items from the current VENDOR ORDER is selected already
                    angular.element('#VODeselectConfirmBox').show();
                } else {
                    //$scope.VORModel.isAllVOSelected = !$scope.VORModel.isAllVOSelected;
                    $scope.VORModel.VODeselectConfirm();
                }
            }

            // Click event method for Select/Deselect particular vendor order record checkbox
            $scope.VORModel.onClickSelectVO = function(event, indexVal, vendorOrderId) {
            	$scope.VORModel.isAllVOSelected = false;
            	if($scope.VORModel.VOR_Header.Status == 'Stocked' || $scope.VORModel.VOR_Header.Status == 'Invoiced' ){
            		return;
            	}
                a = event;
               /* debug(event.target.attributes.class.value.indexOf("disabled_chk_tick"));
                if(event.target.attributes.class.value.indexOf("disabled_chk_tick") != -1){
                    return;
                    event.stopPropagation();
                }*/
                $scope.VORModel.currentSelectedVOIndex = indexVal;
                $scope.VORModel.currentSelectedVOId = vendorOrderId;
                // First popup for confirmation if really want to unselect vendor order from receiving,
                // if any of item is already selected in receiving items grid
                if($scope.VORModel.vendorOrdersList[indexVal].InProgressVRId != null){
                    // ToDo: Loop through items grid if any items from the current VENDOR ORDER is selected already
                    if($scope.VORModel.isAllVOSelected){
                    	 $scope.VORModel.VODeselectConfirm();
                    }else{
                    	angular.element('#VODeselectConfirmBox').show();
                    }
                } else {
                    $scope.VORModel.VODeselectConfirm();
                }
            }

            // Function Edit on click line
            $scope.VORModel.editGroupItem=function (event,index){
            	//added by pooja
            	if($scope.VORModel.VOR_Header.Status == 'Stocked' || $scope.VORModel.VOR_Header.Status == 'Invoiced') {
            		return;
            	}
	            if(event.target['type']=='text') {
	            
	            } else {
	                debug('call save items');
	                var isEditModeEnabled = false;
	                var lineitem = [];
	                    for (i = 0; i < $scope.VORModel.groupItems_editRow.length; i++) {
	                        if ($scope.VORModel.groupItems_editRow[i].isEdit == true) {
	                            isEditModeEnabled = true;
	                            index = i;
	                            // alert("edit hide")
	                        }
	                       $scope.VORModel.groupItems_editRow[i].isEdit = false;
	                    }
	                    if (!isEditModeEnabled) {
	                        $scope.VORModel.groupItems_editRow[index].isEdit = true;
	                    } else {
	                    
	                                
	                                var vrGroupId = $scope.VORModel.VORLineItemGroupList[index].Id;
	                                var partId = $scope.VORModel.VORLineItemGroupList[index].PartId;
	                                var  qty    =  $scope.VORModel.VORLineItemGroupList[index].ReceivedQty; 
	                                var cost  = $scope.VORModel.VORLineItemGroupList[index].Cost;
	                                var vorId =  $scope.VORModel.VOR_Header.VORId;
	                                
	                                 $scope.VORModel.updateReceivedItemGroup (vorId,  
	                                                                     partId,
	                                                                     vrGroupId,
	                                                                     qty,
	                                                                     cost,
	                                                                     $scope.VORModel.vendorOrdersPageSortAttrsJSON,
	                                                                     $scope.VORModel.groupItemsVOGPageSortAttrsJSON,
	                                                                     $scope.VORModel.outstandingVOGPageSortAttrsJSON
	                                                                     )
	                                
	                            debug('call save');
	                    }
					}  
			}
            
            // Function Save Received Item Group
            $scope.VORModel.updateReceivedItemGroup= function(vorId,  partId,  vrGroupId,  qty,  cost, vendorOrdersPageSortAttrsJSON, 
                                        groupItemsPageSortAttrsJSON,  outstandingVOGPageSortAttrsJSON) {
                 vendorOrderReceivingService.updateItemsSection(vorId,  partId,  vrGroupId,  qty,  cost, vendorOrdersPageSortAttrsJSON, 
                                        groupItemsPageSortAttrsJSON,  outstandingVOGPageSortAttrsJSON)
                        .then(function (successfulResult) {
                                $scope.VORModel.populatePageModels(null,successfulResult)
                            });
            }
            
            $scope.VORModel.updateReceivedItemGroupChildClick =function(vorId,  partId,  vrGroupId,  qty,  cost, vendorOrdersPageSortAttrsJSON, 
                                        groupItemsPageSortAttrsJSON,  outstandingVOGPageSortAttrsJSON) {
                        vendorOrderReceivingService.updateItemsSection(vorId,  partId,  vrGroupId,  qty,  cost, vendorOrdersPageSortAttrsJSON, 
                                        groupItemsPageSortAttrsJSON,  outstandingVOGPageSortAttrsJSON)
                        .then(function (successfulResult) {
                                        $scope.VORModel.OnCompleteSearch(successfulResult)
                            });
            }                            
            
            //ng-keydown="VORModel.editRowTabOut($event, $parent.$index ,$index)"
            
            //Tabout function 
            $scope.VORModel.editRowTabOutRecieved=function(event ,index){
                     debug('1233');
                     $scope.VORModel.groupItems_editRow[index].isChanged = 1; 
            }
            
            $scope.VORModel.editRowTabOutLast=function(event ,index){
	            debug('1233');
	            $scope.VORModel.groupItems_editRow[index].isChanged = 1; 
	
	            if (!event.shiftKey && event.keyCode == 9){
	               var vrGroupId = $scope.VORModel.VORLineItemGroupList[index].Id;
	               var partId = $scope.VORModel.VORLineItemGroupList[index].PartId;
	               var  qty    =  $scope.VORModel.VORLineItemGroupList[index].ReceivedQty; 
	               var cost  = $scope.VORModel.VORLineItemGroupList[index].Cost;
	               var vorId =  $scope.VORModel.VOR_Header.VORId;
	
	               
	                $scope.VORModel.updateReceivedItemGroup (vorId,  
	                                                    partId,
	                                                    vrGroupId,
	                                                    qty,
                                                        cost,
                                                        $scope.VORModel.vendorOrdersPageSortAttrsJSON,
                                                        $scope.VORModel.groupItemsVOGPageSortAttrsJSON,
                                                        $scope.VORModel.outstandingVOGPageSortAttrsJSON
	                                                    )
	                       
	            }
            }

            // Tab out Child row
            $scope.VORModel.editRowTabOutChild = function(event , parentindex ,index){
	            debug( parentindex +','+index)
	            
	            if (!event.shiftKey && event.keyCode == 9){
	             	debug(parentindex);
                   	var result =$scope.VORModel.ReceivedItemTotalValidation(parentindex);
                   
                   	if(result ==true) {
                           var groupJSONString= [];
                           groupJSONString[0] = $scope.VORModel.VORLineItemGroupList[parentindex];
                           var   vrGroupId     = $scope.VORModel.VORLineItemGroupList[parentindex].Id;
                           var partId          = $scope.VORModel.VORLineItemGroupList[parentindex].PartId;
                           var vorId = $scope.VORModel.VOR_Header.VORId;
                           
                           vendorOrderReceivingService.updateLineItemsOfItemsSection( vorId,partId, vrGroupId,  groupJSONString,
                                                            $scope.VORModel.vendorOrdersPageSortAttrsJSON,
                                                            $scope.VORModel.groupItemsVOGPageSortAttrsJSON,
                                                            $scope.VORModel.outstandingVOGPageSortAttrsJSON
                                                           )
                               .then(function (successfulResult) {
                                       $scope.VORModel.OnCompleteSearch(successfulResult);
                               });
					} else {
	                  $scope.VORModel.groupItems_editRow[parentindex].voLineItems_editRow[index].isEdit = false;
	                  Notification.error('Item Can Be saved only Till Reciving Total Not Equal to Group Total');
                	}
	           	}
			}
            
            // Edit vendor received list items
            $scope.VORModel.editVolItem =function(event, index, parentindex) {
            	var isEditModeEnabled = false;
		        var lineitem = [];
		        var partId= null;
		        var voLineItem = null;
		        var qtyRequired = null;
                     
                if($scope.VORModel.groupItems_editRow[parentindex].isChanged == 1) {
	                var vrGroupId = $scope.VORModel.VORLineItemGroupList[parentindex].Id;
	                var partId = $scope.VORModel.VORLineItemGroupList[parentindex].PartId;
	                var  qty    =  $scope.VORModel.VORLineItemGroupList[parentindex].ReceivedQty; 
	                var cost  = $scope.VORModel.VORLineItemGroupList[parentindex].Cost;
	                var vorId =  $scope.VORModel.VOR_Header.VORId;
	                
	                $scope.VORModel.updateReceivedItemGroupChildClick(vorId,  
	                                                     partId,
	                                                     vrGroupId,
	                                                     qty,
	                                                     cost,
	                                                     $scope.VORModel.vendorOrdersPageSortAttrsJSON,
	                                                     $scope.VORModel.groupItemsVOGPageSortAttrsJSON,
	                                                     $scope.VORModel.outstandingVOGPageSortAttrsJSON
	                                                     )
					} else {
                    	if(event.target['type']=='text'){
                        } else {
	                        for (i = 0; i < $scope.VORModel.groupItems_editRow[parentindex].voLineItems_editRow.length; i++) {
	                            if ($scope.VORModel.groupItems_editRow[parentindex].voLineItems_editRow[i].isEdit == true) {
	                                $scope.VORModel.groupItems_editRow[parentindex].voLineItems_editRow[i].isEdit
	                                isEditModeEnabled = true;
	                            }
	                             $scope.VORModel.groupItems_editRow[parentindex].voLineItems_editRow[i].isEdit = false;
	                         }
	                   }
		               if (!isEditModeEnabled) {
		               		$scope.VORModel.groupItems_editRow[parentindex].voLineItems_editRow[index].isEdit = true;
		               } else {
	                       var result =$scope.VORModel.ReceivedItemTotalValidation(parentindex);
	                       if(result ==true){
	                               var groupJSONString= [];
	                               groupJSONString[0] = $scope.VORModel.VORLineItemGroupList[parentindex];
	                               var   vrGroupId     = $scope.VORModel.VORLineItemGroupList[parentindex].Id;
	                               var partId          = $scope.VORModel.VORLineItemGroupList[parentindex].PartId;
	                               var vorId = $scope.VORModel.VOR_Header.VORId;
	                               
	                               vendorOrderReceivingService.updateLineItemsOfItemsSection( vorId,partId, vrGroupId,  groupJSONString,
	                                                                $scope.VORModel.vendorOrdersPageSortAttrsJSON,
	                                                                $scope.VORModel.groupItemsVOGPageSortAttrsJSON,
	                                                                $scope.VORModel.outstandingVOGPageSortAttrsJSON
	                                                               )
	                                   .then(function (successfulResult) {
	                                       
	                                           $scope.VORModel.OnCompleteSearch(successfulResult);
	                                       
	                                       });
	                       }else{
	                            $scope.VORModel.groupItems_editRow[parentindex].voLineItems_editRow[index].isEdit = true;
	                            Notification.error('Item can be saved only till reciving total not eqaul to group total');
	                       }
						}
					}
			}
            
            $scope.VORModel.ReceivedItemTotalValidation =function( index )
            {
                    var GroupItem= $scope.VORModel.VORLineItemGroupList[index];
                    var Ispackaged =$scope.VORModel.VORLineItemGroupList[index].UnitType;
                    var voli = GroupItem.VendorOrderLineItemList;
                    var qtyReceived = 0 ;
                    var PackageQty = $scope.VORModel.VORLineItemGroupList[index].PackageQty;
                    if(Ispackaged !=null && Ispackaged !='NULL'){
                             for( i =0 ; i < voli.length; i++ ){
                                debug(voli[i].ReceivedQty);
                                qtyReceived  = qtyReceived +  parseInt(voli[i].ReceivedQty);
                            }
                            qtyReceived = qtyReceived/PackageQty;
                            if(qtyReceived != GroupItem.ReceivedQty ){
                                return false;
                            }else{
                                return true;
                            }
                    }else{
                            for( i =0 ; i < voli.length; i++ ){
                                debug(voli[i].ReceivedQty);
                                qtyReceived  = qtyReceived +  parseInt(voli[i].ReceivedQty);
                            }
                            debug(qtyReceived + ','+ GroupItem.ReceivedQty);
                            if(qtyReceived != GroupItem.ReceivedQty ){
                                return false;
                            }else{
                                return true;
                            }
                    }
            }
            
            //Confimation box popup on stock Excess Genration
            $scope.VORModel.StockexcessConfirmBoxShow = function() {
            
                                angular.element('#StockexcessConfirmBox').modal({
                                                      backdrop: 'static',
                                                      keyboard: false 
                                                    });
            }
            
            //Confirm box selection call method
             $scope.VORModel.StockexcessConfirmBox_Response =function(response){
                 if(response){
                    // If YES: then set select all to false
                    $scope.VORModel.isAllVOSelected = false;

                    $scope.VORModel.StockexcessConfirm();
                }
                
                angular.element('#StockexcessConfirmBox').modal('hide');
             
             }
             


             $scope.VORModel.StockexcessConfirm =function(){
             //call funtion to create stock excess
                debug('Excess record is created');
                    var vorId = $scope.VORModel.HoldResult.VORId;
                    var partId = $scope.VORModel.HoldResult.partId;
                    var vendorId = $scope.VORModel.VOR_Header.VendorId;
                    $scope.VORModel.HoldResult ={};
                    vendorOrderReceivingService.addToItemSubsectionAfterConfimation(vorId, partId,vendorId,true, true,
                                                                    $scope.VORModel.vendorOrdersPageSortAttrsJSON,
                                                                     $scope.VORModel.groupItemsVOGPageSortAttrsJSON,
                                                                     $scope.VORModel.outstandingVOGPageSortAttrsJSON)
                                        .then(function (successfulResult) {
                                            
                                                $scope.VORModel.OnCompleteSearch(successfulResult)
                                            
                                            });     
                    
             }
            
            
            
            
            // Confirm box selection callback method
            $scope.VORModel.VODeselectConfirmBox_Response = function(response) {
                if(response){
                debug('response  ' + response);
                    // If YES: then set select all to false
                    $scope.VORModel.isAllVOSelected = false;
                    $scope.VORModel.VODeselectConfirm();
                }
                angular.element('#VODeselectConfirmBox').hide();
                
            }
            
            // Click event method for Select/Deselect particular vendor order record checkbox
            $scope.VORModel.VODeselectConfirm = function() {
                var indexVal = $scope.VORModel.currentSelectedVOIndex;
                var vendorOrderId = ($scope.VORModel.currentSelectedVOId != undefined) ? $scope.VORModel.currentSelectedVOId : null;
                var InProgressVRId = $scope.VORModel.VOR_Header.VORId;
                var isSelected = $scope.VORModel.isAllVOSelected;
                debug($scope.VORModel);
                if(indexVal != null){
                    $scope.VORModel.vendorOrdersList[indexVal].InProgressVRId = ($scope.VORModel.vendorOrdersList[indexVal].InProgressVRId == null) 
                                                                                ? $scope.VORModel.VOR_Header.VORId
                                                                                : null;
                    InProgressVRId = $scope.VORModel.vendorOrdersList[indexVal].InProgressVRId;
                }
                vendorOrderReceivingService.receiveVendorOrderItems(vendorOrderId, InProgressVRId, isSelected)
                .then(function (successfulResult) {
                    if(successfulResult == "true"){
                        $scope.VORModel.loadAllGridDetails(null, null);
                    } else if(indexVal != null){
                        $scope.VORModel.vendorOrdersList[indexVal].InProgressVRId = null;
                    }
                });
            }
            
            
            //remove from group go action call
            $scope.VORModel.groupItemsGoAction =function(index){
                if ($scope.VORModel.groupItems_editRow[index].radioValue != 0) {
                    var vrGroupId = $scope.VORModel.VORLineItemGroupList[index].Id;
                    var vorId = $scope.VORModel.VOR_Header.VORId;
                    
                  var itemsGridNewPN = $scope.VORModel.groupItemsVOGPageSortAttrsJSON.CurrentPage;
                        if($scope.VORModel.totalGroupItems % $scope.VORModel.groupItemsVOGPageSortAttrsJSON.PageSize == 1){
                            $scope.VORModel.groupItemsVOGPageSortAttrsJSON.CurrentPage = (itemsGridNewPN > 1) ? (itemsGridNewPN - 1) : 1;
                  }
                debug($scope.VORModel.groupItemsVOGPageSortAttrsJSON.CurrentPage);
                    vendorOrderReceivingService.removeItem(vorId, vrGroupId,
                        $scope.VORModel.vendorOrdersPageSortAttrsJSON,
                        $scope.VORModel.groupItemsVOGPageSortAttrsJSON,
                        $scope.VORModel.outstandingVOGPageSortAttrsJSON)
                       
                    .then(function (successfulResult) {
                        $scope.VORModel.populatePageModels(null, successfulResult);
                         setTimeout(function () {
                        $scope.VORModel.groupItemsVOGPageSortAttrsJSON.ChangesCount++;
                    }, 10);
                    });
                }
            }
            
            // Method to handle any updates in sort controls
            $scope.VORModel.ReceivingForVO_PageSortControlsAction = function () {
                var newSortOrder = sortOrderMap[$scope.VORModel.vendorOrdersPageSortAttrsJSON.Sorting[0].SortDirection];
                if(newSortOrder == null || newSortOrder == undefined){
                    newSortOrder = "ASC";
                }
                $scope.VORModel.vendorOrdersPageSortAttrsJSON.Sorting[0].SortDirection = newSortOrder;
                
                // Set current page to 1
                $scope.VORModel.vendorOrdersPageSortAttrsJSON.CurrentPage = 1;
                $scope.VORModel.ReceivingForVO_paginationControlsAction();
            }
            
            // Method to handle any updates in sort controls
            $scope.VORModel.ReceivingForVO_paginationControlsAction = function () {
                $scope.VORModel.loadAllGridDetails('VendorOrder', $scope.VORModel.ReceivingForVO_UpdatePaginationControls);
            }
            
            // Update pagination count for Vendor Orders grid
            $scope.VORModel.ReceivingForVO_UpdatePaginationControls = function () {
                setTimeout(function () {
                    $scope.VORModel.vendorOrdersPageSortAttrsJSON.ChangesCount++;
                }, 10);
            }
            

            
            
            
            //load chart details
            
            
              

            //Function Blur
            $scope.VORModel.CallBlur =function(){
            
                debug('blured');
            
            }
            
            // Method to handle any updates in sort controls
            $scope.VORModel.OutstandingItems_PageSortControlsAction = function () {
                var newSortOrder = sortOrderMap[$scope.VORModel.outstandingVOGPageSortAttrsJSON.Sorting[0].SortDirection];
                if(newSortOrder == null || newSortOrder == undefined){
                    newSortOrder = "ASC";
                }
                $scope.VORModel.outstandingVOGPageSortAttrsJSON.Sorting[0].SortDirection = newSortOrder;
                
                // Set current page to 1
                $scope.VORModel.outstandingVOGPageSortAttrsJSON.CurrentPage = 1;
                $scope.VORModel.OutstandingItems_paginationControlsAction();
            }


            // Method to handle any updates in sort controls
            $scope.VORModel.OutstandingItems_paginationControlsAction = function () {
                $scope.VORModel.loadAllGridDetails('OutStanding', $scope.VORModel.OutstandingItems_UpdatePaginationControls);
            }
            

            // Update pagination count for Vendor Orders grid
            $scope.VORModel.OutstandingItems_UpdatePaginationControls = function () {
                setTimeout(function () {
                    $scope.VORModel.outstandingVOGPageSortAttrsJSON.ChangesCount++;
                }, 10);
            }
            
            // Method to handle any updates in sort controls
            $scope.VORModel.GroupItems_PageSortControlsAction = function () {
                var newSortOrder = sortOrderMap[$scope.VORModel.groupItemsVOGPageSortAttrsJSON.Sorting[0].SortDirection];
                if(newSortOrder == null || newSortOrder == undefined){
                    newSortOrder = "ASC";
                }
                $scope.VORModel.groupItemsVOGPageSortAttrsJSON.Sorting[0].SortDirection = newSortOrder;
                
                // Set current page to 1
                $scope.VORModel.groupItemsVOGPageSortAttrsJSON.CurrentPage = 1;
                $scope.VORModel.GroupItems_paginationControlsAction();
            }

            // Method to handle any updates in sort controls
            $scope.VORModel.GroupItems_paginationControlsAction = function () {
                $scope.VORModel.loadAllGridDetails(null, $scope.VORModel.GroupItems_UpdatePaginationControls);
            }
            

            // Update pagination count for Vendor Orders grid
            $scope.VORModel.GroupItems_UpdatePaginationControls = function () {
                setTimeout(function () {
                    $scope.VORModel.groupItemsVOGPageSortAttrsJSON.ChangesCount++;
                }, 10);
            }
            $scope.VORModel.addAllReceiving = function(){
                debug('Add All Receiving ');

               
            }
            




            // function for bul removal
            $scope.VORModel.removeAllReceived = function(){
                                
                                var vorId= $scope.VORModel.VOR_Header.VORId;
                                vendorOrderReceivingService.removeAllItemsFromItemSubSection(vorId, 
                                                                    $scope.VORModel.vendorOrdersPageSortAttrsJSON,
                                                                     $scope.VORModel.groupItemsVOGPageSortAttrsJSON,
                                                                     $scope.VORModel.outstandingVOGPageSortAttrsJSON)
                                      .then(function (successfulResult) {
                                            
                                            $scope.VORModel.populatePageModels(null, successfulResult);
                                            
                                          
                                     });
                 
            }
            /// Function To bulk addition 
            $scope.VORModel.addAllOutstanding = function(){
                                var vorId= $scope.VORModel.VOR_Header.VORId;
                                 vendorOrderReceivingService.addAllLineItemsToItemSubsection(vorId, null, null,
                                                                     $scope.VORModel.vendorOrdersPageSortAttrsJSON,
                                                                     $scope.VORModel.groupItemsVOGPageSortAttrsJSON,

                                                                     $scope.VORModel.outstandingVOGPageSortAttrsJSON)
                                    .then(function (successfulResult) {
                                            
                                            $scope.VORModel.populatePageModels(null, successfulResult);
                                            
                                          
                                     });
            }
            
            /// Commit receiving Method
            $scope.VORModel.finalizeOrder = function(){
                var vorId= $scope.VORModel.VOR_Header.VORId;
                vendorOrderReceivingService.CommitReceiving(vorId).then(function (successfulResult) {
                    debug('successfulResult');
                    debug(successfulResult);
                    $scope.VORModel.VOR_Header.Status = successfulResult.Status__c;
                    //added by pooja
                    $scope.VORModel.populateLeftSideHeadingLables();
                });
            }
          $scope.VORModel.confirmDelete = function() {
            var dialog = ngDialog
                    .open({
                        template : '<div class="dialogBox"><h3>Delete Vendor Invoicing  '
                                + '</h3><hr/>'
                                + '<form >'
                                + '<span > Are you sure ? <hr/>'
                                + '<div style="text-align: right;">'
                                + '<button style="margin-right:10px;" type="button" class="btn btn-default greenBtn" ng-click="VORModel.vendorRecievingDelete()'
                                + ' && closeThisDialog()">Delete</button>'
                                + '<button style="margin-right:10px;" type="button" class="btn btn-default grayBtn" ng-click="closeThisDialog()">Cancel</button>'
                                + '</div>' + '</form>' + '</div>',
                        showClose : false,
                        scope : $scope,
                        plain : true
                    });
        };  
        
        
         $scope.VORModel.loadVendorRefresh = function(){
                        $scope.VORModel.isrefresh = true;
                        $scope.VORModel.loadVendor();
                    }
        
        // added By Anurag
         $scope.VORModel.vendorRecievingDelete = function() {
        
           var vorId= $scope.VORModel.VOR_Header.VORId;
            debug(vorId);
            vendorOrderReceivingService.deleteVendorRecieving(vorId).then(function (successfulSearchResult) {
                    Notification.success("Vendor Receiving Deleted Successfully");
                    debug(successfulSearchResult);
                    window.location.href = "/apex/HomeSearch";
               }, function (errorSearchResult) {
                   responseData = errorSearchResult;
                   Notification.error(errorSearchResult);
         });
         return true ;  
         };
         
         
         
         
         
          // scrolling method and variables
            
            $scope.VORModel.displaySections = {
                'Info' : true,
                'Received' : true,
                'Finalize' : true,
                'InvoiceHistory' : true
            };

            $scope.VORModel.activeSidepanelink = '#InfoSection';
            $scope.VORModel.selectedItem = 'Info';

			$scope.VORModel.dropDownItem = function (event, selectedSection) {
				var activeSection = $scope.VORModel.activeSidepanelink.replace('#','');
				$scope.VORModel.selectedItem = selectedSection;
				if(activeSection != selectedSection) {
					$scope.VORModel.sidepanelLink(event, selectedSection);
					
				}
			}	

            angular.element(document).off("scroll");
            angular.element(document).on("scroll", function () {
                $scope.VORModel.onScroll();
            });

            $scope.VORModel.sidepanelLink = function (event, relatedContent) {
                event.preventDefault();
                //$scope.ViewVendor.displaySections[relatedContent] = true;
                angular.element(document).off("scroll");
                var target = angular.element(event.target.closest('a')).attr("href");
                angular.element('html, body').stop().animate({
                    scrollTop : angular.element(target).offset().top - 120
                }, 500, function () {
                    angular.element(document).on("scroll", function () {
                        $scope.VORModel.onScroll();
                    });
                    $scope.VORModel.onScroll();
                });
            }

            $scope.VORModel.onScroll = function () {
                var activeSidepanelink;
                var selectedItem;
                var heading = '';
                var scrollPos = angular.element(document).scrollTop();
                if ((scrollPos < angular.element('#VOR_Info_Block').position().top + angular.element('#VOR_Info_Block').height() + 90) || $scope.VORModel.VOR_Header.VendorName == null) {
                    activeSidepanelink = '#InfoSection';
                    selectedItem = 'Info';
                } else if(scrollPos < angular.element('#VOR_Vendor_Received_Block').position().top + angular.element('#VOR_Vendor_Received_Block').height() + 90  ) {
                    activeSidepanelink = '#ReceivedSection';
                    selectedItem = 'Received';
                } 
                else if((scrollPos < angular.element('#VOR_Finalize_Block').position().top + angular.element('#VOR_Finalize_Block').height() + 90) && angular.element('#VOR_Finalize_Block').height()!=0) {
                    activeSidepanelink = '#FinalizeSection';
                    selectedItem = 'Finalize';
                }
                
                else if((scrollPos < angular.element('#VOR_Vendor_Invoicing_Block').position().top + angular.element('#VOR_Vendor_Invoicing_Block').height() + 90) && angular.element('#VOR_Vendor_Invoicing_Block').height()!=0) {
                    activeSidepanelink = '#InvoiceHistorySection';
                    selectedItem = 'InvoiceHistory';
                } 
                
                $scope.VORModel.activeSidepanelink = activeSidepanelink;
                $scope.VORModel.selectedItem = selectedItem;
                if (!$scope.$$phase) {
                    $scope.$digest();
                }
            }
			// scrolling End
            
        });

            


        // Page services
        vendorOrderReceivingApp.service("vendorOrderReceivingService", function ($q) {

            //Get Part popup Data
            this.getPartRecord = function (partId){
                partId = encodeString(partId);
                var deferred = $q.defer();
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.VendorOrderReceivingCtrl.getPartByPartId}',
                                partId,
                    function (result, event) {
                        if (event.type == 'exception') {
                            deferred.reject(event.message);
                        } else {
                            var partRec = decodeString(result);
                            var find = '\'';
                            var re = new RegExp(find, 'g');
                            partRec = partRec.replace(re, '');
                            deferred.resolve(JSON.parse(partRec));
                        }
                    }, {
                        escape : true
                });
                return deferred.promise;
            }
            
            // Get CO - Header
            this.getCOHeaderRec = function (coHeaderId){
                coHeaderId = encodeString(coHeaderId);
                var deferred = $q.defer();
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.VendorOrderReceivingCtrl.getCoHeaderById}',
                                coHeaderId,
                    function (result, event) {
                        if (event.type == 'exception') {
                            deferred.reject(event.message);
                        } else {
                            var coHeaderRec = decodeString(result);
                            var find = '\'';
                            var re = new RegExp(find, 'g');
                            coHeaderRec = coHeaderRec.replace(re, '');
                            deferred.resolve(JSON.parse(coHeaderRec));
                        }
                    }, {
                        escape : true
                });
                return deferred.promise;
            }
        
            this.addVendor = function (vendorId, VORId) {
                vendorId = encodeString(vendorId);
                VORId = encodeString(VORId);
                var deferred = $q.defer();
        
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.VendorOrderReceivingCtrl.addVendor}',
                    vendorId, VORId,
                    function (result, event) {
                    if (event.type == 'exception') {
                        deferred.reject(event.message);
                    } else {
                        var vendorId = decodeString(result);
                        var find = '\'';
                        var re = new RegExp(find, 'g');
                        vendorId = vendorId.replace(re, '');
                        deferred.resolve(vendorId);
                    }
                }, {
                    escape : true
                });
                return deferred.promise;
            }
            
             this.getVORDetails = function (VORId, gridName,lastEditedPartId, vendorOrdersPageSortAttrsJSON, groupItemsVOGPageSortAttrsJSON, outstandingVOGPageSortAttrsJSON) {
                VORId = encodeString(VORId);
                gridName = encodeString(gridName);
                lastEditedPartId = encodeString(lastEditedPartId);
                vendorOrdersPageSortAttrsJSON = encodeString(angular.toJson(vendorOrdersPageSortAttrsJSON));
                groupItemsVOGPageSortAttrsJSON = encodeString(angular.toJson(groupItemsVOGPageSortAttrsJSON));
                outstandingVOGPageSortAttrsJSON = encodeString(angular.toJson(outstandingVOGPageSortAttrsJSON));
                var deferred = $q.defer();
        
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.VendorOrderReceivingCtrl.getVORDetails}',
                     VORId, gridName,lastEditedPartId, vendorOrdersPageSortAttrsJSON, groupItemsVOGPageSortAttrsJSON, outstandingVOGPageSortAttrsJSON,
                    function (result, event) {
                    if (event.type == 'exception') {
                        deferred.reject(event.message);
                    } else {
                        var vorDetails = decodeString(result);
                        var find = '\'';
                        var re = new RegExp(find, 'g');
                        vorDetails = vorDetails.replace(re, '');
                        deferred.resolve(JSON.parse(vorDetails));
                    }
                }, {
                    escape : true
                });
                return deferred.promise;
            }
            
            this.updateVORHeaderDetails = function (VORId, VORHeaderJSON) {
                VORId = encodeString(VORId);
                VORHeaderJSON = encodeString(angular.toJson(VORHeaderJSON));
                var deferred = $q.defer();
        
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.VendorOrderReceivingCtrl.updateVORHeaderDetails}',
                    VORId, VORHeaderJSON,
                    function (result, event) {
                    if (event.type == 'exception') {
                        deferred.reject(event.message);
                    } else {
                        var vorhDetails = decodeString(result);
                        var find = '\'';
                        var re = new RegExp(find, 'g');
                        vorhDetails = vorhDetails.replace(re, '');
                        deferred.resolve(JSON.parse(vorhDetails));
                    }
                }, {
                    escape : true
                });
                return deferred.promise;
            }
            
            this.receiveVendorOrderItems = function (vendorOrderId, VORId, isSelected) {
                vendorOrderId = encodeString(vendorOrderId);
                VORId = encodeString(VORId);
                var deferred = $q.defer();
        
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.VendorOrderReceivingCtrl.receiveVendorOrderItems}',
                    vendorOrderId, VORId, isSelected,
                    function (result, event) {
                    if (event.type == 'exception') {
                        deferred.reject(event.message);
                    } else {
                        var isSuccessful = decodeString(result);
                        var find = '\'';
                        var re = new RegExp(find, 'g');
                        isSuccessful = isSuccessful.replace(re, '');
                        deferred.resolve(isSuccessful);
                    }
                }, {
                    escape : true
                });
                return deferred.promise;
            }
            


            // Service method to add selected group to vendor Order Receiving Items grid
            this.addToItemSubsection = function (VORId, partId, vendorId, isFromSearchToAdd, vendorOrdersPageSortAttrsJSON, groupItemsVOGPageSortAttrsJSON, outstandingVOGPageSortAttrsJSON) {
                VORId = encodeString(VORId);
                partId = encodeString(partId);
                vendorId = encodeString(vendorId);
                vendorOrdersPageSortAttrsJSON = encodeString(angular.toJson(vendorOrdersPageSortAttrsJSON));
                groupItemsVOGPageSortAttrsJSON = encodeString(angular.toJson(groupItemsVOGPageSortAttrsJSON));
                outstandingVOGPageSortAttrsJSON = encodeString(angular.toJson(outstandingVOGPageSortAttrsJSON));
                var deferred = $q.defer();
        
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.VendorOrderReceivingCtrl.addToItemSubsection}',
                    VORId, partId, vendorId, isFromSearchToAdd, vendorOrdersPageSortAttrsJSON, groupItemsVOGPageSortAttrsJSON, outstandingVOGPageSortAttrsJSON,

                    function (result, event) {
                    if (event.type == 'exception') {
                        deferred.reject(event.message);
                    } else {
						debug(result);
                        var newResult = decodeString(result);
                        var find = '\'';
                        var re = new RegExp(find, 'g');
                        newResult = newResult.replace(re, '');
                        deferred.resolve(JSON.parse(newResult));
                    } 
                }, {
                    escape : true
                });
                return deferred.promise;
            }
            
            //Bulk Remove function
            this.removeAllItemsFromItemSubSection = function(vorId, vendorOrdersPageSortAttrsJSON, groupItemsPageSortAttrsJSON, outstandingVOGPageSortAttrsJSON){
                vorId = encodeString(vorId);
                vendorOrdersPageSortAttrsJSON = encodeString(angular.toJson(vendorOrdersPageSortAttrsJSON));
                groupItemsPageSortAttrsJSON = encodeString(angular.toJson(groupItemsPageSortAttrsJSON));
                outstandingVOGPageSortAttrsJSON = encodeString(angular.toJson(outstandingVOGPageSortAttrsJSON));
                var deferred = $q.defer();
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.VendorOrderReceivingCtrl.removeAllItemsFromItemSubSection}',
                    vorId,vendorOrdersPageSortAttrsJSON, groupItemsPageSortAttrsJSON, outstandingVOGPageSortAttrsJSON,

                    function (result, event) {
                    if (event.type == 'exception') {
                        deferred.reject(event.message);
                    } else {

                        var newResult = decodeString(result);
                        var find = '\'';
                        var re = new RegExp(find, 'g');


                        newResult = newResult.replace(re, '');
                        deferred.resolve(JSON.parse(newResult));
                    }
                }, {
                    escape : true
                });
                return deferred.promise;
            }
            
            this.removeItem = function (vorId,vrGroupId, vendorOrdersPageSortAttrsJSON, groupItemsPageSortAttrsJSON, outstandingVOGPageSortAttrsJSON){
                vorId = encodeString(vorId);
                vrGroupId = encodeString(vrGroupId);
                vendorOrdersPageSortAttrsJSON = encodeString(angular.toJson(vendorOrdersPageSortAttrsJSON));
                groupItemsPageSortAttrsJSON = encodeString(angular.toJson(groupItemsPageSortAttrsJSON));
                outstandingVOGPageSortAttrsJSON = encodeString(angular.toJson(outstandingVOGPageSortAttrsJSON));    
                var deferred = $q.defer();
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.VendorOrderReceivingCtrl.removeItem}',
                    vorId , vrGroupId ,vendorOrdersPageSortAttrsJSON, groupItemsPageSortAttrsJSON, outstandingVOGPageSortAttrsJSON,

                    function (result, event) {
                    if (event.type == 'exception') {
                        deferred.reject(event.message);
                    } else {

                        var newResult = decodeString(result);
                        var find = '\'';
                        var re = new RegExp(find, 'g');
                        newResult = newResult.replace(re, '');
                        deferred.resolve(JSON.parse(newResult));
                    }
                }, {
                    escape : true
                });
                return deferred.promise;
                    
            
            }
            // Update Recieving Group Records
            this.updateItemsSection =function(vorId,  partId,  vrGroupId,  qty,  cost, vendorOrdersPageSortAttrsJSON, 
                                        groupItemsPageSortAttrsJSON,  outstandingVOGPageSortAttrsJSON){
            		vorId = encodeString(vorId);
                    partId = encodeString(partId);
                    vrGroupId = encodeString(vrGroupId);
                    vendorOrdersPageSortAttrsJSON = encodeString(angular.toJson(vendorOrdersPageSortAttrsJSON));
                    groupItemsPageSortAttrsJSON = encodeString(angular.toJson(groupItemsPageSortAttrsJSON));
                    outstandingVOGPageSortAttrsJSON = encodeString(angular.toJson(outstandingVOGPageSortAttrsJSON));
                    var deferred = $q.defer();
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.VendorOrderReceivingCtrl.updateItemsSection}',
                            vorId,  partId,  vrGroupId,  qty,  cost,vendorOrdersPageSortAttrsJSON, 
                            groupItemsPageSortAttrsJSON, outstandingVOGPageSortAttrsJSON,
                            function (result, event) {
                            if (event.type == 'exception') {
                                deferred.reject(event.message);
                            } else {
        
                                var newResult = decodeString(result);
                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                newResult = newResult.replace(re, '');
                                deferred.resolve(JSON.parse(newResult));
                            }
                        }, {
                            escape : true
                        });
                        return deferred.promise;
            }
            
            //receive all items
            
            
            this.addAllLineItemsToItemSubsection = function(vorId, vohId , vogId , vendorOrdersPageSortAttrsJSON,  groupItemsPageSortAttrsJSON,  outstandingVOGPageSortAttrsJSON){
            						vorId = encodeString(vorId);
									vohId = encodeString(vohId);
									vogId = encodeString(vogId);
									vendorOrdersPageSortAttrsJSON = encodeString(angular.toJson(vendorOrdersPageSortAttrsJSON));
									groupItemsPageSortAttrsJSON = encodeString(angular.toJson(groupItemsPageSortAttrsJSON));
									outstandingVOGPageSortAttrsJSON = encodeString(angular.toJson(outstandingVOGPageSortAttrsJSON));
                                    var deferred = $q.defer();
                                    Visualforce.remoting.Manager.invokeAction(
                                        '{!$RemoteAction.VendorOrderReceivingCtrl.addAllLineItemsToItemSubsection}',
                                        vorId , vohId , vogId,vendorOrdersPageSortAttrsJSON, 
                                        groupItemsPageSortAttrsJSON, outstandingVOGPageSortAttrsJSON,
                                        function (result, event) {
                                        if (event.type == 'exception') {
                                            deferred.reject(event.message);
                                        } else {
                    
                                            var newResult = decodeString(result);
                                            var find = '\'';
                                            var re = new RegExp(find, 'g');
                                            newResult = newResult.replace(re, '');
                                            deferred.resolve(JSON.parse(newResult));
                                        }
                                    }, {
                                        escape : true
                                    });
                                    return deferred.promise;
            
            }
            
            // Update Line Item 
            this.updateLineItemsOfItemsSection=function( vorId, partId,vrGroupId, groupJSONString,  vendorOrdersPageSortAttrsJSON,
                                  groupItemsPageSortAttrsJSON,  outstandingVOGPageSortAttrsJSON){
                                 debug( groupJSONString);
                                 vorId = encodeString(vorId);
                                 partId = encodeString(partId);
                                 vrGroupId = encodeString(vrGroupId);
                                 groupJSONString = encodeString(angular.toJson(groupJSONString));
                                 vendorOrdersPageSortAttrsJSON = encodeString(angular.toJson(vendorOrdersPageSortAttrsJSON));
                                 groupItemsPageSortAttrsJSON = encodeString(angular.toJson(groupItemsPageSortAttrsJSON));
                                 outstandingVOGPageSortAttrsJSON = encodeString(angular.toJson(outstandingVOGPageSortAttrsJSON));
                                var deferred = $q.defer();
                                    Visualforce.remoting.Manager.invokeAction(
                                        '{!$RemoteAction.VendorOrderReceivingCtrl.updateLineItemsOfItemsSection}',
                                        vorId , partId ,  vrGroupId,  groupJSONString ,vendorOrdersPageSortAttrsJSON, 
                                        groupItemsPageSortAttrsJSON, outstandingVOGPageSortAttrsJSON,
                                        function (result, event) {
                                        if (event.type == 'exception') {
                                            deferred.reject(event.message);
                                        } else {
                    
                                            var newResult = decodeString(result);
                                            var find = '\'';
                                            var re = new RegExp(find, 'g');
                                            newResult = newResult.replace(re, '');
                                            deferred.resolve(JSON.parse(newResult));
                                        }
                                    }, {
                                        escape : true
                                    });
                                    return deferred.promise;
                    
                                 
                                 
                                 }
                            //Pop excess
                            this.getGroupRecDetail =function(vrGroupId){
                                    vrGroupId = encodeString(vrGroupId);
                                    var deferred = $q.defer();
                                            Visualforce.remoting.Manager.invokeAction(
                                                '{!$RemoteAction.VendorOrderReceivingCtrl.getGroupRecDetail}',
                                                 vrGroupId,
                                                  function (result, event) {
                                                if (event.type == 'exception') {
                                                    deferred.reject(event.message);
                                                } else {
                            
                                                    var newResult = decodeString(result);
                                                    var find = '\'';
                                                    var re = new RegExp(find, 'g');
                                                    newResult = newResult.replace(re, '');
                                                    deferred.resolve(JSON.parse(newResult));
                                                }
                                            }, {
                                                escape : true
                                            });  
                                            return deferred.promise;                            
                        }


                    this.addToItemSubsectionAfterConfimation =function(vorId, partId,vendorId,isStockExcessGenerated,isFoundPartInOtherVOHeader,vendorOrdersPageSortAttrsJSON, 
                                                        groupItemsPageSortAttrsJSON,outstandingVOGPageSortAttrsJSON) {
                                vorId = encodeString(vorId);
                                partId = encodeString(partId);
                                vendorOrdersPageSortAttrsJSON = encodeString(angular.toJson(vendorOrdersPageSortAttrsJSON));
                                groupItemsPageSortAttrsJSON = encodeString(angular.toJson(groupItemsPageSortAttrsJSON));
                                outstandingVOGPageSortAttrsJSON = encodeString(angular.toJson(outstandingVOGPageSortAttrsJSON));
                                var deferred = $q.defer();
                                    Visualforce.remoting.Manager.invokeAction(
                                        '{!$RemoteAction.VendorOrderReceivingCtrl.addToItemSubsectionAfterConfimation}',
                                        vorId, partId,isStockExcessGenerated,vendorOrdersPageSortAttrsJSON, 
                                        groupItemsPageSortAttrsJSON, outstandingVOGPageSortAttrsJSON,
                                        function (result, event) {
                                        if (event.type == 'exception') {
                                            deferred.reject(event.message);
                                        } else {
                    
                                            var newResult = decodeString(result);
                                            var find = '\'';
                                            var re = new RegExp(find, 'g');
                                            newResult = newResult.replace(re, '');
                                            deferred.resolve(JSON.parse(newResult));
                                        }
                                    }, {
                                        escape : true
                                    });
                                    return deferred.promise;                            
                                                        
                }
                
                // popUp 
                
                
            // Commit Receiving Action
            this.CommitReceiving = function(vorId){
                vorId = encodeString(vorId);
                var deferred = $q.defer();
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.VendorOrderReceivingCtrl.commitRecevingAction}',
                            vorId,
                    function (result, event) {
                    if (event.type == 'exception') {
                        deferred.reject(event.message);
                    } else {
                        var newResult = decodeString(result);
                        var find = '\'';
                        var re = new RegExp(find, 'g');
                        newResult = newResult.replace(re, '');
                        deferred.resolve(JSON.parse(newResult));
                    }
                }, {
                    escape : true
                });
                return deferred.promise;
            }
            
            
            this.deleteVendorRecieving = function (vorId){
                 vorId = encodeString(vorId);
                 var deferred = $q.defer();
                 Visualforce.remoting.Manager.invokeAction(
                     '{!$RemoteAction.VendorOrderReceivingCtrl.deleteVendorOrderRecieving}', vorId,
                     function (result, event) {
                         if (event.type == 'exception') {
                             deferred.reject(event.message);
                         } else {
                             var vrHeaderRec = decodeString(result);
                             deferred.resolve(vrHeaderRec);
                         }
                     }, {
                         escape : true
                 });
                 return deferred.promise;
             }
        
                
        });
		</script>

		<body ng-controller="vendorOrderReceivingController"
			ng-init="VORModel.loadVendor()" ng-cloak="ng-cloak">

			<!-- Header start -->
			<c:BPGlobalHeader />
			<!-- Header End -->
		
			<!-- START: Page Content -->
			<div class="content">

				<!-- START: Side panel start -->
				<div class="col-lg-2 col-md-2 sidePanel">
					<div class="clearfix"></div>
					<div class="orderNumber row">
						<span>ORDER #: {{VORModel.VOR_Header.VORName}}</span>
					</div>
					<div class="sidepaneluserinfo row" style="padding-bottom: 5px;">
						<div class="userimg">
							<div style="float: left; background-color: #373c40; border-radius: 5px; padding: 1px; margin-right: 5px;">
								<img src="{!URLFOR($Resource.Images, 'star.png')}" style="height: 35px; width: 35px; padding: 5px;" />
							</div>
						</div>
						<div class="userNameblock" style="margin-top: 0px;">
		                	<p > 
		                   		<a href="" ng-mouseover="VORModel.showVendorInfoOverlay($event, VORModel.VOR_Header.VendorId);" 
						         	ng-mouseleave="VORModel.hideVendorInfoOverlay();" id="CO_workflow_sidepanel_cust_name_link">
						         	{{VORModel.VOR_Header.VendorName}}</a>
		                   	</p>
		                   	<span class="userStatus" style="margin: 0px;">{{VORModel.VOR_Header.Status}}</span>
		               	</div>
					</div>
					<div class="clearfix"></div>
					<div class="row statusRow"></div>
					<div class="clearfix"></div>
					<div class="row ownerInfo">
						<img src="{!URLFOR($Resource.Images, 'profile_default.jpg')}" style="height: 30px; width: 30px" />
						<span class="Name">{!$User.FirstName}
								{!$User.LastName}
						</span>
					</div>

					<!-- start: leftPanelLinks  -->
					<div class="leftPanelLinks" style="height: 375px">
						<a class="row T10 mainSectionLink"
							ng-class="{'active' : VORModel.activeSidepanelink =='#InfoSection'}"
							href="#VOR_Info_Block"
							ng-click="VORModel.sidepanelLink($event, 'Info')">
							<span class="alphabetLetter">{{VORModel.LeftSideHeadingLables.Info}}</span>{!$Label.Page_Section_Info}
						</a> 
						<a class="row T10 subSectionLink" href="#VOR_Info_Block"
							ng-click="VORModel.sidepanelLink($event, 'Info')">
							<span class="alphabetLetter"></span>{!$Label.Label_General}
						</a> 
						<a class="row T10 subSectionLink"
							href="#VOR_Vendor_Order_Receiving_Block"
							ng-click="VORModel.sidepanelLink($event, 'Info')"
							ng-show="VORModel.vendorOrdersList.length != 0 && VORModel.VOR_Header.VendorName != null">
							<span class="alphabetLetter"></span>{!$Label.Vendor_Receiving_For_Vendor_Order}
						</a>
						<a class="row T10 mainSectionLink" 
						    ng-if="VORModel.VOR_Header.VendorName != null && (VORModel.VORLineItemGroupList.length != 0 ||  VORModel.outstandingVOGList.length != 0)"
							ng-class="{'active' : VORModel.activeSidepanelink =='#ReceivedSection'}"
							href="#VOR_Vendor_Received_Block"
							ng-click="VORModel.sidepanelLink($event, 'Received')">
							<span class="alphabetLetter">{{VORModel.LeftSideHeadingLables.Received}}</span>{!$Label.Label_Received}
						</a>
						<a class="row T10 subSectionLink" href="#VOR_Items_Block"
							ng-if="VORModel.VOR_Header.VendorName != null && VORModel.VORLineItemGroupList.length != 0"
							ng-click="VORModel.sidepanelLink($event, 'Received')">
							<span class="alphabetLetter"></span>{!$Label.Items}
						</a> 
						<a class="row T10 subSectionLink " style="margin-left: 18px"
							href="#VOR_Outstanding_Items_Block"
							ng-click="VORModel.sidepanelLink($event, 'Received')"
							ng-show="VORModel.VOR_Header.VendorId != null && VORModel.totalOutstandingItems != 0 && VORModel.VOR_Header.Status == 'In Progress' 
							   && VORModel.VOR_Header.VendorName != null
							   && VORModel.outstandingVOGList.length != 0">
							Outstanding Items for {{VORModel.SelectedVendorOrdersList[0]}} 
						</a>
						<a class="row T10 mainSectionLink"
							ng-class="{'active' : VORModel.activeSidepanelink =='#FinalizeSection'}"
							href="#VOR_Finalize_Block"
							ng-click="VORModel.sidepanelLink($event, 'Finalize')"
							ng-show="VORModel.VOR_Header.VendorId != null &&  VORModel.VORLineItemGroupList.length != 0  && VORModel.VOR_Header.Status == 'In Progress'
							       && VORModel.VOR_Header.VendorName != null &&
							(VORModel.VOR_Header.Status != 'Stocked' && VORModel.VOR_Header.PackagingSlipNumber != undefined && VORModel.VOR_Header.PackagingSlipNumber != '' && VORModel.VOR_Header.PackagingSlipNumber != null)">
							<span class="alphabetLetter">{{VORModel.LeftSideHeadingLables.Finalize}}</span>{!$Label.Finalize}
						</a>
						<a class="row T10 mainSectionLink"
							ng-class="{'active' : VORModel.activeSidepanelink =='#InvoiceHistorySection'}"
							href="#VOR_Vendor_Invoicing_Block"
							ng-click="VORModel.sidepanelLink($event, 'InvoiceHistory')"
							ng-show="VORModel.VOR_Header.VendorId != null && (VORModel.VOR_Header.Status == 'Stocked' || VORModel.VOR_Header.Status == 'Invoiced') 
							      && VORModel.VOR_Header.VendorName != null
							      && VORModel.VIHistoryList.length != 0">
							<span class="alphabetLetter">{{VORModel.LeftSideHeadingLables.Invoice_History}}</span>{!$Label.Label_Invoice_History}
						</a>
					</div>
					<!-- end: leftPanelLinks  -->
					
					<!-- start: sideBarTotals  -->
					<div class="sideBarTotals">
						<div class="mainSectionLink totalDue C1">
							<a class="T2">{!$Label.Label_Received}:</a>
							<a class="T2 text-right"> {{VORModel.GroupTotalCost | currency}}</a>
						</div>
					</div>
					<!-- end: sideBarTotals  -->
				</div>
				<!-- END: Left Side Bar -->

				<!-- START: Center Panel -->
				<div class="col-lg-10 col-md-10 mainSection" style="margin-top: 98px;">
					<div class=" sectionHeader row fixedRow">
					
						<!-- Start: fixed header Info Section -->
						<div class="col-lg-6 col-md-6"
							ng-show="VORModel.activeSidepanelink =='#InfoSection'">
							<div class="fixedHeaderText">
								<span class="headerlabel">
									<i class="fa fa-angle-right"
										style="width: 10px; padding: 0 3px;"
										ng-show="!VORModel.displaySections.Info"
										ng-Click="VORModel.displaySections.Info = true"> 
									</i> 
									<i class="fa fa-angle-down" style="width: 10px;"
										ng-show="VORModel.displaySections.Info"
										ng-Click="VORModel.displaySections.Info = false">
									</i>
									<span class="divider">|</span>
									<span class="headdingFirstText">A</span>
									<span class="T2">{!$Label.Page_Section_Info}</span>
								</span>
								<span class="ActionIcons pull-left ">
									<div class="dropdown selectDropdown checkboxDropdown">
										<button class="btn dropdown-toggle" type="button" data-toggle="dropdown">
											{!$Label.Label_Actions} <span class="caret"></span>
										</button>
									</div>
								</span>
							</div>
						</div>
						<!-- End: fixed header Info Section -->
						
						<!-- Start: condition when VendorName null -->
						<div ng-if="VORModel.VOR_Header.VendorName != null">
		                
		                	<!-- Start: fixed header Received Section-->
				     		<div class="col-lg-4 col-md-4"
								ng-show="VORModel.activeSidepanelink =='#ReceivedSection' && (VORModel.VORLineItemGroupList.length != 0 ||  VORModel.outstandingVOGList.length != 0)">
								<div class="fixedHeaderText">
									<span class="headerlabel"> 
										<i class="fa fa-angle-right" style="width: 10px; padding: 0 3px;"
											ng-show="!VORModel.displaySections.Received"
											ng-Click="VORModel.displaySections.Received = true"> 
										</i> 
										<i class="fa fa-angle-down" style="width: 10px;"
											ng-show="VORModel.displaySections.Received"
											ng-Click="VORModel.displaySections.Received = false"> 
										</i> 
										<span class="divider">|</span> 
										<span class="headdingFirstText">{{VORModel.LeftSideHeadingLables.Received}}</span>
										<span class="T2">{!$Label.Label_Received}</span>
									</span>
									<span class="ActionIcons pull-left ">
										<div class="dropdown selectDropdown checkboxDropdown">
											<button class="btn dropdown-toggle" type="button" data-toggle="dropdown">
												{!$Label.Label_Actions} <span class="caret"></span>
											</button>
										</div>
									</span>
									<span class="T3  pull-right total" style="color: #337ab7">
										${{VORModel.GroupTotalCost| number:2}}
									</span>
								</div>
							</div>
							<!-- End: fixed header Received Section-->
							
							<!-- Start: fixed header Finalize Section-->
							<div class="col-lg-4 col-md-4" ng-show="VORModel.activeSidepanelink =='#FinalizeSection'
								&& (VORModel.VOR_Header.Status != 'Stocked' && VORModel.VOR_Header.PackagingSlipNumber != undefined && VORModel.VOR_Header.PackagingSlipNumber != '' && VORModel.VOR_Header.PackagingSlipNumber != null)">
								<div class="fixedHeaderText">
									<span class="headerlabel"> 
										<i class="fa fa-angle-right" style="width: 10px; padding: 0 3px;"
											ng-show="!VORModel.displaySections.Finalize"
											ng-Click="VORModel.displaySections.Finalize = true"> 
										</i>
										<i class="fa fa-angle-down" style="width: 10px;"
											ng-show="VORModel.displaySections.Finalize"
											ng-Click="VORModel.displaySections.Finalize = false">
										</i>
										<span class="divider">|</span>
										<span class="headdingFirstText">{{VORModel.LeftSideHeadingLables.Finalize}}</span>
										<span class="T2">{!$Label.Finalize}</span>
									</span>
									<span class="ActionIcons pull-left ">
										<div class="dropdown selectDropdown checkboxDropdown">
											<button class="btn dropdown-toggle" type="button" data-toggle="dropdown">
												{!$Label.Label_Actions} <span class="caret"></span>
											</button>
										</div>
									</span>
								</div>
							</div>
							<!-- End: fixed header Finalize Section-->
							
							<!-- Start: fixed header Invoice History Section-->
							<div class="col-lg-4 col-md-4"
								ng-show="VORModel.activeSidepanelink =='#InvoiceHistorySection' && VORModel.VIHistoryList.length != 0">
								<div class="fixedHeaderText">
									<span class="headerlabel">
										<i class="fa fa-angle-right" style="width: 10px; padding: 0 3px;"
											ng-show="!VORModel.displaySections.InvoiceHistory"
											ng-Click="VORModel.displaySections.InvoiceHistory = true">
										</i>
										<i class="fa fa-angle-down" style="width: 10px;"
											ng-show="VORModel.displaySections.InvoiceHistory"
											ng-Click="VORModel.displaySections.InvoiceHistory = false">
										</i>
										<span class="divider">|</span> 
										<span class="headdingFirstText">{{VORModel.LeftSideHeadingLables.Invoice_History}}</span>
										<span class="T2">{!$Label.Label_Invoice_History}</span>
									</span>
									<span class="ActionIcons pull-left ">
										<div class="dropdown selectDropdown checkboxDropdown">
											<button class="btn dropdown-toggle" type="button" data-toggle="dropdown">
												{!$Label.Label_Actions} <span class="caret"></span>
											</button>
										</div>
									</span>
								</div>
							</div>
							<!-- End: fixed header Invoice History Section-->
							
						</div>
           				<!-- End: condition when VendorName null -->
           				
           				<!-- Start: fixed header Content -->
						<div class="col-lg-6 col-md-6 fixedContent">
							<i class="fa fa-refresh fa-2x fa-fw"
								ng-class="{'fa-spin' : VORModel.isrefresh}"
								ng-click="VORModel.loadVendorRefresh();">
							</i>
							<div class="fa-icons pull-right">
								<i class="fa fa-floppy-o"></i>
								<a aria-expanded="false" class="dropdown-toggle" data-toggle="dropdown" href="#" role="button">
									<i class="fa fa-cog"></i>
								</a>
								<ul id="VOR_fixed-seacrh-row_sub-search_icons-div_link_dropdown"
									class="link_dropdown dropdown-menu" role="menu">
									<li>
										<a href="" ng-click="VORModel.confirmDelete()">{!$Label.Vendor_Receiving_Delete_Vendor_Receiving}</a>
									</li>
								</ul>
							</div>
							<div class="col-lg-10 col-md-9 searchToAdd  pull-right">
								<div class="input-group" ng-class="{'activeSearchDiv' : VORModel.searchDivActive}">
									<div class="input-group-btn">
										<button type="button" class="btn C5 LabelBtn">
											<span class="T5" style="color: #939CA9;">TO:</span>
											<span style="color: #FFFFFF;">{{VORModel.selectedItem}}</span>
										</button>
										<button type="button" class="btn C5 dropdown-toggle caretBtn"
											data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
											<span class="caret"></span> <span class="sr-only">Toggle Dropdown</span>
										</button>
										<ul class="dropdown-menu">
											<li ng-click="VORModel.UpdateSelectedSection($event,$index)">
												<a href="#VOR_Info_Block"
													ng-click="VORModel.dropDownItem($event, 'Info')">{!$Label.Page_Section_Info}
												</a> 
												<a
													ng-if="VORModel.VOR_Header.VendorName != null && (VORModel.VORLineItemGroupList.length != 0 ||  VORModel.outstandingVOGList.length != 0)"
													href="#VOR_Vendor_Received_Block"
													ng-click="VORModel.dropDownItem($event, 'Received')">{!$Label.Label_Received}
												</a>
												<a href="#VOR_Finalize_Block"
													ng-click="VORModel.dropDownItem($event, 'Finalize')"
													ng-if="VORModel.VOR_Header.VendorId != null &&  VORModel.VORLineItemGroupList.length != 0  && VORModel.VOR_Header.Status == 'In Progress'
													       && VORModel.VOR_Header.VendorName != null
													       && (VORModel.VOR_Header.Status != 'Stocked' && VORModel.VOR_Header.PackagingSlipNumber != undefined && VORModel.VOR_Header.PackagingSlipNumber != '' && VORModel.VOR_Header.PackagingSlipNumber != null)">{!$Label.Finalize}
												</a>
												<a href="#VOR_Vendor_Invoicing_Block"
													ng-click="VORModel.dropDownItem($event, 'InvoiceHistory')"
													ng-if="VORModel.VOR_Header.VendorId != null && (VORModel.VOR_Header.Status == 'Stocked' || VORModel.VOR_Header.Status == 'Invoiced') 
													   && VORModel.VOR_Header.VendorName != null 
													   && VORModel.VIHistoryList.length != 0">{!$Label.Label_Invoice_History}
												</a>
											</li>
											<li role="separator" class="divider"></li>
											<li><a href="#">ADVANCED SEARCH</a></li>
										</ul>
									</div>
									<!-- /btn-group -->
		
									<div
										class="inner-addon right-addon neVendorOrderAutocomplete-container" ng-class="{'disabledSearchToAddElement' : VORModel.VOR_Header.Status == 'Stocked' || VORModel.VOR_Header.Status == 'Invoiced' }">
										<i class="fa fa-search fa-flip-horizontal"></i>
										<c:AutoSuggestVendorOrder />
										<!-- <input class="header-search form-control"  placeholder="search to Add Related" type="text" /> -->
									</div>
								</div>
								<!-- /input-group -->
							</div>
		
		
						</div>
						<!-- End: fixed header Content -->
			</div>

			<!-- Start: contentWrapper -->
			<div class="contentWrapper">
				<!-- Start: Info section -->
				<div id="VOR_Info_Block" ng-show="VORModel.displaySections.Info">
					<!-- START: General Section -->
					<div class="main_section row VOR_Info_Block">
						<div class="row rowGeneral">
							<div class="content ">
								<div class="col-lg-12 col-md-12 Pl24 MB48"
									id="VOR_General_Block">
									<p class="actionRow T2">
										<span class="sectionText">{!$Label.Label_General} </span>
										<!-- style="color: #00AEEF" -->
										<!-- commented by pooja -->
										<span class="actionText">{!$Label.Label_Actions}</span> <span
											class="ActionIcons"> <i class="fa fa-question-circle"
											data-toggle="tooltip" title="General Info"></i>
										</span>
									</p>
									<!-- START: Vendor selection section -->
									<div class="col-lg-7 col-md-7 Plr12">
										<p class="T3 MB24 F12 FC2">{!$Label.Vendor_Object_Display_Label}</p>
										<!-- style="margin-left: 35px;" -->
										<div class="col-md-6 Plr0 ">
											<div class="col-lg-4 col-md-5 Plr0 MB12  ">
												<img class="Profile_pic"
													src="{!URLFOR($Resource.Images, 'profile_default.jpg')}" />
												<!-- style="height:100px;width:95px" -->
											</div>

											<div class="col-lg-8 col-md-7 Plr12 MB12 ">
												<!--  style="margin-left: -27px;margin-bottom: 20px;" -->
												<div ng-if="VORModel.VOR_Header.VendorName == null">
													<span class="T1_SubHeading"> <a href=""
														ng-click="VORModel.RelatedList_addAction($event, 'Vendor')"
														id="CO_workflow_sidepanel_add_cust_link">Add Vendor</a>
													</span>
												</div>
												<div ng-if="VORModel.VOR_Header.VendorName!= null">
													<!-- style="margin-left: 10px;" -->
													<p class="T1 ">
														<a href="" ng-mouseover="VORModel.showVendorInfoOverlay($event, VORModel.VOR_Header.VendorId);" 
												         	ng-mouseleave="VORModel.hideVendorInfoOverlay();" id="CO_workflow_sidepanel_cust_name_link">
												         	{{VORModel.VOR_Header.VendorName}}</a>
													</p>
												</div>

												<div class="Plr12_Plr0_MB12_imgDiv">
													<img src="{!URLFOR($Resource.Images, 'star.png')}"
														class="Plr12_Plr0_MB12_imgDiv_img" />
												</div>
												<!--  <div style="margin-left: 11px;float:left;background-color: #373c40;border-radius: 5px;padding: 1px;margin-right: 5px;">
                                            	<img src="{!URLFOR($Resource.Images, 'star.png')}" style="height:35px; width:35px; padding: 5px;"/>
                                            </div> -->
												<p class="T7 T7_vendor">{!$Label.Label_Gamification}</p>
												<!-- <p class="T7" style="margin-left: 24px;padding-top:10px;padding-left:24px;"> Gamification</p>  -->
											</div>

											<div class="col-md-12 Plr0 Mrg20">
												<div class="generalInfoData">
													<label class="T7 required_field">{!$Label.Label_Packing_Slip}</label>
												</div>
												<div class="mycustvalue"
													id="VOR_info_form-label_PACKING_SLIP_selection">
													<input type="text" class="form-control"
														id="packingSlipNumber"
														placeholder="{!$ObjectType.Vendor_Receiving_Header__c.fields.Packing_Slip_Number__c.label}"
														maxlength="255"
														ng-model="VORModel.VOR_Header.PackagingSlipNumber"
														rel="PackingSlipNumberId"
														ng-class="{'redborder' : VORModel.VendorOrderReceivingFormValidationModal['PackagingSlipNumber']['isError'] == true}"
														data-toggle="tooltip"
														title="{{VORModel.VOR_Header['PackagingSlipNumber']['ErrorMessage']}}"
														ng-disabled="VORModel.VOR_Header.Status == 'Stocked' || VORModel.VOR_Header.VendorName == null"
														ng-blur="VORModel.updateVORHeaderDetails()" />
												</div>
											</div>
											<div class="col-md-12 Plr0 Mrg20">
												<div class="generalInfoData"
													id="VOR_info_form-label_RECEIVING_FROM_INVOICE">
													<label class="T7">Receiving From Invoice?</label>
												</div>
												<div class="mycustvalue" 
												ng-class="{'disabledCheckboxReceivingFromInvoice' : VORModel.VOR_Header.Status == 'Stocked' || VORModel.VOR_Header.Status == 'Invoiced' || VORModel.VOR_Header.VendorName == null }"
													id="VOR_info_form-label_PACKING_SLIP_selection">
													<div class="form-group small">
														<label class="checkbox"> <span
															style="margin-left: 1px;" class="chk_tick"
															ng-attr-tabindex="100"
															ng-class="{'chked' : VORModel.VOR_Header.IsReceivingFromInvoice == true}"
															ng-click="VORModel.onClickReceivingFromInvoice($event);">
																<i class="fa fa-check-square chksqure"></i>
														</span>
														</label>
													</div>
												</div>
											</div>
											<div class="col-md-12 Plr0 Mrg20"
												id="VOR_info_form-label_RECEIVING_FROM_INVOICE_selection">
												<div class="generalInfoData">
													<label class="T7 required_field">{!$Label.Label_Total}</label>
												</div>
												<div class="mycustvalue"
													id="VOR_info_form-label_PACKING_SLIP_selection" 
													ng-class="{'disabledInputFieldReceivingFromInvoiceTotal' : VORModel.VOR_Header.IsReceivingFromInvoice || VORModel.VOR_Header.Status == 'Stocked' || VORModel.VOR_Header.Status == 'Invoiced' || VORModel.VOR_Header.VendorName == null}">
													<input id="receivingFromInvoiceTotal" type="text"
														rel="SLIP" class="form-control"
														ng-attr-tabindex="{{tabIndex}}"
														ng-disabled="VORModel.VOR_Header.IsReceivingFromInvoice && VORModel.VOR_Header.Status == 'Stocked'"
														placeholder="Total"
														ng-model="VORModel.VOR_Header.ReceivingFromInvoiceTotal"
														ng-blur="VORModel.updateVORHeaderDetails()"
														maxlength="255"
														ng-class="{redborder : VORModel.VendorOrderReceivingFormValidationModal[ReceivingFromInvoiceTotal][isError] == true}"
														data-toggle="tooltip"
														title="{{VORModel.VendorOrderReceivingFormValidationModal[ReceivingFromInvoiceTotal][ErrorMessage]}}"
														ng-keydown = "VORModel.numberOnlyValue($event)" /> 
														
														
														<!-- <price-only-input id-value="receivingFromInvoiceTotal" 
														rel="SLIP" rel-value="SLIP" class-value="form-control" precision-length="2" packaged="true" 
														input-model = "VORModel"
														place-holder-value = "0"
														maxlength="16"
														input-value="VORModel.VOR_Header.ReceivingFromInvoiceTotal"
														ng-attr-tabindex="{{tabIndex}}"
														ng-disabled="VORModel.VOR_Header.IsReceivingFromInvoice && VORModel.VOR_Header.Status == 'Stocked'" 
														ng-blur="VORModel.updateVORHeaderDetails()" 
														ng-class="{redborder : VORModel.VendorOrderReceivingFormValidationModal[ReceivingFromInvoiceTotal][isError] == true}"
														data-toggle="tooltip"
														validation-modal = ""
														validation-modal-key = ""
														title="{{VORModel.VendorOrderReceivingFormValidationModal[ReceivingFromInvoiceTotal][ErrorMessage]}}" /> -->
														
														<!-- <number-only-input input-value="VORModel.VOR_Header.ReceivingFromInvoiceTotal" 
			                                                ng-disabled="VORModel.VOR_Header.IsReceivingFromInvoice && VORModel.VOR_Header.Status == 'Stocked'"
			                                                tab-index="{{tabIndex}}"
			                                                disable-attr = "VORModel.VOR_Header.IsReceivingFromInvoice && VORModel.VOR_Header.Status == 'Stocked'"
			                                                ng-keydown="VORModel.updateVORHeaderDetails()"/> -->
														
														<!-- ng-disabled="VORModel.VOR_Header.IsReceivingFromInvoice && VORModel.VOR_Header.Status != 'Stocked'" -->
												</div>
											</div>
										</div>
									</div>
									<!-- End: Vendor selection section -->
									<!-- START: Owner selection section -->
									<div class="col-lg-5 col-md-5 Plr12">
										<div class="col-md-6 Plr0 MB24">
											<p class="T3 MB24 F12">{!$Label.Label_Owner}</p>
											<div class="col-md-4 Plr0 MB12  ">
												<img
													src="{!URLFOR($Resource.Images, 'profile_default.jpg')}"
													class="Profile_pic Profile_pic_owner" />
												<!-- style="height: 80px; width: 100%;" -->
											</div>
											<div class="col-md-8 Plr12 MB12 ">
												<p class="T1 Lh25 F16">{!$User.FirstName}
													{!$User.LastName}</p>
												<div class="Plr12_MB24_MB12_imgDiv">
													<!-- style="float: left; background-color: #373c40; border-radius: 5px;" -->
													<img src="{!URLFOR($Resource.Images, 'star.png')}"
														class="Plr12_MB24_MB12_imgDiv_img" />
													<!-- style="height: 25px; width: 25px; padding: 5px;"  -->
												</div>
												<p class="T7 T7_owner">
													<!-- style="margin-left: 30px; padding-top: 3px;" -->
													{!$Label.Label_Gamification}
												</p>
											</div>
										</div>
										<div class="col-md-12 MB24 Plr0 ">
											<span class="T3 col-md-2 Plr0">{!$Label.Label_Status}</span> <label
												class="FC10 T3 invoiceStatus">
												<!--  style="color: green" -->
												{{VORModel.VOR_Header.Status}}
											</label>
										</div>
									</div>
									<!-- End: Owner selection section -->
								</div>
							</div>

							<div class="col-lg-12 col-md-12 T3 addnewItem "
								id="CO_notanyitemadded"
								ng-if="VORModel.VOR_Header.VendorName == null">
								<a id="CO_notanyitemadded"
									ng-click="VORModel.RelatedList_addAction($event, 'Vendor')">
									Add new vendor.<!--  You haven't added anything yet! Add something. -->
								</a>
							</div>
						</div>
					</div>
					<!-- END: General Section -->



					<!-- START: RECEIVING FOR VENDOR ORDER SECTION -->
					<div class="main_section_COU row Info_section_part_container"
						ng-show="VORModel.VOR_Header.VendorId != null && VORModel.vendorOrdersList.length != 0">
						<!-- <div id="VOR_Vendor_Order_Receiving_Block" ng-show="VORModel.VOR_Header.VendorId != null"
					class="Receiving_For_Vendor_Container"> -->
						<!-- <div class="main_section_COU row"> -->
						<div class="main_section_COU_Header row"
							id="VOR_Vendor_Order_Receiving_Block">
							<span class="actionRow T2">
								<!-- <p class="actionRow T2"> --> <span class="sectionText">{!$Label.Vendor_Receiving_For_Vendor_Order}</span> <!-- <span class="actionText">{!$Label.Label_Actions}</span> -->
								<span
								class="dropdown selectDropdown checkboxDropdown actionText" >
									<!-- <button class="btn dropdown-toggle" type="button"
										style="padding: 0; background-color: #F6F7F9; color: #939CA9; font-weight: 800;"
										data-toggle="dropdown"> -->
										<span data-toggle="dropdown" class="AddAllItemDropdown">{!$Label.Label_Actions}</span> <!-- <span class="caret"></span>  --><!-- </button> -->
									
									<ul class="dropdown-menu" id="VOR_header_dropdown_ul">
										<li><a id="VOR_header_dropdown_profile"
											ng-click="VORModel.onClickSelectAllVO($event)">{!$Label.Label_Add_All_Item}</a></li>
									</ul>
							</span> <span class="ActionIcons"> <i
									class="fa fa-question-circle" data-toggle="tooltip"
									title="Receiving For Vendor Order"></i>
							</span>
							</span>
							<!-- </p> -->
						</div>
						<div
							class="gid_container T6 VOR_Vendor_Received_Block_grid_container_Empty_Div1_class"
							id="VOR_Vendor_Received_Block_grid_container_Empty_Div"
							ng-show="VORModel.vendorOrdersList.length == 0">
							{!$Label.Label_No_Records_Found}</div>


						<!-- <div class="gid_container T6"
						id="VOR_Vendor_Received_Block_grid_container_Empty_Div"
						ng-if="VORModel.vendorOrdersList.length == 0">No records
						found</div> -->
						<div class="gid_container_Customer"
							id="VI_Receivings_block_grid_container"
							ng-if="VORModel.vendorOrdersList.length != 0">
							<!-- <div ng-if="VORModel.vendorOrdersList.length != 0"> -->
							<!-- <div class="gid_container_Customer"> -->
							<table class="table" id="ReceivingForVendorOrders_Grid">
								<col width="1%" />
								<col width="4%" />
								<col width="4%" />
								<col width="20%" />
								<col width="16%" />
								<col width="18%" />
								<col width="18%" />
								<col width="18%" />
								<col width="1%" />


								<thead>
									<tr class="tableHeader T3 C2">
										<th></th>
										<th></th>
										<th></th>
										<th class="th_cursor_style text-uppercase"
											ng-click="VORModel.ReceivingForVO_PageSortControlsAction();">
											<i class="fa fa-sort-asc"
											ng-show="VORModel.vendorOrdersPageSortAttrsJSON.Sorting[0].SortDirection == 'ASC'" />
											<i class="fa fa-sort-desc"
											ng-show="VORModel.vendorOrdersPageSortAttrsJSON.Sorting[0].SortDirection == 'DESC'" />
											<i class="fa fa-sort"
											ng-show="VORModel.vendorOrdersPageSortAttrsJSON.Sorting[0].SortDirection == ''" />
											{!$Label.Label_Order}
										</th>
										<th class="text-center text-uppercase">{!$Label.Label_Qty_Unreceived}</th>
										<th class="text-center text-uppercase">{!$Label.Label_Received}</th>
										<th class="text-center text-uppercase">{!$Label.Label_Order_Type}</th>
										<th class="text-center text-uppercase">{!$Label.Label_Expected_Date}</th>
										<th></th>
									</tr>
								</thead>

								<!-- <tr class="tableHeader T3 C2">
										<th></th>
										<th>
											<div class="form-group small">
												<span class="chk_tick"
													ng-class="{'chked' : VORModel.isAllVOSelected == true, 'disabled_chk_tick' : VORModel.isAllVOSelected == null}"
													ng-click="VORModel.onClickSelectAllVO($event);" style="margin-top: 0px;"> <i
													class="fa fa-check-square chksqure"></i>
												</span>
											</div>
										</th>
										<th style="cursor: pointer;"
											ng-click="VORModel.ReceivingForVO_PageSortControlsAction();">
											<i class="fa fa-sort-asc"
											ng-show="VORModel.vendorOrdersPageSortAttrsJSON.Sorting[0].SortDirection == 'ASC'" />
											<i class="fa fa-sort-desc"
											ng-show="VORModel.vendorOrdersPageSortAttrsJSON.Sorting[0].SortDirection == 'DESC'" />
											<i class="fa fa-sort"
											ng-show="VORModel.vendorOrdersPageSortAttrsJSON.Sorting[0].SortDirection == ''" />
											ORDER #
										</th>

										<th class="text-center">QTY UNRECEIVED</th>
										<th class="text-center">RECEIVED</th>
										<th class="text-center">ORDER TYPE</th>
										<th class="text-center">EXPECTED DATE</th>
									</tr> -->
								<tbody ng-repeat="vendorOrder in VORModel.vendorOrdersList">
									<!--  START: Vendor Orders list -->
									<tr class="clickable_row" id="rowGroup{{$index}}"
										ng-class="{'disabledCheckOut' : VORModel.VOR_Header.Status == 'Stocked' || VORModel.VOR_Header.Status == 'Invoiced' ||vendorOrder.InProgressVRId != VORModel.VOR_Header.VORId 	  }"
										rel="VOR_Vendor_Received_row{{$index}}_edit"
										ng-click="VORModel.editVendorOrderReceivedItem($event, $index)"
										ng-blur="VORModel.editVendorOrderReceivedItem($event, $index)"
										ng-class-even="'C2'">
										<td style="background: #fff"></td>
										<td></td>
										<td
											id="VOR_Vendor_Received_block_grid_container_tbody_tr_td_1_{{$index}}"
											class="vor_exapnded_tr"><label class="checkbox"
											style="padding-top: 15px; padding-bottom: 10px;"> <span
												class="chk_tick"
												ng-class="{'chked' : (vendorOrder.InProgressVRId == VORModel.VOR_Header.VORId  && (VORModel.VOR_Header.Status != 'Stocked' || VORModel.VOR_Header.Status != 'Invoiced') ) ||  (VORModel.isAllVOSelected  && vendorOrder.InProgressVRId == VORModel.VOR_Header.VORId  && (VORModel.VOR_Header.Status != 'Stocked' || VORModel.VOR_Header.Status != 'Invoiced' )), 'disabled_chk_tick' : (vendorOrder.InProgressVRId != null || vendorOrder.InProgressVRId != VORModel.VOR_Header.VORId && VORModel.VOR_Header.Status == 'Stocked' || VORModel.VOR_Header.Status == 'Invoiced' || VORModel.isAllVOSelected == null) && !VORModel.isAllVOSelected  }"
												ng-click="VORModel.onClickSelectVO($event, $index, vendorOrder.Id);"
												style="margin-top: -15px; height: 30px; width: 30px;">
													<i class="fa fa-check-square chksqure"></i>
											</span>
										</label></td>
										<td
											id="VOR_Vendor_Received_block_grid_container_tbody_tr_td_2_{{$index}}"
											class="T7">
											<div>{{vendorOrder.VOName}}</div>
											<div
												ng-if="vendorOrder.InProgressVRId != null && vendorOrder.InProgressVRId != VORModel.VOR_Header.VORId"
												style="color: red">Receiving in progress
												{{vendorOrder.InProgressVR}}</div>
 
										</td>
										<td
											id="VOR_Vendor_Received_block_grid_container_tbody_tr_td_3_{{$index}}"
											class="T7 text-center">{{vendorOrder.QtyUnreceived}}</td>
										<td
											id="VOR_Vendor_Received_block_grid_container_tbody_tr_td_4_{{$index}}"
											class="T7 text-center">{{vendorOrder.PercentRecieved |
											number : 2}}%</td>
										<td
											id="VOR_Vendor_Received_block_grid_container_tbody_tr_td_5_{{$index}}"
											class="T7 text-center">{{vendorOrder.OrderType.Name}}</td>
										<td
											id="VOR_Vendor_Received_block_grid_container_tbody_tr_td_6_{{$index}}"
											class="T7 text-center">{{vendorOrder.ExpectedDate}}</td>
										<td style="background: #fff"></td>
									</tr>
									<!--   END: Vendor Orders list-->
									<!--  START: Edit row action -->
									<tr ng-show="VORModel.vendorOrderItems_editRow[$index].isEdit"
										class="edit_panel sample-show-hide T7"
										id="vo_record_row{{$index}}_edit">
										<td style="background: #fff"></td>
										<td style="background: #fff"></td>
										<td style="background: #fff"></td>
										<td colspan="5" class="edit-service-item div-padding"
											id="VOR_Vendor_Received_block_grid_container_tbody_expandtr_td_1_{{$index}}"
											style="padding-right: 0;">
											<div id="vo_tbody_expandtr_edit_box_{{$index}}"
												class="edit_box serviceitemedit col-md-12">
												<div class="its-heading"
													id="VOR_Vendor_Received_block_grid_container_tbody_expandtr_edit_box_its-heading_{{$index}}">
													<i class="fa fa-angle-down"></i> <span>{!$Label.Label_Actions} (1
														Action Available)</span>
												</div>
												<div
													id="vo_tbody_expandtr_edit_box_its-heading_edit-body_{{$index}}"
													class="edit-body">
													<form style="margin-left: -1%;">
														<div class="radio"
															id="vo_tbody_expandtr_edit_box_its-heading_edit-body_{{$index}}_radio_1">
															<label>
																<p
																	ng-click="VORModel.vendorOrderItems_editRow[$index].radioValue = (!VORModel.vendorOrderItems_editRow[$index].radioValue)"
																	class="chk_tick edit-service-chek"
																	ng-class="{'chked' : VORModel.vendorOrderItems_editRow[$index].radioValue == 1 }"
																	style="margin-left: 2px;">
																	<i class="fa fa-check-square chksqure"></i>
																</p> <span> {!$Label.Vendor_Receiving_Receive_All} </span>
															</label>
														</div>
														<a href=""
															id="vo_tbody_expandtr_edit_box_its-heading_edit-body_{{$index}}_go_btn"
															class="btn btn-default" role="button"
															ng-click="VORModel.vendorOrderItems_GoAction($index, null)">{!$Label.Label_Apply}</a>

														<!-- <a href=""
																id="vo_tbody_expandtr_edit_box_its-heading_edit-body_{{$index}}_go_btn"
																class="btn btn-default editform_btn" role="button"
																ng-click="VORModel.vendorOrderItems_GoAction($index, null)" style="margin-left: 2px;">{!$Label.Label_Apply}</a> -->
													</form>
												</div>
											</div>
										</td>
										<td style="background: #fff"></td>
									</tr>
									<!-- END: Edit row action -->

									<!--  START: Vendor Order Groups list on edit of Vendor Order -->
									<tr ng-show="VORModel.vendorOrderItems_editRow[$index].isEdit">
										<td style="background: #fff"></td>
										<td style="background: #fff"></td>
										<td style="background: #fff"></td>
										<td colspan="5" class="group_exapnded_tr div-padding"
											style="padding-left: 0px; padding-right: 0;">
											<!-- padding-right:20px; -->
											<div ng-repeat="voGroupItem in vendorOrder.VOLIGroups"
												class="volineItem_row_clickable"
												ng-click="VORModel.editvoGroupItem($event, $parent.$index, $index)">
												<div class="row_line_item_div">
													<div class="firstchild"
														style="margin-left: 0.5%; margin-right: 0; width: 21.5%;">
														<!-- style="margin-left: 2%;margin-right: 1%;width: 23%;" -->
														{{voGroupItem.ItemDesc}}
														<div
															ng-if="voGroupItem.UnitType !='NULL' && voGroupItem.UnitType !==null"
															style="color: red">{{voGroupItem.OrderType}}</div>
													</div>
													<div class="secondchild"
														style="margin-left: 0; width: 18%; text-align: center;">
														<!--  style="margin-left: -4px; width: 18%;" -->
														<span>{{voGroupItem.UnreceivedQty}}</span>
													</div>
													<div class="thirdchild"
														style="margin-left: 0; width: 20%; text-align: center;">
														<!-- style="margin-left: 86px" -->
														<span>{{voGroupItem.PercentRecieved | number : 2}}%</span>
													</div>
													<div class="otherchild" style="width: 20%; margin-left: 0;">&nbsp;</div>
													<!--  style="width: 20%; -->
													<div class="lastchild "
														style="margin-left: 0; text-align: center; width: 19.5%;">
														<!-- style="margin-left: 15.5px;" -->
														{{voGroupItem.ExpectedDate}}
													</div>
												</div>
												<div class="edit_panel sample-show-hide T7"
													ng-show="VORModel.vendorOrderItems_editRow[$parent.$index].voliGroups_editRow[$index].isEdit">
													<div id="voglineitem_tbody_expandtr_edit_box_{{$index}}"
														class="edit_box serviceitemedit col-md-11"
														style="margin-left: 6%; height: 110px;">
														<div class="its-heading1"
															id="voglineitem_block_grid_container_tbody_expandtr_edit_box_its-heading_{{$index}}">
															<i class="fa fa-angle-down"></i> <span>{!$Label.Label_Actions} (1
																Actions Available)</span>
														</div>
														<div
															id="voglineitem_tbody_expandtr_edit_box_its-heading_edit-body_{{$index}} "
															class="edit-body1">
															<form>
																<div class="radio"
																	id="voglineitem_tbody_expandtr_edit_box_its-heading_edit-body_{{$index}}_radio_1">
																	<label style="padding-left: 1%;">
																		<p
																			ng-click="VORModel.vendorOrderItems_editRow[$parent.$index].voliGroups_editRow[$index].radioValue = (!VORModel.vendorOrderItems_editRow[$parent.$index].voliGroups_editRow[$index].radioValue)"
																			class="chk_tick edit-service-chek"
																			ng-class="{'chked' : VORModel.vendorOrderItems_editRow[$parent.$index].voliGroups_editRow[$index].radioValue == 1 }"
																			style="margin-left: 4px;">
																			<i class="fa fa-check-square chksqure"></i>
																		</p> <span class="T7"> {!$Label.Vendor_Receiving_Receive_Item} </span>
																	</label>
																</div>
															</form>
															<a href=""
																id="voglineitem_tbody_expandtr_edit_box_its-heading_edit-body_{{$index}}_go_btn"
																class="btn btn-default" role="button"
																ng-click="VORModel.vendorOrderItems_GoAction($index, $parent.$index)"
																style="margin-left: 15px; margin-top: 0px">{!$Label.Label_Apply}</a>
														</div>
													</div>
												</div>
											</div>
										</td>
										<td style="background: #fff"></td>
									</tr>
									<!--  END: Vendor Order Groups list on edit of Vendor Order -->
								</tbody>
							</table>
							<!-- </div> -->
						</div>
						<!-- Pagination container -->
						<div class="pagination_container"
							id="Receiving_For_Vendor_Orders_Pagination"
							ng-if="VORModel.totalVendorOrders != undefined">
							<list-pagination
								id-value="Receiving_For_Vendor_Orders_Pagination_"
								total-records-length="VORModel.totalVendorOrders"
								page-size="VORModel.vendorOrdersPageSortAttrsJSON.PageSize"
								current-page="VORModel.vendorOrdersPageSortAttrsJSON.CurrentPage"
								changes-count="VORModel.vendorOrdersPageSortAttrsJSON.ChangesCount"
								pagination-control-method="VORModel.ReceivingForVO_paginationControlsAction" />
						</div>



						<!-- </div> -->

					</div>
					<!-- End: RECEIVING FOR VENDOR ORDER SECTION -->
				</div>
				<!-- End: Info section -->








				<!-- start Add new vendor  -->
				 <div ng-if="VORModel.VOR_Header.VendorName != null">
				<div class="sectionHeader row" ng-show="(VORModel.VORLineItemGroupList.length != 0 ||  VORModel.outstandingVOGList.length != 0)">
					<div class="col-lg-4 col-lg-5 PL14">
						<div class="fixedHeaderText">
							<span class="headerlabel"> <i class="fa fa-angle-right"
								ng-show="!VORModel.displaySections.Received"
								ng-Click="VORModel.displaySections.Received = true"> </i> <i
								class="fa fa-angle-down" style="width: 10px;"
								ng-show="VORModel.displaySections.Received"
								ng-Click="VORModel.displaySections.Received = false"> </i> <span
								class="divider">|</span> <span class="headdingFirstText">{{VORModel.LeftSideHeadingLables.Received}}</span>
								<span class="T2">{!$Label.Label_Received}</span>
							</span>
							<!-- <span class="ActionIcons pull-right">
                        <i class="fa fa-th"></i>
                        <i class="fa fa-question-circle"></i>
                        </span> -->
							<span class="ActionIcons pull-left ">
								<div class="dropdown selectDropdown checkboxDropdown"
									ng-class="{'disabledRemoveAllItemsActionBtn' :VORModel.VOR_Header.Status == 'Stocked' || VORModel.VOR_Header.Status == 'Invoiced'}">
									<button class="btn dropdown-toggle" type="button"
										data-toggle="dropdown">
										{!$Label.Label_Actions} <span class="caret"></span>
									</button>
									<!-- <ul class="dropdown-menu">
										<li>
											 ng-show="VORModel.vendorOrderLineItemGroupList.length > 0"
											<a ng-click="VORModel.removeAllReceived()">{!$Label.Label_Remove_All_Item}</a>
										</li>
										<li><a
										ng-if="VORModel.VOR_Header.VendorId != null && VORModel.totalOutstandingItems != 0 && VORModel.VOR_Header.Status == 'In Progress'"
										ng-click="VORModel.addAllOutstanding()">Add All Item</a></li>
									</ul> -->
								</div>
							</span> <span class="T3  pull-right total" style="color: #337ab7">
								<!-- <a> --> {{VORModel.GroupTotalCost| currency}} <!-- </a> -->
							</span>

						</div>
					</div>
				</div>

				<div id="VOR_Vendor_Received_Block"
					ng-show="VORModel.displaySections.Received && (VORModel.VORLineItemGroupList.length != 0 ||  VORModel.outstandingVOGList.length != 0)"
					class="gid_container_Customer Received_section_part_container">
					<div id="VOR_Items_Block" class="main_section_COU row" ng-show="VORModel.VORLineItemGroupList.length != 0">
						<div class="main_section_COU_Header row">
							<p class="actionRow T2">
								<span class="sectionText">{!$Label.Items} <i
									ng-if="(VORModel.VendorOrderHeader.Status == 'Open' || VORModel.VendorOrderHeader.Status == 'Locked') && (VORModel.VendorOrderHeader.VendorId != null && VORModel.VendorOrderHeader.VendorId != '')"
									class="fa fa-plus cou_plus_icon "
									id="Order_Block_heading_panel_left_sub_h1_text_plus_icon"
									ng-click="VORModel.RelatedList_addAction($event, 'Vendor')"><!-- ng-click="VORModel.RelatedList_addAction($event, 'Merchandise')" -->
								</i>
								</span> <span class="actionText">{!$Label.Label_Actions}</span> <span
									class="ActionIcons"> <i class="fa fa-question-circle"
									data-toggle="tooltip" title="Received"></i>
								</span>
							</p>
						</div>


						<div class="gid_container T6"
							id="VO_Order_block_grid_container_Empty_Div"
							ng-if="VORModel.vendorOrderLineItemGroupList == 0"
							style="margin-left: 44px;">
							{!$Label.Label_No_Records_Found}</div>



						<div id="1" ng-if="VORModel.vendorOrderLineItemGroupList != 0">
							<div class="gid_container_Customer"
								id="VO_Order_block_grid_container">
								<table class="table" id="VendorOrderItem_Grid">
									<col width="1%" />
									<col width="4%" />
									<col width="29%" />
									<col width="10%" />
									<col width="11%" />
									<col width="10%" />
									<col width="13%" />
									<col width="10%" />
									<col width="11%" />
									<col width="1%" />
									<tr class="tableHeader T3 C2">
										<th></th>
										<th></th>
										<th style="cursor: pointer;" class="text-uppercase"
											ng-click="VORModel.GroupItems_PageSortControlsAction();">
											<i class="fa fa-sort-asc"
											ng-show="VORModel.groupItemsVOGPageSortAttrsJSON.Sorting[0].SortDirection == 'ASC'" />
											<i class="fa fa-sort-desc"
											ng-show="VORModel.groupItemsVOGPageSortAttrsJSON.Sorting[0].SortDirection == 'DESC'" />
											<i class="fa fa-sort"
											ng-show="VORModel.groupItemsVOGPageSortAttrsJSON.Sorting[0].SortDirection == ''" />
											{!$Label.Part_Object_Item_Description}
										</th>

										<th class="text-center text-uppercase">NEEDED FOR</th>
										<th class="text-center text-uppercase">{!$Label.Label_Needed_By}</th>
										<th class="text-center text-uppercase">{!$Label.Label_Order}</th>
										<th class="text-center text-uppercase">RECEIVED</th>
										<th class="text-center text-uppercase">{!$Label.Label_Cost}</th>
										<th class="text-center text-uppercase">{!$Label.Label_Total}</th>
										<th></th>
									</tr>
									<tbody
										ng-repeat="vorLineItemGroup in  VORModel.VORLineItemGroupList">
										<tr class="clickable_row" id="rowGroup{{$index}}"
											ng-class-even="'C2'" rel="vogroup_item_row{{$index}}_edit"
											ng-click="VORModel.editGroupItem($event, $index)"
											ng-blur="VORModel.editGroupItem($event, $index)"
											ng-class="{'disabledEditableRow' : VORModel.VOR_Header.Status == 'Stocked' || VORModel.VOR_Header.Status == 'Invoiced' }">
											<td class="td_background_style"></td>
											<td
												id="VO_Group_block_grid_container_tbody_tr_td_1_{{$index}}"
												class="group_exapnded_tr"
												style="padding-top: 10px; padding-bottom: 10px;"><img
												style="height: 26px; width: 26px;"
												src="{!URLFOR($Resource.Images, 'sparkplug.png')}" /></td>

											<td
												id="VO_Group_block_grid_container_tbody_tr_td_2_{{$index}}">
												<div>
													<a ng-mouseover="VORModel.openpartpopup($event, $index);"
														ng-mouseleave="VORModel.hidePartPopUp();"> {{ 
														vorLineItemGroup.ItemDesc}} </a>
												</div>
												<div
													ng-if="vorLineItemGroup.UnitType  !='NULL' && vorLineItemGroup.UnitType  !=null"
													style="color: red">{{ vorLineItemGroup.OrderType }}</div>

											</td>    

											<td class="text-center"
												id="VO_Group_block_grid_container_tbody_tr_td_4_{{$index}}"> 


												<div>
													<a
														ng-mouseover="VORModel.showCOPopUp($event, vorLineItemGroup.VendorOrderLineItemList.CoHeaderId);"
														ng-mouseleave="VORModel.hideCOPopUp();">
														{{vorLineItemGroup.NeededFor}} </a>
												</div>
												<div>
													<span ng-if="vorLineItemGroup.IsExcess" style="Color: red">
														<a
														ng-mouseover="VORModel.showNeededForPopUp($event, vorLineItemGroup.Id);"
														ng-mouseleave="VORModel.hideNeededForPopUp();"
														style="color: red"> With Excess </a>
													</span>
												</div>

											</td>
											<td class="text-center"
												id="VO_Group_block_grid_container_tbody_tr_td_5_{{$index}}">
												{{ vorLineItemGroup.NeededBy == null ? ' '
												:vorLineItemGroup.NeededBy }}</td>
											<td class="text-center"
												id="VO_Group_block_grid_container_tbody_tr_td_6_{{$index}}">
												{{ vorLineItemGroup.OrderValue }} {{
												vorLineItemGroup.UnitType == null ||
												vorLineItemGroup.UnitType == "NULL" ? " " :" " +
												vorLineItemGroup.UnitType }}</td>
											<td class="text-center"
												id="VO_Group_block_grid_container_tbody_tr_td_3_{{$index}}">
												<div style="width: 100%">
													<div
														ng-if="VORModel.groupItems_editRow[$index].isEdit==false">
														{{ vorLineItemGroup.ReceivedQty }} {{
														vorLineItemGroup.UnitType == null ||
														vorLineItemGroup.UnitType == "NULL" ? " " :" " +
														vorLineItemGroup.UnitType }}</div>
													<div
														ng-if="VORModel.groupItems_editRow[$index].isEdit==true && VORModel.VOR_Header.Status == 'In Progress'"
														ng-keydown="VORModel.editRowTabOutRecieved($event,$index)">
														<number-only-input
															input-value="vorLineItemGroup.ReceivedQty"  precision-length = "0" ng-keydown = "VORModel.preventDecimal($event)" />
													</div>
													<div
														ng-if="VORModel.groupItems_editRow[$index].isEdit==true && VORModel.VOR_Header.Status != 'In Progress'">
														{{ vorLineItemGroup.ReceivedQty }} {{
														vorLineItemGroup.UnitType == null ||
														vorLineItemGroup.UnitType == "NULL" ? " " :" " +
														vorLineItemGroup.UnitType }}</div>
												</div>
											</td>
											<td class="text-center"
												id="VO_Group_block_grid_container_tbody_tr_td_7_{{$index}}">

												<div
													ng-if="VORModel.groupItems_editRow[$index].isEdit==false">
													{{ vorLineItemGroup.Cost | currency }}</div>
												<div
													ng-if="VORModel.groupItems_editRow[$index].isEdit==true && VORModel.VOR_Header.Status == 'In Progress'"
													ng-keydown="VORModel.editRowTabOutLast($event,$index)">
													<number-only-input input-value="vorLineItemGroup.Cost" />
												</div>
												<div
													ng-if="VORModel.groupItems_editRow[$index].isEdit==true && VORModel.VOR_Header.Status != 'In Progress'">
													{{ vorLineItemGroup.Cost | currency }}</div>
											</td>
											<td class="text-center"
												id="VO_Group_block_grid_container_tbody_tr_td_8_{{$index}}">
												{{ vorLineItemGroup.Total | currency }}</td>
											<td class="td_background_style"></td>
										</tr>
										<tr
											ng-show="VORModel.groupItems_editRow[$index].isEdit && vorLineItemGroup.OtherVOHeaderNameList.length != 0">
											<td class="td_background_style"></td>
											<td class="td_background_style"></td>
											<td colspan="7" class="group_exapnded_tr" style="padding: 0;">
												<div class="show_Availableline">
													THIS PART IS INCLUDED THESE UNSELECTED ITEMS: <span
														ng-repeat="OtherVendorOrder in  vorLineItemGroup.OtherVOHeaderNameList">
														{{OtherVendorOrder}}</span>
												</div>
											</td>
											<td class="td_background_style"></td>
										</tr>
										<tr
											ng-show="VORModel.groupItems_editRow[$index].isEdit && VORModel.VOR_Header.Status == 'In Progress'"
											class="edit_panel sample-show-hide T7"
											id="vogroup_item_row{{$index}}_edit">
											<td style="backgroung-color: #fff"></td>
											<td style="background: #fff"></td>
											<td colspan="7" class="edit-service-item div-padding"
												id="CO_Merchandise_block_grid_container_tbody_expandtr_td_1_{{$index}}"
												style="padding: 0;">
												<div id="vogroup_tbody_expandtr_edit_box_{{$index}}"
													class="edit_box serviceitemedit col-md-12 ">
													<div class="its-heading"
														id="CO_Merchandise_block_grid_container_tbody_expandtr_edit_box_its-heading_{{$index}}">
														<!-- <img src="{!URLFOR($Resource.icon_images, 'images/edit_icon.png')}" styleClass="img_action"/>
                                                                         -->
														<i class="fa fa-angle-down"></i> <span>{!$Label.Label_Actions} (1
															Actions Available)</span>
													</div>
													<div
														id=" vogroup_tbody_expandtr_edit_box_its-heading_edit-body_{{$index}} "
														class="edit-body">
														<form>
															<div class="radio"
																id="vogroup_tbody_expandtr_edit_box_its-heading_edit-body_{{$index}}_radio_2">
																<label>

																	<p
																		ng-click="VORModel.groupItems_editRow[$index].radioValue = (!VORModel.groupItems_editRow[$index].radioValue)"
																		class="chk_tick edit-service-chek"
																		ng-class="{'chked' : VORModel.groupItems_editRow[$index].radioValue == 1 }">
																		<i class="fa fa-check-square chksqure"></i>
																	</p> <span> {!$Label.Vendor_Receiving_Remove_From_Receiving} </span>
																</label>
															</div>
															<!-- Action button -->
															<a href=""
																id="vogroup_tbody_expandtr_edit_box_its-heading_edit-body_{{$index}}_go_btn"
																class="btn btn-default" role="button"
																ng-click="VORModel.groupItemsGoAction($index)">{!$Label.Label_Apply}</a>
														</form>
													</div>
												</div>
											</td>
											<td style="backgroung-color: #fff"></td>
										</tr>
										<tr ng-show="VORModel.groupItems_editRow[$index].isEdit">
											<td style="backgroung-color: #fff"></td>
											<td style="backgroung-color: #fff"></td>
											<td colspan="7" class="group_exapnded_tr" style="padding: 0;">
												<div
													ng-repeat="vorLineItems in vorLineItemGroup.VendorOrderLineItemList "
													class="volineItem_row_clickable"
													ng-click="VORModel.editVolItem($event, $index, $parent.$index)">
													<div class=" volineItem_row_item ">
														<div class="firstchild" style="margin-left: 0.5%; width: 30%;">
															<!-- style="margin-left: 1.5%;" -->
															{{vorLineItems.VendorOrderHeaderName}}
														</div>

														<div class="secondchild" style="margin-left: 0; width: 10.8%;">
															<!-- style="margin-left: 2.0%;" -->
															<div ng-if="vorLineItems.IsExcess == true">
																{!$Label.Label_Stock} <span Style="Color: red"> {!$Label.Label_Excess}</span>
															</div>
															<div ng-if="vorLineItems.IsExcess == false">
																<a
																	ng-mouseover="VORModel.showCOPopUp($event, vorLineItems.CoHeaderId);"
																	ng-mouseleave="VORModel.hideCOPopUp();"
																	style="margin-right: 0px;">
																	{{vorLineItems.NeededFor}} </a>
															</div>
														</div>
														<div class="thirdchild_secondry"
															style="margin-left: 0; width: 11.6%; text-align: center;">
															<!-- style="margin-left: 40px;" -->
															{{vorLineItems.NeededBy}}
														</div>
														<div class="otherchild"
															style="margin-left: 0; margin-right: 0; width: 10.7%; text-align: center;">
															<!-- style="margin-left: 40px;" -->
															{{vorLineItems.Need}}
														</div>
														<div class="otherchild"
															ng-if="VORModel.groupItems_editRow[$parent.$index].voLineItems_editRow[$index].isEdit==false"
															style="margin-left: 0; width: 13.9%; text-align: center;"><!--ng-if="VORModel.groupItems_editRow[$parent.$index].voLineItems_editRow[$index].isEdit==false"  -->
															{{ vorLineItems.ReceivedQty }}</div>
														
														<div class="otherchild"
															ng-if="VORModel.groupItems_editRow[$parent.$index].voLineItems_editRow[$index].isEdit && 
                                                                                    VORModel.VOR_Header.Status == 'In Progress'" 
															ng-keydown="VORModel.editRowTabOutChild($event, $parent.$parent.$index ,$index)"
															style="margin-left: 0; width: 13.9%; text-align: center;">
															<number-only-input input-value="vorLineItems.ReceivedQty" /><!--ng-if="VORModel.groupItems_editRow[$parent.$index].voLineItems_editRow[$index].isEdit && 
                                                                                    VORModel.VOR_Header.Status == 'In Progress'"  -->
														</div>
														
														<div class="otherchild"
															ng-if="VORModel.groupItems_editRow[$parent.$index].voLineItems_editRow[$index].isEdit &&
                                                                                     VORModel.VOR_Header.Status != 'In Progress'" 
															style="margin-left: 0; width: 13.9%; text-align: center;">
															<!-- ng-if="VORModel.groupItems_editRow[$parent.$index].voLineItems_editRow[$index].isEdit &&
                                                                                     VORModel.VOR_Header.Status != 'In Progress'" -->
															{{ vorLineItems.ReceivedQty }}
														</div>
														<!-- style="margin-left:-5%" -->
													</div>
												</div>
											</td>
											<td style="backgroung-color: #fff"></td>
										</tr>
									</tbody>
								</table>
							</div>


							<!-- Pagination container -->
							<div class="pagination_container"
								id="Vendor_Order_Items_Pagination"
								ng-if="VORModel.totalGroupItems != undefined">

								<!--                        ng-show="VORModel.totalGroupItems > VORModel.groupItemsVOGPageSortAttrsJSON.PageSize" > -->
								<list-pagination id-value="Vendor_Order_Items_Pagination_"
									total-records-length="VORModel.totalGroupItems"
									page-size="VORModel.groupItemsVOGPageSortAttrsJSON.PageSize"
									current-page="VORModel.groupItemsVOGPageSortAttrsJSON.CurrentPage"
									changes-count="VORModel.groupItemsVOGPageSortAttrsJSON.ChangesCount"
									pagination-control-method="VORModel.GroupItems_paginationControlsAction" />
							</div>
						</div>
					</div>




					<!--  outstanding item block -->

					<div id="VOR_Outstanding_Items_Block"
						ng-show="VORModel.VOR_Header.VendorId != null && VORModel.totalOutstandingItems != 0 && VORModel.VOR_Header.Status == 'In Progress' && VORModel.outstandingVOGList.length != 0">
						<div class="main_section_COU row">
							<div class="main_section_COU_Header row"
								style="margin-bottom: 20px;">
								<p class="actionRow T2">
									<span class="sectionText"
										ng-if="VORModel.SelectedVendorOrdersList.length == 1">
										{!$Label.Vendor_Receiving_Outstanding_Items_for} {{VORModel.SelectedVendorOrdersList[0]}}
									</span> <span class="sectionText"
										ng-if="VORModel.SelectedVendorOrdersList.length > 1">
										{!$Label.Vendor_Receiving_Outstanding_Items_for} <span
										ng-repeat="selectedVO in VORModel.SelectedVendorOrdersList">
											&nbsp;{{selectedVO}}, </span>
									</span> <span class="actionText">{!$Label.Label_Actions}</span>
									<!-- <span class="dropdown selectDropdown checkboxDropdown"  >
									<button class="btn dropdown-toggle actionBtn" type="button"
										data-toggle="dropdown" >{!$Label.Label_Actions} 
									</button>
									<ul class="dropdown-menu" id="VOR_header_dropdown_ul" style="margin-left: 8%;margin-top: 0px;">
										<li><a id="VOR_header_dropdown_profile"
											ng-click="VORModel.addAllOutstanding()" >Add All Item</a>
										</li>
									</ul>		
								</span>  -->
									<span class="ActionIcons"> <i
										class="fa fa-question-circle" data-toggle="tooltip"
										title="Outstanding Items For VO"></i>
									</span>
								</p>
							</div>

							<!-- START: Grid -->
							<div id="1">
								<div class="gid_container_Customer">
									<table class="table" id="OutstandingGroups_Grid">
										<col width="1%" />
										<col width="4%" />
										<col width="22%" />
										<col width="22%" />
										<col width="18%" />
										<col width="16%" />
										<col width="16%" />
										<col width="1%" />

										<tr class="tableHeader T3 C2">
											<th></th>
											<th></th>
											<th style="cursor: pointer;"
												ng-click="VORModel.OutstandingItems_PageSortControlsAction();">
												<i class="fa fa-sort-asc"
												ng-show="VORModel.outstandingVOGPageSortAttrsJSON.Sorting[0].SortDirection == 'ASC'" />
												<i class="fa fa-sort-desc"
												ng-show="VORModel.outstandingVOGPageSortAttrsJSON.Sorting[0].SortDirection == 'DESC'" />
												<i class="fa fa-sort"
												ng-show="VORModel.outstandingVOGPageSortAttrsJSON.Sorting[0].SortDirection == ''" />
												ITEM/DESC
											</th>
											<th class="text-center">NEEDED FOR</th>
											<th class="text-center">NEEDED BY</th>
											<th class="text-center">ORDERED</th>
											<th class="text-center">ORDER</th>
											<th></th>
										</tr>
										<tbody
											ng-repeat="outstandingGroup in VORModel.outstandingVOGList">
											<!-- START: Vendor Orders list -->
											<tr class="clickable_row" id="rowGroup{{$index}}"
												rel="VOR_Outstanding_row{{$index}}_edit"
												ng-click="VORModel.editOutstandingItem($event, $index)"
												ng-blur="VORModel.editOutstandingItem($event, $index)"
												ng-class="{'disabledEditableRow' : VORModel.VOR_Header.Status == 'Stocked' || VORModel.VOR_Header.Status == 'Invoiced' }"
												ng-class-even="'C2'">
												<td
													id="VOR_Outstanding_block_grid_container_tbody_tr_td_1_{{$index}}"
													class="vor_exapnded_tr td_background_style"></td>
												<td style="padding-top: 10px; padding-bottom: 10px;"><img
													style="height: 26px; width: 26px;"
													src="{!URLFOR($Resource.Images, 'sparkplug.png')}" /></td>
												<td
													id="VOR_Outstanding_block_grid_container_tbody_tr_td_2_{{$index}}"
													class="T7">
													<div>{{outstandingGroup.ItemDesc}}</div>
													<div
														ng-if="outstandingGroup.InProgressVRId != null && outstandingGroup.InProgressVRId != VORModel.VOR_Header.VORId"
														style="color: red">Receiving in progress
														{{outstandingGroup.InProgressVR}}</div>
												</td>
												<td
													id="VOR_Outstanding_block_grid_container_tbody_tr_td_3_{{$index}}"
													class="T7 text-center">{{outstandingGroup.NeededFor}}</td>
												<td
													id="VOR_Outstanding_block_grid_container_tbody_tr_td_4_{{$index}}"
													class="T7 text-center">{{outstandingGroup.NeededBy}}</td>
												<td
													id="VOR_Outstanding_block_grid_container_tbody_tr_td_5_{{$index}}"
													class="T7 text-center">
													{{outstandingGroup.OrderValue}}</td>
												<td
													id="VOR_Outstanding_block_grid_container_tbody_tr_td_6_{{$index}}"
													class="T7 text-center">
													{{outstandingGroup.VOHeaderName}}</td>
												<td class="td_background_style"></td>
											</tr>
											<!-- END: Vendor Orders list -->

											<!-- START: Edit row action -->
											<tr
												ng-show="VORModel.outstandingItems_editRow[$index].isEdit"
												class="edit_panel sample-show-hide T7"
												id="vo_record_row{{$index}}_edit">

												<td style="backgroung-color: #fff"></td>
												<td style="background: #fff"></td>
												<td class="edit-service-item div-padding" colspan="5"
													id="VOR_Outstanding_block_grid_container_tbody_expandtr_td_1_{{$index}}">
													<div id="vo_tbody_expandtr_edit_box_{{$index}}"
														class="edit_box serviceitemedit col-md-12">
														<div class="its-heading"
															id="VOR_Outstanding_block_grid_container_tbody_expandtr_edit_box_its-heading_{{$index}}">
															<!-- <img src="{!URLFOR($Resource.icon_images, 'images/edit_icon.png')}" styleClass="img_action"/> -->
															<i class="fa fa-angle-down"></i> <span>{!$Label.Label_Actions} (1
																Action Available)</span>
														</div>
														<div
															id="vo_tbody_expandtr_edit_box_its-heading_edit-body_{{$index}} "
															class="edit-body">
															<form>
																<div class="radio"
																	id="vo_tbody_expandtr_edit_box_its-heading_edit-body_{{$index}}_radio_1">
																	<label>
																		<p
																			ng-click="VORModel.outstandingItems_editRow[$index].radioValue = (!VORModel.outstandingItems_editRow[$index].radioValue)"
																			class="chk_tick edit-service-chek"
																			ng-class="{'chked' : VORModel.outstandingItems_editRow[$index].radioValue == 1 }">
																			<i class="fa fa-check-square chksqure"></i>
																		</p> <span> <!-- <i class="fa fa-times"></i> -->
																			{!$Label.Vendor_Receiving_Receive_Item}
																	</span>
																	</label>
																</div>

																<!-- Action button-->
																<a href=""
																	id="vo_tbody_expandtr_edit_box_its-heading_edit-body_{{$index}}_go_btn"
																	class="btn btn-default" role="button"
																	ng-click="VORModel.outstandingItems_GoAction($index, null)">{!$Label.Label_Apply}</a>
															</form>
														</div>
													</div>
												</td>
												<td class="td_background_style"></td>
											</tr>
											<!-- END: Edit row action -->

											<!-- START: Vendor Order Groups list on edit of Vendor Order -->
											<tr
												ng-show="VORModel.outstandingItems_editRow[$index].isEdit">
												<td style="backgroung-color: #fff"></td>
												<td style="background: #fff"></td>
												<td colspan="5" class="group_exapnded_tr"
													style="padding-left: 0;">
													<div class="volineItem_row_clickable ng-scope"
														ng-repeat="outstandingGroupItem in outstandingGroup.VendorOrderLineItemList ">
														<div class="row_line_item_div">
															<div class="Outstandingfirstchild"
																style="margin-left: 0.5%; width: 23%;">

																<div
																	ng-if="outstandingGroupItem.IsRequiredForCustomer !=true && outstandingGroupItem.IsExcess != true ">{{outstandingGroupItem.ItemDesc}}</div>
																<div ng-if="outstandingGroupItem.IsExcess == true">{{outstandingGroupItem.Location}}</div>
																<div
																	ng-if="outstandingGroupItem.IsRequiredForCustomer ==true">{{outstandingGroupItem.Customer}}</div>
																<div
																	ng-if="vorLineItemGroup.UnitType  !='NULL' && vorLineItemGroup.UnitType  !=null"
																	style="color: red">{{ vorLineItemGroup.OrderType
																	}}</div>
															</div>
															<div class="Outstandingsecondchild"
																style="margin-left: 0; width: 21.7%; text-align: center;">
																<span>{{outstandingGroupItem.NeededFor}}</span>
															</div>
															<div class="Outstandingthirdchild"
																style="margin-left: 0; width: 22%; text-align: center;">
																<span>{{outstandingGroupItem.NeededBy}}</span>
															</div>
															<div class="Outstandingfourchild"
																style="margin-left: 0; width: 15%; text-align: center;">
																{{outstandingGroupItem.Need}}</div>
															<div class="Outstandinglastchild "
																style="margin-left: 0; width: 17.8%; text-align: center;">
																{{outstandingGroupItem.VendorOrderHeaderName}}</div>
														</div>
													</div>
												</td>
												<td class="td_background_style"></td>
											</tr>
											<!-- END: Vendor Order Groups list on edit of Vendor Order -->
										</tbody>
									</table>
								</div>

								<!-- Pagination container -->
								<div class="row pagination_container"
									id="Receiving_For_Outstanding_Items_Pagination"
									ng-if="VORModel.totalOutstandingItems != undefined"
									style="margin-left: 10px; margin-right: 0;">
									<list-pagination
										id-value="Receiving_For_Outstanding_Items_Pagination_"
										total-records-length="VORModel.totalOutstandingItems"
										page-size="VORModel.outstandingVOGPageSortAttrsJSON.PageSize"
										current-page="VORModel.outstandingVOGPageSortAttrsJSON.CurrentPage"
										changes-count="VORModel.outstandingVOGPageSortAttrsJSON.ChangesCount"
										pagination-control-method="VORModel.OutstandingItems_paginationControlsAction" />
								</div>
							</div>
						</div>
					</div>
				</div>


				<!-- Start: section header Finalize -->
				<div class="sectionHeader row"
					ng-show="VORModel.VOR_Header.VendorId != null &&  VORModel.VORLineItemGroupList.length != 0  && VORModel.VOR_Header.Status == 'In Progress'
							&& (VORModel.VOR_Header.Status != 'Stocked' && VORModel.VOR_Header.PackagingSlipNumber != undefined && VORModel.VOR_Header.PackagingSlipNumber != '' && VORModel.VOR_Header.PackagingSlipNumber != null)">
					<div class="col-lg-4 col-lg-5 PL14">
						<div class="fixedHeaderText">
							<span class="headerlabel"> <i class="fa fa-angle-right"
								ng-show="!VORModel.displaySections.Finalize"
								ng-Click="VORModel.displaySections.Finalize = true"> </i>
							<!-- style="width: 10px; padding: 0 3px;" --> <i
								class="fa fa-angle-down"
								ng-show="VORModel.displaySections.Finalize"
								ng-Click="VORModel.displaySections.Finalize = false"> </i>
							<!-- style="width: 10px;" --> <span class="divider">|</span> <span
								class="headdingFirstText">{{VORModel.LeftSideHeadingLables.Finalize}}</span>
								<span class="T2">{!$Label.Finalize}</span>

							</span>
							<!-- <span class="ActionIcons pull-right">
                        <i class="fa fa-th"></i>
                        <i class="fa fa-question-circle"></i>
                        </span>  -->
							<span class="ActionIcons pull-left ">
								<div class="dropdown selectDropdown checkboxDropdown">
									<button class="btn dropdown-toggle" type="button"
										data-toggle="dropdown">
										{!$Label.Label_Actions} <span class="caret"></span>
									</button>
								</div>
							</span>
						</div>
					</div>
				</div>
				<!-- End: section header Finalize -->

				<!-- Start:  Finalize section -->
				<div id="VOR_Finalize_Block"
					ng-show="VORModel.VOR_Header.VendorId != null &&  VORModel.VORLineItemGroupList.length != 0  && VORModel.VOR_Header.Status == 'In Progress'
							&& (VORModel.VOR_Header.Status != 'Stocked' && VORModel.VOR_Header.PackagingSlipNumber != undefined && VORModel.VOR_Header.PackagingSlipNumber != '' && VORModel.VOR_Header.PackagingSlipNumber != null)">
					<div class="main_section_COU row"
						ng-show="VORModel.displaySections.Finalize">
						<div class="main_section_COU_Header row">
							<p class="actionRow T2">
								<span class="sectionText">{!$Label.Finalize}</span> <span
									class="actionText">{!$Label.Label_Actions}</span> <span class="ActionIcons">
									<!-- <i class="fa fa-th"></i> --> <i
									class="fa fa-question-circle" data-toggle="tooltip"
									title="Finalize"></i>
								</span>
							</p>
						</div>
						<div class="gid_container_Customer">
							<div id="VO_Order_block_grid_container"
								class="col-lg-3 col-md-3 col-lg-offset-9 col-md-offset-9">
								<button class="btn C11 T4 addmoreinfoBtn"
									ng-class="{'active_btn' : VORModel.VOR_Header.Status != 'Stocked'}"
									ng-disabled='(VORModel.VOR_Header.Status == "Stocked" || VORModel.VOR_Header.PackagingSlipNumber == undefined || VORModel.VOR_Header.PackagingSlipNumber == "" || VORModel.VOR_Header.PackagingSlipNumber == null)'
									ng-click="VORModel.finalizeOrder()"
									style="margin: auto; width: 80%;">
									COMMIT RECEIVING <i class="fa fa-angle-right"></i>
								</button>
							</div>
						</div>
					</div>
				</div>
				<!-- End:  Finalize section -->

				<!-- Start: section header Invoice history -->
				<div class="sectionHeader row"
					ng-show="VORModel.VOR_Header.VendorId != null && (VORModel.VOR_Header.Status == 'Stocked' || VORModel.VOR_Header.Status == 'Invoiced') && VORModel.VIHistoryList.length != 0">
					<div class="col-lg-4 col-lg-5 PL14">
						<div class="fixedHeaderText">
							<span class="headerlabel"> <i class="fa fa-angle-right"
								ng-show="!VORModel.displaySections.InvoiceHistory"
								ng-Click="VORModel.displaySections.InvoiceHistory = true"> <!-- style="width: 10px; padding: 0 3px;" --></i>
								<i class="fa fa-angle-down"
								ng-show="VORModel.displaySections.InvoiceHistory"
								ng-Click="VORModel.displaySections.InvoiceHistory = false">
									<!-- style="width: 10px;" -->
							</i> <span class="divider">|</span> <span class="headdingFirstText">{{VORModel.LeftSideHeadingLables.Invoice_History}}</span>
								<span class="T2">{!$Label.Label_Invoice_History}</span>


							</span>
							<!-- <span class="ActionIcons pull-right">
                        <i class="fa fa-th"></i>
                        <i class="fa fa-question-circle"></i>
                        </span>  -->
							<span class="ActionIcons pull-left ">
								<div class="dropdown selectDropdown checkboxDropdown"
									ng-class="{'disabledRemoveAllItemsActionBtn' :VORModel.VOR_Header.Status == 'Stocked' || VORModel.VOR_Header.Status == 'Invoiced'}">
									<button class="btn dropdown-toggle" type="button" 
										data-toggle="dropdown">
										{!$Label.Label_Actions} <span class="caret"></span>
									</button>
									<ul class="dropdown-menu" id="VOR_header_dropdown_ul">
										<li><a id="VOR_header_dropdown_profile"
											ng-click="VORModel.removeAllReceived()">{!$Label.Label_Remove_All_Item}</a></li>
									</ul>
								</div>
							</span>
						</div>
					</div>
				</div>
				<!-- End: section header Invoice history -->

				<!-- Start: Invoice history section -->
				<div id="VOR_Vendor_Invoicing_Block"
					ng-show="VORModel.VOR_Header.VendorId != null && (VORModel.VOR_Header.Status == 'Stocked' || VORModel.VOR_Header.Status == 'Invoiced') && VORModel.VIHistoryList.length != 0">
					<div class="main_section_COU row"
						ng-show="VORModel.displaySections.InvoiceHistory">
						<div class="main_section_COU_Header row">
							<p class="actionRow T2">
								<span class="sectionText">{!$Label.Items} <i
									class="fa fa-plus cou_plus_icon"
									ng-click="VORModel.RelatedList_addAction($event, 'Vendor')"
									id="Order_Block_heading_panel_left_sub_h1_text_plus_icon"></i>
								</span> <span class="actionText">{!$Label.Label_Actions}</span> <span
									class="ActionIcons"> <i class="fa fa-question-circle"
									data-toggle="tooltip" title="Invoice history "></i>
								</span>
							</p>
						</div>

						<div class="gid_container_Customer">
							<table class="table" id="ReceivingForVendorOrders_Grid">
								<col width="1%" />
								<col width="2%" />
								<col width="5%" />
								<col width="20%" />
								<col width="20%" />
								<col width="2%" />
								<col width="13%" />
								<col width="15%" />
								<col width="11%" />
								<col width="10%" />
								<col width="1%" />


								<!-- 	<col width="5%" />
							<col width="23%" />
							<col width="15%" />
							<col width="15%" />
							<col width="15%" />
							<col width="12%" />
							<col width="15%" /> -->

								<thead>
									<tr class="tableHeader T3 C2">
										<th></th>
										<th></th>
										<th></th>
										<th class="th_cursor_style"
											ng-click="VORModel.ReceivingForVO_PageSortControlsAction();">
											<i class="fa fa-sort-asc"
											ng-show="VORModel.vendorOrdersPageSortAttrsJSON.Sorting[0].SortDirection == 'ASC'" />
											<i class="fa fa-sort-desc"
											ng-show="VORModel.vendorOrdersPageSortAttrsJSON.Sorting[0].SortDirection == 'DESC'" />
											<i class="fa fa-sort"
											ng-show="VORModel.vendorOrdersPageSortAttrsJSON.Sorting[0].SortDirection == ''" />
											INVOICE
										</th>
										<th class="text-center">INVOICE DATE</th>
										<th></th>
										<th>INVOICED BY</th>
										<th class="text-center">LINE ITEMS</th>
										<th class="text-center">TOTAL COST</th>
										<th>STATUS</th>
										<th></th>
									</tr>
								</thead>


								<!-- <tr class="tableHeader T3 C2">

								<th style="cursor: pointer;"
									ng-click="VORModel.ReceivingForVO_PageSortControlsAction();">
									<i class="fa fa-sort-asc"
									ng-show="VORModel.vendorOrdersPageSortAttrsJSON.Sorting[0].SortDirection == 'ASC'" />
									<i class="fa fa-sort-desc"
									ng-show="VORModel.vendorOrdersPageSortAttrsJSON.Sorting[0].SortDirection == 'DESC'" />
									<i class="fa fa-sort"
									ng-show="VORModel.vendorOrdersPageSortAttrsJSON.Sorting[0].SortDirection == ''" />

								</th>
								<th class="text-center">INVOICE #</th>
								<th class="text-center">INVOICE DATE</th>
								<th class="text-center">INVOICED BY</th>
								<th class="text-center">LINE ITEM</th>
								<th class="text-center">TOTAL COST</th>
								<th class="text-center">STATUS</th>
							</tr>
 -->
								<tbody ng-repeat="VIHistory in VORModel.VIHistoryList">
									<tr class="T7" id="rowGroup{{$index}}"
										rel="VOR_Outstanding_row{{$index}}_edit"
										ng-class-even="'C2'">
										<!-- ng-click="VORModel.editOutstandingItem($event, $index)"
										ng-blur="VORModel.editOutstandingItem($event, $index)"
										ng-class="{'disabledEditableRow' : VORModel.VOR_Header.Status == 'Stocked' || VORModel.VOR_Header.Status == 'Invoiced' }" -->
										<td style="background: #fff"></td>
										<td class="HG50"></td>
										<td
											id="VOR_Group_block_grid_container_tbody_tr_td_1_{{$index}}"
											class="VO_Group_block_grid_container_tbody_tr_td_1_index_class"
											style="padding-top: 12px; padding-bottom: 12px;"><img
											src="{!URLFOR($Resource.Images, 'sparkplug.png')}" /></td>
										<td>{{VIHistory.InvoiceNumber}}</td>
										<td class="text-center">{{VIHistory.InvoiceDate}}</td>
										<td></td>
										<td>{{VIHistory.InvoicedByName}}</td>
										<td class="text-center">{{VIHistory.TotalLineItems}}</td>
										<td class="text-center">{{VIHistory.TotalCost |
											currency}}</td>
										<td>{{VIHistory.Status}}</td>
										<td style="background: #fff"></td>
									</tr>
								</tbody>

								<!-- <tbody ng-repeat="VIHistory in VORModel.VIHistoryList">
								<tr class="clickable_row" id="rowGroup{{$index}}"
									rel="VOR_Outstanding_row{{$index}}_edit"
									ng-click="VORModel.editOutstandingItem($event, $index)"
									ng-blur="VORModel.editOutstandingItem($event, $index)"
									ng-class-even="'C2'">
									<td
										id="VOR_Outstanding_block_grid_container_tbody_tr_td_1_{{$index}}"
										class="vor_exapnded_tr"></td>
									<td class="text-center"
										id="VOR_Outstanding_block_grid_container_tbody_tr_td_2_{{$index}}">
										<div>{{VIHistory.InvoiceNumber}}</div>

									</td>
									<td class="text-center"
										id="VOR_Outstanding_block_grid_container_tbody_tr_td_3_{{$index}}">
										{{VIHistory.InvoiceDate}}</td>
									<td class="text-center"
										id="VOR_Outstanding_block_grid_container_tbody_tr_td_4_{{$index}}">
										{{VIHistory.InvoicedByName}}</td>
									<td class="text-center"
										id="VOR_Outstanding_block_grid_container_tbody_tr_td_5_{{$index}}">
										{{VIHistory.TotalLineItems}}</td>
									<td class="text-center"
										id="VOR_Outstanding_block_grid_container_tbody_tr_td_6_{{$index}}">
										${{VIHistory.TotalCost}}</td>
									<td class="text-center"
										id="VOR_Outstanding_block_grid_container_tbody_tr_td_6_{{$index}}">
										{{VIHistory.Status}}</td>
								</tr>
							</tbody> -->
							</table>
						</div>
					</div>
				</div>
				</div>
				<!-- end Add new vendor  -->
				<!-- End: Invoice history section -->


				<div style="height: 520px; background: #E6EBEC; margin: 0 -15px;" />





				<!-- <div style="height: 200px" id="dummydivfinalise"></div> -->
			</div>
			<!-- End: contentWrapper -->
		</div>
	</div>


	<!-- END: Center Panel -->


	<!-- START: Page Content -->

	<!-- START: Vendor Order selection confirmation block -->
	<div class="ConfirmBox-overlayNew" id="VODeselectConfirmBox">
		<div>
			<div class="modal-content" style="top: 200px;left: 450px;width: 400px;position: fixed;">
				<div class="modal-header">
					<button type="button" class="close" aria-label="Close"
						ng-click="VORModel.VODeselectConfirmBox_Response(false)">
						<span aria-hidden="true">&times;</span>
					</button>
					<h4 class="modal-title">{!$Label.Vendor_Receiving_Confirmation_Deselection}</h4>
				</div>
				<div class="modal-body">
					<p>Continuing will remove all selected items from receiving for
						Vendor Order.</p>
					<p>Process is not reversible.</p>
					<br /> Are you sure, you want to continue?
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-primary"
						ng-click="VORModel.VODeselectConfirmBox_Response(true)">Yes</button>
					<button type="button" class="btn btn-default"
						ng-click="VORModel.VODeselectConfirmBox_Response(false)">No</button>
				</div>
			</div>

		</div>
	</div>
	<!-- END: Vendor Order selection confirmation block -->

	<!-- START: Vendor Order Stock excess confirmation   block -->
	<div class="ConfirmBox-overlayNew" id="StockexcessConfirmBox">
		<div>
			<div class="modal-content" style="top: 200px;left: 450px;width: 400px;position: fixed;">
				<div class="modal-header">
					<button type="button" class="close" aria-label="Close"
						ng-click="VORModel.StockexcessConfirmBox_Response(false)">
						<span aria-hidden="true">&times;</span>
					</button>
					<h4 class="modal-title">{!$Label.Vendor_Receiving_Confirmation_Stock_Excess}</h4>
				</div>
				<div class="modal-body">
					 <p>Part is not listed as having been ordered from this vendor. </p>
                       <p>Continuing will receive this part without using a vendor order</p>
                       <br /> Are you sure, you want to continue?
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-primary"
						ng-click="VORModel.StockexcessConfirmBox_Response(true)">Yes</button>
					<button type="button" class="btn btn-default"
						ng-click="VORModel.StockexcessConfirmBox_Response(false)">No</button>
				</div>
			</div>
		</div>
	</div>


</body>

<style>
.halfWidth {
	width: 31.5%;
}

.sections-link .sub-heading {
	border-left: none;
}
</style>
	</html>
</apex:page>