<apex:component controller="ViewCustomerCtrl">
	<style>
	    .modal-dialog {
	        width: 1100px;
	        -moz-box-shadow: 10px 10px 5px #6F6868;
	        -webkit-box-shadow: 10px 10px 5px #6F6868;
	        box-shadow: 10px 10px 5px #6F6868;
	    }
	    .modal-backdrop.in {
	        height: 2000px !important;
	    }
	    .custom_modal {
	        width: 700px;
	    }
	    .lable_fields.name_class {
	        padding-top: 3%;
	    }
	    .popupright .tabconainer form .form_fields {
	        width: 78%;
	    }
	    .popupright .tabconainer form .lable_fields {
	        width: 20%;
	    }
	    #ContactPopup .popup_container {
	        left: 22%;
	        width: 700px;
	    }
	    #ContactPopup .bookmarklink a .fa {
	        margin-top: 4px;
	    }
	    #ContactPopup .smschkbox {
	        margin-top: 3px;
	        margin-bottom: 0;
	    }
	    .phoneBookmark {
	        right: 20px !important;
	    }
	    .popupright .tabconainer form .form_fields a.bookmarklink {
	        position: absolute;
	        right: 28px;
	        top: 4px;
	        font-size: 19px;
	        color: #f1f1f1;
	    }
	    .popupright .tabconainer form .controls1 {
	        position: relative;
	        right: -91%;
	        top: -31px;
	    }
	    .popupright .tabconainer form .controls .fa-question-circle {
	        color: orange;
	    }
	    .popupright .tabconainer form .controls .fa-times {
	        color: #9E9E9E;
	    }
	    
	    .disablePhoneSmsChkBx	{
	    	pointer-events: none;
	    }
	    .reqForContact {
		    width: 30%;
		    float: right;
		}
		.yes{
			border-color:blue;
		}
		.no{
			border-color:red;
		}
	</style>
	
	<script>
		$(document).ready(function () {
			setTimeout(function () {
				$('[data-toggle="tooltip"]').tooltip({
					placement : 'bottom'
				});
			}, 1000);
		});
		
		var addNewContact = angular.module('addNewContact', []);
		
		addNewContact.controller('newContactCtrl', function ($scope, CustomerCustomerService) {
			$scope.CustomerContact = {};
			$scope.CustomerContact.ContactInfo = {};
			$scope.CustomerContact.ContactInfo.PreferredEmail = false;
			$scope.CustomerContact.ContactInfo.PreferredPhone = false;
			$scope.CustomerContact.ContactInfo.PreferredSMS = false;
			$scope.CustomerContact.ContactInfo.IsSMS = false;
			$scope.CustomerContact.ContactInfo.ParentCustomer;
		
			$scope.$on('EditContactEvent', function (event, args) {
				$scope.CustomerContact.clearAllData();
		
				$scope.CustomerContact.ContactInfo.ParentCustomer = args.parentCustomerId;
				$scope.CustomerContact.getCustomerContact(args.contactId);
			});
		
			$scope.$on('AddContactEvent', function (event, args) {
				$scope.CustomerContact.clearAllData();
		
				$scope.CustomerContact.ContactInfo.ParentCustomer = args.parentCustomerId;
				angular.element('#ContactPopup').modal({
					backdrop : 'static',
					keyboard : false
				});
			});
		
			$scope.CustomerContact.markFavourite = function (key) {
				if (key == 'PreferredPhone') {
					if ($scope.CustomerContact.ContactInfo.PreferredPhone == true) {
						$scope.CustomerContact.ContactInfo.PreferredPhone = false;
					} else {
						$scope.CustomerContact.ContactInfo.PreferredPhone = true;
					}
				} else if (key == 'PreferredEmail') {
					if ($scope.CustomerContact.ContactInfo.PreferredEmail == true) {
						$scope.CustomerContact.ContactInfo.PreferredEmail = false;
					} else {
						$scope.CustomerContact.ContactInfo.PreferredEmail = true;
					}
				} else if (key == 'PreferredSMS') {
					if ($scope.CustomerContact.ContactInfo.PreferredSMS == true) {
						$scope.CustomerContact.ContactInfo.PreferredSMS = false;
					} else {
						$scope.CustomerContact.ContactInfo.IsSMS = true;
						$scope.CustomerContact.ContactInfo.PreferredSMS = true;
					}
				} else if (key == 'IsSMS') {
					if ($scope.CustomerContact.ContactInfo.IsSMS == true) {
						$scope.CustomerContact.ContactInfo.IsSMS = false;
					} else {
						$scope.CustomerContact.ContactInfo.IsSMS = true;
					}
				}
			}
		
			// Method to set default values for validation model
			$scope.CustomerContact.setDefaultValidationModel = function () {
				$scope.CustomerContact.CustomerContactFormValidationModal = {
					FirstName : {
						isError : false,
						ErrorMessage : '',
						Type : 'Required,Maxlength',
						Maxlength : 80
					},
					LastName : {
						isError : false,
						ErrorMessage : '',
						Type : 'Required,Maxlength',
						Maxlength : 80
					},
					Email : {
						isError : false,
						ErrorMessage : '',
						Type : 'Email'
					},
					Phone : {
						isError : false,
						ErrorMessage : '',
						Type : 'phone,Maxlength,Minlength',
						Minlength : 10,
						Maxlength : 10
					}
				};
			} 
		 
			$scope.CustomerContact.validateForm = function (modelKey) {
				var validationObj = $scope.CustomerContact.CustomerContactFormValidationModal[modelKey];
				var isError = false;
				var ErrorMessage = '';
				var phoneRegEx = /^([0-9\(\)\/\+ \-]*)$/;
				var emailRegEx = /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/;
		
				var validateType = validationObj.Type;
				if (validateType.indexOf('Minlength') > -1) {
					debug('Minlength');
					if ($scope.CustomerContact.ContactInfo[modelKey] != undefined && $scope.CustomerContact.ContactInfo[modelKey] != '' && $scope.CustomerContact.ContactInfo[modelKey].length < validationObj.Minlength) {
						isError = true;
						ErrorMessage = 'Min length should be ' + validationObj.Minlength;
					}
				}
		
				if (validateType.indexOf('Maxlength') > -1) {
					debug('Maxlength');
					if ($scope.CustomerContact.ContactInfo[modelKey] != undefined && $scope.CustomerContact.ContactInfo[modelKey] != '' && $scope.CustomerContact.ContactInfo[modelKey].length > validationObj.Maxlength) {
						isError = true;
						ErrorMessage = 'Max length should be ' + validationObj.Maxlength;
					}
				}
		
				if (validateType.indexOf('phone') > -1) {
					if ($scope.CustomerContact.ContactInfo[modelKey] != undefined && $scope.CustomerContact.ContactInfo[modelKey] != '' && !phoneRegEx.test($scope.CustomerContact.ContactInfo[modelKey])) {
						isError = true;
						ErrorMessage = 'Invalid Phone Number';
					}
				}
		
				if (validateType.indexOf('Email') > -1) {
					if ($scope.CustomerContact.ContactInfo[modelKey] != undefined && $scope.CustomerContact.ContactInfo[modelKey] != '' && !emailRegEx.test($scope.CustomerContact.ContactInfo[modelKey])) {
						isError = true;
						ErrorMessage = 'Invalid Email Id';
					}
				}
		
				if (validateType.indexOf('Required') > -1) {
					if ($scope.CustomerContact.ContactInfo[modelKey] == undefined || $scope.CustomerContact.ContactInfo[modelKey] == '') {
						isError = true;
						ErrorMessage = 'Field is Required';
					}
				}
				$scope.CustomerContact.CustomerContactFormValidationModal[modelKey]['isError'] = isError;
				$scope.CustomerContact.CustomerContactFormValidationModal[modelKey]['ErrorMessage'] = ErrorMessage;
			}
		
			// Clear and Set Default Values and validations for popup
			$scope.CustomerContact.clearAllData = function () {
				$scope.CustomerContact.ContactInfo = {};
				$scope.CustomerContact.ContactInfo.PreferredEmail = false;
				$scope.CustomerContact.ContactInfo.PreferredPhone = false;
				$scope.CustomerContact.ContactInfo.PreferredSMS = false;
				$scope.CustomerContact.ContactInfo.IsSMS = false;
				
				$scope.CustomerContact.ContactInfo.Relation = 'Employee';
				$scope.CustomerContact.setDefaultValidationModel();
			}
		
			// Method to perform SAVE action for popup
			$scope.CustomerContact.CancelContactForm = function () {
				angular.element('#ContactPopup').modal('hide');
			}
		
			// Method to perform SAVE operation in database
			$scope.CustomerContact.saveCustomerContactRecord = function () {  
				$scope.CustomerContact.validateForm('FirstName');
				$scope.CustomerContact.validateForm('LastName'); 
				
				for (var key in $scope.CustomerContact.CustomerContactFormValidationModal) {
	                if ($scope.CustomerContact.CustomerContactFormValidationModal.hasOwnProperty(key)) {
	                    var validationObj = $scope.CustomerContact.CustomerContactFormValidationModal[key];
	                    if(validationObj.isError == true) {
	                        debug('error Present in ' + key);
	                        return;
	                    }
	                }
	            }
				
				var customerContactArray = [];
				customerContactArray.push($scope.CustomerContact.ContactInfo);
				CustomerCustomerService.saveCustomerContact(angular.toJson(customerContactArray)).then(function (relatedCustomerContactList) {
					// Customer page callback
					if($scope.$parent.ViewCustomer != undefined && $scope.$parent.ViewCustomer.UpdateCustomerContactsLists != undefined){
						angular.element('#ContactPopup').modal('hide');
						
						if($scope.$parent.ViewCustomer.CustomerContacts_recordSaveCallback != undefined){
							$scope.$parent.ViewCustomer.CustomerContacts_recordSaveCallback(relatedCustomerContactList);
						} else if($scope.$parent.ViewCustomer.UpdateCustomerContactsLists != undefined){
							$scope.$parent.ViewCustomer.UpdateCustomerContactsLists(relatedCustomerContactList);
						}
					}
					
					// View vendor page related list callbacks
					if($scope.$parent.ViewVendor != undefined && $scope.$parent.ViewVendor.RelatedLists_recordSaveCallback != undefined){
						$scope.$parent.ViewVendor.RelatedLists_recordSaveCallback("{!JSENCODE($ObjectType.Contact.label)}", relatedCustomerContactList);
					}
					
				}, function (errorSearchResult) {
					//$scope.ViewCustomer.CustomerInfo = errorSearchResult;
					
				});
			}
		
			// Method to perform Delete operation in database
			$scope.CustomerContact.removeCustomerContactRecord = function (customerContactId) {
				CustomerCustomerService.removeCustomerContact(customerId, customerContactId).then(function (relatedCustomerContactList) {
					
				}, function (errorSearchResult) {
					$scope.ViewCustomer.CustomerInfo = errorSearchResult;
				});
			}
		
			// Method to get Customer Contact Record
			$scope.CustomerContact.getCustomerContact = function (customerContactId) {
				CustomerCustomerService.getCustomerContactById(customerContactId).then(function (customerContactRec) {
					// Set all the data models
					$scope.CustomerContact.ContactInfo = customerContactRec[0];
		
					angular.element('#ContactPopup').modal({
						backdrop : 'static',
						keyboard : false
					});
				}, function (errorSearchResult) {
					$scope.ViewCustomer.CustomerInfo = errorSearchResult;
				});
			}
		
		});
		
		// Service related to Customer Owned Unit record
		addNewContact.service("CustomerCustomerService", function ($q) {
		
			// Get method for retrival of all field values of a COU
			this.getCustomerContactById = function (customerContactId) {
				customerContactId = encodeString(customerContactId);
				var deferred = $q.defer();
				Visualforce.remoting.Manager.invokeAction(
					'{!$RemoteAction.ViewCustomerCtrl.getCustomerContactById}',
					customerContactId,
					function (result, event) {
					if (event.type == 'exception') {
						deferred.reject(event.message);
					} else {
						var customerContactRec = decodeString(result);
						var find = '\'';
						var re = new RegExp(find, 'g');
						customerContactRec = customerContactRec.replace(re, '');
						deferred.resolve(JSON.parse(customerContactRec));
					}
				}, {
					escape : true
				});
				return deferred.promise;
			}
		
			// Get method for retrival of all field values of a COU
			this.saveCustomerContact = function (customerContactRec) {
				customerContactRec = encodeString(customerContactRec);
				var deferred = $q.defer();
				Visualforce.remoting.Manager.invokeAction(
					'{!$RemoteAction.ViewCustomerCtrl.updateCustomerContact}',
					customerContactRec,
					function (result, event) {
					if (event.type == 'exception') {
						deferred.reject(event.message);
					} else {
						var customerContactRec = decodeString(result);
						var find = '\'';
						var re = new RegExp(find, 'g');
						customerContactRec = customerContactRec.replace(re, '');
						deferred.resolve(JSON.parse(customerContactRec));
					}
				}, {
					escape : true
				});
				return deferred.promise;
			}
		});
    </script>
    
    <div class="modal fade" ng-controller="newContactCtrl" id="ContactPopup">
	    <div class="modal-dialog custom_modal">
	        <div class="modal-content">
	            <div class="modal-body popup_container">
	                <div class="popupinside">
	                    <div class="row">
	                        <div class="popupright col-lg-12 col-lg-12">
	                            <div class="right_heading_container col-lg-12 col-md-12">
	                                <h1 class="right_panel_heading" ng-show="CustomerContact.ContactInfo.Id == null">Add New Contact</h1>
	                                <h1 class="right_panel_heading" ng-show="CustomerContact.ContactInfo.Id != null">{{CustomerContact.ContactInfo.FirstName }} {{CustomerContact.ContactInfo.LastName}}</h1>
	                                <h1 class="right_panel_heading" ng-show="false">Edit Contact</h1>
	                                <div class="savecancle_btncntnr">
	                                    <button type="button" id="closemodal" class="btn btn-default grayBtn" ng-click="CustomerContact.CancelContactForm()" ng-attr-tabindex="{{CustomerModal.tabIndexValue + 204}}">Cancel</button>
	                                    <button type="button" class="btn btn-default greenBtn" ng-click="CustomerContact.saveCustomerContactRecord()"
	                                     ng-attr-tabindex="{{CustomerModal.tabIndexValue + 202}}" 
	                                     >
	                                     Save</button> <!-- ng-class="{'yes':CustomerContact.saveCustomerContactRecord()==true,'no':CustomerContact.saveCustomerContactRecord()==false}" -->
	                                </div>
	                            </div>
	                            <div class="tabconainer" style="min-height: 375px;">
	                                <form>
	                                    <div class="clearfix"></div>
	                                    <div class="form-group reqForContact">
                                        	<label class="FC9" for="required">* Indicates required fields</label>
                                        </div>
	                                    <div class="clearfix"></div>
	                                    <div class="option_field">
	                                        <div class="lable_fields name_class">
	                                            <p>Name</p>
	                                        </div>
	                                        <div class="form_fields" style="margin:4px 0 8px 0;">
	                                            <div class="form-group " >
	                                                <label for="labelFirstName">First Name <span class="FC9">*</span></label>
	                                                <input type="text" class="form-control " id="txtFirstName" rel="NameId" ng-model="CustomerContact.ContactInfo.FirstName"
	                                                    ng-blur="CustomerContact.validateForm('FirstName');" placeholder="First Name" ng-attr-tabindex="{{CustomerContact.tabIndexValue + 1}}"
	                                                    data-toggle="tooltip" title="{{CustomerContact.CustomerContactFormValidationModal['FirstName']['ErrorMessage'] }}"
	                                                    ng-class="{'redborder' : CustomerContact.CustomerContactFormValidationModal['FirstName']['isError'] == true}"/>
	                                            </div>
	                                            <div class="form-group">
	                                                <label for="labelLastName">Last Name <span class="FC9">*</span></label>
	                                                <input type="text" class="form-control " id="txtLastName" rel="NameId" ng-model="CustomerContact.ContactInfo.LastName"
	                                                    ng-blur="CustomerContact.validateForm('LastName');" placeholder="Last Name" ng-attr-tabindex="{{CustomerContact.tabIndexValue + 2}}"
	                                                    data-toggle="tooltip" title="{{CustomerContact.CustomerContactFormValidationModal['LastName']['ErrorMessage'] }}"
	                                                    ng-class="{'redborder' : CustomerContact.CustomerContactFormValidationModal['LastName']['isError'] == true}"/>
	                                            </div>
	                                            <div class="controls1 controls" id="NameId" >
	                                                <i class="fa fa-question-circle" data-toggle="tooltip" title="Provide First and Last Name of Contact"></i>
	                                            </div>
	                                        </div>
	                                    </div>
	                                    <div class="clearfix"></div>
	                                    <div class="option_field" ng-show="true">
	                                        <div class="lable_fields">
	                                            <p>Email </p>
	                                        </div>
	                                        <div class="form_fields" style="margin:4px 0 8px 0;">
	                                            <div class="form-group large" >
	                                                <input type="text" class="form-control " id="businessName" rel="emailId" ng-model="CustomerContact.ContactInfo.Email"
	                                                    ng-blur="CustomerContact.validateForm('Email');" placeholder="Email" ng-attr-tabindex="{{CustomerContact.tabIndexValue + 3}}"
	                                                    data-toggle="tooltip" title="{{CustomerContact.CustomerContactFormValidationModal['Email']['ErrorMessage'] }}"
	                                                    ng-class="{'redborder' : CustomerContact.CustomerContactFormValidationModal['Email']['isError'] == true}"/>
	                                                <a href="#" class="bookmarklink">
	                                                <i  class="fa fa-star" 
	                                                	ng-click="CustomerContact.ContactInfo.PreferredEmail = !CustomerContact.ContactInfo.PreferredEmail"
	                                                	ng-class="CustomerContact.ContactInfo.PreferredEmail == true ?' yellow' : 'FC5'" ></i>
	                                                </a>
	                                            </div>
	                                            <div class="controls1 controls" id="emailId"  >
	                                                <i class="fa fa-question-circle" data-toggle="tooltip" title="Provide a Email of the Contact"></i>
	                                            </div>
	                                        </div>
	                                    </div>
	                                    <div class="clearfix"></div>
	                                    <div class="option_field" ng-show="true">
	                                        <div class="lable_fields">
	                                            <p>Phone</p>
	                                        </div>
	                                        <div class="form_fields">
	                                            <div class="form-group large" style="width: 55%;">
	                                                <input type="text" class="form-control" rel="phoneId" ng-model="CustomerContact.ContactInfo.Phone"
	                                                    ng-blur="CustomerContact.validateForm('Phone');" placeholder="Phone" ng-attr-tabindex="{{CustomerContact.tabIndexValue + 4}}"
	                                                    data-toggle="tooltip" title="{{CustomerContact.CustomerContactFormValidationModal['Phone']['ErrorMessage'] }}"
	                                                    ng-class="{'redborder' : CustomerContact.CustomerContactFormValidationModal['Phone']['isError'] == true}"/>
	                                                <a href="#" class="bookmarklink phoneBookmark">
	                                                <i class="fa fa-star" 
	                                                	ng-class="CustomerContact.ContactInfo.PreferredPhone == true ?' yellow' : 'FC5'" 
	                                                    ng-click="CustomerContact.markFavourite('PreferredPhone');"></i>
	                                                </a>
	                                            </div>
	                                            <div class="form-group small" ng-class="{'disablePhoneSmsChkBx' :  CustomerContact.CustomerContactFormValidationModal['Phone']['isError'] || 
	                                               CustomerContact.ContactInfo.Phone == null || CustomerContact.ContactInfo.Phone == undefined ||  CustomerContact.ContactInfo.Phone == ''}">
	                                                <label class="checkbox smschkbox">
	                                                <span class="chk_tick" ng-class="{'chked' : CustomerContact.ContactInfo.IsSMS==true}" 
	                                                    ng-click="CustomerContact.markFavourite('IsSMS');">
	                                                <i class="fa fa-check-square chksqure" ></i>
	                                                </span>
	                                                </label>
	                                            </div>
	                                            <div class="form-group small2">
	                                                <label>SMS ?</label>
	                                                <a href="#" class="bookmarklink">
	                                                <i class="fa fa-star" 
	                                                	ng-class="CustomerContact.ContactInfo.PreferredSMS == true ?' yellow' : 'FC5'" 
	                                                    ng-click="CustomerContact.markFavourite('PreferredSMS');"></i>
	                                                </a>
	                                            </div>
	                                        </div>
	                                        <div class="controls" id="phoneId">
	                                            <i class="fa fa-question-circle"  data-toggle="tooltip" title="Add a personal Phone number"></i>
	                                        </div>
	                                    </div>
	                                    <div class="clearfix"></div>
	                                    <div class="option_field" >
	                                        <div class="lable_fields">
	                                            <p>Job Tilte</p>
	                                        </div>
	                                        <div class="form_fields">
	                                            <div class="form-group large">
	                                                <input type="text" class="form-control" rel="jobTitleId" ng-model="CustomerContact.ContactInfo.JobTitle"
	                                                    ng-attr-tabindex="{{CustomerContact.tabIndexValue + 5}}"/>
	                                            </div>
	                                        </div>
	                                        <div class="controls" id="jobTitleId">
	                                            <i class="fa fa-question-circle" data-toggle="tooltip" title="Add a job title"></i>
	                                        </div>
	                                    </div>
	                                    <div class="clearfix"></div>
	                                    <div class="option_field" >
	                                        <div class="lable_fields" style="width: 22%">
	                                            <p>Relation</p>
	                                        </div>
	                                        <div class="form-group half">
	                                            <select class="form-control" rel="relationDropDown" id="relationId" ng-change="CustomerModal.ChangeMonth()" ng-model="CustomerContact.ContactInfo.Relation" ng-attr-tabindex="{{CustomerModal.tabIndexValue + 7}}">
	                                                <option  value="Family">Family</option>
	                                                <option value="Friend">Friend</option>
	                                                <option value="Co-Worker">Co-Worker</option>
	                                                <option value="Employee">Employee</option>
	                                                <option value="Employer">Employer</option>
	                                            </select>
	                                        </div>
	                                        <div class="controls" id="relationDropDown">
	                                            <i class="fa fa-question-circle" data-toggle="tooltip" title="Select a Relation"></i>
	                                        </div>
	                                    </div>
	                                </form>
	                            </div>
	                        </div>
	                    </div>
	                </div>
	            </div>
	        </div>
	    </div>
	</div>

</apex:component>