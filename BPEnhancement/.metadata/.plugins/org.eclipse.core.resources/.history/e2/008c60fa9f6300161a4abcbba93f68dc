<apex:component Controller="CustomerOrderCtrl">
	<style>
.modal-dialog {
	width: 1100px;
	-moz-box-shadow: 10px 10px 5px #6F6868;
	-webkit-box-shadow: 10px 10px 5px #6F6868;
	box-shadow: 10px 10px 5px #6F6868;
}

.modal-backdrop.in {
	height: 2000px !important;
}

.form-control {
	width: 100%;
}

.bg_container {
	min-height: 650px;
}

.popup_container {
	border: 1px solid #cccccc;
	font-family: Arial;
}

.popup_container .popupleft .popupleft_container {
	overflow: hidden;
	/*border-bottom: 1px solid #cccccc;*/
	padding-bottom: 40px;
	transition: all 0.5s ease;
}

.popup_container .popupleft .popupleft_container#topsection {
	min-height: 618px;
}

.popup_container .popupright {
	padding-bottom: 5px;
	border-left: 1px solid #cccccc;
}

.popup_container .popupleft h1.letpanel_heading {
	font-size: 18px;
	font-weight: bold;
	color: #f89420;
	float: left;
	width: 85%;
}

.popup_container .popupleft h1.letpanel_heading .helptip {
	position: absolute;
	right: 49px;
	top: -5px;
	font-size: 24px;
}

.popup_container .popupleft .goldbox {
	min-height: 84px;
	border: 2px solid #666666;
	padding: 0;
	margin-top: 3px;
	/*max-width: 271px;*/
}

.popupright .right_panel_heading {
	font-weight: bold;
	font-size: 25px;
	float: left;
}

.popupright .right_heading_container {
	padding-left: 0;
	padding-right: 0;
}

.popupright .tabconainer {
	clear: left;
	/*border-bottom: 1px solid #cccccc;*/
	padding-bottom: 10px;
}

.popupright .tabconainer .addmoreinfo {
	background: #f79420;
	width: 100%;
	margin-top: 10px;
}

.popupright .tabconainer.noborder {
	border-bottom: 0px solid #cccccc;
}

.popupright .tabconainer .option_field {
	clear: both;
}

/* .popupright .tabconainer .option_field.hideit {
	display: none;
}
 */
.popupright .tabconainer form .form-group {
	width: 43%;
	float: left;
	margin: 2px;
	position: relative;
}

.popupright .tabconainer form .form-group.small {
	width: 10%;
}

.popupright .tabconainer form .form-group.small2 {
	width: 22%;
	color: #D2D2D2;
	font-size: 15px;
	padding-top: 8px;
}

.popupright .tabconainer form .form-group.half {
	width: 43%;
}

.popupright .tabconainer form .form-group.large {
	width: 87%;
}

.popupright .tabconainer form .form-group.medium {
	width: 53%;
}

.popupright .tabconainer form .form-group input[type="text"],.popupright .tabconainer form .form-group input[type="email"],.popupright .tabconainer form .form-group select
	{
	border-radius: 0;
}

.popupright .tabconainer form .form-group select {
	padding-left: 5px;
}

.popupright .tabconainer form .form-group .checkbox {
	display: block;
}

.popupright .tabconainer form .form-group .checkbox .chksqure {
	font-size: 43px;
	margin-top: -7px;
	margin-left: -3px;
	color: #f79420;
}

.popupright .tabconainer form .form-group .checkbox .chk_tick {
	display: block;
	float: left;
	width: 32px;
	height: 29px;
	overflow: hidden;
	border: 1px solid #cccccc;
	cursor: pointer;
}

.popupright .tabconainer form .form-group .checkbox .chk_tick.chked .chksqure
	{
	display: block;
}

.popupright .tabconainer form .form-group .checkbox .chk_tick .chksqure
	{
	display: none;
}

.popupright .tabconainer form .form-group .checkbox .chk_txt {
	display: block;
	float: left;
	padding-top: 5px;
	padding-left: 8px;
}

.popupright .tabconainer form .lable_fields.chkbox p {
	padding-top: 10px;
}

.popupright .tabconainer form .lable_fields {
	float: left;
	width: 34%;
	margin-top: 5px;
}

.popupright .tabconainer form .lable_fields .form_lable_icons {
	display: block;
	float: left;
	width: 30px;
	height: 30px;
	background-image: url('{!URLFOR($Resource.Images, 'circlefornumber.png')}') no-repeat;
}

.popupright .tabconainer form .lable_fields .form_lable_icons.text {
	font-size: 10px;
	padding-top: 9px;
}

.popupright .tabconainer form .lable_fields .form_lable_icons {
	color: #f89420;
	text-align: center;
	padding-top: 7px;
	font-size: 16px;
}

.popupright .tabconainer form .lable_fields p {
	padding: 5px 5px 5px 5px;
	font-weight: bold;
	float: left;
}

.popupright .tabconainer form .form_fields {
	float: right;
	width: 66%;
	position: relative;
}

.popupright .tabconainer form .form_fields .helplink {
	position: absolute;
	right: 13px;
	top: -2px;
	color: #f89420;
	font-size: 20px;
}

.popupright .tabconainer form .form_fields {
	position: relative;
}

.popupright .tabconainer form .form_fields a.bookmarklink {
	position: absolute;
	right: 6px;
	top: 6px;
	font-size: 19px;
	color: #f1f1f1;
}

.popupright .tabconainer form .form-group .form-control:focus {
	border-color: #f89420;
	outline: 1;
	border: 2px solid #f89420;
	-webkit-box-shadow: none;
	-moz-box-shadow: none;
	box-shadow: none;
}

.themebtn_gray {
	background: #D5D5D5;
	color: #ffffff;
	border: none !important;
	font-weight: bold;
}

.themebtn_orange {
	background: #f89420;
	color: #ffffff;
	border: none !important;
	font-weight: bold;
}

.popupright .savecancle_btncntnr {
	float: right;
	margin-top: 17px;
}

.popupright .tabbtn_container {
	clear: both;
	text-align: left;
	padding: 0;
}

.popupright .tabbtn_container .btn {
	width: 49%;
}

.popup_container .popupleft .goldbox .leftgoldbox {
	width: 80px;
	height: 65px;
	background: #f79420;
	padding: 4px;
	float: left;
}

.popup_container .popupleft .goldbox .rightgoldbox {
	float: left;
	color: #000;
	position: relative;
	width: 180px;
}

.popup_container .popupleft .goldbox .rightgoldbox.type2 {
	width: 60%;
}

.popup_container .popupleft .goldbox .leftgoldbox .star_container {
	text-align: center;
	font-size: 25px;
	color: #fff;
}

.popup_container .popupleft .goldbox .rightgoldbox p {
	padding: 0 2px;
	margin: 0;
	font-size: 13px;
	color: #54a8dd;
}

.popup_container .popupleft .goldbox.exists .leftgoldbox {
	padding: 0px;
	background: none;
	width: 79px;
	height: 76px;
}

.popup_container .popupleft .goldbox.exists .leftgoldbox img {
	width: 105%;
	height: 105%;
}

.popup_container .popupleft .goldbox .rightgoldbox p.cust_name {
	font-size: 18px;
	color: #333333;
}

.popup_container .popupleft .goldbox .rightgoldbox p.cust_name.address {
	font-size: 10px;
	color: #333333;
	margin-left: 10px;
}

.popup_container .popupleft .goldbox .rightgoldbox p.cust_name.address .titletxt
	{
	font-size: 16px;
	text-decoration: underline;
}

.popup_container .popupleft .goldbox .rightgoldbox .boxedit {
	position: absolute;
	right: -24px;
	top: 5px;
	display: block;
	width: 21px;
}

.popup_container .popupleft .goldbox .rightgoldbox .boxedit img {
	max-width: 100%;
}

.popup_container .popupleft .goldbox .rightgoldbox .boxenum {
	position: absolute;
	right: -26px;
	top: 31px;
	display: block;
	width: 30px;
	height: 30px;
	background-image: url('{!URLFOR($Resource.Images, 'circlefornumber.png')}') no-repeat;
	background-size: 100%;
	color: #f79420;
	font-weight: bold;
	font-size: 12px;
	text-align: center;
	text-decoration: none;
	padding-top: 8px;
}

.popup_container .popupleft .goldbox .bottomgoldbox {
	width: 100%;
	height: 15px;
	background: #666666;
	clear: both;
	color: #fff;
	font-size: 11px;
	text-align: right;
}

.popupright .tabconainer form .controls {
	position: absolute;
	right: -146px;
	height: 33px;
	width: 200px;
	margin-top: 2px;
	font-size: 18px;
	padding: 4px 0;
	display: none;
}

.popupright .tabconainer form .controls1 {
	position: relative;
	right: -91%;
	top: -31px;
}

.popupright .tabconainer form .controls .fa-question-circle {
	color: orange;
}

.popupright .tabconainer form .controls .fa-times {
	color: #9E9E9E;
}

.add_info_dropdown {
	top: 96%;
	right: 0;
}

.add_info_dropdown li a {
	text-decoration: none;
	padding: 10px 20px;
}

.popupright .tabconainer form .form-group.onehalf {
	width: 25%;
}

.popupright .tabconainer form .form-group.threehalf {
	width: 64%;
}

.popupright .tabconainer form .form-group .chkbox_custom {
	overflow: hidden;
	border: 1px solid #cccccc;
	max-width: 100px;
}

.popupright .tabconainer form .form-group .chkbox_custom.disabled .leftchked.checked
	{
	background-image: url('{!URLFOR($Resource.Images, 'chkpngleft_trimmed_disabled.png')}') no-repeat;
	color: #FFFFFF;
	background-size: 100% 100%;
	font-size: 12px;
	font-weight: bold;
	text-align: center;
	padding-top: 9px;
	padding-right: 5px;
}

.popupright .tabconainer form .form-group .chkbox_custom.disabled .leftchked
	{
	background: none;
	color: #FFFFFF;
	background-size: 100% 100%;
	font-size: 12px;
	font-weight: bold;
	text-align: center;
	padding-top: 9px;
	padding-right: 5px;
}

.popupright .tabconainer form .form-group .chkbox_custom.disabled .rightchked.checked
	{
	background-image: url('{!URLFOR($Resource.Images, 'chkpngleft_trimmed_disabled.png')}') no-repeat;
	color: #FFFFFF;
	background-size: 100% 100%;
	font-size: 12px;
	font-weight: bold;
	text-align: center;
	padding-top: 10px;
	padding-left: 5px;
}

.popupright .tabconainer form .form-group .chkbox_custom.disabled .rightchked
	{
	background: none;
	color: #FFFFFF;
	background-size: 100% 100%;
	font-size: 12px;
	font-weight: bold;
	text-align: center;
	padding-top: 10px;
	padding-left: 5px;
}

.popupright .tabconainer form .form-group .chkbox_custom .leftchked {
	width: 55%;
	float: left;
	height: 34px;
	background-image: url('{!URLFOR($Resource.Images, 'chkpngleft_trimmed_disabled.png')}') no-repeat;
	color: #FFFFFF;
	background-size: 100% 100%;
	font-size: 12px;
	font-weight: bold;
	text-align: center;
	padding-top: 9px;
	padding-right: 5px;
	cursor: pointer;
}

.popupright .tabconainer form .form-group .chkbox_custom .rightchked {
	width: 55%;
	float: left;
	height: 34px;
	background-image: url('{!URLFOR($Resource.Images, 'chkpngleft_trimmed_disabled.png')}') no-repeat;
	color: #FFFFFF;
	background-size: 100% 100%;
	font-size: 12px;
	font-weight: bold;
	text-align: center;
	padding-top: 10px;
	padding-left: 5px;
	cursor: pointer;
	margin-left: -10px;
	margin-top: -1px;
}

.popupright .tabconainer form .form-group .chkbox_custom .leftchked.checked
	{
	background-image: url('{!URLFOR($Resource.Images, 'chkpngleft_trimmed_disabled.png')}') no-repeat;
	color: #FFFFFF;
	background-size: 100% 100%;
	font-size: 12px;
	font-weight: bold;
	text-align: center;
	padding-top: 9px;
	padding-right: 5px;
}

.popupright .tabconainer form .form-group .chkbox_custom .rightchked.checked
	{
	background-image: url('{!URLFOR($Resource.Images, 'chkpngleft_trimmed_disabled.png')}') no-repeat;
	color: #FFFFFF;
	background-size: 100% 100%;
	font-size: 12px;
	font-weight: bold;
	text-align: center;
	padding-top: 10px;
	padding-left: 5px;
}

.popupright .tabconainer form .form-group .smschkbox {
	margin-top: 0px;
}

.popupright .tabconainer form .form-group .smschkbox .chk_tick {
	width: 37px;
	height: 34px;
}

.popupright .tabconainer form .form-group .smschkbox .chk_tick.chked .chksqure
	{
	font-size: 46px;
}

.redborder {
	border: 2px solid red;
}

.orange {
	color: orange;
}

.leftBorderNone{
	border-left: none !important;
}
.edit_modal-dialog{
	width: 800px;
}
</style>

	<style>
.Customer-Suggestion-overlay {
	display: none;
	background: #fff;
	color: #000;
	width: 350px;
	min-height: 100px;
	position: absolute;
	text-align: left;
	z-index: 1000;
	border-radius: 10px;
	padding: 10px 20px;
	-moz-box-shadow: 0 0 20px #222;
	-webkit-box-shadow: 0 0 20px #222;
	box-shadow: 0 0 20px #222;
}

.Customer-Suggestion-overlay .under-line-row {
	padding: 10px;
	border-bottom: 1px solid #939598;
	margin-left: 0px;
}

.Customer-Suggestion-overlay .text {
	font-size: 14px;
	font-weight: bold;
	margin-bottom: 20px;
}
/*
              .Customer-Suggestion-overlay:before{
                  content: '';
                  display: block;
                  position: absolute;
                  left: -120px;
                  width: 120px;
                  top: -50px;
                    
                  height: 170px;
                  background-image: url('{!URLFOR($Resource.Images, 'arrow.png')}') no-repeat !important;
              }
              */
.ConfirmBox-overlay {
	display: none;
	width: 400px;
	position: absolute;
	z-index: 1000;
	left: 40%;
}

.Customer-Suggestion-overlay:before {
	content: '';
	display: block;
	position: absolute;
	z-index: -1;
	top: 13px;
	left: -13px;
	height: 30px;
	width: 30px;
	-moz-box-shadow: -3px 3px 5px 0px #7a7a7a;
	-webkit-box-shadow: -3px 3px 5px 0px #7a7a7a;
	-o-box-shadow: -3px 3px 5px 0px #7a7a7a;
	box-shadow: -3px 3px 5px 0px #7a7a7a;
	transform: rotate(45deg);
	-ms-transform: rotate(45deg);
	-webkit-transform: rotate(45deg);
	background-color: #fff;
}
</style>
	<script>
            $(document).ready(function () {
                $('.Customer-Suggestion-overlay').mouseover(function() {
                    $('.Customer-Suggestion-overlay').show(); 
                })
                $('.Customer-Suggestion-overlay').mouseout(function() {
                    $('.Customer-Suggestion-overlay').hide(); 
                })
            });
            
            
            
        </script>

	<script>
     
        var addEditCustomerModule= angular.module('addEditCustomerModule', ['ui-notification'] );
         
         addEditCustomerModule.controller('addEditCustomerController', function ($scope, Notification,addEditCustomerService, $timeout, $q) {
    							// added by hitesh gupta
    							
									if(angular.isDefined($scope.CustomerModal))
								   	{
								   		debug('5500');
								   	}else{
								   		$scope.CustomerModal = {};
								   	}
                                $scope.handler = 'pop';
                                  
                                $scope.selectedObject={};   
                                                         
                                $scope.selectedObject.ChangeRecords=0;
                                $scope.CustomerModal.FirstCall=0;
                              
                              
                             
                              
                              $scope.$on('AddCustomerEvent', function () {    
                                     debug('AddNewCustomer');   
                                     $scope.CustomerModal.addNewCustomer();
  
                               });
                                  
                                  
                                  
                            $scope.$on('LoadMasterData',function(){
                                 debug('Load'); 
                                 $scope.CustomerModal.loadCustomerMasterData();
                            });
                            
                            
                            $scope.$on('EditCustomerEvent',function(event, customerId)
                            {
                                debug(customerId);
                                $scope.CustomerModal.editCustomer(customerId);
                            });   
                            
                             $scope.$on('EditCustomerRelatedEvent',function(event, customerId)
                            {
                                debug(customerId);
                                $scope.CustomerModal.editCustomer(customerId);
                            }); 
                            
                            
                            
                              
                          
                          
                           $scope.CustomerModal.showInfoOverlay = function(event,index) {
                                
                                var targetEle = angular.element('#' + event + index);
                                var scrolledTop = -($('.modal-content').offset().top - 30);
                                //debug(targetEle);
                                var elementWidth = targetEle.width();
                                debug(targetEle);
                                 debug(targetEle.offset().top);
                                /*if(targetEle.width() > targetEle.parent().width()){
                                    elementWidth = targetEle.parent().width() - 15;
                                }*/
                                //debug("width:--- "+elementWidth);
                                angular.element('.Customer-Suggestion-overlay').css('top',targetEle.offset().top + scrolledTop - 40);
                                angular.element('.Customer-Suggestion-overlay').css('left','280px');
                                angular.element('.Customer-Suggestion-overlay').show();
                                
                                $scope.CustomerModal.SimilarCustomerSelect={
                                Value:$scope.CustomerModal.SimilarCustomers[index].Id,
                                Name:$scope.CustomerModal.SimilarCustomers[index].CustomerName
                                }
                                debug($scope.CustomerModal.SimilarCustomerSelect);
                                
                                
                                //debug($scope.CustomerOrder.customer);
                            }
                             $scope.CustomerModal.hideCustomerInfoOverlay = function() {
                                    angular.element('.Customer-Suggestion-overlay').hide();
                                }
                                                
                            
                             
                             
                             $scope.CustomerModal.loadCustomerMasterData= function()
                             {
                             
                                      addEditCustomerService.getCustomerAllMasterData()
                                                      .then(function (CustomerMasterData) {
                                                       
                                                            //declaration
                                                            
                                                            $scope.CustomerModal.CustomerMasterData = CustomerMasterData;
                                                             debug($scope.CustomerModal.CustomerMasterData) ;
                                                            var Curryear= new Date().getFullYear();
                                                            var curr=parseInt(Curryear);
                                                            $scope.CustomerModal.BirthYears=[];
                                                            $scope.CustomerModal.BirthDays=[];
                                                            $scope.CustomerModal.ModelYears=[];

                                                            



                                                            for( i=1900 ; i < curr; i++ )
                                                            {
                                                                var year={year:i};
                                                                $scope.CustomerModal.BirthYears.push(year);
                                                
                                                            }

                                                            for(i = curr -100 ; i <  curr + 3 ; i++ )
                                                            {
                                                                var year={modelyear:i.toString()};
                                                                
                                                                $scope.CustomerModal.ModelYears.push(year);
                                                            
                                                            }

                                                            
                                                            $scope.CustomerModal.ClearAlldata();
                                                            $scope.CustomerModal.IsEditMode = false;
                                                           
                                                        
                    

                                                        
                                                            
                                                 },
                    
                    
                    
                    
                                                 function (errorSearchResult) {          
                                                     responseData = errorSearchResult;  
                                                });
                             
                             
                             }
                             
                             $scope.CustomerModal.addNewCustomer=function(){
                             
                                            $scope.CustomerModal.ClearAlldata();
                                            
                                            $scope.CustomerModal.IsEditMode = false;
                                                    angular.element('#pop').modal({
                                                      backdrop: 'static',
                                                      keyboard: false 
                                                    });
                             
                             
                             }
                             
                             
                             $scope.CustomerModal.editCustomer =function(customerId){
                                                addEditCustomerService.editCustomerDetails(customerId)
                                                      .then(function (CustomerData) {
                                                        debug(CustomerData)
                                                         $scope.CustomerModal.IsEditMode = true;
                                                        $scope.CustomerModal.CustomerInfo=CustomerData[0]
                                                         $scope.CustomerModal.SetCustomerFormDefault();
                                                        $scope.CustomerModal.CustomerValidationCOU =[];
                                                        $scope.CustomerModal.CustumerUnitModal=[];
                                                         angular.element('#pop').modal({
                                                         backdrop: 'static',
                                                         keyboard: false 
                                                            });
                                                      });
                             }
                                     

                                
                                $scope.CustomerModal.ClearAlldata =function()
                                {
                                                debug($scope.CustomerModal.CustomerMasterData);
                                                $scope.CustomerModal.Country=$scope.CustomerModal.CustomerMasterData.CountryList;
                                                $scope.CustomerModal.ShippingCountry=$scope.CustomerModal.CustomerMasterData.CountryList;
                                                $scope.CustomerModal.PriceLevel=$scope.CustomerModal.CustomerMasterData.PriceLevelList;
                                                $scope.CustomerModal.SalesTax=$scope.CustomerModal.CustomerMasterData.SalesTaxList;
                                                $scope.CustomerModal.UnitMakeSelected=[];
                                                $scope.CustomerModal.UnitModel=[];
                                                $scope.CustomerModal.UnitModelSelected=[];
                                                $scope.CustomerModal.UnitYearSelected=[];
                                                $scope.CustomerModal.SimilarCOU ={};
                                                $scope.CustomerModal.SimilarCustomers=[];
                                                $scope.CustomerModal.SetDafaultBillingCountry();
                                                $scope.CustomerModal.SetDafaultBillingState();
                                                $scope.CustomerModal.SetDafaultPriceLevel();
                                                $scope.CustomerModal.SetDafaultSalesTax();


                                                $scope.CustomerModal.UnitMake=$scope.CustomerModal.CustomerMasterData.UnitMakeList;
                                                $scope.CustomerModal.VendorSelectedSalesTax={};
                                                
                                                // Remove after
                                                $scope.CustomerModal.BirthyearSelected={};
                                                $scope.CustomerModal.BirthmonthSelected={};
                                                $scope.CustomerModal.BirthdaySelected={};
                                                
                                                // End remove
                                                
                                                
                                                $scope.CustomerModal.SetDefaultBirthday();



                                                
                                                
                                             $scope.CustomerModal.AdditionalFieldsInfo = {
                                                OtherPhone:{isPrimary: false, label:'Other Phone', fieldId:'otherPhoneId', displayType: 'Both'},
                                                OtherEmail:{isPrimary: false, label:'Other Email', fieldId:'otherEmail' , displayType: 'Both'},
                                                Birthdate : {isPrimary: false, label:'Birthday', fieldId:'birthMonth', displayType: 'Individual'},
                                                FacebookLink : {isPrimary: false, label: 'FaceBook', fieldId:'facebookLink', displayType: 'Both'},
                                                TwitterLink : {isPrimary: false, label: 'Twitter', fieldId:'twitterLink', displayType: 'Both'},
                                                LinkedInLink : {isPrimary: false, label: 'LinkedIn', fieldId:'LinkedinLink', displayType: 'Both'},
                                                CustomerUnit: {isPrimary: false, label: 'Customer Unit', displayType: 'Both'},
                                                Company : {isPrimary: false, label: 'Company', fieldId:'companyName', displayType: 'Individual'},
                                                JobTitle : {isPrimary: false, label: 'Job Title', fieldId:'jobTitle', displayType: 'Individual'},
                                                VIPLevel : {isPrimary: false, label: 'VIP Level', displayType: 'Both'},
                                                PriceLevel : {isPrimary: false, label: 'Price Level', fieldId:'priceLevelDropDown', displayType: 'Both'},
                                                IsVendor : {isPrimary: false, label: 'Vendor', fieldId:'vendorDropDown', displayType: 'Both'},
                                                Active:{isPrimary: false, label: 'Active', displayType: 'Both'}
                                            } 
                                            
                                            
                                            $scope.CustomerModal.CustomerValidation = {
                                            FirstName: {isError : false, ErrorMessage:'', Type:'required,Maxlength,Minlength', Maxlength: 80, Minlength: 2},
                                            LastName : {isError : false, ErrorMessage:'', Type:'required,Maxlength,Minlength', Maxlength: 80, Minlength: 2},
                                            BusinessName: {isError : false, ErrorMessage:'', Type:'required,Maxlength,Minlength', Maxlength: 80, Minlength: 2},
                                            HomeEmail : {isError : false, ErrorMessage:'', Type:'email'},
                                            WorkEmail : {isError : false, ErrorMessage:'', Type:'email'},
                                            OtherEmail : {isError : false, ErrorMessage:'', Type:'email'},
                                            HomeNumber : {isError : false, ErrorMessage:'',  Type:'phone,Maxlength,Minlength', Maxlength: 10, Minlength: 10},
                                            WorkNumber : {isError : false, ErrorMessage:'',  Type:'phone,Maxlength,Minlength', Maxlength: 10, Minlength: 10},
                                            OtherPhone : {isError : false, ErrorMessage:'',  Type:'phone,Maxlength,Minlength', Maxlength: 10, Minlength: 10}
                                         }
                                 
                                         $scope.CustomerModal.CustomerValidationCOU = [
                                                                                            {
        
                                                                                                VIN:{isError : false, ErrorMessage:'',Type:'VIN'},
                                                                                                Mileage:{isError : false, ErrorMessage:'' ,Type:'Numeric'}
                                                                                            }
        
                                           ]
                                   
                                        $scope.CustomerModal.CustomerInfo={};
                                        $scope.CustomerModal.CustomerInfo.sameBillingAddress = false;
                                        $scope.CustomerModal.CustomerInfo={IsBothAddressSame:true,IsCustomer:true,Active:true,WorkNumberSMS:false,MobileNumberSMS:false,HomeNumberSMS:false, IsVendor:false};
                                       /*  angular.element("#sameAsBA").addClass("chked");
                                        angular.element("#billingaddress").slideUp();
 */
                                        $scope.CustomerModal.CustomerInfo.Type = 'Individual';

                                        $scope.CustomerModal.CustumerUnitModal = [
                                            {Year:null, Make:null,Model:null, SubModel:null,VIN:'',Plate:'',Mileage:null,Color:''
                                        }
                                            ];
                                           
                                        
                                        
                                        
                            
                         
                                    

                          }
                          
                          
                          
                          
                          //hitesh
                          $scope.CustomerModal.manageAdditionalFields = function(key){
                                var result = false;
                                
                                if($scope.CustomerModal.AdditionalFieldsInfo[key].isPrimary ==  false){
                                    result  = true;
                                }
                                if($scope.CustomerModal.IsEditMode == true  && key == 'CustomerUnit'){
                                    result  = false;
                                }
                                if($scope.CustomerModal.CustomerInfo.Type == 'Business' && $scope.CustomerModal.AdditionalFieldsInfo[key].displayType == 'Individual' ){
                                    result  = false;
                                }
                                return result;
                          
                          }
                        
                      

                        
                        $scope.CustomerModal.SetCustomerFormDefault = function()
                        {                   
                                            //clear Cou Data on Edit
                                            
                                            
                                            //set Address defaults
                                            if($scope.CustomerModal.CustomerInfo.BirthYear !=null && $scope.CustomerModal.CustomerInfo.BirthMonth !=null && $scope.CustomerModal.CustomerInfo.BirthDay !=null)
                                            {
                                                
                                                        $scope.CustomerModal.BirthyearSelected={year:$scope.CustomerModal.CustomerInfo.BirthYear};
                                                        $scope.CustomerModal.BirthmonthSelected=$scope.CustomerModal.CustomerInfo.BirthMonth
                                                        
                                                        $scope.CustomerModal.ChangeMonth();
                                                        $scope.CustomerModal.BirthdaySelected ={day: $scope.CustomerModal.CustomerInfo.BirthDay};
                                                                

                                                        
                                            }

                                            if($scope.CustomerModal.CustomerInfo.BillingCountry !='' )

                                            {
                                                
                                                
                                                
                                                for(i=0;i < $scope.CustomerModal.CustomerMasterData.CountryList.length ; i++)


                                                    {           
                                                            
                                                            if($scope.CustomerModal.CustomerMasterData.CountryList[i].CountryName == $scope.CustomerModal.CustomerInfo.BillingCountry )

                                                            {
                                                               $scope.CustomerModal.SelectedCountry=$scope.CustomerModal.CustomerMasterData.CountryList[i];




                                                            }
                                                    
                                                    }
                                                    
                                                 $scope.CustomerModal.State= $scope.CustomerModal.CustomerMasterData.StateList[0].countryNameToStateMap[$scope.CustomerModal.SelectedCountry.CountryName];

                                                 
                                                 for(i=0;i < $scope.CustomerModal.State.length ; i++)


                                                    {           
                                                            
                                                            if($scope.CustomerModal.State[i].StateName == $scope.CustomerModal.CustomerInfo.BillingState )

                                                            {
                                                               $scope.CustomerModal.SelectedState=$scope.CustomerModal.State[i];



                                                            }
                                                    
                                                    }

                                                    // need to exprore more

                                                 
                                           if($scope.CustomerModal.CustomerInfo.IsBothAddressSame)

                                            {
                                               /* 
                                                angular.element("#sameAsBA").addClass("chked");
                                                angular.element("#billingaddress").slideUp(); */
                                                
                                                
                                            }
                                            else
                                            {
                                                debug('False');


                                                /* angular.element("#sameAsBA").removeClass("chked");
                                                angular.element("#billingaddress").slideDown();
                                          */

                                                    for(i=0;i < $scope.CustomerModal.CustomerMasterData.CountryList.length ; i++)
                                                       {            

                                                            debug($scope.CustomerModal.CustomerInfo.ShippingCountry);
                                                               if($scope.CustomerModal.CustomerMasterData.CountryList[i].CountryName == $scope.CustomerModal.CustomerInfo.ShippingCountry )
                                                               {

                                                                  $scope.CustomerModal.SelectedShippingCountry = $scope.CustomerModal.CustomerMasterData.CountryList[i];
                                                               }
                                                       }
                                                       



                                                    $scope.CustomerModal.ShippingState= $scope.CustomerModal.CustomerMasterData.StateList[0].countryNameToStateMap[$scope.CustomerModal.SelectedShippingCountry.CountryName];
                                                    

                                                    for(i=0;i < $scope.CustomerModal.ShippingState.length ; i++)
                                                       {            

                                                               if($scope.CustomerModal.ShippingState[i].StateName == $scope.CustomerModal.CustomerInfo.ShippingState )
                                                               {

                                                                  $scope.CustomerModal.SelectedShippingState=$scope.CustomerModal.ShippingState[i];
                                                               }
                                                       }
                                                    }
                                            
                                            }
                                            else{
                                            
                                            
                                            	$scope.CustomerModal.CustomerInfo.IsBothAddressSame=true;
                                            
                                            }
                                            


                                            if($scope.CustomerModal.CustomerInfo.PriceLevelId !=null ){
                                                    
                                                      for(i=0 ; i < $scope.CustomerModal.PriceLevel.length ; i++)
                                                         {
                                                                if( $scope.CustomerModal.PriceLevel[i].Id == $scope.CustomerModal.CustomerInfo.PriceLevelId)
                                                                {
                                                                    $scope.CustomerModal.SelectedPriceLevel=$scope.CustomerModal.PriceLevel[i];
                                                                }



                                                        }
                                                        $scope.CustomerModal.AdditionalFieldsInfo['PriceLevel'].isPrimary=true;


                                            }
                                            
                                            



                                            //vedor


                                            
                                            if($scope.CustomerModal.CustomerInfo.IsVendor ==true)
                                            {
                                                if($scope.CustomerModal.CustomerInfo.PurchaseTaxId !=null ){
                                                        
                                                          for(i=0 ; i < $scope.CustomerModal.SalesTax.length ; i++)
                                                            {   
                                                                if( $scope.CustomerModal.SalesTax[i].Id == $scope.CustomerModal.CustomerInfo.PurchaseTaxId)
                                                                    {  
                                                                        $scope.CustomerModal.VendorSelectedSalesTax=$scope.CustomerModal.SalesTax[i];
                                                                        
                                                                    }
                                                            }   
                                                                
                                                }
                                                
                                            }
                                
                                 
                                 
                        


                                          angular.forEach( $scope.CustomerModal.AdditionalFieldsInfo, function(value, key) {

                                              if ( $scope.CustomerModal.CustomerInfo[key] !=null &&  $scope.CustomerModal.CustomerInfo[key] !=''){

                                                  
                                                    
                                                  $scope.CustomerModal.AdditionalFieldsInfo[key].isPrimary=true;
                                              
                                              }
                                              
                                          });
                                                
                                                

                                        $scope.CustomerModal.AdditionalFieldsInfo.Active.isPrimary = true;
                                            
                                            
                                                
                        
                        }
                        
                        // Functions

                        $scope.CustomerModal.isFeildDisplay = function(fieldLabel){
                            for(i=0; i<$scope.CustomerModal.PrimaryFields.length; i++){
                                if($scope.CustomerModal.PrimaryFields.label == fieldLabel){
                                    return true;
                                }
                            }
                            return false;
                        }   
                        
                        $scope.CustomerModal.AddSimilarCustomer=function()
                        {
                            
                            
                                addEditCustomerService.addCustomer($scope.selectedObject.coHeaderId,$scope.CustomerModal.SimilarCustomerSelect.Value)
                                          .then(function (sucessCustomerResult) {
                                                
                                                angular.copy($scope.CustomerModal.SimilarCustomerSelect,  $scope.selectedObject.Customer);
                                                 $scope.selectedObject.ChangeRecords=0;
                                                 angular.element('#pop').modal('hide');
                                 },

                                 function (errorSearchResult) {          
                                     responseData = errorSearchResult; 
                                });

                            
                            
                             
                        }
                        
                        $scope.CustomerModal.OnFocus = function(targetId){  
                                debug(targetId) ;                         


                            angular.element('.controls').hide();
                            angular.element('#'+targetId).show();
    

                        }
                        
                       $scope.CustomerModal.OnBlurVin = function(value){                            
                        
                                 $scope.CustomerModal.getSimilarCOUs(value);

    

                        }
                        

                         $scope.CustomerModal.ClearAndRemoveField = function(fieldrel, targetIdToFocus) {
                             var fieldsToClearOrRemove = $scope.CustomerModal.ManageIconCustomerDetails[0][fieldrel];
                             debug(fieldrel);
                             
                             if(fieldsToClearOrRemove.isPrimary == true) {
                                 for(i=0; i < fieldsToClearOrRemove.value.length;i++) {
                                     var key= fieldsToClearOrRemove.value[i].val ;
                                     if(fieldsToClearOrRemove.value[i].fieldType == 'text'){
                                        $scope.CustomerModal.CustomerInfo[key] = "";
                                     }else if(fieldsToClearOrRemove.value[i].fieldType == 'boolean'){
                                        $scope.CustomerModal.CustomerInfo[key] = false;
                                     }else if(fieldsToClearOrRemove.value[i].fieldType == 'lookup'){
                                        $scope.CustomerModal.CustomerInfo[key] = null;
                                     }else if(fieldsToClearOrRemove.value[i].fieldType == 'dropdown'){
                                     }
                                   
                                     
                                   // debug('******'+$scope.CustomerModal.CustomerInfo['IsVendor']);
                                    
                                    
                                     if(fieldrel == 'CountryState') {
                                        $scope.CustomerModal.SetDafaultBillingCountry();
                                        $scope.CustomerModal.SetDafaultBillingState();
                                     } else if(fieldrel == 'ShippingCountryState') {
                                        $scope.CustomerModal.SetDafaultShippingCountry();
                                        $scope.CustomerModal.SetDafaultShippingState();
                                     }
                                 }
                             } else {   
                                 for(i=0; i < fieldsToClearOrRemove.value.length;i++) {
                                     var key= fieldsToClearOrRemove.value[i].val ;
                                     if(fieldsToClearOrRemove.value[i].fieldType == 'text'){
                                        $scope.CustomerModal.CustomerInfo[key] = "";
                                     }else if(fieldsToClearOrRemove.value[i].fieldType == 'boolean'){
                                        debug('type boolean');
                                        $scope.CustomerModal.CustomerInfo[key] = false;
                                     }else if(fieldsToClearOrRemove.value[i].fieldType == 'lookup'){
                                        $scope.CustomerModal.CustomerInfo[key] = null;
                                     }else if(fieldsToClearOrRemove.value[i].fieldType == 'dropdown'){
                                     
                                     }
                                     
                                     
                                     
                                     if(fieldrel == 'PriceLevel') {
                                        
                                        $scope.CustomerModal.SetDafaultPriceLevel();
                                        
                                     }
                                     else if(fieldrel == 'Birthdate')
                                     {
                                        $scope.CustomerModal.SetDefaultBirthday();
                                     }else if(fieldrel=='IsVendor')
                                      {
                                        $scope.CustomerModal.SetDafaultPurchaseTax();
                                     
                                     }
                                     
                                     $scope.CustomerModal.AdditionalFieldsInfo[key].isPrimary = false;
                                 }
                             }
                             debug('******'+$scope.CustomerModal.CustomerInfo['IsVendor']);
                             
                             angular.element('#' + targetIdToFocus).focus();                                 
                         }
                         


                          $scope.CustomerModal.ClearAndRemoveSectionField=function(index, fieldrel, fieldId)
                          {         

                                    //debug(fieldId);
                                    if(index==0){

                                        var fieldsToClearOrRemove = $scope.CustomerModal.ManageIconCustomerDetails[0][fieldrel];
                                        debug(fieldsToClearOrRemove);
                                        for(i=0; i < fieldsToClearOrRemove.value.length; i++)


                                        {   
                                            for(i=0; i < fieldsToClearOrRemove.value.length; i++) {
                                                var key = fieldsToClearOrRemove.value[i].val ;

                                                if(fieldsToClearOrRemove.value[i].fieldType == 'text'){
                                                    $scope.CustomerModal.CustumerUnitModal[0][key]= "";
                                                } else if(fieldsToClearOrRemove.value[i].fieldType == 'boolean'){
                                                    $scope.CustomerModal.CustumerUnitModal[0][key]= false;
                                                }else if(fieldsToClearOrRemove.value[i].fieldType == 'lookup'){
                                                    $scope.CustomerModal.CustumerUnitModal[0][key] = null;





                                                }else if(fieldsToClearOrRemove.value[i].fieldType == 'dropdown'){
                                                    
                                                }
                                                debug('Hello ' + key);
                                            }
                                        angular.element('#'+ fieldId).focus();
                                        }
                                    }
                                    else{


                                        $scope.CustomerModal.CustumerUnitModal.splice(index,1);
                                        $scope.CustomerModal.UnitMakeSelected.splice(index,1);
                                        $scope.CustomerModal.UnitModel.splice(index,1);
                                        $scope.CustomerModal.CustomerValidationCOU.splice(index,1);




                                    }

                          }




                         $scope.CustomerModal.getOtherSimilarCustomer= function(){
                                            
                      
                                                            var SimilarCustomerJson ={};

                                                            //SimilarCustomerJson=$scope.CustomerModal.CustomerInfo;
                                                            

                                                            angular.copy($scope.CustomerModal.CustomerInfo, SimilarCustomerJson);
                                                         
                                                            



                                                                if(SimilarCustomerJson['Type'] == 'Individual')
                                                                {   //debug('123');



                                                                    SimilarCustomerJson['BusinessName']="";
                                                                    SimilarCustomerJson['WorkEmail']="";
                                                                    SimilarCustomerJson['WorkNumber']="";
                                                                    
                                                                }
                                                                else
                                                                {




                                                                    SimilarCustomerJson['LastName']="";
                                                                    SimilarCustomerJson['HomeEmail']="";
                                                                    SimilarCustomerJson['HomeNumber']="";
                                                                
                                                                }
                                                                



                                                                debug(SimilarCustomerJson);
                                                                //debug($scope.CustomerModal.CustomerInfo);
                                                                
                                                                


                                addEditCustomerService.getOtherSimilarCustomer(JSON.stringify(SimilarCustomerJson))
                                          .then(function (SimilarCustomer) {
                                                //debug(SimilarCustomer);
                                                $scope.CustomerModal.SimilarCustomers = SimilarCustomer;
                                                  
                                 },


                                 function (errorSearchResult) {          
                                     responseData = errorSearchResult; 
                                });

                
            
                         }
                         


                             $scope.CustomerModal.getSimilarCOUs= function(Vin ){
                
                                addEditCustomerService.getSimilarCOUs(Vin)
                                          .then(function (SimilarCOU) {

                                                 //debug(SimilarCOU) ;

                                                $scope.CustomerModal.SimilarCOU = SimilarCOU;
                                                //debug($scope.CustomerModal.SimilarCOU); 
                                                 
                                 },


                                 function (errorSearchResult) {          
                                     responseData = errorSearchResult; 
                                });

                
            
                         }
                          


                      
                         
                         
                         
                         $scope.CustomerModal.validateForm = function(modelKey){
                            var validationObj = $scope.CustomerModal.CustomerValidation[modelKey];
                            var isError = false;
                            var ErrorMessage = '';
                            var phoneRegEx = /^([0-9\(\)\/\+ \-]*)$/;
                            var emailRegEx = /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/;
                            
                                    var validateType = validationObj.Type; 
                                    //debug('validateType=  '+validateType);
                                    if(validateType.indexOf('Minlength') > -1){
                                        if($scope.CustomerModal.CustomerInfo[modelKey] != undefined && $scope.CustomerModal.CustomerInfo[modelKey]!= '' && $scope.CustomerModal.CustomerInfo[modelKey].length < validationObj.Minlength){
                                            isError = true;
                                            ErrorMessage = 'Min length should be '+validationObj.Minlength;
                                        }
                                    }

                                    if(validateType.indexOf('Maxlength') > -1){
                                        if($scope.CustomerModal.CustomerInfo[modelKey] != undefined && $scope.CustomerModal.CustomerInfo[modelKey]!= '' && $scope.CustomerModal.CustomerInfo[modelKey].length > validationObj.Maxlength){
                                            isError = true;
                                            ErrorMessage = 'Max length should be '+validationObj.Maxlength;
                                        }
                                    }
                                    
                                    if(validateType.indexOf('phone') > -1){
                                        if($scope.CustomerModal.CustomerInfo[modelKey] != undefined && $scope.CustomerModal.CustomerInfo[modelKey]!= '' && !phoneRegEx.test($scope.CustomerModal.CustomerInfo[modelKey])){
                                            isError = true;
                                            ErrorMessage = 'Invalid Phone Number';
                                        }
                                    }

                                    if(validateType.indexOf('email') > -1){
                                        debug('validating email');
                                        if($scope.CustomerModal.CustomerInfo[modelKey] != undefined && $scope.CustomerModal.CustomerInfo[modelKey]!= '' && !emailRegEx.test($scope.CustomerModal.CustomerInfo[modelKey])){
                                            isError = true;
                                            ErrorMessage = 'Invalid Email Id';
                                        }
                                    }

                                    if(validateType.indexOf('required') > -1){
                                        if($scope.CustomerModal.CustomerInfo[modelKey] == undefined || $scope.CustomerModal.CustomerInfo[modelKey] == ''){
                                            isError = true;
                                            ErrorMessage = 'Field is Required';
                                        }
                                    }
                                    debug($scope.CustomerModal.CustomerInfo);
                                    debug($scope.CustomerModal.CustomerValidation[modelKey]);
                                    $scope.CustomerModal.CustomerValidation[modelKey]['isError'] = isError;
                                    $scope.CustomerModal.CustomerValidation[modelKey]['ErrorMessage'] = ErrorMessage;
                         
                         }
                         
                           
                            
                         
                         
                         
                         $scope.CustomerModal.ValidateCou = function(index, modelKey)
                         {
                                angular.element('[data-toggle="tooltip"]').tooltip({placement : 'bottom'});
                                var fieldValue = $scope.CustomerModal.CustumerUnitModal[index][modelKey];
                                var numericRegex = /^[0-9]*$/;
                                
                                 var ValidateType=$scope.CustomerModal.CustomerValidationCOU[index][modelKey].Type;
                                 if(ValidateType.indexOf('VIN') > -1){


                                        if( fieldValue !='' && fieldValue != undefined)
                                        {
                                            result=$scope.CustomerModal.validateVin(fieldValue);
                                           
                                        }
                                        else
                                        {
                                            result=true;    
                                        }
                                        
                                         if(result==false)
                                            {

                                                 $scope.CustomerModal.CustomerValidationCOU[index][modelKey].isError=true;
                                                 $scope.CustomerModal.CustomerValidationCOU[index][modelKey].ErrorMessage='Invalid Vin No';
                                                    
                                            } else {
                                                 $scope.CustomerModal.CustomerValidationCOU[index][modelKey].isError=false;
                                                 $scope.CustomerModal.CustomerValidationCOU[index][modelKey].ErrorMessage='';
                                            }


                                 }
                                 if(ValidateType.indexOf('Numeric') > -1){
                                        if( fieldValue !='' && fieldValue != undefined && !numericRegex.test(fieldValue))
                                        {       
                                              $scope.CustomerModal.CustomerValidationCOU[index][modelKey].isError=true;
                                              $scope.CustomerModal.CustomerValidationCOU[index][modelKey].ErrorMessage='Invalid Milage Value';
                                        } else {
                                             $scope.CustomerModal.CustomerValidationCOU[index][modelKey].isError=false;
                                              $scope.CustomerModal.CustomerValidationCOU[index][modelKey].ErrorMessage='';
                                        }
                                 }
                                 debug($scope.CustomerModal.CustomerValidationCOU);




                         };



                         
                         // VIN Code validator
                         $scope.CustomerModal.validateVin = function(vin) {
                              // Reject based on bad pattern match
                            

                              no_ioq = '[a-hj-npr-z0-9]';  // Don't allow characters I,O or Q
                              matcher = new RegExp("^" + no_ioq + "{8}[0-9xX]" + no_ioq + "{8}$", 'i'); // Case insensitive
                              if(vin.match(matcher) == null)
                              { 
                                return false;
                              }




                              // Reject base on bad check digit
                             


                              return $scope.CustomerModal.checkDigitCalculation(vin);
                         };
                         
                         
                         
                        





                         $scope.CustomerModal.checkDigitCalculation = function(vin) {
                              var upperCaseVin = vin.toUpperCase();
                            

                              var letterMap = {A : 1, B : 2, C : 3, D : 4, E : 5, F : 6, G : 7, H : 8,
                                            J : 1, K : 2, L : 3, M : 4, N : 5,        P : 7,        R : 9,
                                                   S : 2, T : 3, U : 4, V : 5, W : 6, X : 7, Y : 8, Z : 9,


                                            1 : 1, 2 : 2, 3 : 3, 4 : 4, 5 : 5, 6 : 6, 7 : 7, 8 : 8, 9 : 9, 0 : 0
                                            };

                              var weights = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2];
                            
                              var products = 0;


                              for(var i = 0; i < upperCaseVin.length; i++) {
                                // alert('adding ' + letterMap[vin[i]] + ' * ' + weights[i] + ' to ' + products);
                                products += letterMap[upperCaseVin[i]] * weights[i];
                              }

                              var checkDigitShouldBe = products % 11;
                              if(checkDigitShouldBe == 10) {
                                    checkDigitShouldBe = 'X';
                              }
                            


                              return checkDigitShouldBe == upperCaseVin[8];
                        }
                          
                         
                         
                       //Modals  

                       
                       $scope.CustomerModal.ManageIconCustomerDetails=
                       [ 
                            {
                                FnameLname:{value:[{val:'FirstName', fieldType:'text'},{val:'LastName', fieldType:'text' }],isPrimary:true},
                                NickName:{value:[{val:'Nickname', fieldType:'text' }],isPrimary:true},
                                BusinessName:{value:[{val:'BusinessName', fieldType:'text'}],isPrimary:true},
                                CompanyName:{value:[{val:'CompanyName', fieldType:'text'}],isPrimary:false},
                                HomeEmail:{value:[{val:'HomeEmail', fieldType:'text'}],isPrimary:true },
                                WorkEmail:{value:[{val:'WorkEmail', fieldType:'text'}],isPrimary:true },
                                HomePhone:{value:[{val:'HomeNumber', fieldType:'text'}],isPrimary:true },
                                WorkPhone:{value:[{val:'WorkNumber', fieldType:'text'}],isPrimary:true },
                                BillingAddLine1:{value:[{val:'BillingStreet1', fieldType:'text'}],isPrimary:true},
                                BillingAddLine2:{value:[{val:'BillingStreet2', fieldType:'text'}],isPrimary:true},
                                CountryState:{value:[{val:'BillingCountry', fieldType:'lookup'},{val:'BillingState', fieldType:'lookup'}],isPrimary:true},
                                ShippingCountryState:{value:[{val:'ShippingCountry', fieldType:'lookup'},{val:'ShippingState', fieldType:'lookup'}],isPrimary:true},
                                CityPostal:{value:[{val:'BillingPostalCode', fieldType:'text'},{val:'BillingCity', fieldType:'text'}],isPrimary:true},
                                Birthdate : {value:[{val:'Birthdate', fieldType:'dropdown'}],isPrimary:false},
                                LinkedInLink:{value:[{val:'LinkedInLink', fieldType:'text'}],isPrimary:false},
                                TwitterLink:{value:[{val:'TwitterLink', fieldType:'text'}],isPrimary:false},
                                FacebookLink:{value:[{val:'FacebookLink', fieldType:'text'}],isPrimary:false},
                                Company:{value:[{val:'Company', fieldType:'text'}],isPrimary:false},
                                JobTitle:{value:[{val:'JobTitle', fieldType:'text'}],isPrimary:false},
                                PriceLevel :{value:[{val:'PriceLevel', fieldType:'lookup'}],isPrimary:false},
                                OtherPhone : {value:[{val:'OtherPhone', fieldType:'text'}],isPrimary:false},
                                OtherEmail : {value:[{val:'OtherEmail', fieldType:'text'}],isPrimary:false},
                                IsVendor: {value:[{val:'IsVendor', fieldType:'boolean'}],isPrimary:false},
                                Active:{value:[{val:'Active', fieldType:'boolean'}],isPrimary:false},
                                CustomerUnitYearMake:{value:[{val:'Year', fieldType:'lookup'},{val:'Make', fieldType:'lookup'}],isPrimary:true},
                                CustomerUnitModelSubModel:{value:[{val:'Model', fieldType:'lookup'},{val:'Submodel', fieldType:'text'}],isPrimary:true},
                                CustomerUnitModelVin:{value:[{val:'VIN', fieldType:'text'}],isPrimary:false},
                                CustomerUnitLicensePlate:{value:[{val:'Plate', fieldType:'text'}],isPrimary:true},
                                CustomerUnitMilage:{value:[{val:'Mileage', fieldType:'text'}],isPrimary:true},
                                customerUnitColor:{value:[{val:'Color', fieldType:'text'}],isPrimary:true}
                            }

                       ]
                       
                        
                        

                         
                        

                           
                        
                        
                        $scope.CustomerModal.AdditionalFieldsSearch ='';
                        
                       $scope.CustomerModal.ChangeCustomerType= function(CustomerType)
                        {
                                $scope.CustomerModal.CustomerInfo.Type=CustomerType;
                                

                                /*if($scope.CustomerModal.CustomerInfo.Type=="Individual")
                                {

                                    $scope.CustomerModal.CustomerInfo={WorkNumberSMS:false,MobileNumberSMS:false,HomeNumberSMS:true};
                                }
                                else
                                {



                                    $scope.CustomerModal.CustomerInfo={WorkNumberSMS:true,MobileNumberSMS:false,HomeNumberSMS:false};
                                }*/

                        }
                        
                        $scope.FilterAdditionalFields = function(items) {
                            var result = {};
                            angular.forEach(items, function(value, key) {

                                if (value.label.toLowerCase().indexOf($scope.CustomerModal.AdditionalFieldsSearch) != -1) {
                                    result[key] = value;
                                }
                            });
                            return result;
                        }
                          
                          $scope.CustomerModal.ShowAdditionalField = function(key){
                            if(key == 'CustomerUnit'){
                                var unit = {Year:null, Make:null,Model:null, SubModel:null,VIN:'',Plate:'',Mileage:null,Color:''};
                                $scope.CustomerModal.CustumerUnitModal.push(unit);
                                var validation = {

                                                    VIN:{isError : false, ErrorMessage:'',Type:'VIN'},
                                                    Mileage:{isError : false, ErrorMessage:'', Type:'Numeric'}
                                                }     

                                $scope.CustomerModal.CustomerValidationCOU.push(validation);
                                 
                            }
                            else{

                                $scope.CustomerModal.AdditionalFieldsInfo[key].isPrimary = true;
                                debug($scope.CustomerModal.AdditionalFieldsInfo[key].isPrimary);
                            }
                            

                            var targetId = $scope.CustomerModal.AdditionalFieldsInfo[key].fieldId;
                            debug( 'Focused Id ' + targetId);
                            
                             if(key == 'CustomerUnit'){
                                    
                                            var Id=($scope.CustomerModal.CustumerUnitModal.length-1);
                                            var targetid='vinId'+Id;
                                            setTimeout(function() { 
                                            if(targetid != undefined) {
                                                angular.element('#'+targetid).focus() ;
                                                }
                                            }, 10);
                                             
                                             angular.element('.dropdown-menu').removeClass("keep_open");
                                              

                                }       
                             else
                             {
                                setTimeout(function() { 
                                    if(targetId != undefined) {
                                        angular.element('#'+targetId).focus() ;
                                    }
                                }, 10);
                            }   
                        
                        }
                        
                        $scope.launchAlert = function (bool) {
                                alert('!!! first function call to finish');
                        };
                        

                        
                        $scope.CustomerModal.ChangeMonth=function()
                        {
                                            if($scope.CustomerModal.BirthyearSelected.year != 'undefined' && $scope.CustomerModal.BirthyearSelected.year != '' && $scope.CustomerModal.BirthyearSelected.year != null)
                                                    {
                                                            
                                                            
                                                            $scope.CustomerModal.BirthDays=[];
                                                            $scope.CustomerModal.BirthDaySelected={};
                                                            
                                                            var month= parseInt($scope.CustomerModal.BirthmonthSelected) - 1;
                                                            var year = parseInt($scope.CustomerModal.BirthyearSelected.year);
                                                    
                                                            var monthStart = new Date(year , month  , 1);
                                                            var monthEnd = new Date(year , month  + 1, 1);
                                                            var monthLength = (monthEnd - monthStart) / (1000 * 60 * 60 * 24);
                                                            
                                                            for( i=1 ; i < monthLength + 1; i++ )
                                                            {
                                                                var days={day: i };
                                                                $scope.CustomerModal.BirthDays.push(days);
                                                            
                                                            }
                                            
                                                            
                                                            
                                                    }
                                            
                        }
                        
                        $scope.CustomerModal.ChangeYear=function()
                        {

                                    
                                            if(($scope.CustomerModal.BirthmothSelected != 'undefined' ) && ($scope.CustomerModal.BirthmothSelected != '-1' ) )
                                                    {
                                                            
                                                            
                                                            
                                                            $scope.CustomerModal.BirthDays=[];
                                                            $scope.CustomerModal.BirthDaySelected={};
                                                            var month= parseInt($scope.CustomerModal.BirthmonthSelected) - 1;
                                                            var year = parseInt($scope.CustomerModal.BirthyearSelected.year);
                                                    
                                                            var monthStart = new Date(year , month  , 1);
                                                            var monthEnd = new Date(year , month  + 1, 1);
                                                            var monthLength = (monthEnd - monthStart) / (1000 * 60 * 60 * 24);
                                                            
                                                            for( i=1 ; i < monthLength + 1; i++ )
                                                            {

                                                                var days={day: i };
                                                                $scope.CustomerModal.BirthDays.push(days);
                                                            
                                                            }
                                            
                                                            
                                                            
                                                    }
                                    
                                    
                        }

                        
                        
                        $scope.CustomerModal.changeUnitMake =function(index){
                        
                                $scope.CustomerModal.UnitModel[index]=  $scope.CustomerModal.CustomerMasterData.UnitModelList[0].unitMakeNameToUnitModelMap[$scope.CustomerModal.UnitMakeSelected[index].UnitMakeName];
                                $scope.CustomerModal.CustumerUnitModal[index].Make=$scope.CustomerModal.UnitMakeSelected[index].Id;
                                

                        }
                        
                        $scope.CustomerModal.changeUnitYear=function(index)
                        {
                                    if( typeof $scope.CustomerModal.UnitYearSelected[index].modelyear =='undefined')
                                    {
                                        $scope.CustomerModal.CustumerUnitModal[index].Year=null;
                                    }
                                    else 
                                    {
                                    
                                     $scope.CustomerModal.CustumerUnitModal[index].Year = $scope.CustomerModal.UnitYearSelected[index].modelyear;
                                    }
                                    
                                    
                        }
                        
                        $scope.CustomerModal.changeUnitmodel =function(index){
                        

                            $scope.CustomerModal.CustumerUnitModal[index].Model=$scope.CustomerModal.UnitModelSelected[index].Id;
                            $scope.CustomerModal.CustumerUnitModal[index].SubModel=$scope.CustomerModal.UnitModelSelected[index].Id;
                            

                        
                                

                        }
                                                

                       $scope.CustomerModal.SetCustomerActiveStatus= function(status)
                       {
                                
                                if(status==false){
                                        angular.element('.ConfirmBox-overlay').show();
                                }
                                else
                                {
                                    $scope.CustomerModal.CustomerInfo.Active= true;
                                
                                
                                }
                                
                       }
                       
                       
                       
                    
                        
                        
                    
        
        
        
                    
                       
                       $scope.CustomerModal.DeactiveCustomer= function(status)

                       {
                                
                                if(status==false){
                                
                                        angular.element('.ConfirmBox-overlay').hide();
                                        
                                        
                                }
                                else
                                {
                                        $scope.CustomerModal.CustomerInfo.Active= false;
                                        angular.element('.ConfirmBox-overlay').hide();
                                }
                                
                       }
                        
                        $scope.CustomerModal.SetVendorActive= function(status)
                       {
                               
                            
                                
                               $scope.CustomerModal.CustomerInfo['IsVendor']=status;

                                if($scope.CustomerModal.CustomerInfo['IsVendor'] ==true)
                               {
                                    $scope.CustomerModal.SetDafaultPurchaseTax();
                               }
                            
                                
                       }
                       
                       
                        
                            $scope.CustomerModal.SetDafaultBillingCountry= function ()
                               {
                                           for(i=0;i < $scope.CustomerModal.CustomerMasterData.CountryList.length ; i++)
                                                {
                                                        if($scope.CustomerModal.CustomerMasterData.CountryList[i].IsDefault)
                                                        {
                                                            $scope.CustomerModal.SelectedCountry = $scope.CustomerModal.CustomerMasterData.CountryList[i];
                                                        }
                                                }
                               }



                        
                        
                               $scope.CustomerModal.SetDafaultBillingState =function()
                               {
                                            $scope.CustomerModal.State= $scope.CustomerModal.CustomerMasterData.StateList[0].countryNameToStateMap[$scope.CustomerModal.SelectedCountry.CountryName];
                                            
                                                for(i=0;i < $scope.CustomerModal.State.length ; i++)
                                                {
                                                        if( $scope.CustomerModal.State[i].IsDefault)
                                                        {
                                                            $scope.CustomerModal.SelectedState = $scope.CustomerModal.State[i];
                                                            
                                                        }
                                                }
                               } 
                       
                   
                       
                                $scope.CustomerModal.SetDafaultShippingCountry= function()
                               {
                                        for(i=0;i < $scope.CustomerModal.CustomerMasterData.CountryList.length ; i++)
                                            {           
                                                    
                                                    if( $scope.CustomerModal.CustomerMasterData.CountryList[i].IsDefault )
                                                    {
                                                       $scope.CustomerModal.SelectedShippingCountry = $scope.CustomerModal.CustomerMasterData.CountryList[i];
                                                    }
                                            }
                               }
                               
                       
                              $scope.CustomerModal.SetDafaultShippingState =function()
                               {
                                     $scope.CustomerModal.ShippingState= $scope.CustomerModal.CustomerMasterData.StateList[0].countryNameToStateMap[$scope.CustomerModal.SelectedShippingCountry.CountryName];
                                                                 
                                     for(i=0;i < $scope.CustomerModal.ShippingState.length ; i++)
                                        {           
                                                 if( $scope.CustomerModal.State[i].IsDefault)
                                                {
                                                   $scope.CustomerModal.SelectedShippingState=$scope.CustomerModal.ShippingState[i];
                                                }
                                        }
                               }
                               
                       
                              $scope.CustomerModal.SetDafaultPriceLevel =function()
                                {
                                        for(i=0 ; i < $scope.CustomerModal.PriceLevel.length ; i++)
                                        {
                                                if( $scope.CustomerModal.PriceLevel[i].IsDefault)
                                                {
                                                    $scope.CustomerModal.SelectedPriceLevel=$scope.CustomerModal.PriceLevel[i];
                                                }
                                        }

                                }
                       
                       
                       
                              $scope.CustomerModal.SetDafaultSalesTax =function(){ 
                                        for(i=0 ; i < $scope.CustomerModal.SalesTax.length ; i++)
                                        {
                                            if( $scope.CustomerModal.SalesTax[i].IsDefault)
                                                {   
                                                    $scope.CustomerModal.SelectedSalesTax=$scope.CustomerModal.SalesTax[i];
                                                    
                                                }
                                        }                             
                              }
                              


                            $scope.CustomerModal.SetDafaultPurchaseTax =function(){ 
                                        for(i=0 ; i < $scope.CustomerModal.SalesTax.length ; i++)
                                        {
                                            if( $scope.CustomerModal.SalesTax[i].IsDefault)
                                                {   
                                                    $scope.CustomerModal.VendorSelectedSalesTax=$scope.CustomerModal.SalesTax[i];
                                                    
                                                }
                                        }                             


                             }

                            $scope.CustomerModal.SetDefaultBirthday=function()
                            {

                                    $scope.CustomerModal.BirthdaySelected={};
                                    $scope.CustomerModal.BirthyearSelected={}; 
                                    $scope.CustomerModal.BirthmonthSelected="";
                            
                            }
                       
                       

                        // Need to remove later
                        $scope.CustomerModal.LoadCustomerInfoDetail= function()
                        {
                                


                        }
                         



                        $scope.CustomerModal.changeBillingCountry = function(){
                            $scope.CustomerModal.State = $scope.CustomerModal.CustomerMasterData.StateList[0].countryNameToStateMap[$scope.CustomerModal.SelectedCountry.CountryName];
                            $scope.CustomerModal.SelectedState = $scope.CustomerModal.State[0];
                        }
                          $scope.CustomerModal.changeShippingCountry = function(){
                                

                                $scope.CustomerModal.ShippingState=$scope.CustomerModal.CustomerMasterData.StateList[0].countryNameToStateMap[$scope.CustomerModal.SelectedShippingCountry.CountryName];
                                $scope.CustomerModal.SelectedShippingState=$scope.CustomerModal.ShippingState[0];
                        }
                        
                        $scope.CustomerModal.changePriceLevel= function(){
                             

                             //debug( $scope.CustomerModal.selectedPriceLevel);
                             

                        }
                        
                        
                         $scope.CustomerModal.changeSalesTax= function()

                        {
                                 debug( $scope.CustomerModal.SelectedSalesTax);

                                 

                        }

                        $scope.CustomerModal.SetAddressData= function()
                        {


                                    //set Default Country                                   
                                        $scope.CustomerModal.CustomerInfo.IsBothAddressSame=($scope.CustomerModal.CustomerInfo.IsBothAddressSame == true) ? false : true;
                                        $scope.CustomerModal.CustomerInfo.ShippingStreet1=$scope.CustomerModal.CustomerInfo.BillingStreet1;
                                        $scope.CustomerModal.CustomerInfo.ShippingStreet2=$scope.CustomerModal.CustomerInfo.BillingStreet2;
                                        $scope.CustomerModal.CustomerInfo.ShippingCity= $scope.CustomerModal.CustomerInfo.BillingCity;
                                        $scope.CustomerModal.CustomerInfo.ShippingPostalCode=$scope.CustomerModal.CustomerInfo.BillingPostalCode;
                                        $scope.CustomerModal.ShippingState =  $scope.CustomerModal.State;
                                        $scope.CustomerModal.SelectedShippingState=$scope.CustomerModal.SelectedState;
                                        $scope.CustomerModal.SelectedShippingCountry=$scope.CustomerModal.SelectedCountry;
                                        $scope.CustomerModal.ShippingState =  $scope.CustomerModal.State;
                                        $scope.CustomerModal.SelectedShippingState=$scope.CustomerModal.SelectedState;

										$scope.CustomerModal.CustomerInfo.sameBillingAddress = !$scope.CustomerModal.CustomerInfo.sameBillingAddress;

                                    


                        }
                        
                        $scope.CustomerModal.CancelCustomer=function()
                        {
                                $scope.selectedObject.ChangeRecords=0;
                                angular.element('#pop').modal('hide');
                        
                        }
                        //save customer Functionality
                        $scope.CustomerModal.SaveCustomer= function()
                        {
                        debug('Start');
                        debug($scope.CustomerModal.BirthdaySelected);
                           debug($scope.CustomerModal.CustomerInfo);

                            for (var key in $scope.CustomerModal.CustomerValidation) {
                                if ($scope.CustomerModal.CustomerValidation.hasOwnProperty(key)) {
                                    var validationObj = $scope.CustomerModal.CustomerValidation[key];
                                    if(validationObj.Type.indexOf('required') > -1) {
                                        if($scope.CustomerModal.CustomerInfo[key] == undefined || $scope.CustomerModal.CustomerInfo[key] == ""){
                                            $scope.CustomerModal.CustomerValidation[key]['isError'] = true;
                                            $scope.CustomerModal.CustomerValidation[key]['ErrorMessage'] = 'Field is Required';
                                        }
                                    }
                                }
                            }
                            
                            if($scope.CustomerModal.CustomerInfo.Type == 'Individual') {
                                $scope.CustomerModal.CustomerValidation['BusinessName'].isError = false;
                                
                            } else {
                                $scope.CustomerModal.CustomerValidation['FirstName'].isError = false;
                                $scope.CustomerModal.CustomerValidation['LastName'].isError = false;
                                
                            }
                            
                            
                        
                            
                            for (var key in $scope.CustomerModal.CustomerValidation) {
                                if ($scope.CustomerModal.CustomerValidation.hasOwnProperty(key)) {
                                    var validationObj = $scope.CustomerModal.CustomerValidation[key];
                                    if(validationObj.isError == true) {
                                        debug('error Present in ' + key);
                                        return;
                                    }
                                }
                            }
                            
                            for (var key in $scope.CustomerModal.CustomerInfo) {
                                if(key == 'PreferredPhone' || key == 'PreferredEmail' || key == 'PreferredSMS') {
                                    if($scope.CustomerModal.CustomerInfo[key] != null && $scope.CustomerModal.CustomerInfo[key] != undefined && $scope.CustomerModal.CustomerInfo[key] != "") {
                                        var preferredValue = $scope.CustomerModal.CustomerInfo[key];
                                        if($scope.CustomerModal.CustomerInfo[preferredValue] == null || $scope.CustomerModal.CustomerInfo[preferredValue] == undefined) {
                                            $scope.CustomerModal.CustomerValidation[preferredValue].isError = true;
                                            $scope.CustomerModal.CustomerValidation[preferredValue].ErrorMessage = 'Field is required';
                                            return;
                                        }
                                    }
                                }
                            }
                            
                            for (var i = 0; i < $scope.CustomerModal.CustomerValidationCOU.length; i++) {
                                var validateObj = $scope.CustomerModal.CustomerValidationCOU[i];
                                for (var key in validateObj) {
                                    if (validateObj.hasOwnProperty(key)) {
                                        var validationObj = validateObj[key];
                                        if(validationObj.isError == true) {
                                            debug('error Present in ' + key + ' Of ' + (i+1) + ' COU');
                                            return;
                                        }
                                    }
                                }
                            }
                            
                            
                            if($scope.CustomerModal.SimilarCOU.length > 0 ) {
                                Notification.error('VIN is already Present');
                                return;
                            }
                            if($scope.CustomerModal.AdditionalFieldsInfo['Birthdate'].isPrimary ==true)
                            {               
                                    
                                        var Setvalue=0;
                                        
                                        if(typeof $scope.CustomerModal.BirthyearSelected['year']  == 'undefined'  )
                                        {
                                            Setvalue++
                                            
                                        }
                                         if(typeof $scope.CustomerModal.BirthdaySelected['day']  == 'undefined')
                                        {
                                                Setvalue++
                                        
                                        }
                                        if($scope.CustomerModal.BirthmonthSelected  == "")
                                        {
                                        
                                                Setvalue++
                                        }
                                        
                                        if(Setvalue == 0 )
                                        {
                                            
                                            $scope.CustomerModal.CustomerInfo['BirthDay'] = $scope.CustomerModal.BirthdaySelected.day;
                                            $scope.CustomerModal.CustomerInfo['BirthMonth'] = $scope.CustomerModal.BirthmonthSelected;
                                            $scope.CustomerModal.CustomerInfo['BirthYear'] = $scope.CustomerModal.BirthyearSelected.year;
                                            
                                        }
                                        else if(Setvalue != 3 && Setvalue !=0  ){
                                            Notification.error('Invalid BirthDay Date'); 
                                                return;
                                        }
                                        else{
                                            $scope.CustomerModal.CustomerInfo['BirthDay'] = null;
                                            $scope.CustomerModal.CustomerInfo['BirthMonth'] = null;
                                            $scope.CustomerModal.CustomerInfo['BirthYear'] = null;
                                            
                                        }
                                        
                                        
                                        
                                        
                                
                                
                            }
                            else{
                                    
                                            $scope.CustomerModal.CustomerInfo['BirthDay'] = null;
                                            $scope.CustomerModal.CustomerInfo['BirthMonth'] = null;
                                            $scope.CustomerModal.CustomerInfo['BirthYear'] = null;
                            










                            }
                            
                            /*11111111111111111
                            for (var key in $scope.CustomerModal.AdditionalFieldsInfo) {
                                if ($scope.CustomerModal.AdditionalFieldsInfo.hasOwnProperty(key)) {
                                    var validationObj = $scope.CustomerModal.AdditionalFieldsInfo[key];
                                    if(validationObj['isPrimary'] == false) {
                                        $scope.CustomerModal.CustomerInfo[key] = "";
                                    }
                                }
                            }
                            */
                            if($scope.CustomerModal.CustomerInfo.Type == 'Individual') {
                                
                                $scope.CustomerModal.CustomerInfo['WorkNumber'] = '';
                                $scope.CustomerModal.CustomerInfo['WorkEmail'] = '';
                            } else {
                                $scope.CustomerModal.CustomerInfo['HomeNumber'] = '';
                                $scope.CustomerModal.CustomerInfo['HomeEmail'] = '';
                                $scope.CustomerModal.CustomerInfo['CompanyName'] = '';
                                $scope.CustomerModal.CustomerInfo['JobTitle'] = '';
                                $scope.CustomerModal.CustomerInfo['BirthYear'] = null;
                                $scope.CustomerModal.CustomerInfo['BirthDay'] = null;
                                $scope.CustomerModal.CustomerInfo['BirthMonth'] = null;
                            }
                            
                            
                            $scope.CustomerModal.CustomerInfo.BillingCountry = $scope.CustomerModal.SelectedCountry['CountryName'];
                            $scope.CustomerModal.CustomerInfo.BillingState = $scope.CustomerModal.SelectedState['StateName'];
                            
                            if($scope.CustomerModal.CustomerInfo.IsBothAddressSame != true ) {
                                $scope.CustomerModal.CustomerInfo.ShippingCountry = $scope.CustomerModal.SelectedShippingCountry['CountryName'];
                                $scope.CustomerModal.CustomerInfo.ShippingState = $scope.CustomerModal.SelectedShippingState['StateName'];
                            } else {
                                $scope.CustomerModal.CustomerInfo.ShippingCountry =$scope.CustomerModal.SelectedCountry['CountryName'];
                                $scope.CustomerModal.CustomerInfo.ShippingState =  $scope.CustomerModal.SelectedState['StateName'];
                            }
                            




                            if($scope.CustomerModal.AdditionalFieldsInfo['PriceLevel'].isPrimary == true) {
                            

                                $scope.CustomerModal.CustomerInfo.PriceLevelId = $scope.CustomerModal.SelectedPriceLevel.Id;
                            }
                            else
                            { 
                                $scope.CustomerModal.CustomerInfo.PriceLevelId = null;
                            }
                            
                            if( $scope.CustomerModal.AdditionalFieldsInfo['IsVendor'].isPrimary == true && $scope.CustomerModal.CustomerInfo['IsVendor']==true ){
                            
                                $scope.CustomerModal.CustomerInfo.PurchaseTaxId = $scope.CustomerModal.VendorSelectedSalesTax.Id;
                            }
                            else
                            {
                                 $scope.CustomerModal.CustomerInfo.PurchaseTaxId = null 
                            }
                            
                            
                            var deferred = $q.defer();
                             deferred.promise
                            .then
                            (function(result){
                                
                                return  addEditCustomerService.saveCustomer(angular.toJson($scope.CustomerModal.CustomerInfo),angular.toJson($scope.CustomerModal.CustumerUnitModal));
                                 debug(result);
                                 
                            })
                            .then
                            (function(result){
                                    if($scope.$parent.ViewCustomer.saveCustomer != undefined){
	                                    $scope.$parent.ViewCustomer.saveCustomer(result);
                                    }
                                    Notification.success('Customer Successfully Saved');
                                    angular.element('#pop').modal('hide');
                                    return 'Sucess';
                                
                            });
                            
                            deferred.resolve('1');

                        }
                        
                        $scope.CustomerModal.markFavourite = function(key, modalName){ 
                            if($scope.CustomerModal.CustomerInfo[key] == modalName){
                                $scope.CustomerModal.CustomerInfo[key] = '';
                                //var type = $scope.CustomerModal.CustomerValidation[modalName].Type;
                                //$scope.CustomerModal.CustomerValidation[modalName].Type=type.replace(',required', '');
                                //$scope.CustomerModal.CustomerValidation[modalName].isError = false;
                                //$scope.CustomerModal.CustomerValidation[modalName].ErrorMessage = "";
                                //debug($scope.CustomerModal.CustomerValidation[modalName].Type);
                                
                                if(modalName == 'HomeNumber' && key == 'PreferredSMS'){
                                    $scope.CustomerModal.CustomerInfo.HomeNumberSMS = false;
                                }else if(modalName == 'WorkNumber' && key == 'PreferredSMS'){
                                    $scope.CustomerModal.CustomerInfo.WorkNumberSMS = false;
                                }else if(modalName == 'OtherPhone' && key == 'PreferredSMS'){
                                    $scope.CustomerModal.CustomerInfo.MobileNumberSMS = false;
                                }
                            }
                            else{
                                $scope.CustomerModal.CustomerInfo[key] = modalName;
                                //var type=$scope.CustomerModal.CustomerValidation[modalName].Type + ',required';
                                //$scope.CustomerModal.CustomerValidation[modalName].Type = type;
                                //debug($scope.CustomerModal.CustomerValidation[modalName].Type);
                                if(modalName == 'HomeNumber' && key == 'PreferredSMS'){
                                    $scope.CustomerModal.CustomerInfo.HomeNumberSMS = true;
                                }else if(modalName == 'WorkNumber' && key == 'PreferredSMS'){
                                    $scope.CustomerModal.CustomerInfo.WorkNumberSMS = true;
                                }else if(modalName == 'OtherPhone' && key == 'PreferredSMS'){
                                    $scope.CustomerModal.CustomerInfo.MobileNumberSMS = true;
                                } 
                                
                            }
                        }
                        
                        $scope.CustomerModal.markSMS  = function(key){
                            $scope.CustomerModal.CustomerInfo[key] = !$scope.CustomerModal.CustomerInfo[key];
                            if($scope.CustomerModal.CustomerInfo[key] == false){
                                debug('inside  '+$scope.CustomerModal.CustomerInfo.PreferredSMS+'  '+key);
                                if($scope.CustomerModal.CustomerInfo.PreferredSMS == 'HomeNumber' && key == 'HomeNumberSMS'){
                                    $scope.CustomerModal.CustomerInfo.PreferredSMS = '';
                                }
                                if($scope.CustomerModal.CustomerInfo.PreferredSMS == 'WorkNumber'  && key == 'WorkNumberSMS'){
                                    $scope.CustomerModal.CustomerInfo.PreferredSMS = '';
                                }
                                if($scope.CustomerModal.CustomerInfo.PreferredSMS == 'OtherPhone' && key == 'MobileNumberSMS' ){
                                    $scope.CustomerModal.CustomerInfo.PreferredSMS = '';
                                }
                            }
                        
                        } 
                     
                          
                     

                
                
            });
            
            
            
            addEditCustomerModule.service("addEditCustomerService", function ($q) {
                   this.getOtherSimilarCustomer = function (customerInfoJson){
                      var deferred = $q.defer();
                      customerInfoJson = encodeString(customerInfoJson);
                    // make AJAX request to the remote service
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.CustomerOrderCtrl.getOtherSimilarCustomer }', customerInfoJson,
                        function (result, event) {
                           if (event.type == 'exception') {
                                deferred.reject(event.message);
                            } else {
                                var SimilarCustomer = decodeString(result);
                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                SimilarCustomer = SimilarCustomer.replace(re, '');
                                deferred.resolve(JSON.parse(SimilarCustomer));
                            }
                        }, {
                            escape : true
                    });
                    return deferred.promise;
                }
                
                  this.getSimilarCOUs = function (Vin){
                  	Vin = encodeString(Vin);
                    var deferred = $q.defer();
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.CustomerOrderCtrl.getSimilarCOUs }', Vin,
                        function (result, event) {
                           if (event.type == 'exception') {
                                deferred.reject(event.message);
                            } else {
                                var SimilarCOU = decodeString(result);
                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                SimilarCOU = SimilarCOU.replace(re, '');
                                deferred.resolve(JSON.parse(SimilarCOU));
                            }
                        }, {
                            escape : true
                    });
                    return deferred.promise;
                }

                this.getCustomerAllMasterData=function()
                {
                    var deferred = $q.defer();
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.CustomerOrderCtrl.getAllLookupFieldsJSON }',
                        function (result, event) {
                           if (event.type == 'exception') {
                                deferred.reject(event.message);
                            } else {
                                var CustomerMasterData = decodeString(result);
                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                CustomerMasterData = CustomerMasterData.replace(re, '');
                                deferred.resolve(JSON.parse(CustomerMasterData));
                            }
                        }, {
                            escape : true
                    });
                    return deferred.promise;
                }

                 this.saveCustomer=function(CustomerJson,CouJson)
                {
					CustomerJson = encodeString(CustomerJson);
					CouJson = encodeString(CouJson);
                    var deferred = $q.defer();
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.CustomerOrderCtrl.saveCustomer }',CustomerJson,CouJson,
                        function (result, event) {
                           if (event.type == 'exception') {
                                deferred.reject(event.message);
                            } else {
                                var SaveResult = decodeString(result);
                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                SaveResult = SaveResult.replace(re, '');
                                deferred.resolve(JSON.parse(SaveResult));
                            }
                        }, {
                            escape : true
                    });
                    return deferred.promise;
                }

                this.addCustomer = function(coHeaderId,CustomerId)
                {
                	coHeaderId = encodeString(coHeaderId);
                	CustomerId = encodeString(CustomerId);
                    var deferred = $q.defer();
					Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.CustomerOrderCtrl.addCustomer }',coHeaderId,CustomerId,
                        	function(result, event) {
                                if (event.type == 'exception') {
                                //showPopupNotification(event.message, "error");
                                deferred.reject(event.message);
                                } else {
                                var responseData = decodeString(result);
                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                responseData = responseData.replace(re, '');
                                
                                deferred.resolve(JSON.parse(responseData));
                                }
                            }, 
                            {
                                escape : true
                            });
                            
                            return deferred.promise;
                
                }
                
                this.editCustomerDetails= function(customerId)
                {
                	customerId = encodeString(customerId);
                      var deferred = $q.defer();
                      debug(customerId);
                        
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.CustomerOrderCtrl.getCustomer}',
                                         customerId,
                            function (result, event) {
                               if (event.type == 'exception') {
                                    deferred.reject(event.message);
                                } else {
                                    var customer = decodeString(result);
                                    var find = '\'';
                                    var re = new RegExp(find, 'g');
                                    customer = customer.replace(re, '');
                                    debug(customer);
                                    deferred.resolve(JSON.parse(customer));
                                }
                            }, {
                                escape : true
                        });
                        return deferred.promise;

                }



            });
            
          
        </script>



	<div id="pop" class="modal fade"
		ng-controller="addEditCustomerController">
		<div class="modal-dialog" ng-class="{'edit_modal-dialog' : CustomerModal.IsEditMode == true}">
			<div class="modal-content">
				<div class="modal-body popup_container"
					style="width: 100% !important; left: 1% !important;">
					<div class="popupinside">
						<div class="Customer-Suggestion-overlay">
							<div>
								<div class="text">Insert this customer into Customer Order
									?</div>
								<button class="square-btn themebtn_orange pull-right"
									ng-click="CustomerModal.AddSimilarCustomer()">Select</button>

							</div>
						</div>

						<div class="ConfirmBox-overlay">
							<div>
								<div class="modal-content">
									<div class="modal-header">
										<button type="button" class="close" aria-label="Close"
											ng-click="CustomerModal.DeactiveCustomer(false)">
											<span aria-hidden="true">&times;</span>
										</button>
										<h4 class="modal-title">Confirmation Inactive Status</h4>
									</div>
									<div class="modal-body">
										<p>This will deactive the customer.</p>
										<p>It will be imposible to complete customer orders
											against</p>
										<p>this customer, or book them for appointments.</p>
										<br /> Are you sure, you want to continue?
									</div>
									<div class="modal-footer">
										<button type="button" class="btn btn-primary"
											ng-click="CustomerModal.DeactiveCustomer(true)">Yes</button>
										<button type="button" class="btn btn-default"
											ng-click="CustomerModal.DeactiveCustomer(false)">No</button>
									</div>
								</div>


							</div>
						</div>

						<div class="popupleft col-lg-4 col-lg-4" ng-show="CustomerModal.IsEditMode != true">
							<div class="popupleft_container" id="topsection"
								ng-show="CustomerModal.IsEditMode == false || CustomerModal.SimilarCustomers == []">
								<h1 class="letpanel_heading">Existing Customers Like This</h1>
								<i class="fa fa-question-circle helptip"
									style="float: left; font-weight: bold; color: #f89420; margin-top: 20px; margin-bottom: 10px; font-size: 20px;"></i>
								<div class="goldbox col-lg-11 col-md-11"
									ng-repeat="SimilarCustomer in CustomerModal.SimilarCustomers">
									<div class="leftgoldbox">
										<img src="{!URLFOR($Resource.Images, 'gold.png')}"
											style="height: 30px; width: 70px;" />
										<div class="star_container">
											<i class="fa fa-star"></i> <i class="fa fa-star"></i>
										</div>
									</div>
									<div class="rightgoldbox" id="CustomerSugesstionDiv{{$index}}"
										ng-mouseover="CustomerModal.showInfoOverlay('CustomerSugesstionDiv',$index)"
										ng-mouseleave="CustomerModal.hideCustomerInfoOverlay();">
										<div ng-show="SimilarCustomer.Type == 'Individual'">

											<p class="cust_name">{{SimilarCustomer.CustomerName }}</p>
											<p>{{SimilarCustomer.HomeEmail}}</p>
											<p>{{SimilarCustomer.HomeNumber}}</p>
											<a href="#" class="boxedit"> <img 
												src="{!URLFOR($Resource.Images, 'editicon_30x30.png')}" alt="" />
											</a> <a href="#" class="boxenum"> 100 </a>
										</div>
										<div ng-show="SimilarCustomer.Type == 'Business'">
											<p class="cust_name">{{SimilarCustomer.CustomerName }}</p>
											<p>{{SimilarCustomer.WorkEmail}}</p>
											<p>{{SimilarCustomer.WorkNumber}}</p>
											<a href="#" class="boxedit"> <img
												src="{!URLFOR($Resource.Images, 'editicon_30x30.png')}" alt="" />
											</a> <a href="#" class="boxenum"> 100 </a>
										</div>







									</div>
									<div class="bottomgoldbox">
										<i>CUSTOMER ({{SimilarCustomer.Type}})</i>
									</div>
								</div>
							</div>
						</div>
						<div class="popupright" ng-class="{'col-lg-8 col-lg-8': CustomerModal.IsEditMode == false , 'leftBorderNone col-lg-12 col-lg-12': CustomerModal.IsEditMode == true}">
							<div class="right_heading_container col-lg-12 col-md-12">
								<h1 class="right_panel_heading"
									ng-show="CustomerModal.IsEditMode == true && CustomerModal.CustomerInfo.Type == 'Individual'">{{CustomerModal.CustomerInfo.FirstName}}
									{{CustomerModal.CustomerInfo.LastName}}</h1>
								<h1 class="right_panel_heading"
									ng-show="CustomerModal.IsEditMode == true && CustomerModal.CustomerInfo.Type == 'Business'">{{CustomerModal.CustomerInfo.BusinessName}}</h1>
								<h1 class="right_panel_heading"
									ng-show="CustomerModal.IsEditMode == false">New Customer</h1>
								<div class="savecancle_btncntnr">
									<button type="button" id="closemodal"
										class="btn btn-default themebtn_gray"
										ng-click="CustomerModal.CancelCustomer()"
										ng-attr-tabindex="{{CustomerModal.tabIndexValue + 204}}">Cancel</button>
									<button type="button" class="btn btn-default themebtn_orange"
										ng-click="CustomerModal.SaveCustomer()"
										ng-attr-tabindex="{{CustomerModal.tabIndexValue + 202}}">Save</button>
								</div>
							</div>
							<div class="tabbtn_container col-lg-12 col-md-12">
								<button type="button" class="btn themebtn_gray"
									ng-class="{'themebtn_orange' : CustomerModal.CustomerInfo.Type == 'Individual'}"
									ng-click="CustomerModal.ChangeCustomerType('Individual') ">INDIVIDUAL</button>
								<button type="button" class="btn themebtn_gray"
									ng-class="{'themebtn_orange' : CustomerModal.CustomerInfo.Type == 'Business'}"
									ng-click="CustomerModal.ChangeCustomerType('Business')">BUSINESS</button>
							</div>
							<div class="tabconainer" style="min-height: 524px;">
								<form>
									<div class="option_field"
										ng-show="CustomerModal.AdditionalFieldsInfo.Active.isPrimary">
										<div class="lable_fields">
											<span class="form_lable_icons text" style="background: none;">

											</span>
											<p>Active</p>
										</div>
										<div class="form_fields">
											<div class="form-group onehalf">
												<div class="chkbox_custom">
													<div class="leftchked "
														ng-class="{'checked' : CustomerModal.CustomerInfo.Active}"
														id="ActiveCustomer"
														ng-click="CustomerModal.SetCustomerActiveStatus(true)"
														rel="ActiveFlagIcon">YES</div>
													<div class="rightchked"
														ng-class="{'checked' : CustomerModal.CustomerInfo.Active !=true}"
														id="DeActiveCustomer"
														ng-click="CustomerModal.SetCustomerActiveStatus(false)"
														rel="ActiveFlagIcon">NO</div>
												</div>
											</div>

										</div>
										<div class="controls1 controls" id="ActiveFlagIcon">
											<i class="fa fa-question-circle"></i> <i class="fa fa-times"
												ng-click="CustomerModal.ClearAndRemoveField('Active')"></i>
										</div>
									</div>
									<div class="clearfix"></div>

									<div class="option_field"
										ng-show="CustomerModal.CustomerInfo.Type == 'Individual'">
										<div class="lable_fields">
											<span class="form_lable_icons"> <i class="fa fa-star"></i>
											</span>
											<p>Name</p>
										</div>
										<div class="form_fields" style="margin: 4px 0 8px 0;">
											<div class="form-group ">
												<label for="labelFirstName">First Name </label> <input
													type="text" class="form-control " id="txtFirstName"
													ng-model="CustomerModal.CustomerInfo.FirstName"
													ng-class="{'redborder' : CustomerModal.CustomerValidation['FirstName']['isError'] == true}"
													ng-blur="CustomerModal.validateForm('FirstName'); CustomerModal.getOtherSimilarCustomer()"
													placeholder="First Name" rel="Name"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 1}}"
													data-toggle="tooltip"
													title="{{CustomerModal.CustomerValidation['FirstName']['ErrorMessage'] }}" />
											</div>
											<div class="form-group">
												<label for="labelLastName">Last Name</label> <input
													type="text" class="form-control " id="txtLastName"
													ng-model="CustomerModal.CustomerInfo.LastName"
													ng-class="{'redborder' : CustomerModal.CustomerValidation['LastName']['isError'] == true}"
													ng-blur="CustomerModal.validateForm('LastName'); CustomerModal.getOtherSimilarCustomer()"
													placeholder="Last Name" rel="Name"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 2}}"
													data-toggle="tooltip"
													title="{{CustomerModal.CustomerValidation['LastName']['ErrorMessage'] }}" />
											</div>
											<div class="controls1 controls" id="Name">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="Provide First and Last Name of customer"></i> <i
													class="fa fa-times"
													ng-click="CustomerModal.ClearAndRemoveField('FnameLname', 'txtFirstName')"></i>
											</div>

											<div class="form-group">
												<label for="exampleInputPassword1">Nick Name</label> <input
													type="text" class="form-control " id="nickName"
													ng-model="CustomerModal.CustomerInfo.Nickname"
													placeholder="Nick Name" rel="Nickname"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 3}}" />
											</div>
											<div class="controls1 controls" id="Nickname">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="You can add a Nick Name for your customer"></i> <i
													class="fa fa-times"
													ng-click="CustomerModal.ClearAndRemoveField('NickName','nickName')"></i>
											</div>
										</div>
									</div>
									<div class="clearfix"></div>
									<div class="option_field"
										ng-show="CustomerModal.CustomerInfo.Type == 'Business'">
										<div class="lable_fields">
											<span class="form_lable_icons"> <i class="fa fa-star"></i>
											</span>
											<p>Company Name</p>
										</div>
										<div class="form_fields" style="margin: 4px 0 8px 0;">
											<div class="form-group large">
												<input type="text" class="form-control " id="businessName"
													ng-model="CustomerModal.CustomerInfo.BusinessName"
													placeholder="Company Name" rel="BusinessName"
													ng-class="{'redborder' : CustomerModal.CustomerValidation['BusinessName']['isError'] == true}"
													ng-blur="CustomerModal.validateForm('BusinessName'); CustomerModal.getOtherSimilarCustomer();"
													data-toggle="tooltip"
													title="{{CustomerModal.CustomerValidation['BusinessName']['ErrorMessage'] }} "
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 1}}" />
											</div>
											<div class="controls1 controls" id="BusinessName">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="Provide a Business Name of the customer"></i> <i
													class="fa fa-times"
													ng-click="CustomerModal.ClearAndRemoveField('BusinessName', 'businessName')"></i>
											</div>










										</div>
									</div>
									<div class="clearfix"></div>
									<div class="option_field"
										ng-show="CustomerModal.CustomerInfo.Type == 'Individual'">
										<div class="lable_fields">
											<span class="form_lable_icons text"> 100 </span>
											<p>Home Email</p>
										</div>
										<div class="form_fields">
											<div class="form-group large">
												<input type="text" class="form-control "
													ng-model="CustomerModal.CustomerInfo.HomeEmail"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 4}}"
													ng-blur="CustomerModal.getOtherSimilarCustomer(); CustomerModal.validateForm('HomeEmail');"
													id="homeEmail" placeholder="Home Email" rel="HomeEmail"
													data-toggle="tooltip"
													title="{{CustomerModal.CustomerValidation['HomeEmail']['ErrorMessage'] }}"
													ng-class="{'redborder' : CustomerModal.CustomerValidation['HomeEmail']['isError'] == true}" />
												<a href="#" class="bookmarklink"> <i class="fa fa-star"
													ng-class="{' orange' : CustomerModal.CustomerInfo.PreferredEmail == 'HomeEmail'}"
													ng-click="CustomerModal.markFavourite('PreferredEmail','HomeEmail');"></i>

												</a>
											</div>

										</div>
										<div class="controls" id="HomeEmail">
											<i class="fa fa-question-circle" data-toggle="tooltip"
												title="Add a personal email address"></i> <i
												class="fa fa-times"
												ng-click="CustomerModal.ClearAndRemoveField('HomeEmail','homeEmail')"></i>
										</div>
									</div>
									<div class="clearfix"></div>
									<div class="option_field"
										ng-show="CustomerModal.CustomerInfo.Type == 'Business'">
										<div class="lable_fields">
											<span class="form_lable_icons text"> 100 </span>
											<p>Work Email</p>
										</div>
										<div class="form_fields">
											<div class="form-group large">
												<input type="email" class="form-control "
													ng-model="CustomerModal.CustomerInfo.WorkEmail"
													ng-class="{'redborder' : CustomerModal.CustomerValidation['WorkEmail']['isError'] == true}"
													ng-blur="CustomerModal.getOtherSimilarCustomer(); CustomerModal.validateForm('WorkEmail');"
													id="workEmail" placeholder="Work Email" rel="WorkEmail"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 5}}"
													data-toggle="tooltip"
													title="{{CustomerModal.CustomerValidation['WorkEmail']['ErrorMessage'] }}" />
												<a href="#" class="bookmarklink"> <i class="fa fa-star"
													ng-class="{' orange' : CustomerModal.CustomerInfo.PreferredEmail == 'WorkEmail'}"
													ng-click="CustomerModal.markFavourite('PreferredEmail','WorkEmail');"></i>
												</a>
											</div>

										</div>
										<div class="controls" id="WorkEmail">
											<i class="fa fa-question-circle" data-toggle="tooltip"
												title="Add a work email address"></i> <i class="fa fa-times"
												ng-click="CustomerModal.ClearAndRemoveField('WorkEmail','workEmail')"></i>

										</div>
									</div>
									<div class="clearfix"></div>
									<div class="option_field"
										ng-show="CustomerModal.AdditionalFieldsInfo.OtherEmail.isPrimary">

										<div class="lable_fields">
											<span class="form_lable_icons text"> 100 </span>

											<p>Other Email</p>
										</div>
										<div class="form_fields">
											<div class="form-group large">
												<input type="text" class="form-control "
													ng-model="CustomerModal.CustomerInfo.OtherEmail"
													ng-class="{'redborder' : CustomerModal.CustomerValidation['OtherEmail']['isError'] == true}"
													ng-blur="CustomerModal.getOtherSimilarCustomer(); CustomerModal.validateForm('OtherEmail');"
													id="otherEmail" placeholder="Other Email" rel="OtherEmail"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 6}}"
													data-toggle="tooltip"
													title="{{CustomerModal.CustomerValidation['OtherEmail']['ErrorMessage'] }}" />
												<a href="#" class="bookmarklink"> <i class="fa fa-star"
													ng-class="{' orange' : CustomerModal.CustomerInfo.PreferredEmail == 'OtherEmail'}"
													ng-click="CustomerModal.markFavourite('PreferredEmail','OtherEmail');"></i>
												</a>
											</div>

										</div>
										<div class="controls" id="OtherEmail">
											<i class="fa fa-question-circle" data-toggle="tooltip"
												title="Add an alternate email address"></i> <i
												class="fa fa-times"
												ng-click="CustomerModal.ClearAndRemoveField('OtherEmail','otherEmail')"></i>

										</div>
									</div>
									<div class="clearfix"></div>
									<div class="option_field"
										ng-show="CustomerModal.CustomerInfo.Type == 'Individual'">
										<div class="lable_fields">
											<span class="form_lable_icons text"> 100 </span>
											<p>Home Phone</p>
										</div>
										<div class="form_fields">
											<div class="form-group medium">
												<input type="text" class="form-control" id="homePhone"
													ng-model="CustomerModal.CustomerInfo.HomeNumber"
													ng-class="{'redborder' : CustomerModal.CustomerValidation['HomeNumber']['isError'] == true}"
													ng-blur="CustomerModal.getOtherSimilarCustomer(); CustomerModal.validateForm('HomeNumber');"
													placeholder="Home Phone" rel="HomeNumber"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 7}}"
													data-toggle="tooltip"
													title="{{CustomerModal.CustomerValidation['HomeNumber']['ErrorMessage'] }}" />
												<a href="#" class="bookmarklink"> <i class="fa fa-star"
													ng-class="{' orange' : CustomerModal.CustomerInfo.PreferredPhone == 'HomeNumber'}"
													ng-click="CustomerModal.markFavourite('PreferredPhone','HomeNumber');"></i>
												</a>
											</div>
											<div class="form-group small">
												<label class="checkbox smschkbox"> <span
													class="chk_tick"
													ng-class="{'chked' : CustomerModal.CustomerInfo.HomeNumberSMS == true}"
													ng-click="CustomerModal.markSMS('HomeNumberSMS');">
														<i class="fa fa-check-square chksqure"></i>
												</span>
												</label>
											</div>
											<div class="form-group small2">
												<label>SMS ?</label> <a href="#" class="bookmarklink"> <i
													class="fa fa-star"
													ng-class="{' orange' : CustomerModal.CustomerInfo.PreferredSMS == 'HomeNumber'}"
													ng-click="CustomerModal.markFavourite('PreferredSMS','HomeNumber');"></i>
												</a>
											</div>
										</div>
										<div class="controls" id="HomeNumber">
											<i class="fa fa-question-circle" data-toggle="tooltip"
												title="Add a personal phone number"></i> <i
												class="fa fa-times"
												ng-click="CustomerModal.ClearAndRemoveField('HomePhone', 'homePhone')"></i>
										</div>
									</div>

									<div class="clearfix"></div>
									<div class="option_field"
										ng-show="CustomerModal.CustomerInfo.Type == 'Business'">
										<div class="lable_fields">
											<span class="form_lable_icons text"> 100 </span>
											<p>Work Phone</p>
										</div>
										<div class="form_fields">
											<div class="form-group medium">
												<input type="text" class="form-control" id="workPhone"
													ng-model="CustomerModal.CustomerInfo.WorkNumber"
													ng-class="{'redborder' : CustomerModal.CustomerValidation['WorkNumber']['isError'] == true}"
													ng-blur="CustomerModal.getOtherSimilarCustomer(); CustomerModal.validateForm('WorkNumber');"
													placeholder="Work Phone" rel="WorkNumber"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 9}}"
													data-toggle="tooltip"
													title="{{CustomerModal.CustomerValidation['WorkNumber']['ErrorMessage'] }}" />
												<a href="#" class="bookmarklink"> <i class="fa fa-star"
													ng-class="{' orange' : CustomerModal.CustomerInfo.PreferredPhone == 'WorkNumber'}"
													ng-click="CustomerModal.markFavourite('PreferredPhone','WorkNumber');"></i>
												</a>
											</div>
											<div class="form-group small">
												<label class="checkbox smschkbox"> <span
													class="chk_tick"
													ng-class="{'chked' : CustomerModal.CustomerInfo.WorkNumberSMS == true}"
													ng-click="CustomerModal.markSMS('WorkNumberSMS');">
														<i class="fa fa-check-square chksqure"></i>
												</span>
												</label>
											</div>
											<div class="form-group small2">
												<label>SMS ?</label> <a href="#" class="bookmarklink"> <i
													class="fa fa-star"
													ng-class="{' orange' : CustomerModal.CustomerInfo.PreferredSMS == 'WorkNumber'}"
													ng-click="CustomerModal.markFavourite('PreferredSMS','WorkNumber');"></i>
												</a>
											</div>
										</div>
										<div class="controls" id="WorkNumber">
											<i class="fa fa-question-circle" data-toggle="tooltip"
												title="Add a work phone"></i> <i class="fa fa-times"
												ng-click="CustomerModal.ClearAndRemoveField('WorkNumber', 'workPhone')"></i>

										</div>
									</div>

									<div class="clearfix"></div>
									<div class="option_field"
										ng-show="CustomerModal.AdditionalFieldsInfo.OtherPhone.isPrimary">
										<div class="lable_fields">
											<span class="form_lable_icons text"> 100 </span>
											<p>Other Phone</p>
										</div>
										<div class="form_fields">
											<div class="form-group medium">
												<input type="text" class="form-control" id="otherPhoneId"
													ng-model="CustomerModal.CustomerInfo.OtherPhone"
													ng-class="{'redborder' : CustomerModal.CustomerValidation['OtherPhone']['isError'] == true}"
													ng-blur="CustomerModal.getOtherSimilarCustomer(); CustomerModal.validateForm('OtherPhone');"
													placeholder="Other Phone" rel="OtherNumber"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 10.1}}"
													data-toggle="tooltip"
													title="{{CustomerModal.CustomerValidation['OtherPhone']['ErrorMessage'] }}" />
												<a href="#" class="bookmarklink"> <i class="fa fa-star"
													ng-class="{' orange' : CustomerModal.CustomerInfo.PreferredPhone == 'OtherPhone'}"
													ng-click="CustomerModal.markFavourite('PreferredPhone','OtherPhone');"></i>
												</a>
											</div>
											<div class="form-group small">
												<label class="checkbox smschkbox"> <span
													class="chk_tick"
													ng-class="{'chked' : CustomerModal.CustomerInfo.MobileNumberSMS == true}"
													ng-click="CustomerModal.markSMS('MobileNumberSMS');">
														<i class="fa fa-check-square chksqure"></i>
												</span>
												</label>
											</div>
											<div class="form-group small2">
												<label>SMS ?</label> <a href="#" class="bookmarklink"> <i
													class="fa fa-star"
													ng-class="{' orange' : CustomerModal.CustomerInfo.PreferredSMS == 'OtherPhone'}"
													ng-click="CustomerModal.markFavourite('PreferredSMS','OtherPhone');"></i>
												</a>
											</div>
										</div>
										<div class="controls" id="OtherNumber">
											<i class="fa fa-question-circle" data-toggle="tooltip"
												title="Add an alternate phone number"></i> <i
												class="fa fa-times"
												ng-click="CustomerModal.ClearAndRemoveField('OtherPhone', 'otherPhoneId')"></i>
										</div>
									</div>


									<div class="clearfix"></div>
									<div class="option_field">
										<div class="lable_fields">
											<span class="form_lable_icons text"> 100 </span>
											<p>Billing Address</p>
										</div>
										<div class="form_fields">
											<div class="form-group large">
												<label for="exampleInputEmail1">Address Line1</label> <input
													type="text" class="form-control"
													ng-model="CustomerModal.CustomerInfo.BillingStreet1"
													ng-blur="CustomerModal.getOtherSimilarCustomer()"
													id="billingAddress1"
													placeholder="Apartment / Suite / Office address"
													rel="BillingAddLine1"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 11}}" />

											</div>
											<div class="controls1 controls" id="BillingAddLine1">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="Apartment, suite, unit, building, floor, etc"></i> <i
													class="fa fa-times"
													ng-click="CustomerModal.ClearAndRemoveField('BillingAddLine1', 'billingAddress1')"></i>
											</div>
											<div class="form-group large">
												<label for="exampleInputEmail1">Address Line2</label> <input
													type="text" class="form-control"
													ng-model="CustomerModal.CustomerInfo.BillingStreet2"
													id="billingAddress2" placeholder="Street Address"
													rel="BillingAddLine2"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 12}}" />

											</div>
											<div class="controls1 controls" id="BillingAddLine2">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="Street address, P.O. box, company name, c/o"></i> <i
													class="fa fa-times"
													ng-click="CustomerModal.ClearAndRemoveField('BillingAddLine2', 'billingAddress2')"></i>
											</div>
											<div class="form-group half">
												<label for="exampleInputEmail1">Country</label> <select
													class="form-control" rel="CountryState" id="billingCountry"
													ng-model="CustomerModal.SelectedCountry"
													ng-options="country as country.CountryName for country in CustomerModal.Country track by country.Id"
													ng-change="CustomerModal.changeBillingCountry()"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 13}}">
												</select>

											</div>
											<div class="form-group half">
												<label for="exampleInputEmail1">State/Province</label> <select
													class="form-control" rel="CountryState" id="billingState"
													ng-model="CustomerModal.SelectedState"
													ng-options="state  as state.StateName for state in CustomerModal.State track by state.Id"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 14}}">
												</select>

											</div>
											<div class="controls1 controls" id="CountryState">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="Select Country and State"></i> <i
													class="fa fa-times"
													ng-click="CustomerModal.ClearAndRemoveField('CountryState','billingCountry')"></i>
											</div>

											<div class="form-group half">
												<label for="exampleInputEmail1">City</label> <input
													type="text" class="form-control" id="billingCity"
													ng-model="CustomerModal.CustomerInfo.BillingCity"
													placeholder="City" rel="CityPostal"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 15}}" />

											</div>
											<div class="form-group half">
												<label for="exampleInputEmail1">Postal/Zip Code</label> <input
													type="text" class="form-control" id="exampleInputEmail1"
													ng-model="CustomerModal.CustomerInfo.BillingPostalCode"
													placeholder="Postal/Zip Code" rel="CityPostal"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 16}}" />

											</div>
											<div class="controls1 controls" id="CityPostal">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="Add City and Postal Code"></i> <i
													class="fa fa-times"
													ng-click="CustomerModal.ClearAndRemoveField('CityPostal','billingCity')"></i>
											</div>
										</div>

									</div>
									<div class="clearfix"></div>
									<div class="option_field">
										<div class="lable_fields chkbox">
											<p>Shipping Address</p>
										</div>
										<div class="form_fields">
											<div class="form-group large">
												<label class="checkbox"><span id="sameAsBA"
													ng-click="CustomerModal.SetAddressData()"
													class="chk_tick" ng-class="{'chked': CustomerModal.CustomerInfo.sameBillingAddress}"><i
														class="fa fa-check-square chksqure"></i></span><span
													class="chk_txt">Same as Billing Address</span></label>
											</div>
										</div>

									</div>
									<div class="clearfix"></div>
									<div class="option_field hideit" id="billingaddress" ng-show ="CustomerModal.CustomerInfo.sameBillingAddress">
										<div class="lable_fields">
											<span class="form_lable_icons text"> 100 </span>
											<p>Shipping Address</p>
										</div>
										<div class="form_fields">
											<div class="form-group large">
												<label for="exampleInputEmail1">Address Line1</label> <input
													type="text" class="form-control"
													ng-model="CustomerModal.CustomerInfo.ShippingStreet1"
													id="shippingAddress1"
													placeholder="Apartment / Suite number"
													rel="ShippingAddLine1"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 18}}" />

											</div>
											<div class="controls1 controls" id="ShippingAddLine1">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="Apartment / Suite number"></i> <i
													class="fa fa-times"
													ng-click="CustomerModal.ClearAndRemoveField('ShippingAddLine1', 'shippingAddress1')"></i>

											</div>
											<div class="form-group large">
												<label for="exampleInputEmail1">Address Line2</label> <input
													type="text" class="form-control"
													ng-model="CustomerModal.CustomerInfo.ShippingStreet2"
													id="shippingAddress2" placeholder="Street Address"
													rel="ShippingAddLine2"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 19}}" />

											</div>
											<div class="controls1 controls" id="ShippingAddLine2">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="Street"></i> <i class="fa fa-times"
													ng-click="CustomerModal.ClearAndRemoveField('ShippingAddLine2', 'shippingAddress2')"></i>

											</div>

											<div class="form-group half">

												<label for="exampleInputEmail1">Country</label> <select
													class="form-control" rel="CountryStateShipping"
													ng-model="CustomerModal.SelectedShippingCountry"
													id="shippingCountry"
													ng-options="country as country.CountryName for country in CustomerModal.ShippingCountry track by country.Id"
													ng-change="CustomerModal.changeShippingCountry()"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 20}}">

												</select>




											</div>
											<div class="form-group half">
												<label for="exampleInputEmail1">State/Province</label> <select
													class="form-control" rel="CountryStateShipping"
													ng-model="CustomerModal.SelectedShippingState"
													ng-options="state  as state.StateName for state in CustomerModal.ShippingState track by state.Id"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 21}}">
												</select>


											</div>
											<div class="controls1 controls" id="CountryStateShipping">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="Select Country and State"></i> <i
													class="fa fa-times"
													ng-click="CustomerModal.ClearAndRemoveField('ShippingCountryState', 'shippingCountry')"></i>

											</div>

											<div class="form-group half">
												<label for="exampleInputEmail1">City</label> <input
													type="text" class="form-control"
													ng-model="CustomerModal.CustomerInfo.ShippingCity"
													id="shippingCity" placeholder="City"
													rel="CityPostalShipping"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 22}}" />

											</div>
											<div class="form-group half">
												<label for="exampleInputEmail1">Postal/Zip Code</label> <input
													type="text" class="form-control"
													ng-model="CustomerModal.CustomerInfo.ShippingPostalCode"
													id="exampleInputEmail1" placeholder="Postal/Zip Code"
													rel="CityPostalShipping"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 23}}" />

											</div>
											<div class="controls1 controls" id="CityPostalShipping">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="Add City and Postal Code"></i> <i
													class="fa fa-times"
													ng-click="CustomerModal.ClearAndRemoveField('CityPostalShipping', 'shippingCity')"></i>

											</div>
										</div>

									</div>
									<div class="clearfix"></div>
									<div class="option_field"
										ng-show="CustomerModal.AdditionalFieldsInfo.Birthdate.isPrimary && CustomerModal.CustomerInfo.Type == 'Individual'">
										<div class="lable_fields">
											<p>Birthday</p>
										</div>
										<div class="form_fields">
											<div class="form-group half" style="width: 24%">
												<select class="form-control" rel="BirthdayIcon"
													ng-change="CustomerModal.ChangeYear()"
													ng-model="CustomerModal.BirthyearSelected"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 24}}"
													ng-options="i as i.year for i in CustomerModal.BirthYears track by i.year">
												</select>
											</div>
											<div class="form-group half">
												<select class="form-control" rel="BirthdayIcon"
													id="birthMonth" ng-change="CustomerModal.ChangeMonth()"
													ng-model="CustomerModal.BirthmonthSelected"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 25}}">














													<option value="1">January</option>
													<option value="2">February</option>
													<option value="3">March</option>
													<option value="4">April</option>
													<option value="5">May</option>
													<option value="6">June</option>
													<option value="7">July</option>
													<option value="8">August</option>
													<option value="9">September</option>
													<option value="10">October</option>
													<option value="11">November</option>
													<option value="12">December</option>
												</select>

											</div>
											<div class="form-group half" style="width: 18%">
												<select class="form-control" rel="BirthdayIcon"
													ng-model="CustomerModal.BirthdaySelected"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 26}}"
													ng-options="i as i.day for i in CustomerModal.BirthDays track by i.day">
												</select>
											</div>


										</div>
										<div class="controls" id="BirthdayIcon">
											<i class="fa fa-question-circle" data-toggle="tooltip"
												title="Add customer Birth Date"></i> <i class="fa fa-times"
												ng-click="CustomerModal.ClearAndRemoveField('Birthdate')"></i>

										</div>
									</div>
									<div class="clearfix"></div>
									<div class="option_field"
										ng-show="CustomerModal.AdditionalFieldsInfo.FacebookLink.isPrimary">
										<div class="lable_fields">
											<p>Facebook</p>
										</div>
										<div class="form_fields">
											<div class="form-group large">
												<input type="text" class="form-control"
													ng-model="CustomerModal.CustomerInfo.FacebookLink"
													ng-blur="CustomerModal.getOtherSimilarCustomer()"
													id="facebookLink" placeholder="Facebook" rel="FacebookIcon"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 27}}" />
												<a href="#" class="bookmarklink"> <i
													class="fa fa-facebook-square" style="color: #45619D;"></i>
												</a>
											</div>
										</div>
										<div class="controls" id="FacebookIcon">
											<i class="fa fa-question-circle" data-toggle="tooltip"
												title="Add Facebook profile link"></i> <i
												class="fa fa-times"
												ng-click="CustomerModal.ClearAndRemoveField('FacebookLink')"></i>
										</div>
									</div>
									<div class="clearfix"></div>
									<div class="option_field"
										ng-show="CustomerModal.AdditionalFieldsInfo.TwitterLink.isPrimary">
										<div class="lable_fields">
											<p>Twitter</p>
										</div>
										<div class="form_fields">
											<div class="form-group large">
												<input type="text" class="form-control"
													ng-model="CustomerModal.CustomerInfo.TwitterLink"
													ng-blur="CustomerModal.getOtherSimilarCustomer()"
													id="twitterLink" placeholder="Twitter" rel="TwitterIcon"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 28}}" />
												<a href="#" class="bookmarklink"> <i
													class="fa fa-twitter-square" style="color: #52A7E7;"></i>
												</a>
											</div>
										</div>
										<div class="controls" id="TwitterIcon">
											<i class="fa fa-question-circle" data-toggle="tooltip"
												title="Add Twitter link"></i> <i class="fa fa-times"
												ng-click="CustomerModal.ClearAndRemoveField('TwitterLink')"></i>
										</div>
									</div>

									<div class="option_field"
										ng-show="CustomerModal.AdditionalFieldsInfo.LinkedInLink.isPrimary">
										<div class="lable_fields">
											<p>LinkedIn</p>
										</div>
										<div class="form_fields">
											<div class="form-group large">
												<input type="text" class="form-control"
													ng-model="CustomerModal.CustomerInfo.LinkedInLink"
													ng-blur="CustomerModal.getOtherSimilarCustomer()"
													id="LinkedinLink" placeholder="LinkedIn" rel="LinkedInIcon"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 29}}" />
												<a href="#" class="bookmarklink"> <i
													class="fa fa-linkedin" style="color: #52A7E7;"></i>

												</a>
											</div>
										</div>
										<div class="controls" id="LinkedInIcon">
											<i class="fa fa-question-circle" data-toggle="tooltip"
												title="Add LinkedIn profile link"></i> <i
												class="fa fa-times"
												ng-click="CustomerModal.ClearAndRemoveField('LinkedInLink')"></i>
										</div>
									</div>
									<div class="clearfix"></div>
									<div class="option_field"
										ng-show="CustomerModal.AdditionalFieldsInfo.Company.isPrimary && CustomerModal.CustomerInfo.Type == 'Individual'">
										<div class="lable_fields">
											<p>Company</p>
										</div>
										<div class="form_fields">
											<div class="form-group large">
												<input type="text" class="form-control"
													ng-model="CustomerModal.CustomerInfo.Company"
													id="companyName" placeholder="Company" rel="CompanyIcon"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 30}}" />
											</div>
										</div>
										<div class="controls" id="CompanyIcon">
											<i class="fa fa-question-circle" data-toggle="tooltip"
												title="Add Company"></i> <i class="fa fa-times "
												ng-click="CustomerModal.ClearAndRemoveField('Company')"></i>
										</div>
									</div>

									<div class="clearfix"></div>
									<div class="option_field"
										ng-show="CustomerModal.AdditionalFieldsInfo.JobTitle.isPrimary && CustomerModal.CustomerInfo.Type == 'Individual'">
										<div class="lable_fields">
											<p>Job Title</p>
										</div>
										<div class="form_fields">
											<div class="form-group large">
												<input type="text" class="form-control"
													ng-model="CustomerModal.CustomerInfo.JobTitle"
													id="jobTitle" placeholder="Job Title" rel="JobtitleIcon"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 31}}" />
											</div>
										</div>
										<div class="controls" id="JobtitleIcon">
											<i class="fa fa-question-circle" data-toggle="tooltip"
												title="Add Job Title"></i> <i class="fa fa-times"
												ng-click="CustomerModal.ClearAndRemoveField('JobTitle')"></i>

										</div>
									</div>
								</form>
							</div>
							<div class="clearfix"></div>

						</div>
					</div>
					<div class="clearfix"></div>
					<div class="popupinside">
						<div class="popupleft col-lg-4 col-lg-4" ng-show="CustomerModal.IsEditMode != true">
							<div class="popupleft_container"
								style="border-top: 1px solid #cccccc;"
								ng-show="CustomerModal.IsEditMode == false">
								<h1 class="letpanel_heading">Existing Customer Owned Units
									Like This</h1>
								<i class="fa fa-question-circle helptip"
									style="float: left; font-weight: bold; color: #f89420; margin-top: 20px; margin-bottom: 10px; font-size: 20px;"></i>
								<div class="goldbox exists col-lg-11 col-md-11"
									ng-repeat="SimilarCOU in  CustomerModal.SimilarCOU">
									<div class="leftgoldbox">
										<img src="{!URLFOR($Resource.Images, 'StandardUserImage.png')}" />
									</div>
									<div class="rightgoldbox type2">


										<p class="cust_name address">
											<span class="titletxt">{{SimilarCOU.Model}}</span><br /> Last
											Mileage: {{SimilarCOU.Mileage}} km <br /> Color:
											{{SimilarCOU.Color}}<br /> VIN:{{SimilarCOU.VIN}}<br />
											Plate: {{SimilarCOU.Plate}}
										</p>
										<a href="#" class="boxedit"> <img
											src="{!URLFOR($Resource.Images, 'editicon_30x30.png')}" alt="" />
										</a> <a href="#" class="boxenum"> 100 </a>











									</div>
									<div class="bottomgoldbox">
										<i> Customer-Owned Unit</i>

									</div>
								</div>
							</div>
						</div>
						<div class="popupright"
								ng-class="{'col-lg-8 col-lg-8': CustomerModal.IsEditMode == false , 'leftBorderNone col-lg-12 col-lg-12': CustomerModal.IsEditMode == true}">
							<div class="tabconainer noborder"
								style="border-top: 1px solid #cccccc;">
								<form>


									<div class="option_field"
										ng-repeat="unit in CustomerModal.CustumerUnitModal"
										ng-show="CustomerModal.IsEditMode == false">

										<div class="lable_fields">
											<span class="form_lable_icons text"> 100 </span>
											<p>Customer Owned Unit</p>
										</div>
										<div class="form_fields">


											<div class="form-group large">
												<label for="exampleInputEmail1">VIN</label> <input
													type="text" class="form-control" ng-model="unit.VIN"
													id="vinId{{$index}}" placeholder="VIN"
													ng-focus="CustomerModal.OnFocus($index==0 ? 'customerUnitMainVin' : 'CustomerUnitOptional'+$index)"
													ng-blur="CustomerModal.OnBlurVin(unit.VIN); CustomerModal.ValidateCou($index,'VIN');"
													rel="{{$index==0 ? 'customerUnitMainVin' : 'CustomerUnitOptional'+$index}}"
													ng-attr-tabindex="{{($index * 8) + CustomerModal.tabIndexValue + 37}}"
													ng-class="{'redborder' : CustomerModal.CustomerValidationCOU[$index]['VIN'].isError == true}"
													data-toggle="tooltip"
													title="{{CustomerModal.CustomerValidationCOU[$index]['VIN'].ErrorMessage}}" />


											</div>
											<div class="controls1 controls"
												id="{{$index==0 ? 'customerUnitMainVin' : 'CustomerUnitOptional'+$index}}">
												<i class="fa fa-question-circle" ng-if="$index == 0"
													data-toggle="tooltip"
													title="Add Vehicle Identification Number of the Unit"></i>
												<i class="fa fa-times"
													ng-click="CustomerModal.ClearAndRemoveSectionField($index,'CustomerUnitModelVin', 'vinId')"></i>
											</div>

											<div class="form-group half">
												<label for="exampleInputEmail1">Year</label> <select
													class="form-control" placeholder="Year"
													ng-focus="CustomerModal.OnFocus($index==0 ? 'customerUnitMainyearMake' : 'CustomerUnitOptional'+$index)"
													ng-blur="CustomerModal.OnBlur($index==0 ? 'customerUnitMainyearMake' : 'CustomerUnitOptional'+$index)"
													id="customerUnitYearMakeId"
													ng-model="CustomerModal.UnitYearSelected[$index]"
													ng-change="CustomerModal.changeUnitYear($index)"
													rel="{{$index==0 ? 'customerUnitMainyearMake' : 'CustomerUnitOptional'+$index}}"
													ng-attr-tabindex="{{($index * 8) + CustomerModal.tabIndexValue + 37}}"
													ng-options="i as i.modelyear for i in CustomerModal.ModelYears track by i.modelyear">


												</select>

											</div>


											<div class="form-group half">
												<label for="exampleInputEmail1">Make</label> <select
													class="form-control"
													ng-model="CustomerModal.UnitMakeSelected[$index]"
													ng-focus="CustomerModal.OnFocus($index==0 ? 'customerUnitMainyearMake' : 'CustomerUnitOptional'+$index)"
													ng-blur="CustomerModal.OnBlur($index==0 ? 'customerUnitMainyearMake' : 'CustomerUnitOptional'+$index)"
													rel="{{$index==0 ? 'customerUnitMainyearMake' : 'CustomerUnitOptional'+$index}}"
													ng-options="make as make.UnitMakeName for make in CustomerModal.UnitMake track by make.Id"
													ng-change="CustomerModal.changeUnitMake($index)"
													ng-attr-tabindex="{{($index * 8) + CustomerModal.tabIndexValue + 39}}">
													<option selected="selected">select</option>

												</select>

											</div>
											<div class="controls1 controls" id="customerUnitMainyearMake">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="Select Year and Make of the Unit"
													ng-if="$index == 0"></i> <i class="fa fa-times"
													ng-click="CustomerModal.ClearAndRemoveSectionField($index,'CustomerUnitYearMake', 'customerUnitYearMakeId')"></i>
											</div>
											<div class="form-group half">
												<label for="exampleInputEmail1">Model</label> <select
													class="form-control"
													ng-model="CustomerModal.UnitModelSelected[$index]"
													ng-focus="CustomerModal.OnFocus($index==0 ? 'customerUnitMainModel' : 'CustomerUnitOptional'+$index)"
													id="customerUnitModelId"
													ng-blur="CustomerModal.OnBlur($index==0 ? 'customerUnitMainModel' : 'CustomerUnitOptional'+$index)"
													rel="{{$index==0 ? 'customerUnitMainModel' : 'CustomerUnitOptional'+$index}}"
													ng-attr-tabindex="{{($index * 8) + CustomerModal.tabIndexValue + 40}}"
													ng-options="model as model.UnitModelName for model in CustomerModal.UnitModel[$index] track by model.Id"
													ng-change="CustomerModal.changeUnitmodel($index)">

												</select>


											</div>
											<div class="form-group half">
												<label for="exampleInputEmail1">Sub Model</label> <input
													type="text" class="form-control" ng-disabled="true"
													ng-model="CustomerModal.UnitModelSelected[$index].SubModelName"
													id="exampleInputEmail1" placeholder="SubModel"
													ng-focus="CustomerModal.OnFocus($index==0 ? 'customerUnitMainModel' : 'CustomerUnitOptional'+$index)"
													ng-blur="CustomerModal.OnBlur($index==0 ? 'customerUnitMainModel' : 'CustomerUnitOptional'+$index)"
													rel="{{$index==0 ? 'customerUnitMainModel' : 'CustomerUnitOptional'+$index}}"
													ng-attr-tabindex="{{($index * 8) + CustomerModal.tabIndexValue + 41}}" />






											</div>
											<div class="controls1 controls" ng-if="$index == 0"
												id="customerUnitMainModel">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="Select Model and Sub-Model of the Unit"></i> <i
													class="fa fa-times"
													ng-click="CustomerModal.ClearAndRemoveSectionField($index,'CustomerUnitModelSubModel', 'customerUnitModelId')"></i>
											</div>
											<div class="form-group large">
												<label for="exampleInputEmail1">License Plate</label> <input
													type="text" class="form-control" ng-model="unit.Plate"
													id="plateId" placeholder="License Plate"
													ng-focus="CustomerModal.OnFocus($index==0 ? 'customerUnitMainLisense' : 'CustomerUnitOptional'+$index)"
													ng-blur="CustomerModal.OnBlur($index==0 ? 'customerUnitMainLisense' : 'CustomerUnitOptional'+$index)"
													rel="{{$index==0 ? 'customerUnitMainLisense' : 'CustomerUnitOptional'+$index}}"
													ng-attr-tabindex="{{($index * 8) + CustomerModal.tabIndexValue + 42}}" />

											</div>
											<div class="controls1 controls" ng-if="$index == 0"
												id="customerUnitMainLisense">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="Add License PLate Number of the Unit"></i> <i
													class="fa fa-times"
													ng-click="CustomerModal.ClearAndRemoveSectionField($index,'CustomerUnitLicensePlate', 'plateId')"></i>
											</div>
											<div class="form-group large">
												<label for="exampleInputEmail1">Mileage</label> <input
													type="text" class="form-control" ng-model="unit.Mileage"
													id="mileageId" placeholder="Mileage"
													ng-focus="CustomerModal.OnFocus($index==0 ? 'customerUnitMainMilage' : 'CustomerUnitOptional'+$index)"
													ng-blur="CustomerModal.ValidateCou($index,'Mileage'); CustomerModal.OnBlur($index==0 ? 'customerUnitMainMilage' : 'CustomerUnitOptional'+$index);"
													rel="{{$index==0 ? 'customerUnitMainMilage' : 'CustomerUnitOptional'+$index}}"
													ng-attr-tabindex="{{($index * 8) + CustomerModal.tabIndexValue + 43}}"
													ng-class="{'redborder' : CustomerModal.CustomerValidationCOU[$index]['Mileage'].isError == true}"
													data-toggle="tooltip"
													title="{{CustomerModal.CustomerValidationCOU[$index]['Mileage'].ErrorMessage}}" />

											</div>
											<div class="controls1 controls" ng-if="$index == 0"
												id="customerUnitMainMilage">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="Add Mileage of the Unit"></i> <i class="fa fa-times"
													ng-click="CustomerModal.ClearAndRemoveSectionField($index,'CustomerUnitMilage', 'mileageId')"></i>
											</div>
											<div class="form-group large">
												<label for="exampleInputEmail1">Color</label> <input
													type="text" class="form-control" ng-model="unit.Color"
													id="colorId" placeholder="Color"
													ng-focus="CustomerModal.OnFocus($index==0 ? 'customerUnitMainColor' : 'CustomerUnitOptional'+$index)"
													ng-blur="CustomerModal.OnBlur($index==0 ? 'customerUnitMainColor' : 'CustomerUnitOptional'+$index)"
													rel="{{$index==0 ? 'customerUnitMainColor' : 'CustomerUnitOptional'+$index}}"
													ng-attr-tabindex="{{($index * 8) + CustomerModal.tabIndexValue + 44}}" />

											</div>
											<div class="controls1 controls" ng-if="$index == 0"
												id="customerUnitMainColor">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="Add Color of the Unit" ng-if="$index == 0"></i> <i
													class="fa fa-times"
													ng-click="CustomerModal.ClearAndRemoveSectionField($index,'customerUnitColor', 'colorId')"></i>
											</div>
										</div>
									</div>

									<div class="clearfix"></div>
									<div class="option_field"
										ng-show="CustomerModal.AdditionalFieldsInfo.PriceLevel.isPrimary">

										<div class="lable_fields">
											<p>Price Level</p>




										</div>
										<div class="form_fields">
											<div class="form-group half">
												<select class="form-control" rel="PriceLevelIcon"
													id="priceLevelDropDown"
													ng-model="CustomerModal.SelectedPriceLevel"
													ng-options="pricelevel as pricelevel.PriceLevelName for pricelevel in CustomerModal.PriceLevel track by pricelevel.Id"
													ng-change="CustomerModal.changePriceLevel()"
													ng-attr-tabindex="{{CustomerModal.tabIndexValue + 200}}">
												</select>
											</div>

											<div class="controls" id="PriceLevelIcon">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="Add Price Level of the Customer"></i> <i
													class="fa fa-times"
													ng-click="CustomerModal.ClearAndRemoveField('PriceLevel')"></i>
											</div>







										</div>
									</div>

									<div class="option_field"
										ng-show="CustomerModal.AdditionalFieldsInfo.IsVendor.isPrimary">

										<div class="lable_fields">
											<span class="form_lable_icons text" style="background: none;">

											</span>
											<p>Vendor</p>

										</div>
										<div class="form_fields">
											<div class="form-group onehalf">
												<div class="chkbox_custom" rel="VendorIcon">
													<div class="leftchked "
														ng-class="{'checked' : CustomerModal.CustomerInfo.IsVendor}"
														id="ActiveVendor"
														ng-click="CustomerModal.SetVendorActive(true)">YES
													</div>
													<div class="rightchked "
														ng-class="{'checked' : CustomerModal.CustomerInfo.IsVendor != true }"
														id="DeActiveVendor"
														ng-click="CustomerModal.SetVendorActive(false)">NO
													</div>
												</div>
											</div>
											<div class="form-group threehalf">
												<select class="form-control" rel="VendorIcon"
													id="vendorDropDown"
													ng-disabled="CustomerModal.CustomerInfo.IsVendor !=true"
													ng-model="CustomerModal.VendorSelectedSalesTax"
													ng-options="purchase as purchase.SalesTaxName for purchase in CustomerModal.SalesTax track by purchase.Id">

												</select>
											</div>
										</div>
										<div class="controls" id="VendorIcon">
											<i class="fa fa-question-circle" data-toggle="tooltip"
												title="Select if this Customer is also a Vendor"></i> <i
												class="fa fa-times"
												ng-click="CustomerModal.ClearAndRemoveField('IsVendor')"></i>

										</div>
									</div>




									<div class="clearfix"></div>
									<button type="button" class="btn btn-warning addmoreinfo"
										data-toggle="dropdown">Add More Information</button>
									<ul class="add_info_dropdown dropdown-menu keep_open">
										<div class="right-inner-addon" style="margin: 0 10px;">
											<i class="glyphicon glyphicon-search"></i> <input
												class="form-control ng-pristine ng-untouched ng-valid"
												ng-model="CustomerModal.AdditionalFieldsSearch"
												placeholder="Search" type="search" />

										</div>

										<li
											ng-repeat="(key,value) in FilterAdditionalFields(CustomerModal.AdditionalFieldsInfo)"
											ng-if="CustomerModal.manageAdditionalFields(key);"
											ng-click="CustomerModal.ShowAdditionalField(key)"><a
											href="#">{{value.label}}</a></li>
									</ul>
								</form>
							</div>
						</div>
					</div>
					<div class="clearfix"></div>
				</div>
			</div>
		</div>
	</div>

	<script type="text/javascript">
    $(document).ready(function(){
        
        
        $('.addmoreinfo').click(function(){
            if( $(this).hasClass('keep_open')){
            }
            else{
                $('.dropdown-menu').addClass("keep_open");
            }
        });
        
        
        
        $('[data-toggle="tooltip"]').tooltip({placement : 'bottom'}); 
        
        $(document).on('click', '.dropdown-menu', function(e) {
            
            $(this).hasClass('keep_open') && e.stopPropagation();
            // This replace if conditional.
        });  
        //$("#sameAsBA").click(function(){ 
                //alert($(this).hasClass("chked"));
          //      if($(this).hasClass("chked") == true){
            //        $(this).removeClass("chked");
                    //$("#billingaddress").removeClass("hideit");
              //      $("#billingaddress").slideDown();
                    /*$("#topsection").height($("#topsection").height() + 252);*/
               // }else{
                 //   $(this).addClass("chked");
                    //$("#billingaddress").addClass("hideit");
                   // $("#billingaddress").slideUp();
                    /*$("#topsection").height($("#topsection").height() - 252);*/
               /// }
        //})
        $(".form-control").focus(function(){
            $('.controls').hide();  
            debug($('.controls'));
            $('#'+ $(this).attr('rel')).show();
            
        })

        
            $('#closemodal').click(function() {
                $('#pop').modal('hide'); 
            });
        

        /*var getleftheight = $(".right_heading_container").height() + $(".tabbtn_container").height() + $(".tabconainer").height();
        $("#topsection").height(getleftheight - 30);*/
    })
</script>

</apex:component>