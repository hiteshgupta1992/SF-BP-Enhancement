<apex:component controller="ViewLabourCtrl">
    <!-- Import styles -->
    <c:NewPopupStyle />
    
    <!-- Include required directives -->
    <!-- Directive for price fields -->
    <c:dirNumberInput />
    
    <style>
        #AddEditLabour .controls1 {
            top: -45px;
        }
        
        .popupright .tabconainer .option_field .form_fields .WP {
        	width: 82%;
        }
        
        .popupright .tabconainer .option_field .controls .MTP	{
        	margin-top: 12px;
        }
        
        .popupright .tabconainer .option_field .Z_Index_P {
        	z-index: 999 !important;
        }
    </style>
    <!-- <script>
    $(document).ready(function () {
			setTimeout(function () {
				$('[data-toggle="tooltip"]').tooltip({
					placement : 'bottom',
					z-index: 8
				});
			}, 1000);
		});
	   
	 </script>
	  -->
    <script>
        var addEditLabourModule= angular.module('addEditLabourModule', ['dir.priceInput', 'autocomplete', 'ui-notification'] );
        addEditLabourModule.controller('addEditLabourController', function ($scope, Notification, AddEditLabourService) {
            /****** Modals initialization ******/
            if($scope.AddEditLabour == undefined){
                $scope.AddEditLabour = {};
            }
            $scope.AddEditLabour.tabIndexValue = 3000;
            $scope.AddEditLabour.isValidForm = true;
            $scope.AddEditLabour.LabourFormValidationModal = {};
            
            $scope.AddEditLabour.helpText = {
                LabourCode          : 'Labour Code',
                LabourDescription   : 'Labour Description',
                LabourHours         : 'Labour Hours',
                LabourFixedRate     : 'Labour Fixed Rate',
                LabourRate          : 'Labour Rate, Required if Fixed Rate selected',
                LabourCategory      : 'Labour Category',
                LabourTaxable       : 'Labour Taxable'
            }
            
            $scope.AddEditLabour.adjustTabIndex = function(e){
            	if(e.which == 9){
            		$('#Code').focus();
            		e.preventDefault();
            	}
            }
            
            // Method to set default values for validation model
            $scope.AddEditLabour.setDefaultValidationModel = function() {
                $scope.AddEditLabour.LabourFormValidationModal = {
                    LabourCode : {
                        isError : false,
                        ErrorMessage : '',
                        Type : 'Required'
                    },
                    LabourDescription : {
                        isError : false,
                        ErrorMessage : '',
                        Type : 'Required'
                    },
                    LabourHours : {
                        isError : false,
                        ErrorMessage : '',
                        Type : 'Required,MinValue',
                        Value : 0
                    },
                    LabourRate : {
                        isError : false,
                        ErrorMessage : '',
                        Type : 'MinimumValue,Rate',
                        Value : 0
                    }
                };
            }
            
            $scope.AddEditLabour.LabourFieldsFilter = {
                LabourCategory : [
                    {
                        Field : "Type__c",
                        Value : "Labour",
                        FilterObject :"Category__c"
                    }
                ]
            };
            
            /****** Add/Edit Labour eventlisteners ******/
            $scope.AddEditLabour.addNewLabour = function () {
                $scope.AddEditLabour.ClearAlldata();
                $scope.AddEditLabour.loadDefaultLabourData();
                $scope.AddEditLabour.IsEditMode = false;
                $scope.AddEditLabour.LabourRecord.LabourStatus = true; 
                $scope.AddEditLabour.openPopup();
            }
            
            $scope.AddEditLabour.editLabour = function(labourRecord){
            	debug(labourRecord);
                $scope.AddEditLabour.ClearAlldata();
                $scope.AddEditLabour.IsEditMode = true;
                $scope.AddEditLabour.LoadFormData(labourRecord);
                //$scope.AddEditLabour.LoadLabourData(labourId);
            }
            
            /****** Add/Edit Labour events ******/
            $scope.$on('AddLabourEvent', function () {  
                $scope.AddEditLabour.addNewLabour();
            });
            
            $scope.$on('EditLabourEvent',function(event, params) {
                $scope.AddEditLabour.editLabour(angular.copy(params.labourRecord));
            });
            
            // Event listener when a record is selected from Search bar
            $scope.$on('autoCompleteSelectCallback', function (event, args) {
                var obejctType = args.ObejctType.toUpperCase();
                var searchResult = args.SearchResult;
                var validationKey = args.ValidationKey;
                
                if($scope.AddEditLabour.CategoryNameStr == $scope.AddEditLabour.LabourRecord.LabourCategory.Name){
                	return;
                } else if(searchResult == null){
                    Notification.error("No matching " + args.ObejctType + " records found!");
                    $scope.AddEditLabour.CategoryNameStr = "";
                    $scope.AddEditLabour.LabourRecord.LabourCategory = {Id : null, Name : ""};
                    return;
                }
                
                var objectsMapping = [{
                        CATEGORY : {
                            Id : "LabourCategoryId",
                            Name : "LabourCategoryName",
                            selectMethod : $scope.AddEditLabour.setLabourRecordDataByForm
                        }
                    }
                ];
            
                if (objectsMapping[0][obejctType] != null) {
                    $scope.AddEditLabour.LabourRecord[objectsMapping[0][obejctType]["Id"]] = searchResult.originalObject.Value;
                    $scope.AddEditLabour.LabourRecord[objectsMapping[0][obejctType]["Name"]] = searchResult.originalObject.Name;
                }
            
                $scope.AddEditLabour.validateFieldWithKey(validationKey);
            
                if ($scope.AddEditLabour.LabourFormValidationModal[validationKey] == null || $scope.AddEditLabour.LabourFormValidationModal[validationKey].isError == false) {
                    if (objectsMapping[0][obejctType].selectMethod != null) {
                        objectsMapping[0][obejctType].selectMethod(searchResult);
                    }
                }
            });
            
            $scope.AddEditLabour.openPopup = function () {
                angular.element('#AddEditLabour').modal({
                    backdrop : 'static',
                    keyboard : false
                });
                
                setTimeout(function(){
                    if($scope.AddEditLabour.IsEditMode){
                        angular.element("#Description").focus();
                    } else {
                        angular.element("#Code").focus();
                    }
                }, 100);
            }
            
            $scope.AddEditLabour.ClearAlldata = function() {
                $scope.AddEditLabour.CategoryNameStr = "";
                $scope.AddEditLabour.LabourRecord = {};
                $scope.AddEditLabour.LabourRecord.LabourCategory = {Id : null, Name : ""};
                $scope.AddEditLabour.setDefaultValidationModel();
                $scope.AddEditLabour.SimilarLabourRecords = [];
            }
            
            $scope.AddEditLabour.loadDefaultLabourData = function() {
            	AddEditLabourService.getApplicableTaxList().then(function(taxList){
                	debug(taxList);
                	$scope.AddEditLabour.IsTaxIncludingPricing = taxList.IsTaxIncludingPricing;
                	$scope.AddEditLabour.TaxList = taxList.SalesTaxList;
                	var defaultTaxIndex = _.findIndex(taxList.SalesTaxList, {IsDefault: true});
                	if(defaultTaxIndex > -1){
                		$scope.AddEditLabour.LabourRecord.ApplicableTaxId = $scope.AddEditLabour.TaxList[defaultTaxIndex].Id;
                		$scope.AddEditLabour.Tax_Rate = $scope.AddEditLabour.TaxList[defaultTaxIndex].TaxRate;
                	}
                }, function(errorSearchResult) {
                    //$scope.ViewCustomer.CustomerInfo = errorSearchResult;
                });
                
            	AddEditLabourService.getDefaultLabourData().then(function (labourInfo) {
					if(labourInfo.LabourCategory != null && labourInfo.LabourCategory.Id != null && labourInfo.LabourCategory.Id != ""){
						$scope.AddEditLabour.LabourRecord.LabourCategory = {Id : labourInfo.LabourCategory.Id, Name : labourInfo.LabourCategory.Name};
					} else {
						$scope.AddEditLabour.LabourRecord.LabourCategory = {Id : null, Name : ""};
					}
					$scope.AddEditLabour.LabourRecord.LabourTaxable = true;
					$scope.AddEditLabour.LabourRecord.LabourRate = 0;
					$scope.AddEditLabour.CategoryNameStr = $scope.AddEditLabour.LabourRecord.LabourCategory.Name;
				}, function (errorSearchResult) {
					responseData = errorSearchResult;
					Notification.error("Some error occured while fetching the records. Please refresh the page and try again.");
				});
            }
            
            
            $scope.AddEditLabour.changeApplicableTax = function(){
            	var selectedTaxIndex = _.findIndex($scope.AddEditLabour.TaxList, {Id: $scope.AddEditLabour.LabourRecord.ApplicableTaxId});
            	if(selectedTaxIndex > -1){
            		$scope.AddEditLabour.Tax_Rate = $scope.AddEditLabour.TaxList[selectedTaxIndex].TaxRate;
            	}
            }
            
//             // Method to load all page data on load:
//             $scope.AddEditLabour.LoadLabourData = function(labourId) {
//                 $scope.AddEditLabour.LabourRecord.Id = labourId;
                
//                 if($scope.AddEditLabour.LabourRecord.Id != null && $scope.AddEditLabour.LabourRecord.Id != ""){
//                     AddEditLabourService.getLabourDetails($scope.AddEditLabour.LabourRecord.Id)
//                         .then(function (remoteResult) {
//                             $scope.AddEditLabour.LoadFormData(remoteResult);
//                         }, function (errorSearchResult) {
//                            responseData = errorSearchResult;
//                            Notification.error("Some error occured while fetching the records.");
//                        });
//                 }
//             }
            
            // Method to populate form data
            $scope.AddEditLabour.LoadFormData = function(LabourRecord) {
            	AddEditLabourService.getApplicableTaxList().then(function(taxList){
                	debug(taxList);
                	$scope.AddEditLabour.IsTaxIncludingPricing = taxList.IsTaxIncludingPricing;
                	$scope.AddEditLabour.TaxList = taxList.SalesTaxList;
                	var defaultTaxIndex = _.findIndex(taxList.SalesTaxList, {IsDefault: true});
                	
                $scope.AddEditLabour.LabourRecord = LabourRecord;
                $scope.AddEditLabour.CategoryNameStr = $scope.AddEditLabour.LabourRecord.LabourCategory.Name;
	                if($scope.AddEditLabour.LabourRecord.ApplicableTaxId != null){
	                	var salesTaxIndex = _.findIndex(taxList.SalesTaxList, {Id: $scope.AddEditLabour.LabourRecord.ApplicableTaxId});
	                	if(salesTaxIndex > -1){
	                		$scope.AddEditLabour.Tax_Rate = taxList.SalesTaxList[salesTaxIndex].TaxRate;
	                	}
	                }
	                if(defaultTaxIndex > -1 && $scope.AddEditLabour.LabourRecord.ApplicableTaxId == null){
                		$scope.AddEditLabour.LabourRecord.ApplicableTaxId = $scope.AddEditLabour.TaxList[defaultTaxIndex].Id;
                		$scope.AddEditLabour.Tax_Rate = $scope.AddEditLabour.TaxList[defaultTaxIndex].TaxRate;
                	}
                $scope.AddEditLabour.openPopup();
                }, function(errorSearchResult) {
                    //$scope.ViewCustomer.CustomerInfo = errorSearchResult;
                });
                
            }
            
            // On click of Save button, save form data and close popup
            $scope.AddEditLabour.SaveLabourForm = function(event) {
                // Check if any Labour record with the same Code and Description already exists in database, if so then decline the operation
              /*   if ($scope.AddEditLabour.SimilarLabourRecords.length > 0) {
                    Notification.error('Similar labour record already present.');
                    return;
                } else {
                    $scope.AddEditLabour.getSimilarLabours('CODE');
                } */
                
                // By default set valid flag to true before starting validation
                $scope.AddEditLabour.isValidForm = true;
                
                // get similar labour codes
                $scope.AddEditLabour.getSimilarLabours('CODE');  
                
                // Validate form
                $scope.AddEditLabour.validateForm();
                
                if(!$scope.AddEditLabour.isValidForm){
                   /*  var labourRecords = [];
                    labourRecords.push($scope.AddEditLabour.LabourRecord);
                    $scope.AddEditLabour.SaveLabourData(labourRecords); */
                    Notification.error('Please Review Error(s) before saving form');
                    return;
                }
                 // Check if any Labour record with the same Code already exists in database, if so then show the error msg
                  for(var i=0; i<$scope.AddEditLabour.SimilarLabourRecords.length; i++){
                    if($scope.AddEditLabour.SimilarLabourRecords[i].PriorityLevel == 1){
                        Notification.error('Similar Labour record already present.');
                        return;
                    }
                }
                
                if($scope.AddEditLabour.LabourRecord.LabourRate == "" || $scope.AddEditLabour.LabourRecord.LabourRate == null) {
               		$scope.AddEditLabour.LabourRecord.LabourRate = 0;
               	}
             	 var labourRecords = [];
                 labourRecords.push($scope.AddEditLabour.LabourRecord);
                 $scope.AddEditLabour.SaveLabourData(labourRecords);
                
                
            }
            
            $scope.AddEditLabour.setLabourRecordDataByForm = function(searchResult) {
                $scope.AddEditLabour.LabourRecord.LabourCategory.Id = searchResult.originalObject.Value;
                $scope.AddEditLabour.LabourRecord.LabourCategory.Name = searchResult.originalObject.Name;
                debug($scope.AddEditLabour.LabourRecord.LabourCategory);
            }
            
            // Method to perform Save Labour Data
            $scope.AddEditLabour.SaveLabourData = function(labourRecords) {
                // Process only if the form is valid
                if($scope.AddEditLabour.isValidForm){
                    AddEditLabourService.saveLabourInfo(labourRecords).then(function(labourId) {
                       // If parent page has save callback method, then perform the method and close popup
                        if($scope.$parent.labourRecordSaveCallback != undefined){
                            $scope.$parent.labourRecordSaveCallback(labourId);
                          //  Notification.success('Labour Saved Successfully');
                        }else{
	                    	var child = window.open("{!$Page.ViewLabour}?id="+labourId);
	                    	if(child == undefined ){
                    			Notification.warning('Allow pop-ups from browser settings');
                    		} else {
                    			child.opener.focus(); 
                    		}  
                    	}
                        Notification.success('Labour Saved Successfully');
                        
                        $scope.AddEditLabour.closePopup();
                    }, function(errorSearchResult) {
                        Notification.error(errorSearchResult);
                    });
                }
            }
            
            // Method to be processed when Fixed Rate checkbox is selected/deselected
            $scope.AddEditLabour.onKeyUpFixedRate = function(event) {
                // If space/enter, then process the checkbox click functionality
                if(event.keyCode == 32 || event.keyCode == 13){
                    $scope.AddEditLabour.onSelectFixedRate();
                }
            }
            $scope.AddEditLabour.onSelectFixedRate = function() {
                $scope.AddEditLabour.LabourRecord.LabourFixedRate = !$scope.AddEditLabour.LabourRecord.LabourFixedRate;
            }
            
            // Method to be processed when Taxable checkbox is selected/deselected
            $scope.AddEditLabour.onKeyUpTaxable = function(event) {
                // If space/enter, then process the checkbox click functionality
                if(event.keyCode == 32 || event.keyCode == 13){
                    $scope.AddEditLabour.onSelectTaxable();
                }
            }
            $scope.AddEditLabour.onSelectTaxable = function() {
                $scope.AddEditLabour.LabourRecord.LabourTaxable = !$scope.AddEditLabour.LabourRecord.LabourTaxable;
            }
              $scope.AddEditLabour.onKeyUpActive = function(event) {
                // If space/enter, then process the checkbox click functionality
                if(event.keyCode == 13){
                debug($scope.AddEditLabour.LabourRecord);
                    $scope.AddEditLabour.onSelectActive();
                }
            }
            $scope.AddEditLabour.onSelectActive = function() {
                $scope.AddEditLabour.LabourRecord.LabourStatus = !$scope.AddEditLabour.LabourRecord.LabourStatus;
            }
            
            
            
            /****** START: Form validation process ******/
            // Validate form
            $scope.AddEditLabour.validateForm = function () {
                angular.forEach($scope.AddEditLabour.LabourFormValidationModal, function(value, key) {
                    $scope.AddEditLabour.validateFieldWithKey(key);
                    if($scope.AddEditLabour.LabourFormValidationModal[key].isError){
                        $scope.AddEditLabour.isValidForm = false;
                    }
                });
            }
            
            $scope.AddEditLabour.numberOnly = function(e) {
            	var k = e.which;
            	debug(k);
			    /* numeric inputs can come from the keypad or the numeric row at the top */
			    if ( (k < 48 || k > 57) && (k < 96 || k > 105) && k != 8 && k != 110 && k != 190 && k != 9) {
			        e.preventDefault();
			        return false;
			    }
            }
            
            // Validation method for a field with modelKey value
            $scope.AddEditLabour.validateFieldWithKey = function (modelKey) {
                if($scope.AddEditLabour.LabourFormValidationModal[modelKey] == null){
                    return;
                }
                var fieldValue = $scope.AddEditLabour.LabourRecord[modelKey];
                var numericRegex = /^[0-9]*$/;
                var validateType = $scope.AddEditLabour.LabourFormValidationModal[modelKey].Type;
                var minValue = $scope.AddEditLabour.LabourFormValidationModal[modelKey].Value;
                var rateRegex = /^\d+(\.[0-9][0-9]?)?$/;
                if (validateType.indexOf('Numeric') > -1) {
                	debug("inside numeric");
                    if (fieldValue != '' && fieldValue != undefined && !numericRegex.test(fieldValue)) {
                        $scope.AddEditLabour.LabourFormValidationModal[modelKey].isError = true;
                        $scope.AddEditLabour.LabourFormValidationModal[modelKey].ErrorMessage = 'Invalid field Value';
                    } else {
                        $scope.AddEditLabour.LabourFormValidationModal[modelKey].isError = false;
                        $scope.AddEditLabour.LabourFormValidationModal[modelKey].ErrorMessage = '';
                    }
                }
                if (validateType.indexOf('Rate') > -1) {
                	debug("inside Rate");
                    if (fieldValue != '' && fieldValue != undefined && !rateRegex.test(fieldValue)) {
                        $scope.AddEditLabour.LabourFormValidationModal[modelKey].isError = true;
                        $scope.AddEditLabour.LabourFormValidationModal[modelKey].ErrorMessage = 'Please enter a valid decimal value with two decimal places';  
                    } else {  
                        $scope.AddEditLabour.LabourFormValidationModal[modelKey].isError = false;
                        $scope.AddEditLabour.LabourFormValidationModal[modelKey].ErrorMessage = '';
                    }  
                }
                if($scope.AddEditLabour.LabourRecord.LabourFixedRate == true) {
                	fieldValue = fieldValue.toString();
                	debug("inside fixed rate true"+fieldValue+"type of fieldValue"+typeof fieldValue);
                	
	                if (validateType.indexOf('MinimumValue') > -1) {
	                    if (fieldValue != '' && fieldValue != undefined) {
	                    	if(fieldValue <= minValue) {
	                    		debug("less");
	                    		$scope.AddEditLabour.LabourFormValidationModal[modelKey].isError = true;
	                        	$scope.AddEditLabour.LabourFormValidationModal[modelKey].ErrorMessage = '{!JSENCODE($Label.Value_must_be_greater_than)} ' + minValue;
	                    	} else {
		                    	debug("greater");
		                        $scope.AddEditLabour.LabourFormValidationModal[modelKey].isError = false;
		                        $scope.AddEditLabour.LabourFormValidationModal[modelKey].ErrorMessage = '';
	                    }
	                        
	                    } else {
	                    	debug("no value");
	                        $scope.AddEditLabour.LabourFormValidationModal[modelKey].isError = false;
	                        $scope.AddEditLabour.LabourFormValidationModal[modelKey].ErrorMessage = '';
	                    }
	                }
	            }
                if (validateType.indexOf('Required') > -1) {
                    if(fieldValue == undefined || fieldValue == null || $scope.AddEditLabour.LabourRecord[modelKey] == ''){
                        $scope.AddEditLabour.LabourFormValidationModal[modelKey].isError = true;
                        $scope.AddEditLabour.LabourFormValidationModal[modelKey].ErrorMessage = 'Field is Required';
                    } else {
                        $scope.AddEditLabour.LabourFormValidationModal[modelKey].isError = false;
                        $scope.AddEditLabour.LabourFormValidationModal[modelKey].ErrorMessage = '';
                    }
                }
                
                // Set validation flag value
                if($scope.AddEditLabour.LabourFormValidationModal[modelKey].isError == true){
                    $scope.AddEditLabour.isValidForm = false;
                }
            }
            /****** END: Form validation process ******/
            
            // Method to retrive similar records on code or descritpion change
            $scope.AddEditLabour.getSimilarLabours = function (fieldNameModified) {
                if($scope.AddEditLabour.IsEditMode == false && fieldNameModified == 'CODE' 
                    && $scope.AddEditLabour.LabourRecord.LabourCode != null 
                    && $scope.AddEditLabour.LabourRecord.LabourCode != ""
                    ){
                    $scope.AddEditLabour.getSimilarLabourRecords($scope.AddEditLabour.LabourRecord.LabourCode, $scope.AddEditLabour.LabourRecord.LabourDescription);
                } else if($scope.AddEditLabour.IsEditMode == false && fieldNameModified == 'DESCRIPTION' 
                        && $scope.AddEditLabour.LabourRecord.LabourDescription != null 
                        && $scope.AddEditLabour.LabourRecord.LabourDescription != ""
                    ){
                    $scope.AddEditLabour.getSimilarLabourRecords($scope.AddEditLabour.LabourRecord.LabourCode, $scope.AddEditLabour.LabourRecord.LabourDescription);
                }
            }
            
            // Method to find similar Labour records with similar code and description in database
            $scope.AddEditLabour.getSimilarLabourRecords = function (code, description) {
                AddEditLabourService.getSimilarLabourRecords(code, description)
                .then(function (SimilarLabourRecords) {
                    debug(SimilarLabourRecords);
                    $scope.AddEditLabour.SimilarLabourRecords = SimilarLabourRecords;
                }, function (errorSearchResult) {
                    responseData = errorSearchResult;
                    Notification.error("Some error occured while fetching similar labour records.");
                });
            }
            
            // Method to perform SAVE action for popup
            $scope.AddEditLabour.closePopup = function() {
                angular.element('#AddEditLabour').modal('hide');
            }
        });
        
        /****** Services ******/
        addEditLabourModule.service("AddEditLabourService", function ($q) {
			this.getDefaultLabourData = function () {
                var deferred = $q.defer();
                // make AJAX request to the remote service
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.ViewLabourCtrl.getDefaultLabourData}',
                    function (result, event) {
                    if (event.type == 'exception') {
                        deferred.reject(event.message);
                    } else {
                        var labourDetails = decodeString(result);
                        var find = '\'';
                        var re = new RegExp(find, 'g');
                        labourDetails = labourDetails.replace(re, '');
                        deferred.resolve(JSON.parse(labourDetails));
                    }
                }, {
                    escape : true
                });
                return deferred.promise;
            }
            
            this.getApplicableTaxList = function()
            {
                    var deferred = $q.defer();
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.ViewLabourCtrl.getApplicableTaxList}',
                        function (result, event) {
                           if (event.type == 'exception') {
                                deferred.reject(event.message);
                            } else {
                                var categoryRecord = decodeString(result);
                                var find = '\'';
                                var re = new RegExp(find, 'g');
                                categoryRecord = categoryRecord.replace(re, '');
                                deferred.resolve(JSON.parse(categoryRecord));
                            }
                        }, {
                            escape : true
                    });
                    return deferred.promise;
            }
            
            this.getLabourDetails = function (labourId) {
            	labourId = encodeString(labourId);
                var deferred = $q.defer();
            
                // make AJAX request to the remote service
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.ViewLabourCtrl.getLabourDetails}', labourId,
                    function (result, event) {
                    if (event.type == 'exception') {
                        deferred.reject(event.message);
                    } else {
                        var labourDetails = decodeString(result);
                        var find = '\'';
                        var re = new RegExp(find, 'g');
                        labourDetails = labourDetails.replace(re, '');
                        deferred.resolve(JSON.parse(labourDetails));
                    }
                }, {
                    escape : true
                });
                return deferred.promise;
            }
            
            // Save method for Labour record
            this.saveLabourInfo = function(labourRecordJSON){
            	labourRecordJSON = encodeString(angular.toJson(labourRecordJSON));
                var deferred = $q.defer();
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.ViewLabourCtrl.saveLabour}', labourRecordJSON,
                    function (result, event) {
                       if (event.type == 'exception') {
                            deferred.reject(event.message);
                        } else {
                            var labourId = decodeString(result);
                            var find = '\'';
                            var re = new RegExp(find, 'g');
                            labourId = labourId.replace(re, '');
                            deferred.resolve(labourId);
                        }
                    }, {
                        escape : true
                });
                return deferred.promise;
            }
            
            // Method to get similar records by labour code and description
            this.getSimilarLabourRecords = function(code, description){
            	code = (code != null) ? code : '';
                description = (description != null) ? description : '';
            	code = encodeString(code);
            	description = encodeString(description);
                var deferred = $q.defer();
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.ViewLabourCtrl.getSimilarLabourRecords}', code, description,
                    function (result, event) {
                       if (event.type == 'exception') {
                            deferred.reject(event.message);
                        } else {
                            var similarLabourRecords = decodeString(result);
                            var find = '\'';
                            var re = new RegExp(find, 'g');
                            similarLabourRecords = similarLabourRecords.replace(re, '');
                            deferred.resolve(JSON.parse(similarLabourRecords));
                        }
                    }, {
                        escape : true
                });
                return deferred.promise;
            }
        });
    </script>
    
    <div id="AddEditLabour" class="modal fade" role="dialog" ng-controller="addEditLabourController">
        <div class="modal-dialog" ng-class="{'edit_modal-dialog' : AddEditLabour.IsEditMode == true}">
            <!-- Modal content-->
            <div class="modal-content col-md-12">
                <div class="modal-body popup_container" style="height: 600px;">
                    <div class="popupinside"> 
                        
                        <!-- popup left start here -->
                        <div class="col-lg-4 col-md-4 popupleft" ng-show="AddEditLabour.IsEditMode == false" style="height: 520px;">
                            <div class="popupleft_container" id="topsection">
                                
                                <h1 class="letpanel_heading">Existing Labours Like This</h1>
                                <i class="fa fa-question-circle helptip" 
                                    data-toggle="tooltip" title="Similar in case of Code or Description field values"
                                    style="float: left; font-weight: bold; color: #B7BEC6; margin-top: 20px; margin-bottom: 10px; font-size: 20px;"></i>
                                
                                <!-- Similar record 1st record -->
                                <div class="goldbox col-lg-12 col-md-12" ng-repeat="SimilarLabourRecord in AddEditLabour.SimilarLabourRecords">
                                    <!-- <div class="leftgoldbox">
                                        <img class="starimg" src="{!URLFOR($Resource.Images, 'star.png')}" />
                                        <div class="star_container">
                                            <i class="fa fa-star" style="float: left;color: #B7BEC6;margin-top: 5px; font-size: 15px;"></i> 
                                            <i class="fa fa-star" style="float: left;color: #B7BEC6;margin-top: 5px; font-size: 15px;"></i> 
                                        </div>
                                    </div> -->
                                    <div class="rightgoldbox rightgoldboxML" id="CustomerSugesstionDiv" style="margin-left: 0px;">
                                        <div>
                                            <p class="cust_name">{{SimilarLabourRecord.LabourCode}}</p>
                                            <p>{{SimilarLabourRecord.LabourHours}} hrs @ ${{SimilarLabourRecord.LabourRate}}</p>
                                            <p>{{SimilarLabourRecord.LabourDescription}}</p>
                                            <p>{{SimilarLabourRecord.LabourStatus ? "Active" : "Inactive"}}</p>
                                        </div>
                                    </div>
                                </div>
                                
                            </div>
                        </div>
                        <!-- popup left end here -->
                        
                        <!--  new Labour form start here -->
                        <div style="height: 490px;" class="popupright"
                            ng-class="{'col-lg-8 col-md-8': AddEditLabour.IsEditMode == false , 'leftBorderNone col-lg-12 col-md-12': AddEditLabour.IsEditMode == true}">
                            <div class="right_heading_container col-md-12">
                                <h1 class="right_panel_heading" ng-if="!AddEditLabour.IsEditMode">New Labour</h1>
                                <h1 class="right_panel_heading" ng-if="AddEditLabour.IsEditMode"> Edit Labour</h1>

                                <div class="savecancle_btncntnr">
                                    <button type="button" id="closemodal" class="btn btn-default grayBtn" ng-click="AddEditLabour.closePopup();" ng-attr-tabindex="{{AddEditLabour.tabIndexValue + 31}}" ng-keydown="AddEditLabour.adjustTabIndex($event);">Cancel</button>
                                    <button type="button" class="btn btn-default greenBtn" ng-click="AddEditLabour.SaveLabourForm();" ng-attr-tabindex="{{AddEditLabour.tabIndexValue + 30}}">Save</button>
                                </div>
                            </div>
                 
                            <div class="tabconainer">
                                <form>
                                    <!-- START: Code field -->
                                    <div class="clearfix"></div>
                                    <div class="option_field">
                                        <div class="lable_fields required">
                                            <span class="form_lable_icons text hiddenfield"> </span>
                                            <p class="req-label">Code</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group MB WP">
                                                <input type="text" class="form-control" id="Code" placeholder="Code" rel="LabourCode" maxlength="255"
                                                        ng-model="AddEditLabour.LabourRecord.LabourCode"
                                                        ng-disabled="AddEditLabour.IsEditMode"
                                                        ng-blur="AddEditLabour.getSimilarLabours('CODE'); AddEditLabour.validateFieldWithKey('LabourCode');"
                                                        ng-class="{'redborder' : AddEditLabour.LabourFormValidationModal['LabourCode']['isError'] == true}" 
                                                        data-toggle="tooltip" title="{{AddEditLabour.LabourFormValidationModal['LabourCode']['ErrorMessage']}}"
                                                        ng-attr-tabindex="{{AddEditLabour.tabIndexValue + 1}}"/>
                                            </div>
                                            
                                        </div>
                                        <div  class="controls1 controls" id="LabourCode">
                                                <i class="fa fa-question-circle MTP" data-toggle="tooltip" title="{{AddEditLabour.helpText['LabourCode']}}"></i>
                                                <i class="fa fa-times" ng-click="AddEditLabour.LabourRecord.LabourCode = ''"></i>
                                        </div>
                                    </div>
                                    <!-- END: Code field -->
                                    
                                    <!-- START: Description field -->
                                    <div class="clearfix"></div>
                                    <div class="option_field">
                                        <div class="lable_fields required">
                                            <span class="form_lable_icons text hiddenfield"> </span>
                                            <p class="req-label">Description</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group MB WP">
                                                <input type="text" class="form-control" id="Description" placeholder="Description" rel="LabourDescription" maxlength="255"
                                                        ng-model="AddEditLabour.LabourRecord.LabourDescription" 
                                                        ng-blur="AddEditLabour.getSimilarLabours('DESCRIPTION'); AddEditLabour.validateFieldWithKey('LabourDescription');"
                                                        ng-class="{'redborder' : AddEditLabour.LabourFormValidationModal['LabourDescription']['isError'] == true}" 
                                                        data-toggle="tooltip" title="{{AddEditLabour.LabourFormValidationModal['LabourDescription']['ErrorMessage']}}"
                                                        ng-attr-tabindex="{{AddEditLabour.tabIndexValue + 2}}"/>
                                            </div>
                                            
                                        </div>
                                        <div  class="controls1 controls" id="LabourDescription">
                                                <i class="fa fa-question-circle MTP" data-toggle="tooltip" title="{{AddEditLabour.helpText['LabourDescription']}}"></i>
                                                <i class="fa fa-times" ng-click="AddEditLabour.LabourRecord.LabourDescription = ''"></i>
                                        </div>
                                    </div>
                                    <!-- END: Description field -->
                                    
                                    <!-- START: Hours field -->
                                    <div class="clearfix"></div>
                                    <div class="option_field">
                                        <div class="lable_fields required">
                                            <span class="form_lable_icons text hiddenfield"> </span>
                                            <p class="req-label">Hours</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group large MB">
                                                <price-only-input id-value = "Hours"
                                                                  class-value = "form-control medium"
                                                                  place-holder-value = "{!JSENCODE($ObjectType.Labour_Code__c.fields.Hours__c.label)}"
                                                                  max-length = "5" 
                                                                  precision-length = "1" 
                                                                  tab-index = "{{AddEditLabour.tabIndexValue + 3}}"
                                                                  input-value = "AddEditLabour.LabourRecord.LabourHours"
                                                                  validation-modal = "AddEditLabour.LabourFormValidationModal"
                                                                  validation-modal-key = "LabourHours"
                                                                  input-model = "AddEditLabour" 
                                                                  rel-value = "LabourHours"/>
                                            </div>
                                            
                                        </div>
                                        <div  class="controls1 controls" id="LabourHours">
                                                <i class="fa fa-question-circle MTP" data-toggle="tooltip" title="{{AddEditLabour.helpText['LabourHours']}}"></i>
                                                <i class="fa fa-times" ng-click="AddEditLabour.LabourRecord.LabourHours = ''"></i>
                                        </div>
                                    </div>
                                    <!-- END: Hours field -->
                                    
                                    <!-- START: Fixed Rate field -->
                                    <div class="clearfix"></div>
                                    <div class="option_field">
                                        <div class="lable_fields">
                                            <span class="form_lable_icons text hiddenfield"> </span>
                                            <p>Fixed Rate</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group large">
                                                <label class="checkbox smschkbox">
                                                    <span class="chk_tick" style="margin: 6px 0;" id="FixedRate" rel="LabourFixedRate"
                                                            ng-class="{'chked' : AddEditLabour.LabourRecord.LabourFixedRate}" >
                                                        <i class="fa fa-check-square chksqure" 
                                                            ng-click="AddEditLabour.onSelectFixedRate();"
                                                            ng-keyup="AddEditLabour.onKeyUpFixedRate($event);"
                                                            ng-attr-tabindex="{{AddEditLabour.tabIndexValue + 4}}"></i>
                                                    </span>
                                                </label>
                                            </div>
                                           
                                        </div>
                                         <div  class="controls1 controls" id="LabourFixedRate">
                                                <i class="fa fa-question-circle" data-toggle="tooltip" title="{{AddEditLabour.helpText['LabourFixedRate']}}"></i>
                                        </div>
                                    </div>
                                    <!-- END: Fixed Rate field -->
                                    
                                    <!-- START: Rate field -->
                                    <div class="clearfix"></div>
                                    <div class="option_field">
                                        <div class="lable_fields">
                                            <span class="form_lable_icons text hiddenfield"> </span>
                                            <p>Rate</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group large MB">
                                                <!-- <price-only-input id-value = "Rate"
                                                                  class-value = "form-control medium"
                                                                  place-holder-value = "{!JSENCODE($ObjectType.Labour_Code__c.fields.Rate__c.label)}"
                                                                  max-length = "15" 
                                                                  precision-length = "2" 
                                                                  tab-index = "{{AddEditLabour.tabIndexValue + 5}}"
                                                                  input-value = "AddEditLabour.LabourRecord.LabourRate"
                                                                  validation-modal = "AddEditLabour.LabourFormValidationModal"
                                                                  validation-modal-key = "LabourRate"
                                                                  input-model = "AddEditLabour" 
                                                                  rel-value = "LabourRate"/> -->
                                                <input id="Rate" type="text" rel="LabourRate" class="form-control medium" 
	                                                 ng-attr-tabindex="{{AddEditLabour.tabIndexValue + 5}}" ng-keydown="AddEditLabour.numberOnly($event)"
	                                                 placeholder="Rate" ng-model="AddEditLabour.LabourRecord.LabourRate" ng-blur="AddEditLabour.validateFieldWithKey('LabourRate');"
	                                                 ng-class="{'redborder' : AddEditLabour.LabourFormValidationModal['LabourRate']['isError'] == true}" 
	                                                 data-toggle="tooltip" title="{{AddEditLabour.LabourFormValidationModal['LabourRate']['ErrorMessage']}}"
	                                                 input-model = "AddEditLabour" rel-value = "LabourRate">
                                            	<div class="form-group pricefiled" id="msrpPretax"  style="padding: 6px;"
	                                            	ng-if="AddEditLabour.IsTaxIncludingPricing && AddEditLabour.LabourRecord.LabourTaxable">
	                                                <span class="T3">pretax =  {{AddEditLabour.LabourRecord.LabourRate/(1 + AddEditLabour.Tax_Rate/100) | currency}} </span>          
                                            </div>
                                            </div>                                            
                                            
                                        </div>
                                        <div  class="controls1 controls" id="LabourRate">
                                                <i class="fa fa-question-circle MTP" data-toggle="tooltip" title="{{AddEditLabour.helpText['LabourRate']}}"></i>
                                                <i class="fa fa-times" ng-click="AddEditLabour.LabourRecord.LabourRate = ''"></i>
                                        </div>
                                    </div>
                                    <!-- END: Rate field -->
                                    
                                    <!-- START: Category field -->
                                    <div class="clearfix"></div>
                                    <div class="option_field">
                                        <div class="lable_fields">
                                            <span class="form_lable_icons text hiddenfield"> </span>
                                            <p>Category</p>
                                        </div>
                                        <div class="form_fields angucomplete-overide-dropdown Z_Index_P">
                                            <div class="form-group  MB WP">
                                                <autocomplete id="Category"
                                                              tab-index ="{{AddEditLabour.tabIndexValue + 6}}" 
                                                              rel-value="LabourCategory_P"
                                                              placeholder="{!$Label.Category_Object_Display_Label}" 
                                                              type="{!$Label.Category_Object_Display_Label}" 
                                                              titlefield="Name"
                                                              validationkey="LabourCategory" 
                                                              errorclass="AddEditLabour.LabourFormValidationModal"  
                                                              typesearchmodal="AddEditLabour.CategoryNameStr"
                                                              filter-param = "AddEditLabour.LabourFieldsFilter.LabourCategory"/>
                                            </div>
                                            <div  class="controls1 controls" id="LabourCategory_P">
                                                <i class="fa fa-question-circle" data-toggle="tooltip" title="{{AddEditLabour.helpText['LabourCategory']}}"></i>
                                                <i class="fa fa-times" ng-click="AddEditLabour.CategoryNameStr = ''"></i>
                                        </div>
                                        </div>
                                        
                                        <!-- <div  class="controls1 controls" id="LabourCategory_P">
                                                <i class="fa fa-question-circle MTP" data-toggle="tooltip"  title="{{AddEditLabour.helpText['LabourCategory']}}"></i>
                                                <i class="fa fa-times" ng-click="AddEditLabour.CategoryNameStr = ''"></i>
                                       </div> -->
                                    </div>
                                    <!-- END: Category field -->
                                    
                                    <!-- START: Taxable field -->
                                    <div class="clearfix"></div>
                                    <div class="option_field">
                                        <div class="lable_fields">
                                            <span class="form_lable_icons text hiddenfield"> </span>
                                            <p>Taxable</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group large">
                                                <label class="checkbox smschkbox">
                                                    <span class="chk_tick" style="margin: 6px 0;" id="Taxable" rel="LabourTaxable"
                                                            ng-class="{'chked' : AddEditLabour.LabourRecord.LabourTaxable}" >
                                                        <i class="fa fa-check-square chksqure" 
                                                            ng-click="AddEditLabour.onSelectTaxable();"
                                                            ng-keyup="AddEditLabour.onKeyUpTaxable($event);"
                                                            ng-attr-tabindex="{{AddEditLabour.tabIndexValue + 7}}"></i>
                                                    </span>
                                                </label>
                                            </div>
                                           
                                        </div>
                                         <div  class="controls1 controls" id="LabourTaxable">
                                                <i class="fa fa-question-circle" data-toggle="tooltip" title="{{AddEditLabour.helpText['LabourTaxable']}}"></i>
                                        </div>
                                    </div>
                                    <!-- END: Taxable field -->
                                    
                                    <!-- START: Applicable Tax field -->
                                    <div class="option_field" ng-show="AddEditLabour.LabourRecord.LabourTaxable == true">
                                        <div class="lable_fields">
                                            <span class="form_lable_icons text hiddenfield"> </span>
                                            <p>Applicable Tax</p>
                                        </div>
                                        <div class="form_fields">
                                            <div class="form-group large">
                                                <select class="form-control" rel="applicabletax"
                                             		ng-attr-tabindex="{{PartCompModal.tabIndexValue + 6}}"
                                             		ng-model = "AddEditLabour.LabourRecord.ApplicableTaxId"
                                             		ng-change = "AddEditLabour.changeApplicableTax()"
                                             		ng-options="taxItem.Id as taxItem.Name for taxItem in AddEditLabour.TaxList"></select>
                                            </div>
                                            
                                        </div>
                                        <div  class="controls1 controls" id="applicabletax">
                                                <i class="fa fa-question-circle" data-toggle="tooltip" title="Labour Applicable Tax"></i>
                                        </div>
                                    </div>
                                    <div class="clearfix"></div>
                                    <!-- END: Applicable Tax field -->
                                    
                                    <!-- Active start -->
									<div class="clearfix"></div>
									<div class="option_field" ng-show=" AddEditLabour.IsEditMode ==true">
										<div class="lable_fields">
											<span class="form_lable_icons text hiddenfield"> </span>
											<p>Active</p>
										</div>
										<div class="form_fields">
											<div class="form-group large">
												<label class="checkbox smschkbox"> <span
													class="chk_tick" style="margin: 6px 0;" id="labourTaxable"
													rel="LabourStatus"
													ng-class="{'chked' :AddEditLabour.LabourRecord.LabourStatus}">
														<i class="fa fa-check-square chksqure"
														ng-click="AddEditLabour.onSelectActive();"
														ng-keyup="AddEditLabour.onKeyUpActive($event);"
														ng-attr-tabindex="{{AddEditLabour.tabIndexValue + 8}}"></i>
												</span>
												</label>
											</div>
											
										</div>
										<div class="controls1 controls" id="LabourStatus">
												<i class="fa fa-question-circle" data-toggle="tooltip"
													title="{{AddEditLabour.helpText['FeeActive']}}"></i>
									   </div>
									</div>
									
									<!-- Active end -->
                                    
                                </form>
                            </div>
                            
                            <div class="right_heading_container col-md-12">
                                <div class="savecancle_btncntnr">
                                    <button type="button" id="closemodal" class="btn btn-default grayBtn" ng-click="AddEditLabour.closePopup();" ng-attr-tabindex="{{AddEditLabour.tabIndexValue + 21}}">Cancel</button>
                                    <button type="button" class="btn btn-default greenBtn" ng-click="AddEditLabour.SaveLabourForm();" ng-attr-tabindex="{{AddEditLabour.tabIndexValue + 20}}">Save</button>
                                </div>
                            </div>
                        </div>
                        <!--  new Labour form ends here -->
                        
                    </div>
                </div>
            </div>
        </div>
    </div>
    
   
</apex:component>